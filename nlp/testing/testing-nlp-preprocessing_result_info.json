{
    "https://ithelp.ithome.com.tw/articles/10285641": {
        "href": "https://ithelp.ithome.com.tw/articles/10285641",
        "title": "鐵人賽2022預告",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>哈囉哈囉，時間過得好快不知不覺又要到2022的鐵人賽啦～<br>\n今年我要再參賽(*•̀ㅂ•́)و 但還在想要做什麼內容，想知道大家有沒有什麼推薦或是想看的主題嗎？</p>\n<p>如果想看我去年的作品的可以再去我的<a href=\"https://www.youtube.com/channel/UCUaKLnTNHVcfAbH6mZMoQjA\" target=\"_blank\" rel=\"noreferrer noopener\">Youtube頻道</a>逛逛！<br>\n歡迎大家給我建議罷拖罷拖<img src=\"/images/emoticon/emoticon02.gif\" alt=\"/images/emoticon/emoticon02.gif\"></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "影片教學",
        "published_at": "2022-06-20 17:27:10",
        "author_href": "https://ithelp.ithome.com.tw/users/20140998/ironman",
        "author_name": "霓霓",
        "series_href": "https://ithelp.ithome.com.tw/users/20140998/ironman/4362",
        "series_name": "大學生必學的 30個Python技巧",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>哈囉哈囉，時間過得好快不知不覺又要到2022的鐵人賽啦～<br/>\n今年我要再參賽(*•̀ㅂ•́)و 但還在想要做什麼內容，想知道大家有沒有什麼推薦或是想看的主題嗎？</p>\n<p>如果想看我去年的作品的可以再去我的逛逛！<br/>\n歡迎大家給我建議罷拖罷拖</p>\n<br/>\n</div>",
        "content_text": "哈囉哈囉，時間過得好快不知不覺又要到2022的鐵人賽啦～\n今年我要再參賽(*•̀ㅂ•́)و 但還在想要做什麼內容，想知道大家有沒有什麼推薦或是想看的主題嗎？\n如果想看我去年的作品的可以再去我的逛逛！\n歡迎大家給我建議罷拖罷拖",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "哈囉 哈囉 ， 時間 過得 好 快 不知不覺 又 要 到 2022 的 鐵人 賽 啦 ～\n今年 我要 再 參賽 ( * • ̀ ㅂ • ́ ) و\n但 還在 想要 做 什麼 內容 ， 想 知道 大家 有沒有 什麼 推薦 或是 想 看 的 主題 嗎 ？\n如果 想 看 我 去年 的 作品 的 可以 再 去 我 的 逛逛 ！\n歡迎 大家 給我 建議 罷拖罷 拖",
        "word_seg_processed_content_text": "哈囉 哈囉 時間 過得 快 不知不覺 2022 鐵人 賽\n我要 參賽 • ̀ ㅂ • ́ و\n還在 想要 做 內容 想 有沒有 推薦 想 主題\n想 去年 作品 逛逛\n給我 建議 罷拖罷 拖",
        "extracted_keywords": [
            "2022",
            "參賽",
            "去年",
            "推薦",
            "我要"
        ],
        "extracted_keywords_phrases": [
            "2022 鐵人",
            "我要 參賽",
            "2022",
            "參賽",
            "不知不覺 2022"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10285556": {
        "href": "https://ithelp.ithome.com.tw/articles/10285556",
        "title": "想詢問對STM32的學習書籍或管道有想法的人",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>這次鐵人賽完有出書的廠商想要協助我出教學書，我想了一陣子答應了至於合約內容詳細就不說明了。</p>\n<p>想在這問各位有在碰STM32的你們學習管道是什麼?<br>\n覺得市面的STM32書籍上有缺少什麼部分?</p>\n<p>沒有碰過STM32的朋友也可以說說你們自己的想法，我目前是打算出一本適合入門跟偏進階的部分，至於內容一定比這屆鐵人賽更詳細和完整，我的撰寫方面會從無到有，從一開始的STM32開發版製作&gt;底層暫存器的操作原理&gt;標準庫開發簡單實例，這裡會有詳細的步驟和搭配著數據手冊和參考手冊，我發現市面上的STM32教學書沒在分析手冊如何查找跟解說，這些書這樣是沒錯照著他們一定做得出來，但不會說明手冊要去看哪一頁。</p>\n<p>所以我的想法是說寫一本不會很厚重的書籍，開發的過程講解搭配數據手冊和參考手冊做解析為什麼要這樣做，可能內容不夠全面，但讀起來會有一定的底子跟很多想法能延伸，不知道這樣會不會有人想看。<br>\n<img src=\"/images/emoticon/emoticon01.gif\" alt=\"/images/emoticon/emoticon01.gif\"><br>\n想聽聽大家的想法有問題也可以問，說不定我會在這想到我編寫教學書籍的內容和想法~</p>\n<p>目前寫了1、2章1萬多個字，個人認為對標準庫開發流程該知道的知識都交代的相當詳細了，該提到手冊的重點我都有拿出來說明<br>\n目錄</p>\n<h3>第 1 章 做一塊自己的開發板</h3>\n<p>1.1\tSTM32是什麼？<br>\n1.2\tSTM32開發板製作</p>\n<h3>第 2 章 暫存器開發</h3>\n<p>2.1暫存器映射<br>\n2.2STM32的GPIO介紹<br>\n2.3開發環境創建-Keil5<br>\n2.4操作暫存器控制LED閃爍講解<br>\n2.5總結</p>\n<p>我隨便截幾章目前暫存器章節的內容下來<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979QXj5e2Hp12.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979QXj5e2Hp12.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979UpFUiye5Pl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979UpFUiye5Pl.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979uGv6KurMva.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979uGv6KurMva.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220614/201419794vQCCzfr8N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220614/201419794vQCCzfr8N.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979OGMy4WuOlP.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220614/20141979OGMy4WuOlP.png\"></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "stm32,stm32學習",
        "genre": "Arm Platforms",
        "published_at": "2022-06-14 21:26:19",
        "author_href": "https://ithelp.ithome.com.tw/users/20141979/ironman",
        "author_name": "Shortbread",
        "series_href": "https://ithelp.ithome.com.tw/users/20141979/ironman/4820",
        "series_name": "基於ARM-M0架構MCU之落摔檢測韌體開發",
        "series_num": "35",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>這次鐵人賽完有出書的廠商想要協助我出教學書，我想了一陣子答應了至於合約內容詳細就不說明了。</p>\n<p>想在這問各位有在碰STM32的你們學習管道是什麼?<br/>\n覺得市面的STM32書籍上有缺少什麼部分?</p>\n<p>沒有碰過STM32的朋友也可以說說你們自己的想法，我目前是打算出一本適合入門跟偏進階的部分，至於內容一定比這屆鐵人賽更詳細和完整，我的撰寫方面會從無到有，從一開始的STM32開發版製作&gt;底層暫存器的操作原理&gt;標準庫開發簡單實例，這裡會有詳細的步驟和搭配著數據手冊和參考手冊，我發現市面上的STM32教學書沒在分析手冊如何查找跟解說，這些書這樣是沒錯照著他們一定做得出來，但不會說明手冊要去看哪一頁。</p>\n<p>所以我的想法是說寫一本不會很厚重的書籍，開發的過程講解搭配數據手冊和參考手冊做解析為什麼要這樣做，可能內容不夠全面，但讀起來會有一定的底子跟很多想法能延伸，不知道這樣會不會有人想看。<br/>\n<br/>\n想聽聽大家的想法有問題也可以問，說不定我會在這想到我編寫教學書籍的內容和想法~</p>\n<p>目前寫了1、2章1萬多個字，個人認為對標準庫開發流程該知道的知識都交代的相當詳細了，該提到手冊的重點我都有拿出來說明<br/>\n目錄</p>\n<h3>第 1 章 做一塊自己的開發板</h3>\n<p>1.1\tSTM32是什麼？<br/>\n1.2\tSTM32開發板製作</p>\n<h3>第 2 章 暫存器開發</h3>\n<p>2.1暫存器映射<br/>\n2.2STM32的GPIO介紹<br/>\n2.3開發環境創建-Keil5<br/>\n2.4操作暫存器控制LED閃爍講解<br/>\n2.5總結</p>\n<p>我隨便截幾章目前暫存器章節的內容下來<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "這次鐵人賽完有出書的廠商想要協助我出教學書，我想了一陣子答應了至於合約內容詳細就不說明了。\n想在這問各位有在碰STM32的你們學習管道是什麼?\n覺得市面的STM32書籍上有缺少什麼部分?\n沒有碰過STM32的朋友也可以說說你們自己的想法，我目前是打算出一本適合入門跟偏進階的部分，至於內容一定比這屆鐵人賽更詳細和完整，我的撰寫方面會從無到有，從一開始的STM32開發版製作>底層暫存器的操作原理>標準庫開發簡單實例，這裡會有詳細的步驟和搭配著數據手冊和參考手冊，我發現市面上的STM32教學書沒在分析手冊如何查找跟解說，這些書這樣是沒錯照著他們一定做得出來，但不會說明手冊要去看哪一頁。\n所以我的想法是說寫一本不會很厚重的書籍，開發的過程講解搭配數據手冊和參考手冊做解析為什麼要這樣做，可能內容不夠全面，但讀起來會有一定的底子跟很多想法能延伸，不知道這樣會不會有人想看。\n\n想聽聽大家的想法有問題也可以問，說不定我會在這想到我編寫教學書籍的內容和想法~\n目前寫了1、2章1萬多個字，個人認為對標準庫開發流程該知道的知識都交代的相當詳細了，該提到手冊的重點我都有拿出來說明\n目錄\n第 1 章 做一塊自己的開發板\n1.1\tSTM32是什麼？\n1.2\tSTM32開發板製作\n第 2 章 暫存器開發\n2.1暫存器映射\n2.2STM32的GPIO介紹\n2.3開發環境創建-Keil5\n2.4操作暫存器控制LED閃爍講解\n2.5總結\n我隨便截幾章目前暫存器章節的內容下來",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "這次 鐵人 賽 完有 出書 的 廠商 想要 協助 我出 教學 書 ， 我 想 了 一陣子 答應 了 至於 合約 內容 詳細 就 不 說明 了 。\n想 在 這問 各位 有 在 碰 STM32 的 你們 學習 管道 是 什麼 ?\n覺得 市面 的 STM32 書籍 上 有 缺少 什麼 部分 ?\n沒有碰過 STM32 的 朋友 也 可以 說 說 你們 自己 的 想法 ， 我 目前 是 打算 出 一本 適合 入門 跟 偏 進階 的 部分 ， 至於 內容 一定 比 這屆 鐵人 賽 更 詳細 和 完整 ， 我 的 撰寫 方面 會 從無到有 ， 從 一 開始 的 STM32 開發 版 製作 > 底層 暫存器 的 操作 原理 > 標準 庫 開發 簡單 實例 ， 這裡會 有 詳細 的 步驟 和 搭配 著 數據 手冊 和 參考手冊 ， 我 發現 市面上 的 STM32 教學 書 沒 在 分析 手冊 如何 查找 跟 解說 ， 這些 書 這樣 是 沒錯 照著 他們 一定 做 得 出來 ， 但 不會 說明 手冊 要 去 看 哪 一頁 。\n所以 我 的 想法 是 說 寫 一本 不會 很 厚重 的 書籍 ， 開發 的 過程 講解 搭配 數據 手冊 和 參考手冊 做 解析 為 什麼 要 這樣 做 ， 可能 內容 不夠 全面 ， 但讀 起來 會 有 一定 的 底子 跟 很多 想法 能 延伸 ， 不 知道 這樣 會 不會 有人 想 看 。\n想 聽聽 大家 的 想法 有 問題 也 可以 問 ， 說不定 我會 在 這 想到 我 編寫 教學 書籍 的 內容 和 想法 ~\n目前 寫 了 1 、 2 章 1 萬多個 字 ， 個人 認為 對 標準 庫 開發 流程 該 知道 的 知識 都 交代 的 相當 詳細 了 ， 該 提到 手冊 的 重點 我 都 有 拿 出來 說明\n目錄\n第\n1\n章\n做 一塊 自己 的 開發板\n1.1\nSTM32 是 什麼 ？\n1.2\nSTM32 開發板 製作\n第\n2\n章\n暫存器 開發\n2.1 暫存器 映射\n2.2 STM32 的 GPIO 介紹\n2.3 開發 環境 創建 - Keil5\n2.4 操作 暫存器 控制 LED 閃爍 講解\n2.5 總結\n我 隨便 截 幾章 目前 暫存器 章節 的 內容 下來",
        "word_seg_processed_content_text": "這次 鐵人 賽 完有 出書 廠商 想要 協助 我出 教學 書 想 一陣子 答應 合約 內容 詳細\n想 這問 碰 stm32 學習 管道\n市面 stm32 書籍 缺少\n沒有碰過 stm32 朋友 說 說 想法 打算 出 一本 適合 入門 偏 進階 內容 這屆 鐵人 賽 更 詳細 完整 撰寫 會 從無到有 stm32 開發 版 製作 底層 暫存器 操作 原理 標準 庫 開發 簡單 實例 這裡會 詳細 步驟 搭配 數據 手冊 參考手冊 發現 市面上 stm32 教學 書 沒 分析 手冊 查找 解說 書 沒錯 做 手冊 一頁\n想法 說 寫 一本 厚重 書籍 開發 過程 講解 搭配 數據 手冊 參考手冊 做 解析 做 內容 但讀 會 底子 很多 想法 延伸 會 有人 想\n想 聽聽 想法 問 說不定 我會 想到 編寫 教學 書籍 內容 想法\n寫 1 2 章 1 萬多個 字 標準 庫 開發 流程 知識 交代 詳細 提到 手冊 重點\n目錄\n\n1\n章\n做 一塊 開發板\n1.1\nstm32\n1.2\nstm32 開發板 製作\n\n2\n章\n暫存器 開發\n2.1 暫存器 映射\n2.2 stm32 gpio 介紹\n2.3 開發 環境 創建 keil5\n2.4 操作 暫存器 控制 led 閃爍 講解\n2.5\n隨便 截 幾章 暫存器 章節 內容",
        "extracted_keywords": [
            "stm32",
            "參考手冊",
            "手冊",
            "書籍",
            "開發板"
        ],
        "extracted_keywords_phrases": [
            "stm32 書籍",
            "stm32 教學",
            "stm32 開發",
            "stm32 開發板",
            "書籍 開發"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10285231": {
        "href": "https://ithelp.ithome.com.tw/articles/10285231",
        "title": "系列目錄",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>本系列同樣發表於<a href=\"https://ithelp.ithome.com.tw/users/20112470/ironman/4324\" target=\"_blank\" rel=\"noreferrer noopener\">iThome體人賽 - 用Keycloak學習身份驗證與授權</a>。</p>\n<blockquote>\n<p>本頁後面還有一些小後記喔~</p>\n</blockquote>\n<ul>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A01quick-start1/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權01】Quick Start(1)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A02quick-start2/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權02】Quick Start(2)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A03%E6%B7%BA%E8%AB%87%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A1/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權03】淺談身份驗證與授權(1)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A04%E6%B7%BA%E8%AB%87%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A2/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權04】淺談身份驗證與授權(2)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A05%E4%BB%80%E9%BA%BC%E6%98%AFkeycloak/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權05】什麼是Keycloak</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A06keycloak%E7%9A%84%E6%9B%BF%E4%BB%A3%E5%93%81/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權06】Keycloak的替代品</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A07%E4%BB%80%E9%BA%BC%E6%98%AFoauth/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權07】什麼是OAuth</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A08oauth-2.0-playground/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權08】OAuth 2</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A09%E5%86%8D%E8%AB%87%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權09】再談身份驗證與授權</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A10%E6%B7%B1%E5%85%A5oauth-2.0/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權10】深入OAuth 2</a>\n</li>\n</ul>\n\n<ul>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A11oauth-2.0-flows/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權11】OAuth 2</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A12flows%E9%80%99%E4%B8%80%E5%B0%8F%E6%AE%B5%E8%B7%AF%E4%B8%8A%E8%B7%AF%E5%89%8D%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權12】Flows這一小段路上路前注意事項</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A13password-grant-legacy/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權13】Password Grant (Legacy)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A14implicit-legacy/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權14】Implicit (Legacy)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A15authorization-code/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權15】Authorization Code</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A16refresh-token/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權16】Refresh Token</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A17client-credentials/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權17】Client Credentials</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A18pkce/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權18】PKCE</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A19device-code1/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權19】Device Code(1)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A20device-code2/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權20】Device Code(2)</a>\n</li>\n<li>\n<a href=\"https://ithelp.ithome.com.tw/articles/10279129\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權20.5】Keycloak使用基本概念 - 前導</a> (iThome)</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A21%E5%9C%A8flow%E9%80%99%E6%AE%B5%E5%B0%8F%E6%97%85%E9%80%94%E5%A4%96%E7%9A%84%E9%A2%A8%E6%99%AF/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權21】在Flow這段小旅途外的風景</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A22keycloak%E4%BD%BF%E7%94%A8%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%89%8D%E5%B0%8E/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權22】Keycloak使用基本概念:前導</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A23realm/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權23】Realm</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A24clients/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權24】Clients</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A25scopes-claims/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權25】Scopes &amp; Claims</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A26user-group/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權26】User &amp; Group</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A27user-claim-profile/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權27】User &amp; Claim &amp; Profile</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A28role/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權28】Role</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A29jwt%E6%AC%8A%E6%9D%96%E6%A0%BC%E5%BC%8F%E4%BB%8B%E7%B4%B91/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權29】JWT權杖格式介紹(1)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A30open-id-connect-social-login1/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權30】Open ID Connect &amp; Social Login(1)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A31open-id-connect-social-login2/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權31】Open ID Connect &amp; Social Login(2)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A32device-code3/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權32】Device Code(3)</a>\n</li>\n<li>\n<a href=\"https://www.lagagain.com/post/%E7%94%A8keycloak%E5%AD%B8%E7%BF%92%E8%BA%AB%E4%BB%BD%E9%A9%97%E8%AD%89%E8%88%87%E6%8E%88%E6%AC%8A33device-code4/\" target=\"_blank\" rel=\"noreferrer noopener\">【用Keycloak學習身份驗證與授權33】Device Code(4)</a>\n</li>\n</ul>\n<hr>\n<p>呼～總算也在自己的地盤發表完整內容了。不過實際上還有相當的內容是當初有計畫要寫的，所以好像也不算是完整內容 &gt;_&lt;。</p>\n<p>另外最近翻看這些內容，還是有發現一些不算是太精確，但也不太算是嚴重錯誤的部份，反正這次就沒修改了XD。</p>\n<p>最主要是近期工作上在規劃相關驗證、授權的內容。學習了不少阿～ 如何提供高可用性的服務(HA)、反向代理、負載平衡(Load Balance)、熔斷器(Circuit Breaker)、服務探索(Service Discovery)。</p>\n<p>然後在回來看看Keycloak，從一開始接觸到的14、15版，到現在18版都已經釋出了。也大概理解了CIBA這個流程的運作方式，還有一些很酷的WebAuthN(FIDO)、Kerberos、Client Authenication(x509)。甚至進一步了解了Cookie的存儲方式，進而知道如何更安全的儲存資訊--比如如果有需要儲存<code>access_token</code>和<code>refresh_token</code>的話。</p>\n<p>雖然還接觸到很多對我而言新鮮有趣的，但相關的事情也還有。我可能會來規劃一下一些跟授權管理有關的服務。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-05-18 14:25:01",
        "author_href": "https://ithelp.ithome.com.tw/users/20112470/ironman",
        "author_name": "lagagain",
        "series_href": "https://ithelp.ithome.com.tw/users/20112470/ironman/4324",
        "series_name": "用Keycloak學習身份驗證與授權",
        "series_num": "41",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>本系列同樣發表於。</p>\n<blockquote>\n<p>本頁後面還有一些小後記喔~</p>\n</blockquote>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n (iThome)</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<hr/>\n<p>呼～總算也在自己的地盤發表完整內容了。不過實際上還有相當的內容是當初有計畫要寫的，所以好像也不算是完整內容 &gt;_&lt;。</p>\n<p>另外最近翻看這些內容，還是有發現一些不算是太精確，但也不太算是嚴重錯誤的部份，反正這次就沒修改了XD。</p>\n<p>最主要是近期工作上在規劃相關驗證、授權的內容。學習了不少阿～ 如何提供高可用性的服務(HA)、反向代理、負載平衡(Load Balance)、熔斷器(Circuit Breaker)、服務探索(Service Discovery)。</p>\n<p>然後在回來看看Keycloak，從一開始接觸到的14、15版，到現在18版都已經釋出了。也大概理解了CIBA這個流程的運作方式，還有一些很酷的WebAuthN(FIDO)、Kerberos、Client Authenication(x509)。甚至進一步了解了Cookie的存儲方式，進而知道如何更安全的儲存資訊--比如如果有需要儲存<code>access_token</code>和<code>refresh_token</code>的話。</p>\n<p>雖然還接觸到很多對我而言新鮮有趣的，但相關的事情也還有。我可能會來規劃一下一些跟授權管理有關的服務。</p>\n<br/>\n</div>",
        "content_text": "本系列同樣發表於。\n\n本頁後面還有一些小後記喔~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n (iThome)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n呼～總算也在自己的地盤發表完整內容了。不過實際上還有相當的內容是當初有計畫要寫的，所以好像也不算是完整內容 >_<。\n另外最近翻看這些內容，還是有發現一些不算是太精確，但也不太算是嚴重錯誤的部份，反正這次就沒修改了XD。\n最主要是近期工作上在規劃相關驗證、授權的內容。學習了不少阿～ 如何提供高可用性的服務(HA)、反向代理、負載平衡(Load Balance)、熔斷器(Circuit Breaker)、服務探索(Service Discovery)。\n然後在回來看看Keycloak，從一開始接觸到的14、15版，到現在18版都已經釋出了。也大概理解了CIBA這個流程的運作方式，還有一些很酷的WebAuthN(FIDO)、Kerberos、Client Authenication(x509)。甚至進一步了解了Cookie的存儲方式，進而知道如何更安全的儲存資訊--比如如果有需要儲存access_token和refresh_token的話。\n雖然還接觸到很多對我而言新鮮有趣的，但相關的事情也還有。我可能會來規劃一下一些跟授權管理有關的服務。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "本 系列 同樣 發表 於 。\n本頁 後面 還有 一些 小 後記 喔 ~\n( iThome )\n呼 ～ 總算 也 在 自己 的 地盤 發表 完整 內容 了 。 不過 實際上 還有 相當 的 內容 是 當初 有計畫 要 寫 的 ， 所以 好像 也 不算 是 完整 內容\n> _ < 。\n另外 最近 翻看 這些 內容 ， 還是 有 發現 一些 不算 是 太 精確 ， 但 也 不 太 算是 嚴重錯誤 的 部份 ， 反正 這次 就 沒 修改 了 XD 。\n最 主要 是 近期 工作 上 在 規劃 相關 驗證 、 授權 的 內容 。 學習 了 不少 阿 ～\n如何 提供 高可用性 的 服務 ( HA ) 、 反向 代理 、 負載平衡 ( Load\nBalance ) 、 熔斷器 ( Circuit\nBreaker ) 、 服務 探索 ( Service\nDiscovery ) 。\n然後 在 回來 看看 Keycloak ， 從 一 開始 接觸 到 的 14 、 15 版 ， 到 現在 18 版 都 已經 釋出 了 。 也 大概 理解 了 CIBA 這個 流程 的 運作 方式 ， 還有 一些 很酷 的 WebAuthN ( FIDO ) 、 Kerberos 、 Client\nAuthenication ( x509 ) 。 甚至 進一步 了解 了 Cookie 的 存儲 方式 ， 進而 知道 如何 更 安全 的 儲存 資訊 -- 比如 如果 有 需要 儲存 access _ token 和 refresh _ token 的話 。\n雖然 還 接觸 到 很多 對 我 而言 新鮮 有趣 的 ， 但 相關 的 事情 也 還有 。 我 可能 會來 規劃 一下 一些 跟 授權 管理 有關 的 服務 。",
        "word_seg_processed_content_text": "系列 發表\n本頁 後記 喔\nithome\n呼 總算 地盤 發表 完整 內容 實際上 內容 當初 有計畫 寫 好像 不算 完整 內容\n\n翻看 內容 發現 不算 太 精確 太 算是 嚴重錯誤 部份 反正 這次 沒 修改 xd\n近期 工作 規劃 相關 驗證 授權 內容 學習 不少\n提供 高可用性 服務 ha 反向 代理 負載平衡 load\nbalance 熔斷器 circuit\nbreaker 服務 探索 service\ndiscovery\n回來 keycloak 接觸 14 15 版 18 版 釋出 大概 理解 ciba 流程 運作 方式 很酷 webauthn fido kerberos client\nauthenication x509 進一步 了解 cookie 存儲 方式 更 儲存 資訊 -- 儲存 access token refresh token\n接觸 很多 新鮮 有趣 相關 事情 會來 規劃 授權 管理 服務",
        "extracted_keywords": [
            "發表",
            "內容",
            "xd",
            "x509",
            "負載平衡"
        ],
        "extracted_keywords_phrases": [
            "xd 近期",
            "實際上 內容",
            "內容 實際上",
            "地盤 發表",
            "系列 發表"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10285223": {
        "href": "https://ithelp.ithome.com.tw/articles/10285223",
        "title": "[CSS] Flex/Grid Layout Modules, part 16",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>Media Query 我覺得已經講到快爛掉了，搭配 Grid 說實在話也沒有很不好做的地方。不過，由於 Grid 是「方格系統」，所以你必須要撇開之前使用 Float Position, Flexbox 的那種流向的思維，這是比較令人苦惱的。</p>\n<p>像是 <a href=\"https://getbootstrap.com/docs/5.1/layout/css-grid/\" target=\"_blank\" rel=\"noreferrer noopener\">Bootstrap 5.1.x</a> 可以打開 Grid（預設關閉），揪竟多少人會打開呢？讓我們繼續看下去...</p>\n<hr>\n<h2>Grid 在 RWD 的使用盲點</h2>\n<blockquote>\n<p>最困難的點在於數（三聲）數（四聲）。</p>\n</blockquote>\n<p>我就不複習 RWD 的事情了。一開始我們先複習一下 Grid 的定義方式，</p>\n<pre><code>.grid-layout {\n    display: grid;\n    \n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n    \n    gap: 10px;\n}\n</code></pre>\n<p>由於我們上面使用了彈性單位，所以這個 Grid 在任何尺寸底下，都會彈性的保持在 4x4 的網格系統內。這樣是不是很棒？</p>\n<blockquote>\n<p>你很棒，你全家都很棒！</p>\n</blockquote>\n<p>換句話說，網格系統在使用彈性尺寸的設定下，無論任何尺寸都會保有最小可使用空間（<code>min-content</code>）的設計。這樣對於排版來說未必是一件好事。舉例來說，如果我今天想要在 <code>[2, 3]</code> 這個位置上，讓當中的元件強制換行，那麼要怎麼做？</p>\n<p>假設我們在 <code>4x4</code> 的位置上，都恰恰好的放一個 <code>1x1</code> 的方塊，</p>\n<pre><code>// 因為我不想佔版面，所以用 SCSS 寫一點迴圈\n\n@for $i from 1 through 4 {\n    @for $j from 1 through 4 {\n        .box-#{(($i - 1) * 4 + $j)} {\n            grid-column: #{$j} / #{($j + 1)};\n            grid-row: #{$i} / #{($i + 1)};\n        }\n    }\n}\n</code></pre>\n<p>然後我們來找一下 <code>[2, 3]</code> 這個位置的方塊是誰，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433f9wyOWnTwL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433f9wyOWnTwL.png\"></p>\n<p>現在我們找到 <code>[2, 3]</code> 的元件之後，那麼我要怎麼讓他 <em>斷行</em> 呢？你可以開始找找 Google 或是 StackOverflow 看看有沒有關於 <code>grid layout break row</code> 之類的結果。</p>\n<blockquote>\n<p>你現在看到的這篇應該就是最佳解，不用找了。</p>\n</blockquote>\n<p>首先必須澄清一件事情，網格系統裡面沒有所謂的 <em>斷行</em> 這件事情。你所看到或是查詢到跟斷行操作很類似的作法，其實是利用 Auto-placement 的特性去做的。</p>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Auto-placement_in_CSS_Grid_Layout#default_rules_for_auto-placement\" target=\"_blank\" rel=\"noreferrer noopener\">Auto-placement in CSS Grid Layout, MDN</a></p>\n</blockquote>\n<p>所以，我們重新來看一次真正需要的事情什麼？</p>\n<ol>\n<li>我想要在 <code>[2, 3]</code> 的位置發生斷行的動作。</li>\n<li>所以 <code>[3, 3]</code> 之後的元件應該都繼續往下放。</li>\n</ol>\n<p>好的，首先先提醒會產生的 <strong>副作用</strong>，</p>\n<ul>\n<li>由於網格系統可擺放空間不夠，勢必會產生隱性網格。</li>\n<li>如果沒有定義自動填滿欄或列的尺寸，請留意他會使用 <code>min-content</code> 來填充。</li>\n<li>如果你原本有使用 <em>負數</em> 的軌道，請注意會被改變。</li>\n</ul>\n<p>實際上該怎麼操作？</p>\n<pre><code>// 還記得 max-width 是數值以上？還是數值以下嗎？\n\n@media screen and (max-width: 768px) {\n\n    // 對了，[3, 3] 位置是 11 號的盒子\n    \n    .box-11 {\n        grid-column: 1 / 2;\n        grid-row: 4 / 5;\n    }\n    \n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n}\n</code></pre>\n<blockquote>\n<p>有沒有覺得很崩潰？</p>\n</blockquote>\n<p>現在來解釋為何用 Auto-replacement 可以做到 <em>類似</em> 的事情，先決條件是，你的網格系統不能強迫定義每個元件的網格位置，也就是說，你必須讓他自然排列或使用相對位置排列，</p>\n<pre><code>.box-1 {\n    grid-column: 1 / 1;\n    grid-row: 1 / 1;\n}\n\n// 只設定第一個盒子，後面都不設定。\n// 以上述的例子，甚至全部都不設定也可以。\n</code></pre>\n<p>如果我們要將 <code>[2, 3]</code> 這個位置後面的元件都換到下一行去，</p>\n<pre><code>@media screen and (max-width: 768px) {\n\n    // 對了，[2, 3] 位置是 10 號的盒子\n    \n    .box-11 {\n        grid-column: span 3;\n    }\n}\n</code></pre>\n<p>這樣你就會得到這樣的結果，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014338OaZBKklXb.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014338OaZBKklXb.png\"></p>\n<p>這就是普遍你能找到的所謂 <em>斷行</em> 的解法，利用 Auto-placement 的規則，加上 <code>span</code> 關鍵字來讓該位置的元件產生 <strong>跨欄</strong> 的動作，這樣，自然的後面的元件就會因為欄位不夠用的關係，被擠到下一行去。</p>\n<p>說真的不叫做斷行，而是 <em>被斷行</em>。以現行的格線系統來看，如果不想要很麻煩的定義每個元件的位置，那麼你也只能這樣做。或是使用命名方式的 <code>grid-template-areas</code> 來做也不是不行。</p>\n<blockquote>\n<p>所以我才會說這是一個數數的工作，而且很要命的是很容易數錯。</p>\n</blockquote>\n<p>那麼，有沒有比較好的作法？有的，但我有個前提，這是我自己覺得比較好的作法，如果覺得不對或是不好的，就不要用就好了，請不要留言罵我～</p>\n<p>如果沒問題請繼續往下看。</p>\n<hr>\n<h2>對於 RWD 來說，一種比較合適的 Grid 結構方式</h2>\n<p>一般情況來說，我們不太可能將整個頁面設計都使用彈性尺寸來做，除非你的客戶彈性很大（<del>像是那個什麼石墨烯的褲子</del>），不然通常還是會有需要固定尺寸，固定位置的需求。</p>\n<p>以上述的例子來說，我們以樣使用一個 <code>4x4</code> 的網格容器，並且定義了幾個區塊，</p>\n<pre><code>.grid-layout {\n    display: grid;\n    \n    grid-template-columns: 200px repeat(3, 1fr);\n    grid-template-rows: 80px repeat(2, 1fr) 80px;\n    \n    gap: 10px;\n}\n\n.header {\n    grid-column: 1 / 5;\n    grid-row: 1 / 2;\n}\n\n.sidebar {\n    grid-column: 1 / 2;\n    grid-row: 1 / 4;\n}\n\n.main {\n    grid-column: 2 / 5;\n    grid-row: 1 / 4;\n}\n\n.footer {\n    grid-column: 1 / 5;\n    grid-row: 3 / 4;\n}\n</code></pre>\n<p>這樣我們就會得到像是這樣的結構，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433oirfbAkiVD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433oirfbAkiVD.png\"></p>\n<p>接著，我們來思考一下 Media Query 該怎麼做？如果我們需要在小裝置上，把 <code>.sidebar</code> 放到 <code>.main</code> 的下方，實際上的操作方式會是什麼？</p>\n<p>首先，請記得網格所設定的固定尺寸是不會因為你的裝置變小而有所變化，也就是說，上述的設定被套用到手機上，例如 iPhone 13 的尺寸下（裝置 Viewport 寬度為 390px）的情況，那麼我們可以知道整個容器的彈性空間會被壓縮。</p>\n<p>也就是說，扣掉 <code>.sidebar</code> 本身固定的 <code>200px</code>，再扣掉 <code>gap</code> 的 <code>10px</code> 之後，你現在的 <code>.main</code> 就只剩下 <code>180px</code> 可用，這是彈性空間所計算出來的剩餘尺寸。然後在手機上就會出現側邊欄位比主要欄位還要大的情況。</p>\n<p>回到 Media Query，到底該怎麼做會比較好？</p>\n<pre><code>// 首先，我們以 Mobile First 為出發點（個人喜好）\n\n.header,\n.sidebar,\n.main,\n.footer {\n  grid-column: span 4;\n}\n\n// 接著做一個大尺寸的 Mediq Query\n\n@media screen and (min-width: 768px) {\n    .header {\n        grid-column: span 4;\n    }\n\n    .sidebar {\n        grid-column: unset;\n        grid-row: span 2;\n    }\n\n    .main {\n        grid-column: span 3;\n        grid-row: span 2;\n    }\n\n    .footer {\n        grid-column: span 4;\n    }\n}\n</code></pre>\n<p>由上面的例子，你應該可以理解到格線系統裡面沒有 <em>斷行</em> 的概念，全部都是一個矩型的矩陣在排位置，你可以把他想像成一個圍棋的棋盤，想像你要擺放的東西，在什麼位置（座標）上面，涵蓋了多大的範圍。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/2000143337qDaOTM7R.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/2000143337qDaOTM7R.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014333IeDireUHo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014333IeDireUHo.png\"></p>\n<p>那麼，我們來看看一個比較複雜的例子，倘若我們的元件排列沒那麼單純，又有順序問題的情況下，怎麼樣製作 Grid 呢（<del>或者你直接用 Flexbox 搞不好更快</del>）？</p>\n<p>延續上述的例子，我們想要在 <code>.main</code> 的上下加上廣告，但是在手機上，這個廣告得出現在 <code>.sidebar</code> 的上下方，不想將 <code>.main</code> 夾在廣告中間。</p>\n<p>我們先來看手機的呈現方式，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433eK5CifAXLV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/20001433eK5CifAXLV.png\"></p>\n<p>然後給大家看一下 HTML 的內容，</p>\n<pre><code>&lt;div class=\"grid-layout\"&gt;\n    &lt;div class=\"header\"&gt;Header&lt;/div&gt;\n    &lt;div class=\"sidebar\"&gt;Sidebar&lt;/div&gt;\n    &lt;div class=\"main\"&gt;Main&lt;/div&gt;\n    &lt;div class=\"ads-1\"&gt;ADs 1&lt;/div&gt;\n    &lt;div class=\"ads-2\"&gt;ADs 2&lt;/div&gt;\n    &lt;div class=\"footer\"&gt;Footer&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>接著我們來看一下大尺寸的呈現結果，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014337ExiDMPkC3.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220517/200014337ExiDMPkC3.png\"></p>\n<p>看起來好像很完美，但實務上的操作其實挺累人的，我再強調一次，在網格系統中沒有 <em>斷行</em> 的概念，他只有 <strong>定位</strong> 跟 <strong>排序</strong> 可以做。</p>\n<p>在小裝置上，我的 CSS 以最少的設定大概是這樣，</p>\n<pre><code>.grid-layout {\n    display: grid;\n    \n    grid-template-columns: 200px repeat(4, 1fr);\n    grid-template-rows: 80px repeat(2, 1fr 20px) 80px;\n    \n    gap: 10px;\n}\n\n.header,\n.sidebar,\n.main,\n.ad-1,\n.ad-2,\n.footer {\n    grid-column: span 5;\n    order: 1;\n}\n\n.main {\n    order: 2;\n}\n\n.ads-1 {\n    order: 3;\n}\n\n.sidebar {\n    order: 4;\n}\n\n.footer,\n.ads-2 {\n    order: 5;\n}\n</code></pre>\n<p>接著換到比較大的裝置，你應該有發現連網格系統的尺寸都有略微調整了，</p>\n<pre><code>@media screen and (min-width: 768px) {\n    .grid-layout {\n        grid-template-rows: 80px 60px repeat(3, 1fr) 80px;\n    }\n\n    .sidebar {\n        grid-column: unset;\n        grid-row: span 4;\n        order: 2;\n    }\n    \n    .main {\n        grid-column: span 4;\n        grid-row: span 3;\n\n        order: 4;\n    }\n    \n    .ads-1,\n    .ads-2 {\n        grid-column: span 2;\n        \n        order: 3;\n    }\n    \n    .footer {\n        order: 5;\n    }\n}\n</code></pre>\n<hr>\n<h2>Media Query 到底做了什麼？</h2>\n<blockquote>\n<p>沒有。都是在玩拼圖。</p>\n</blockquote>\n<p>在格線系統中，其實並不像 Flexbox 會有那麼多關於文件流要考慮的點，不能說沒有，只能說是相對的少，而且要考量的點也不一樣。扣除掉使用絕對定位（<code>position: absolute</code>）所帶來的狀況以外，在先前的 Flexbox 並不需要考慮定位問題，這是相對的差異。</p>\n<p>與其說是 Mediq Query 來做 RWD，倒不如說是利用 Media Query 然後把 <strong>整個畫面換掉（重做）</strong> 的感覺。不相信的話，你可以去搜尋 css grid with media queries 之類的，然後就一堆人告訴你怎麼樣用 Media Query 去換整個 Grid Layout 等等的操作。</p>\n<blockquote>\n<p>等一下，先不要。</p>\n</blockquote>\n<p>一般來說，把 <strong>整個畫面換掉</strong> 的事情應該是屬於 AWD（<em>Adaptive Web Design</em>）的範疇。最一開始的初衷應該是 <strong>規劃出一個不會整個換掉的 Grid Layout</strong> 才是重點。</p>\n<p>總結來說，如果要在網格系統規劃 Media Query 的話，以下誠心建議：</p>\n<ol>\n<li>找個方格紙筆記本。</li>\n<li>把元件排上去，然後決定各種尺寸的順序、大小及位置。</li>\n<li>接著決定 HTML 語意結構，你要放到 2. 之前也可，順序就要另外計算。</li>\n<li>把最小的裝置先擺出來（通常最好做）。</li>\n<li>慢慢把裝置放大，並在每個 breakpoint 決定元件順序、大小及位置。</li>\n<li>根據每一種 breakpoint 規劃適當的 Grid 容器。</li>\n<li>適當的利用彈性尺寸彌補無法預測的邊界尺寸。</li>\n<li>真的不行就回去用 Flexbox。</li>\n</ol>\n<blockquote>\n<p><del>既然都要用 Flexbox，為何不一開始就用？</del></p>\n</blockquote>\n<hr>\n<h2>小結</h2>\n<p>雖然說 Grid 好像用起來很潮，不過要考慮的地方其實蠻多的。目前現行的諸多套件，基本上還是把他當作 <em>類 Flexbox</em> 來操作，但，其實沒人在乎吧。</p>\n<blockquote>\n<p>誰在乎誰痛苦。</p>\n</blockquote>\n<hr>\n<p>目錄與小節：<br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10260879/\" target=\"_blank\" rel=\"noreferrer noopener\">[CSS] Flex/Grid Layout Modules, part 1</a></p>\n<hr>\n<p>部落格同步放送：<br>\n<a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-16/\" target=\"_blank\" rel=\"noreferrer noopener\">[CSS] Flex/Grid Layout Modules, part 16</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,hina,css,grid,media query",
        "genre": "Modern Web",
        "published_at": "2022-05-17 18:16:29",
        "author_href": "https://ithelp.ithome.com.tw/users/20001433/ironman",
        "author_name": "閃光洽",
        "series_href": "https://ithelp.ithome.com.tw/users/20001433/ironman/3944",
        "series_name": "CSS Flex/Grid Layout Modules",
        "series_num": "16",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>Media Query 我覺得已經講到快爛掉了，搭配 Grid 說實在話也沒有很不好做的地方。不過，由於 Grid 是「方格系統」，所以你必須要撇開之前使用 Float Position, Flexbox 的那種流向的思維，這是比較令人苦惱的。</p>\n<p>像是  可以打開 Grid（預設關閉），揪竟多少人會打開呢？讓我們繼續看下去...</p>\n<hr/>\n<h2>Grid 在 RWD 的使用盲點</h2>\n<blockquote>\n<p>最困難的點在於數（三聲）數（四聲）。</p>\n</blockquote>\n<p>我就不複習 RWD 的事情了。一開始我們先複習一下 Grid 的定義方式，</p>\n<pre></pre>\n<p>由於我們上面使用了彈性單位，所以這個 Grid 在任何尺寸底下，都會彈性的保持在 4x4 的網格系統內。這樣是不是很棒？</p>\n<blockquote>\n<p>你很棒，你全家都很棒！</p>\n</blockquote>\n<p>換句話說，網格系統在使用彈性尺寸的設定下，無論任何尺寸都會保有最小可使用空間（<code>min-content</code>）的設計。這樣對於排版來說未必是一件好事。舉例來說，如果我今天想要在 <code>[2, 3]</code> 這個位置上，讓當中的元件強制換行，那麼要怎麼做？</p>\n<p>假設我們在 <code>4x4</code> 的位置上，都恰恰好的放一個 <code>1x1</code> 的方塊，</p>\n<pre></pre>\n<p>然後我們來找一下 <code>[2, 3]</code> 這個位置的方塊是誰，</p>\n<p></p>\n<p>現在我們找到 <code>[2, 3]</code> 的元件之後，那麼我要怎麼讓他 <em>斷行</em> 呢？你可以開始找找 Google 或是 StackOverflow 看看有沒有關於 <code>grid layout break row</code> 之類的結果。</p>\n<blockquote>\n<p>你現在看到的這篇應該就是最佳解，不用找了。</p>\n</blockquote>\n<p>首先必須澄清一件事情，網格系統裡面沒有所謂的 <em>斷行</em> 這件事情。你所看到或是查詢到跟斷行操作很類似的作法，其實是利用 Auto-placement 的特性去做的。</p>\n<blockquote>\n<p></p>\n</blockquote>\n<p>所以，我們重新來看一次真正需要的事情什麼？</p>\n<ol>\n<li>我想要在 <code>[2, 3]</code> 的位置發生斷行的動作。</li>\n<li>所以 <code>[3, 3]</code> 之後的元件應該都繼續往下放。</li>\n</ol>\n<p>好的，首先先提醒會產生的 <strong>副作用</strong>，</p>\n<ul>\n<li>由於網格系統可擺放空間不夠，勢必會產生隱性網格。</li>\n<li>如果沒有定義自動填滿欄或列的尺寸，請留意他會使用 <code>min-content</code> 來填充。</li>\n<li>如果你原本有使用 <em>負數</em> 的軌道，請注意會被改變。</li>\n</ul>\n<p>實際上該怎麼操作？</p>\n<pre></pre>\n<blockquote>\n<p>有沒有覺得很崩潰？</p>\n</blockquote>\n<p>現在來解釋為何用 Auto-replacement 可以做到 <em>類似</em> 的事情，先決條件是，你的網格系統不能強迫定義每個元件的網格位置，也就是說，你必須讓他自然排列或使用相對位置排列，</p>\n<pre></pre>\n<p>如果我們要將 <code>[2, 3]</code> 這個位置後面的元件都換到下一行去，</p>\n<pre></pre>\n<p>這樣你就會得到這樣的結果，</p>\n<p></p>\n<p>這就是普遍你能找到的所謂 <em>斷行</em> 的解法，利用 Auto-placement 的規則，加上 <code>span</code> 關鍵字來讓該位置的元件產生 <strong>跨欄</strong> 的動作，這樣，自然的後面的元件就會因為欄位不夠用的關係，被擠到下一行去。</p>\n<p>說真的不叫做斷行，而是 <em>被斷行</em>。以現行的格線系統來看，如果不想要很麻煩的定義每個元件的位置，那麼你也只能這樣做。或是使用命名方式的 <code>grid-template-areas</code> 來做也不是不行。</p>\n<blockquote>\n<p>所以我才會說這是一個數數的工作，而且很要命的是很容易數錯。</p>\n</blockquote>\n<p>那麼，有沒有比較好的作法？有的，但我有個前提，這是我自己覺得比較好的作法，如果覺得不對或是不好的，就不要用就好了，請不要留言罵我～</p>\n<p>如果沒問題請繼續往下看。</p>\n<hr/>\n<h2>對於 RWD 來說，一種比較合適的 Grid 結構方式</h2>\n<p>一般情況來說，我們不太可能將整個頁面設計都使用彈性尺寸來做，除非你的客戶彈性很大（<del>像是那個什麼石墨烯的褲子</del>），不然通常還是會有需要固定尺寸，固定位置的需求。</p>\n<p>以上述的例子來說，我們以樣使用一個 <code>4x4</code> 的網格容器，並且定義了幾個區塊，</p>\n<pre></pre>\n<p>這樣我們就會得到像是這樣的結構，</p>\n<p></p>\n<p>接著，我們來思考一下 Media Query 該怎麼做？如果我們需要在小裝置上，把 <code>.sidebar</code> 放到 <code>.main</code> 的下方，實際上的操作方式會是什麼？</p>\n<p>首先，請記得網格所設定的固定尺寸是不會因為你的裝置變小而有所變化，也就是說，上述的設定被套用到手機上，例如 iPhone 13 的尺寸下（裝置 Viewport 寬度為 390px）的情況，那麼我們可以知道整個容器的彈性空間會被壓縮。</p>\n<p>也就是說，扣掉 <code>.sidebar</code> 本身固定的 <code>200px</code>，再扣掉 <code>gap</code> 的 <code>10px</code> 之後，你現在的 <code>.main</code> 就只剩下 <code>180px</code> 可用，這是彈性空間所計算出來的剩餘尺寸。然後在手機上就會出現側邊欄位比主要欄位還要大的情況。</p>\n<p>回到 Media Query，到底該怎麼做會比較好？</p>\n<pre></pre>\n<p>由上面的例子，你應該可以理解到格線系統裡面沒有 <em>斷行</em> 的概念，全部都是一個矩型的矩陣在排位置，你可以把他想像成一個圍棋的棋盤，想像你要擺放的東西，在什麼位置（座標）上面，涵蓋了多大的範圍。</p>\n<p></p>\n<p></p>\n<p>那麼，我們來看看一個比較複雜的例子，倘若我們的元件排列沒那麼單純，又有順序問題的情況下，怎麼樣製作 Grid 呢（<del>或者你直接用 Flexbox 搞不好更快</del>）？</p>\n<p>延續上述的例子，我們想要在 <code>.main</code> 的上下加上廣告，但是在手機上，這個廣告得出現在 <code>.sidebar</code> 的上下方，不想將 <code>.main</code> 夾在廣告中間。</p>\n<p>我們先來看手機的呈現方式，</p>\n<p></p>\n<p>然後給大家看一下 HTML 的內容，</p>\n<pre></pre>\n<p>接著我們來看一下大尺寸的呈現結果，</p>\n<p></p>\n<p>看起來好像很完美，但實務上的操作其實挺累人的，我再強調一次，在網格系統中沒有 <em>斷行</em> 的概念，他只有 <strong>定位</strong> 跟 <strong>排序</strong> 可以做。</p>\n<p>在小裝置上，我的 CSS 以最少的設定大概是這樣，</p>\n<pre></pre>\n<p>接著換到比較大的裝置，你應該有發現連網格系統的尺寸都有略微調整了，</p>\n<pre></pre>\n<hr/>\n<h2>Media Query 到底做了什麼？</h2>\n<blockquote>\n<p>沒有。都是在玩拼圖。</p>\n</blockquote>\n<p>在格線系統中，其實並不像 Flexbox 會有那麼多關於文件流要考慮的點，不能說沒有，只能說是相對的少，而且要考量的點也不一樣。扣除掉使用絕對定位（<code>position: absolute</code>）所帶來的狀況以外，在先前的 Flexbox 並不需要考慮定位問題，這是相對的差異。</p>\n<p>與其說是 Mediq Query 來做 RWD，倒不如說是利用 Media Query 然後把 <strong>整個畫面換掉（重做）</strong> 的感覺。不相信的話，你可以去搜尋 css grid with media queries 之類的，然後就一堆人告訴你怎麼樣用 Media Query 去換整個 Grid Layout 等等的操作。</p>\n<blockquote>\n<p>等一下，先不要。</p>\n</blockquote>\n<p>一般來說，把 <strong>整個畫面換掉</strong> 的事情應該是屬於 AWD（<em>Adaptive Web Design</em>）的範疇。最一開始的初衷應該是 <strong>規劃出一個不會整個換掉的 Grid Layout</strong> 才是重點。</p>\n<p>總結來說，如果要在網格系統規劃 Media Query 的話，以下誠心建議：</p>\n<ol>\n<li>找個方格紙筆記本。</li>\n<li>把元件排上去，然後決定各種尺寸的順序、大小及位置。</li>\n<li>接著決定 HTML 語意結構，你要放到 2. 之前也可，順序就要另外計算。</li>\n<li>把最小的裝置先擺出來（通常最好做）。</li>\n<li>慢慢把裝置放大，並在每個 breakpoint 決定元件順序、大小及位置。</li>\n<li>根據每一種 breakpoint 規劃適當的 Grid 容器。</li>\n<li>適當的利用彈性尺寸彌補無法預測的邊界尺寸。</li>\n<li>真的不行就回去用 Flexbox。</li>\n</ol>\n<blockquote>\n<p><del>既然都要用 Flexbox，為何不一開始就用？</del></p>\n</blockquote>\n<hr/>\n<h2>小結</h2>\n<p>雖然說 Grid 好像用起來很潮，不過要考慮的地方其實蠻多的。目前現行的諸多套件，基本上還是把他當作 <em>類 Flexbox</em> 來操作，但，其實沒人在乎吧。</p>\n<blockquote>\n<p>誰在乎誰痛苦。</p>\n</blockquote>\n<hr/>\n<p>目錄與小節：<br/>\n</p>\n<hr/>\n<p>部落格同步放送：<br/>\n</p>\n<br/>\n</div>",
        "content_text": "Media Query 我覺得已經講到快爛掉了，搭配 Grid 說實在話也沒有很不好做的地方。不過，由於 Grid 是「方格系統」，所以你必須要撇開之前使用 Float Position, Flexbox 的那種流向的思維，這是比較令人苦惱的。\n像是  可以打開 Grid（預設關閉），揪竟多少人會打開呢？讓我們繼續看下去...\n\nGrid 在 RWD 的使用盲點\n\n最困難的點在於數（三聲）數（四聲）。\n\n我就不複習 RWD 的事情了。一開始我們先複習一下 Grid 的定義方式，\n\n由於我們上面使用了彈性單位，所以這個 Grid 在任何尺寸底下，都會彈性的保持在 4x4 的網格系統內。這樣是不是很棒？\n\n你很棒，你全家都很棒！\n\n換句話說，網格系統在使用彈性尺寸的設定下，無論任何尺寸都會保有最小可使用空間（min-content）的設計。這樣對於排版來說未必是一件好事。舉例來說，如果我今天想要在 [2, 3] 這個位置上，讓當中的元件強制換行，那麼要怎麼做？\n假設我們在 4x4 的位置上，都恰恰好的放一個 1x1 的方塊，\n\n然後我們來找一下 [2, 3] 這個位置的方塊是誰，\n\n現在我們找到 [2, 3] 的元件之後，那麼我要怎麼讓他 斷行 呢？你可以開始找找 Google 或是 StackOverflow 看看有沒有關於 grid layout break row 之類的結果。\n\n你現在看到的這篇應該就是最佳解，不用找了。\n\n首先必須澄清一件事情，網格系統裡面沒有所謂的 斷行 這件事情。你所看到或是查詢到跟斷行操作很類似的作法，其實是利用 Auto-placement 的特性去做的。\n\n\n\n所以，我們重新來看一次真正需要的事情什麼？\n\n我想要在 [2, 3] 的位置發生斷行的動作。\n所以 [3, 3] 之後的元件應該都繼續往下放。\n\n好的，首先先提醒會產生的 副作用，\n\n由於網格系統可擺放空間不夠，勢必會產生隱性網格。\n如果沒有定義自動填滿欄或列的尺寸，請留意他會使用 min-content 來填充。\n如果你原本有使用 負數 的軌道，請注意會被改變。\n\n實際上該怎麼操作？\n\n\n有沒有覺得很崩潰？\n\n現在來解釋為何用 Auto-replacement 可以做到 類似 的事情，先決條件是，你的網格系統不能強迫定義每個元件的網格位置，也就是說，你必須讓他自然排列或使用相對位置排列，\n\n如果我們要將 [2, 3] 這個位置後面的元件都換到下一行去，\n\n這樣你就會得到這樣的結果，\n\n這就是普遍你能找到的所謂 斷行 的解法，利用 Auto-placement 的規則，加上 span 關鍵字來讓該位置的元件產生 跨欄 的動作，這樣，自然的後面的元件就會因為欄位不夠用的關係，被擠到下一行去。\n說真的不叫做斷行，而是 被斷行。以現行的格線系統來看，如果不想要很麻煩的定義每個元件的位置，那麼你也只能這樣做。或是使用命名方式的 grid-template-areas 來做也不是不行。\n\n所以我才會說這是一個數數的工作，而且很要命的是很容易數錯。\n\n那麼，有沒有比較好的作法？有的，但我有個前提，這是我自己覺得比較好的作法，如果覺得不對或是不好的，就不要用就好了，請不要留言罵我～\n如果沒問題請繼續往下看。\n\n對於 RWD 來說，一種比較合適的 Grid 結構方式\n一般情況來說，我們不太可能將整個頁面設計都使用彈性尺寸來做，除非你的客戶彈性很大（像是那個什麼石墨烯的褲子），不然通常還是會有需要固定尺寸，固定位置的需求。\n以上述的例子來說，我們以樣使用一個 4x4 的網格容器，並且定義了幾個區塊，\n\n這樣我們就會得到像是這樣的結構，\n\n接著，我們來思考一下 Media Query 該怎麼做？如果我們需要在小裝置上，把 .sidebar 放到 .main 的下方，實際上的操作方式會是什麼？\n首先，請記得網格所設定的固定尺寸是不會因為你的裝置變小而有所變化，也就是說，上述的設定被套用到手機上，例如 iPhone 13 的尺寸下（裝置 Viewport 寬度為 390px）的情況，那麼我們可以知道整個容器的彈性空間會被壓縮。\n也就是說，扣掉 .sidebar 本身固定的 200px，再扣掉 gap 的 10px 之後，你現在的 .main 就只剩下 180px 可用，這是彈性空間所計算出來的剩餘尺寸。然後在手機上就會出現側邊欄位比主要欄位還要大的情況。\n回到 Media Query，到底該怎麼做會比較好？\n\n由上面的例子，你應該可以理解到格線系統裡面沒有 斷行 的概念，全部都是一個矩型的矩陣在排位置，你可以把他想像成一個圍棋的棋盤，想像你要擺放的東西，在什麼位置（座標）上面，涵蓋了多大的範圍。\n\n\n那麼，我們來看看一個比較複雜的例子，倘若我們的元件排列沒那麼單純，又有順序問題的情況下，怎麼樣製作 Grid 呢（或者你直接用 Flexbox 搞不好更快）？\n延續上述的例子，我們想要在 .main 的上下加上廣告，但是在手機上，這個廣告得出現在 .sidebar 的上下方，不想將 .main 夾在廣告中間。\n我們先來看手機的呈現方式，\n\n然後給大家看一下 HTML 的內容，\n\n接著我們來看一下大尺寸的呈現結果，\n\n看起來好像很完美，但實務上的操作其實挺累人的，我再強調一次，在網格系統中沒有 斷行 的概念，他只有 定位 跟 排序 可以做。\n在小裝置上，我的 CSS 以最少的設定大概是這樣，\n\n接著換到比較大的裝置，你應該有發現連網格系統的尺寸都有略微調整了，\n\n\nMedia Query 到底做了什麼？\n\n沒有。都是在玩拼圖。\n\n在格線系統中，其實並不像 Flexbox 會有那麼多關於文件流要考慮的點，不能說沒有，只能說是相對的少，而且要考量的點也不一樣。扣除掉使用絕對定位（position: absolute）所帶來的狀況以外，在先前的 Flexbox 並不需要考慮定位問題，這是相對的差異。\n與其說是 Mediq Query 來做 RWD，倒不如說是利用 Media Query 然後把 整個畫面換掉（重做） 的感覺。不相信的話，你可以去搜尋 css grid with media queries 之類的，然後就一堆人告訴你怎麼樣用 Media Query 去換整個 Grid Layout 等等的操作。\n\n等一下，先不要。\n\n一般來說，把 整個畫面換掉 的事情應該是屬於 AWD（Adaptive Web Design）的範疇。最一開始的初衷應該是 規劃出一個不會整個換掉的 Grid Layout 才是重點。\n總結來說，如果要在網格系統規劃 Media Query 的話，以下誠心建議：\n\n找個方格紙筆記本。\n把元件排上去，然後決定各種尺寸的順序、大小及位置。\n接著決定 HTML 語意結構，你要放到 2. 之前也可，順序就要另外計算。\n把最小的裝置先擺出來（通常最好做）。\n慢慢把裝置放大，並在每個 breakpoint 決定元件順序、大小及位置。\n根據每一種 breakpoint 規劃適當的 Grid 容器。\n適當的利用彈性尺寸彌補無法預測的邊界尺寸。\n真的不行就回去用 Flexbox。\n\n\n既然都要用 Flexbox，為何不一開始就用？\n\n\n小結\n雖然說 Grid 好像用起來很潮，不過要考慮的地方其實蠻多的。目前現行的諸多套件，基本上還是把他當作 類 Flexbox 來操作，但，其實沒人在乎吧。\n\n誰在乎誰痛苦。\n\n\n目錄與小節：\n\n\n部落格同步放送：",
        "content_code_info": [
            {
                "language": "unknown",
                "content": ".grid-layout {\n    display: grid;\n    \n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n    \n    gap: 10px;\n}\n"
            },
            {
                "language": "unknown",
                "content": "// 因為我不想佔版面，所以用 SCSS 寫一點迴圈\n\n@for $i from 1 through 4 {\n    @for $j from 1 through 4 {\n        .box-#{(($i - 1) * 4 + $j)} {\n            grid-column: #{$j} / #{($j + 1)};\n            grid-row: #{$i} / #{($i + 1)};\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "// 還記得 max-width 是數值以上？還是數值以下嗎？\n\n@media screen and (max-width: 768px) {\n\n    // 對了，[3, 3] 位置是 11 號的盒子\n    \n    .box-11 {\n        grid-column: 1 / 2;\n        grid-row: 4 / 5;\n    }\n    \n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n    // 然後後面的 12, 13, 14, 15, 16 全部都要改\n}\n"
            },
            {
                "language": "unknown",
                "content": ".box-1 {\n    grid-column: 1 / 1;\n    grid-row: 1 / 1;\n}\n\n// 只設定第一個盒子，後面都不設定。\n// 以上述的例子，甚至全部都不設定也可以。\n"
            },
            {
                "language": "unknown",
                "content": "@media screen and (max-width: 768px) {\n\n    // 對了，[2, 3] 位置是 10 號的盒子\n    \n    .box-11 {\n        grid-column: span 3;\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": ".grid-layout {\n    display: grid;\n    \n    grid-template-columns: 200px repeat(3, 1fr);\n    grid-template-rows: 80px repeat(2, 1fr) 80px;\n    \n    gap: 10px;\n}\n\n.header {\n    grid-column: 1 / 5;\n    grid-row: 1 / 2;\n}\n\n.sidebar {\n    grid-column: 1 / 2;\n    grid-row: 1 / 4;\n}\n\n.main {\n    grid-column: 2 / 5;\n    grid-row: 1 / 4;\n}\n\n.footer {\n    grid-column: 1 / 5;\n    grid-row: 3 / 4;\n}\n"
            },
            {
                "language": "unknown",
                "content": "// 首先，我們以 Mobile First 為出發點（個人喜好）\n\n.header,\n.sidebar,\n.main,\n.footer {\n  grid-column: span 4;\n}\n\n// 接著做一個大尺寸的 Mediq Query\n\n@media screen and (min-width: 768px) {\n    .header {\n        grid-column: span 4;\n    }\n\n    .sidebar {\n        grid-column: unset;\n        grid-row: span 2;\n    }\n\n    .main {\n        grid-column: span 3;\n        grid-row: span 2;\n    }\n\n    .footer {\n        grid-column: span 4;\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<div class=\"grid-layout\">\n    <div class=\"header\">Header</div>\n    <div class=\"sidebar\">Sidebar</div>\n    <div class=\"main\">Main</div>\n    <div class=\"ads-1\">ADs 1</div>\n    <div class=\"ads-2\">ADs 2</div>\n    <div class=\"footer\">Footer</div>\n</div>\n"
            },
            {
                "language": "unknown",
                "content": ".grid-layout {\n    display: grid;\n    \n    grid-template-columns: 200px repeat(4, 1fr);\n    grid-template-rows: 80px repeat(2, 1fr 20px) 80px;\n    \n    gap: 10px;\n}\n\n.header,\n.sidebar,\n.main,\n.ad-1,\n.ad-2,\n.footer {\n    grid-column: span 5;\n    order: 1;\n}\n\n.main {\n    order: 2;\n}\n\n.ads-1 {\n    order: 3;\n}\n\n.sidebar {\n    order: 4;\n}\n\n.footer,\n.ads-2 {\n    order: 5;\n}\n"
            },
            {
                "language": "unknown",
                "content": "@media screen and (min-width: 768px) {\n    .grid-layout {\n        grid-template-rows: 80px 60px repeat(3, 1fr) 80px;\n    }\n\n    .sidebar {\n        grid-column: unset;\n        grid-row: span 4;\n        order: 2;\n    }\n    \n    .main {\n        grid-column: span 4;\n        grid-row: span 3;\n\n        order: 4;\n    }\n    \n    .ads-1,\n    .ads-2 {\n        grid-column: span 2;\n        \n        order: 3;\n    }\n    \n    .footer {\n        order: 5;\n    }\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "Media\nQuery\n我 覺得 已經 講到 快 爛掉 了 ， 搭配\nGrid\n說 實在話 也 沒有 很 不好 做 的 地方 。 不過 ， 由於\nGrid\n是 「 方格 系統 」 ， 所以 你 必須 要 撇開 之前 使用\nFloat\nPosition ,\nFlexbox\n的 那種 流向 的 思維 ， 這是 比較 令人 苦惱 的 。\n像是\n可以 打開\nGrid （ 預設 關閉 ） ， 揪 竟 多少 人會 打開 呢 ？ 讓 我們 繼續 看 下去 ...\nGrid\n在\nRWD\n的 使用 盲點\n最 困難 的點 在於 數 （ 三聲 ） 數 （ 四聲 ） 。\n我 就 不 複習\nRWD\n的 事情 了 。 一 開始 我們 先 複習 一下\nGrid\n的 定義 方式 ，\n由於 我們 上面 使用 了 彈性 單位 ， 所以 這個\nGrid\n在 任何 尺寸 底下 ， 都 會 彈性 的 保持 在\n4x4\n的 網格 系統 內 。 這樣 是不是 很棒 ？\n你 很棒 ， 你 全家 都 很棒 ！\n換句話說 ， 網格 系統 在 使用 彈性 尺寸 的 設定 下 ， 無論 任何 尺寸 都 會 保有 最小 可 使用 空間 （ min - content ） 的 設計 。 這樣 對於 排版 來說 未必 是 一件 好事 。 舉例來說 ， 如果 我 今天 想要 在\n[ 2 ,\n3 ]\n這個 位置 上 ， 讓 當中 的 元件 強制 換行 ， 那麼 要 怎麼 做 ？\n假設 我們 在\n4x4\n的 位置 上 ， 都 恰恰好 的 放 一個\n1x1\n的 方塊 ，\n然後 我們 來 找 一下\n[ 2 ,\n3 ]\n這個 位置 的 方塊 是 誰 ，\n現在 我們 找到\n[ 2 ,\n3 ]\n的 元件 之後 ， 那麼 我要 怎麼 讓 他\n斷行\n呢 ？ 你 可以 開始 找 找\nGoogle\n或是\nStackOverflow\n看看 有沒有 關於\ngrid\nlayout\nbreak\nrow\n之類 的 結果 。\n你 現在 看到 的 這篇 應該 就是 最佳解 ， 不用 找 了 。\n首先 必須 澄清 一件 事情 ， 網格 系統 裡面 沒有 所謂 的\n斷行\n這件 事情 。 你 所 看到 或是 查詢 到 跟 斷行 操作 很 類似 的 作法 ， 其實 是 利用\nAuto - placement\n的 特性 去 做 的 。\n所以 ， 我們 重新 來看 一次 真正 需要 的 事情 什麼 ？\n我 想要 在\n[ 2 ,\n3 ]\n的 位置 發生 斷行 的 動作 。\n所以\n[ 3 ,\n3 ]\n之後 的 元件 應該 都 繼續 往 下放 。\n好 的 ， 首先 先 提醒 會 產生 的\n副作用 ，\n由於 網格 系統 可 擺放 空間 不夠 ， 勢必會 產生 隱性 網格 。\n如果 沒有 定義 自動 填滿 欄 或 列 的 尺寸 ， 請留 意 他 會 使用\nmin - content\n來 填充 。\n如果 你 原本 有 使用\n負數\n的 軌道 ， 請 注意 會 被 改變 。\n實際上 該 怎麼 操作 ？\n有沒有 覺得 很 崩潰 ？\n現在 來 解釋 為 何用\nAuto - replacement\n可以 做到\n類似\n的 事情 ， 先決條件 是 ， 你 的 網格 系統 不能 強迫 定義 每個 元件 的 網格 位置 ， 也就是說 ， 你 必須 讓 他 自然 排列 或 使用 相對 位置 排列 ，\n如果 我們 要將\n[ 2 ,\n3 ]\n這個 位置 後面 的 元件 都 換到 下 一行 去 ，\n這樣 你 就 會 得到 這樣 的 結果 ，\n這 就是 普遍 你 能 找到 的 所謂\n斷行\n的 解法 ， 利用\nAuto - placement\n的 規則 ， 加上\nspan\n關鍵字 來 讓 該 位置 的 元件 產生\n跨欄\n的 動作 ， 這樣 ， 自然 的 後面 的 元件 就會 因為 欄位 不夠 用 的 關係 ， 被 擠 到 下 一行 去 。\n說真的 不 叫做 斷行 ， 而是\n被 斷行 。 以 現行 的 格線 系統 來看 ， 如果 不 想要 很 麻煩 的 定義 每個 元件 的 位置 ， 那麼 你 也 只能 這樣 做 。 或是 使用 命名 方式 的\ngrid - template - areas\n來 做 也 不是 不行 。\n所以 我 才 會 說 這是 一個 數數 的 工作 ， 而且 很 要命 的 是 很 容易 數錯 。\n那麼 ， 有沒有 比較 好 的 作法 ？ 有 的 ， 但 我 有 個 前提 ， 這是 我 自己 覺得 比較 好 的 作法 ， 如果 覺得 不 對 或是 不好 的 ， 就 不要 用 就 好 了 ， 請 不要 留言 罵 我 ～\n如果 沒 問題 請 繼續 往下 看 。\n對於\nRWD\n來說 ， 一種 比較 合適 的\nGrid\n結構 方式\n一般 情況 來說 ， 我們 不太可能 將 整個 頁面 設計 都 使用 彈性 尺寸 來 做 ， 除非 你 的 客戶 彈性 很大 （ 像是 那個 什麼 石墨 烯 的 褲子 ） ， 不然 通常 還是 會 有 需要 固定 尺寸 ， 固定 位置 的 需求 。\n以 上述 的 例子 來說 ， 我們 以樣 使用 一個\n4x4\n的 網格 容器 ， 並且 定義 了 幾個 區塊 ，\n這樣 我們 就 會 得到 像是 這樣 的 結構 ，\n接著 ， 我們 來 思考 一下\nMedia\nQuery\n該 怎麼 做 ？ 如果 我們 需要 在 小 裝置 上 ， 把\n. sidebar\n放到\n. main\n的 下方 ， 實際上 的 操作 方式 會 是 什麼 ？\n首先 ， 請 記得 網格 所 設定 的 固定 尺寸 是 不會 因為 你 的 裝置 變小 而 有所 變化 ， 也就是說 ， 上述 的 設定 被 套用 到 手機 上 ， 例如\niPhone\n13\n的 尺寸 下 （ 裝置\nViewport\n寬度 為\n390px ） 的 情況 ， 那麼 我們 可以 知道 整個 容器 的 彈性 空間 會 被 壓縮 。\n也就是說 ， 扣掉\n. sidebar\n本身 固定 的\n200px ， 再 扣掉\ngap\n的\n10px\n之後 ， 你 現在 的\n. main\n就 只 剩下\n180px\n可用 ， 這是 彈性 空間 所 計算出來 的 剩餘 尺寸 。 然後 在 手機 上 就 會 出現 側邊 欄位 比 主要 欄位 還要 大 的 情況 。\n回到\nMedia\nQuery ， 到底 該 怎麼 做會 比較 好 ？\n由 上面 的 例子 ， 你 應該 可以 理解 到格線 系統 裡面 沒有\n斷行\n的 概念 ， 全部都是 一個 矩型 的 矩陣 在 排 位置 ， 你 可以 把 他 想像成 一個 圍棋 的 棋盤 ， 想像 你 要 擺放 的 東西 ， 在 什麼 位置 （ 座標 ） 上面 ， 涵蓋 了 多 大 的 範圍 。\n那麼 ， 我們 來看 看 一個 比較複雜 的 例子 ， 倘若 我們 的 元件 排列 沒 那麼 單純 ， 又 有 順序 問題 的 情況 下 ， 怎麼樣 製作\nGrid\n呢 （ 或者 你 直接 用\nFlexbox\n搞不好 更 快 ） ？\n延續 上述 的 例子 ， 我們 想要 在\n. main\n的 上下 加上 廣告 ， 但是 在 手機 上 ， 這個 廣告 得出 現在\n. sidebar\n的 上 下方 ， 不想 將\n. main\n夾在 廣告 中間 。\n我們 先 來看 手機 的 呈現 方式 ，\n然後 給 大家 看 一下\nHTML\n的 內容 ，\n接著 我們 來看 一下 大 尺寸 的 呈現 結果 ，\n看起來 好像 很 完美 ， 但 實務 上 的 操作 其實 挺 累人 的 ， 我 再 強調 一次 ， 在 網格 系統 中 沒有\n斷行\n的 概念 ， 他 只有\n定位\n跟\n排序\n可以 做 。\n在 小 裝置 上 ， 我 的\nCSS\n以 最少 的 設定 大概 是 這樣 ，\n接著 換到 比較 大 的 裝置 ， 你 應該 有 發現 連 網格 系統 的 尺寸 都 有 略微 調整 了 ，\nMedia\nQuery\n到底 做 了 什麼 ？\n沒有 。 都 是 在 玩 拼圖 。\n在 格線 系統 中 ， 其實 並不像\nFlexbox\n會 有 那麼 多 關於 文件 流要 考慮 的點 ， 不能 說 沒有 ， 只能 說 是 相對 的 少 ， 而且 要 考量 的點 也 不 一樣 。 扣除 掉 使用 絕對 定位 （ position :\nabsolute ） 所 帶來 的 狀況 以外 ， 在 先前 的\nFlexbox\n並不需要 考慮 定位問題 ， 這是 相對 的 差異 。\n與其說是\nMediq\nQuery\n來 做\nRWD ， 倒不如說 是 利用\nMedia\nQuery\n然後 把\n整個 畫面 換掉 （ 重做 ）\n的 感覺 。 不 相信 的話 ， 你 可以 去 搜尋\ncss\ngrid\nwith\nmedia\nqueries\n之類 的 ， 然後 就 一堆 人 告訴 你 怎麼樣 用\nMedia\nQuery\n去換 整個\nGrid\nLayout\n等等 的 操作 。\n等 一下 ， 先 不要 。\n一般來說 ， 把\n整個 畫面 換掉\n的 事情 應該 是 屬於\nAWD （ Adaptive\nWeb\nDesign ） 的 範疇 。 最一 開始 的 初衷 應該 是\n規劃 出 一個 不會 整個 換掉 的\nGrid\nLayout\n才 是 重點 。\n總結 來說 ， 如果 要 在 網格 系統 規劃\nMedia\nQuery\n的話 ， 以下 誠心 建議 ：\n找個 方格紙 筆記本 。\n把 元件 排上去 ， 然後 決定 各種 尺寸 的 順序 、 大小 及 位置 。\n接著 決定\nHTML\n語意 結構 ， 你 要 放到\n2 .\n之前 也 可 ， 順序 就要 另外 計算 。\n把 最小 的 裝置 先 擺出來 （ 通常 最好 做 ） 。\n慢慢 把 裝置 放大 ， 並在 每個\nbreakpoint\n決定 元件 順序 、 大小 及 位置 。\n根據 每 一種\nbreakpoint\n規劃 適當 的\nGrid\n容器 。\n適當 的 利用 彈性 尺寸 彌補 無法 預測 的 邊界 尺寸 。\n真的 不行 就 回去 用\nFlexbox 。\n既然 都 要 用\nFlexbox ， 為 何不 一 開始 就 用 ？\n小結\n雖然 說\nGrid\n好像 用 起來 很潮 ， 不過 要 考慮 的 地方 其實 蠻 多 的 。 目前 現行 的 諸多 套件 ， 基本上 還是 把 他 當作\n類\nFlexbox\n來 操作 ， 但 ， 其實 沒 人 在乎 吧 。\n誰 在乎 誰 痛苦 。\n目錄 與 小節 ：\n部落 格 同步 放送 ：",
        "word_seg_processed_content_text": "media\nquery\n講到 快 爛掉 搭配\ngrid\n說 實在話 不好 做 地方\ngrid\n方格 系統 撇開\nfloat\nposition\nflexbox\n那種 流向 思維 這是 令人 苦惱\n像是\n打開\ngrid 預設 關閉 揪 竟 人會 打開 ...\ngrid\n\nrwd\n盲點\n困難 的點 在於 數 三聲 數 四聲\n複習\nrwd\n事情 先 複習\ngrid\n定義 方式\n彈性 單位\ngrid\n尺寸 底下 會 彈性\n4x4\n網格 系統 內 很棒\n很棒 全家 很棒\n網格 系統 彈性 尺寸 設定 尺寸 會 保有 最小 空間 min content 設計 排版 來說 未必 一件 好事 舉例來說 想要\n2\n3\n位置 當中 元件 強制 換行 做\n假設\n4x4\n位置 恰恰好 放\n1x1\n方塊\n找\n2\n3\n位置 方塊\n找到\n2\n3\n元件 我要\n斷行\n找 找\ngoogle\n\nstackoverflow\n有沒有\ngrid\nlayout\nbreak\nrow\n\n這篇 最佳解 不用 找\n澄清 一件 事情 網格 系統\n斷行\n這件 事情 查詢 斷行 操作 類似 作法 利用\nauto placement\n特性 做\n來看 事情\n想要\n2\n3\n位置 發生 斷行 動作\n\n3\n3\n元件 下放\n先 提醒 會\n副作用\n網格 系統 擺放 空間 勢必會 隱性 網格\n定義 自動 填滿 欄 列 尺寸 請留 意 會\nmin content\n填充\n原本\n負數\n軌道 請 會 改變\n實際上 操作\n有沒有 崩潰\n解釋 何用\nauto replacement\n\n類似\n事情 先決條件 網格 系統 強迫 定義 元件 網格 位置 也就是說 自然 排列 位置 排列\n要將\n2\n3\n位置 元件 換到 一行\n會\n找到\n斷行\n解法 利用\nauto placement\n規則 加上\nspan\n關鍵字 位置 元件\n跨欄\n動作 自然 元件 就會 欄位 關係 擠 一行\n說真的 斷行\n斷行 現行 格線 系統 來看 想要 麻煩 定義 元件 位置 只能 做 命名 方式\ngrid template areas\n做 不行\n才 會 說 這是 數數 工作 要命 數錯\n有沒有 作法 前提 這是 作法 不好 請 留言 罵\n沒 請 往下\n\nrwd\n來說 一種 合適\ngrid\n結構 方式\n情況 來說 不太可能 頁面 設計 彈性 尺寸 做 客戶 彈性 很大 像是 石墨 烯 褲子 會 固定 尺寸 固定 位置 需求\n例子 來說 以樣\n4x4\n網格 容器 定義 幾個 區塊\n會 像是 結構\n思考\nmedia\nquery\n做 裝置\nsidebar\n放到\nmain\n下方 實際上 操作 方式 會\n請 記得 網格 設定 固定 尺寸 裝置 變小 變化 也就是說 設定 套用 手機\niphone\n13\n尺寸 裝置\nviewport\n寬度\n390px 情況 容器 彈性 空間 會 壓縮\n也就是說 扣掉\nsidebar\n本身 固定\n200px 扣掉\ngap\n\n10px\n\nmain\n剩下\n180px\n可用 這是 彈性 空間 計算出來 剩餘 尺寸 手機 會 側邊 欄位 欄位 還要 大 情況\n回到\nmedia\nquery 到底 做會\n例子 理解 到格線 系統\n斷行\n概念 全部都是 矩型 矩陣 排 位置 想像成 圍棋 棋盤 想像 擺放 東西 位置 座標 涵蓋 大\n來看 比較複雜 例子 元件 排列 沒 單純 順序 情況 製作\ngrid\n\nflexbox\n搞不好 更 快\n延續 例子 想要\nmain\n加上 廣告 手機 廣告\nsidebar\n下方 不想\nmain\n夾在 廣告\n先 來看 手機 呈現 方式\n\nhtml\n內容\n來看 大 尺寸 呈現\n看起來 好像 完美 實務 操作 挺 累人 網格 系統 中\n斷行\n概念\n定位\n\n排序\n做\n裝置\ncss\n最少 設定 大概\n換到 大 裝置 發現 網格 系統 尺寸 略微 調整\nmedia\nquery\n到底 做\n玩 拼圖\n格線 系統 中 並不像\nflexbox\n會 文件 流要 的點 說 只能 說 少 考量 的點 扣除 掉 定位 position\nabsolute 帶來 狀況 先前\nflexbox\n並不需要 定位問題 這是 差異\n與其說是\nmediq\nquery\n做\nrwd 倒不如說 利用\nmedia\nquery\n\n畫面 換掉 重做\n感覺 搜尋\ncss\ngrid\n\nmedia\nqueries\n一堆 告訴\nmedia\nquery\n去換\ngrid\nlayout\n操作\n先\n一般來說\n畫面 換掉\n事情\nawd adaptive\nweb\ndesign 範疇 最一 初衷\n規劃 出 換掉\ngrid\nlayout\n才 重點\n來說 網格 系統 規劃\nmedia\nquery\n誠心 建議\n找個 方格紙 筆記本\n元件 排上去 尺寸 順序 大小 位置\n\nhtml\n語意 結構 放到\n2\n順序 就要 計算\n最小 裝置 先 擺出來 做\n慢慢 裝置 放大 並在\nbreakpoint\n元件 順序 大小 位置\n一種\nbreakpoint\n規劃\ngrid\n容器\n利用 彈性 尺寸 彌補 預測 邊界 尺寸\n真的 不行 回去\nflexbox\n\nflexbox 何不\n小結\n說\ngrid\n好像 很潮 地方 蠻 現行 諸多 套件 基本上 當作\n類\nflexbox\n操作 沒 在乎\n在乎 痛苦\n目錄 小節\n部落 格 同步 放送",
        "extracted_keywords": [
            "grid",
            "彈性",
            "空間",
            "定位問題",
            "困難"
        ],
        "extracted_keywords_phrases": [
            "grid 實在話",
            "grid 好像",
            "複習 grid",
            "去換 grid",
            "搭配 grid"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282236": {
        "href": "https://ithelp.ithome.com.tw/articles/10282236",
        "title": "[專案上線第01天] -  新來的主管說要寫 Vue Test Utils 單元測試",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h3>前言</h3>\n<blockquote>\n<p>該系列是為了讓看過Vue官方文件或學過Vue但是卻不知道怎麼下手去重構現在有的網站而去規畫的系列文章，在這邊整理了許多我自己使用Vue重構很多網站的經驗分享給讀者們。</p>\n</blockquote>\n<p>什麼？單元測試？當你開始接觸開發專案有一段時間後，你會開始漸漸聽到這個專業術語，就讓我來大家了解一下什麼是單元測試</p>\n<p><iframe width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" src=\"https://www.youtube.com/embed/j2ggBXF54dA\"></iframe><br>\n影片搭配文章看學習效果會更好喔</p>\n<h2>什麼是單元測試？</h2>\n<p>簡單來說程式碼的最小單位進行測試，確保程式邏輯不會在團隊維護的過程中出錯，維護程式碼的品質。所謂的最小單位，我用個例子來舉例，假如你今天有一個主功能是由 A跟Ｂ兩個功能所組成的，而這兩個功能就是我們所說的最小單位，所以在撰寫測試的時候我們重點在針對A跟Ｂ來進行測試，主功能的測試中不會包含 A跟Ｂ的測試，這樣的測試就是我們所說的單元測試。</p>\n<h2>為什麼需要單元測試？</h2>\n<p>我先列出幾個優缺點，我們來比較一下</p>\n<h3>優點：</h3>\n<ol>\n<li>確保團隊跌代的時候不會影響原本的功能</li>\n<li>確保品質，準確對程式碼切割最小單位，降低耦合度</li>\n<li>程式的 return 變成可預期</li>\n<li>重構程式碼可以按照測試的規格走</li>\n</ol>\n<h3>缺點 :</h3>\n<ol>\n<li>初期可能撰寫單元測試所消耗的時間可能會大於實際開發時間</li>\n<li>如果迭代性高，很常寫好的測試要重寫，久了會浪費很多時間</li>\n<li>測試相關的配置繁瑣，為了配合許多開發上的細節要處理的設定很多</li>\n</ol>\n<p>從優缺點可以知道說，撰寫單元測試的初期對於開發的效益並不高，先撇開不熟悉測試來說，光就在公司常常會因為需求改變就要來來回回改寫程式，我就要再花許多時間來重寫測試，怎麼想都對於有時辰壓力的專案來說不是那麼划算，所以往往會在這個時候放棄寫測試，就像我如果在初期會遇到不斷修改的需求的時候，我也不會先寫測試（笑</p>\n<p>那什麼情況下該寫單元測試？其實產品開發的中期的時候，基本上中期的時候大多數的平台規格都確定了差不多，就可以考慮開始補單元測試，因為會開始遇到前面做好的功能因為新的功能造成預期外的錯誤，以及專案由其他同事接手的時候改壞某個功能但是同事不知道，這些我們都可以透過測試來了解，避免把測試沒通過的案子給推上線。</p>\n<h2>開始寫 Vue 的單元測試前</h2>\n<p>開始寫測試前我們要先了解一下我們是透過何種<strong>技術</strong>來撰寫測試的</p>\n<h3>Jest</h3>\n<p>Jest 是由 Facebook 開發維護的一款 JavaScript 測試框架，可以用簡潔的語法來測試你的 function 。</p>\n<h3>Vue Test Utils</h3>\n<p>Vue Test Utils 是 Vue 官方推出的組件單元測試框架，簡化組件的測試。它提供了一些方法來以區分掛載組件之間交互。</p>\n<p>我們會透過以上兩種測試用的框架來針對我們 vue 的 component 進行測試，Vue Test Utils 負責解析我們的 component，讓我們可以不透過 build 就可以模擬 DOM 被渲染出來的結果，再透過 Jest 撰寫 test case 來驗證是否符合預期。</p>\n<h2>安裝 jest 與 Vue Test Utils （ Vue-cli ）</h2>\n<p>如果你是新建立一個專案，請你選擇 Unit Testing -&gt; Jest，這樣專案預設就會有安裝 jest 跟 Vue Test Utils</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220419/20125854cuHDuilGGc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220419/20125854cuHDuilGGc.png\"></p>\n<p>如果你在建立專案的時候沒有選擇 Unit Testing 的話你可以輸入以下指令</p>\n<pre><code>vue add unit-jest\n</code></pre>\n<p>現有的 CLI 專案，也可以加入 jest 跟 Vue Test Utils</p>\n<h2>基本語法介紹 describe &amp; it &amp; test</h2>\n<p>先來帶大家來看一下基本的語法</p>\n<pre><code class=\"language-javascript\">describe(\"Test to do list\", () =&gt; {\n  it(\"Test to do 1\", () =&gt; {\n    expect(1 + 1).toBe(2);\n  });\n  test(\"Test to do 2\", () =&gt; {\n   expect(2 + 1).toBe(3);\n  });\n});\n</code></pre>\n<ul>\n<li>describe ： 類似群組的概念，用來將一個或是多個相關的測試包再一起。</li>\n<li>it ＆test ： 為測試的項目單位，it 為 test 的別名兩個是一樣的東西。</li>\n<li>expect ：你要測試的項目內容。</li>\n<li>toBe ： 斷言，主要是來檢查 expect 回傳的內容是否符合你的預期，有很多種形式的斷言。</li>\n</ul>\n<p>以上的這些語法屬於 jest 的語法 API</p>\n<p>接下來看看如何使用 Vue Test Utils 負責解析我們的 Component</p>\n<pre><code class=\"language-html\">&lt;!-- HelloWorld.vue --&gt;\n&lt;template&gt;\n  &lt;h1&gt;new message&lt;/h1&gt;\n&lt;/template&gt;\n\n</code></pre>\n<pre><code class=\"language-javascript\">import { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld.vue\";\ndescribe(\"HelloWorld.vue\", () =&gt; {\n  it(\"renders msg text\", () =&gt; {\n    const wrapper = shallowMount(HelloWorld);\n    expect(wrapper.text()).toBe(\"new message\");\n  });\n});\n</code></pre>\n<p>我們可以直接使用 shallowMount 這個方法來渲染我們的 Component，再透過 .text( ) 這個方法去取得 Component 裡面所有的文字內容來做比對，是不是覺得很簡單呢～</p>\n<h2>最後</h2>\n<p>好啦！關於單元測試的部分就到這邊先告一段落，如果你還想知道更多有關於單元測試的使用以及使用情境，歡迎購買我的新課程 <strong>Vue 單元測試 vue-test-utils｜入門</strong></p>\n<p>課程網址：<a href=\"https://thecodingpro.com/courses/vue-test-utils\" target=\"_blank\" rel=\"noreferrer noopener\">https://thecodingpro.com/courses/vue-test-utils</a></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220419/20125854wT0M5271od.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220419/20125854wT0M5271od.png\"></p>\n<p>原價新台幣 2200 元，目前還是維持預購價新台幣 1800元，現在輸入折扣碼「 PAJNBFUNO300」馬上再折300元優惠。</p>\n<p><img src=\"https://d1dwq032kyr03c.cloudfront.net/upload/images/20210901/20125854yMlu8aU1vd.jpg\" alt=\"QRcode\"></p>\n<h3>訂閱Mike的頻道享受精彩的教學與分享</h3>\n<p><a href=\"https://www.youtube.com/channel/UC7ArpUezGLX-dZ0FTS_jVMQ\" target=\"_blank\" rel=\"noreferrer noopener\">Mike 的 Youtube 頻道</a><br>\n<a href=\"https://medium.com/i-am-mike\" target=\"_blank\" rel=\"noreferrer noopener\">Mike的medium</a><br>\nMIke 的官方 line 帳號，好友搜尋 @mike_cheng</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,vue.js,vue,vue3,vue學習筆記",
        "genre": "Modern Web",
        "published_at": "2022-04-19 16:18:27",
        "author_href": "https://ithelp.ithome.com.tw/users/20125854/ironman",
        "author_name": "Mike",
        "series_href": "https://ithelp.ithome.com.tw/users/20125854/ironman/4112",
        "series_name": "[ 重構倒數30天，你的網站不Vue白不Vue ]",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<h3>前言</h3>\n<blockquote>\n<p>該系列是為了讓看過Vue官方文件或學過Vue但是卻不知道怎麼下手去重構現在有的網站而去規畫的系列文章，在這邊整理了許多我自己使用Vue重構很多網站的經驗分享給讀者們。</p>\n</blockquote>\n<p>什麼？單元測試？當你開始接觸開發專案有一段時間後，你會開始漸漸聽到這個專業術語，就讓我來大家了解一下什麼是單元測試</p>\n<p><iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/j2ggBXF54dA\" width=\"560\"></iframe><br/>\n影片搭配文章看學習效果會更好喔</p>\n<h2>什麼是單元測試？</h2>\n<p>簡單來說程式碼的最小單位進行測試，確保程式邏輯不會在團隊維護的過程中出錯，維護程式碼的品質。所謂的最小單位，我用個例子來舉例，假如你今天有一個主功能是由 A跟Ｂ兩個功能所組成的，而這兩個功能就是我們所說的最小單位，所以在撰寫測試的時候我們重點在針對A跟Ｂ來進行測試，主功能的測試中不會包含 A跟Ｂ的測試，這樣的測試就是我們所說的單元測試。</p>\n<h2>為什麼需要單元測試？</h2>\n<p>我先列出幾個優缺點，我們來比較一下</p>\n<h3>優點：</h3>\n<ol>\n<li>確保團隊跌代的時候不會影響原本的功能</li>\n<li>確保品質，準確對程式碼切割最小單位，降低耦合度</li>\n<li>程式的 return 變成可預期</li>\n<li>重構程式碼可以按照測試的規格走</li>\n</ol>\n<h3>缺點 :</h3>\n<ol>\n<li>初期可能撰寫單元測試所消耗的時間可能會大於實際開發時間</li>\n<li>如果迭代性高，很常寫好的測試要重寫，久了會浪費很多時間</li>\n<li>測試相關的配置繁瑣，為了配合許多開發上的細節要處理的設定很多</li>\n</ol>\n<p>從優缺點可以知道說，撰寫單元測試的初期對於開發的效益並不高，先撇開不熟悉測試來說，光就在公司常常會因為需求改變就要來來回回改寫程式，我就要再花許多時間來重寫測試，怎麼想都對於有時辰壓力的專案來說不是那麼划算，所以往往會在這個時候放棄寫測試，就像我如果在初期會遇到不斷修改的需求的時候，我也不會先寫測試（笑</p>\n<p>那什麼情況下該寫單元測試？其實產品開發的中期的時候，基本上中期的時候大多數的平台規格都確定了差不多，就可以考慮開始補單元測試，因為會開始遇到前面做好的功能因為新的功能造成預期外的錯誤，以及專案由其他同事接手的時候改壞某個功能但是同事不知道，這些我們都可以透過測試來了解，避免把測試沒通過的案子給推上線。</p>\n<h2>開始寫 Vue 的單元測試前</h2>\n<p>開始寫測試前我們要先了解一下我們是透過何種<strong>技術</strong>來撰寫測試的</p>\n<h3>Jest</h3>\n<p>Jest 是由 Facebook 開發維護的一款 JavaScript 測試框架，可以用簡潔的語法來測試你的 function 。</p>\n<h3>Vue Test Utils</h3>\n<p>Vue Test Utils 是 Vue 官方推出的組件單元測試框架，簡化組件的測試。它提供了一些方法來以區分掛載組件之間交互。</p>\n<p>我們會透過以上兩種測試用的框架來針對我們 vue 的 component 進行測試，Vue Test Utils 負責解析我們的 component，讓我們可以不透過 build 就可以模擬 DOM 被渲染出來的結果，再透過 Jest 撰寫 test case 來驗證是否符合預期。</p>\n<h2>安裝 jest 與 Vue Test Utils （ Vue-cli ）</h2>\n<p>如果你是新建立一個專案，請你選擇 Unit Testing -&gt; Jest，這樣專案預設就會有安裝 jest 跟 Vue Test Utils</p>\n<p></p>\n<p>如果你在建立專案的時候沒有選擇 Unit Testing 的話你可以輸入以下指令</p>\n<pre></pre>\n<p>現有的 CLI 專案，也可以加入 jest 跟 Vue Test Utils</p>\n<h2>基本語法介紹 describe &amp; it &amp; test</h2>\n<p>先來帶大家來看一下基本的語法</p>\n<pre></pre>\n<ul>\n<li>describe ： 類似群組的概念，用來將一個或是多個相關的測試包再一起。</li>\n<li>it ＆test ： 為測試的項目單位，it 為 test 的別名兩個是一樣的東西。</li>\n<li>expect ：你要測試的項目內容。</li>\n<li>toBe ： 斷言，主要是來檢查 expect 回傳的內容是否符合你的預期，有很多種形式的斷言。</li>\n</ul>\n<p>以上的這些語法屬於 jest 的語法 API</p>\n<p>接下來看看如何使用 Vue Test Utils 負責解析我們的 Component</p>\n<pre></pre>\n<pre></pre>\n<p>我們可以直接使用 shallowMount 這個方法來渲染我們的 Component，再透過 .text( ) 這個方法去取得 Component 裡面所有的文字內容來做比對，是不是覺得很簡單呢～</p>\n<h2>最後</h2>\n<p>好啦！關於單元測試的部分就到這邊先告一段落，如果你還想知道更多有關於單元測試的使用以及使用情境，歡迎購買我的新課程 <strong>Vue 單元測試 vue-test-utils｜入門</strong></p>\n<p>課程網址：</p>\n<p></p>\n<p>原價新台幣 2200 元，目前還是維持預購價新台幣 1800元，現在輸入折扣碼「 PAJNBFUNO300」馬上再折300元優惠。</p>\n<p></p>\n<h3>訂閱Mike的頻道享受精彩的教學與分享</h3>\n<p><br/>\n<br/>\nMIke 的官方 line 帳號，好友搜尋 @mike_cheng</p>\n<br/>\n</div>",
        "content_text": "前言\n\n該系列是為了讓看過Vue官方文件或學過Vue但是卻不知道怎麼下手去重構現在有的網站而去規畫的系列文章，在這邊整理了許多我自己使用Vue重構很多網站的經驗分享給讀者們。\n\n什麼？單元測試？當你開始接觸開發專案有一段時間後，你會開始漸漸聽到這個專業術語，就讓我來大家了解一下什麼是單元測試\n\n影片搭配文章看學習效果會更好喔\n什麼是單元測試？\n簡單來說程式碼的最小單位進行測試，確保程式邏輯不會在團隊維護的過程中出錯，維護程式碼的品質。所謂的最小單位，我用個例子來舉例，假如你今天有一個主功能是由 A跟Ｂ兩個功能所組成的，而這兩個功能就是我們所說的最小單位，所以在撰寫測試的時候我們重點在針對A跟Ｂ來進行測試，主功能的測試中不會包含 A跟Ｂ的測試，這樣的測試就是我們所說的單元測試。\n為什麼需要單元測試？\n我先列出幾個優缺點，我們來比較一下\n優點：\n\n確保團隊跌代的時候不會影響原本的功能\n確保品質，準確對程式碼切割最小單位，降低耦合度\n程式的 return 變成可預期\n重構程式碼可以按照測試的規格走\n\n缺點 :\n\n初期可能撰寫單元測試所消耗的時間可能會大於實際開發時間\n如果迭代性高，很常寫好的測試要重寫，久了會浪費很多時間\n測試相關的配置繁瑣，為了配合許多開發上的細節要處理的設定很多\n\n從優缺點可以知道說，撰寫單元測試的初期對於開發的效益並不高，先撇開不熟悉測試來說，光就在公司常常會因為需求改變就要來來回回改寫程式，我就要再花許多時間來重寫測試，怎麼想都對於有時辰壓力的專案來說不是那麼划算，所以往往會在這個時候放棄寫測試，就像我如果在初期會遇到不斷修改的需求的時候，我也不會先寫測試（笑\n那什麼情況下該寫單元測試？其實產品開發的中期的時候，基本上中期的時候大多數的平台規格都確定了差不多，就可以考慮開始補單元測試，因為會開始遇到前面做好的功能因為新的功能造成預期外的錯誤，以及專案由其他同事接手的時候改壞某個功能但是同事不知道，這些我們都可以透過測試來了解，避免把測試沒通過的案子給推上線。\n開始寫 Vue 的單元測試前\n開始寫測試前我們要先了解一下我們是透過何種技術來撰寫測試的\nJest\nJest 是由 Facebook 開發維護的一款 JavaScript 測試框架，可以用簡潔的語法來測試你的 function 。\nVue Test Utils\nVue Test Utils 是 Vue 官方推出的組件單元測試框架，簡化組件的測試。它提供了一些方法來以區分掛載組件之間交互。\n我們會透過以上兩種測試用的框架來針對我們 vue 的 component 進行測試，Vue Test Utils 負責解析我們的 component，讓我們可以不透過 build 就可以模擬 DOM 被渲染出來的結果，再透過 Jest 撰寫 test case 來驗證是否符合預期。\n安裝 jest 與 Vue Test Utils （ Vue-cli ）\n如果你是新建立一個專案，請你選擇 Unit Testing -> Jest，這樣專案預設就會有安裝 jest 跟 Vue Test Utils\n\n如果你在建立專案的時候沒有選擇 Unit Testing 的話你可以輸入以下指令\n\n現有的 CLI 專案，也可以加入 jest 跟 Vue Test Utils\n基本語法介紹 describe & it & test\n先來帶大家來看一下基本的語法\n\n\ndescribe ： 類似群組的概念，用來將一個或是多個相關的測試包再一起。\nit ＆test ： 為測試的項目單位，it 為 test 的別名兩個是一樣的東西。\nexpect ：你要測試的項目內容。\ntoBe ： 斷言，主要是來檢查 expect 回傳的內容是否符合你的預期，有很多種形式的斷言。\n\n以上的這些語法屬於 jest 的語法 API\n接下來看看如何使用 Vue Test Utils 負責解析我們的 Component\n\n\n我們可以直接使用 shallowMount 這個方法來渲染我們的 Component，再透過 .text( ) 這個方法去取得 Component 裡面所有的文字內容來做比對，是不是覺得很簡單呢～\n最後\n好啦！關於單元測試的部分就到這邊先告一段落，如果你還想知道更多有關於單元測試的使用以及使用情境，歡迎購買我的新課程 Vue 單元測試 vue-test-utils｜入門\n課程網址：\n\n原價新台幣 2200 元，目前還是維持預購價新台幣 1800元，現在輸入折扣碼「 PAJNBFUNO300」馬上再折300元優惠。\n\n訂閱Mike的頻道享受精彩的教學與分享\n\n\nMIke 的官方 line 帳號，好友搜尋 @mike_cheng",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "vue add unit-jest\n"
            },
            {
                "language": "javascript",
                "content": "describe(\"Test to do list\", () => {\n  it(\"Test to do 1\", () => {\n    expect(1 + 1).toBe(2);\n  });\n  test(\"Test to do 2\", () => {\n   expect(2 + 1).toBe(3);\n  });\n});\n"
            },
            {
                "language": "html",
                "content": "<!-- HelloWorld.vue -->\n<template>\n  <h1>new message</h1>\n</template>\n\n"
            },
            {
                "language": "javascript",
                "content": "import { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld.vue\";\ndescribe(\"HelloWorld.vue\", () => {\n  it(\"renders msg text\", () => {\n    const wrapper = shallowMount(HelloWorld);\n    expect(wrapper.text()).toBe(\"new message\");\n  });\n});\n"
            }
        ],
        "programming_languages": [
            "javascript",
            "html"
        ],
        "word_seg_content_text": "前言\n該 系列 是 為 了 讓 看過 Vue 官方 文件 或學過 Vue 但是 卻 不 知道 怎麼 下手 去 重構 現在 有 的 網站 而 去 規畫 的 系列 文章 ， 在 這邊 整理 了 許多 我 自己 使用 Vue 重構 很多 網站 的 經驗 分享 給 讀者 們 。\n什麼 ？ 單元測試 ？ 當你 開始 接觸 開發 專案 有 一段時間 後 ， 你 會 開始 漸漸 聽到 這個 專業術語 ， 就讓 我來 大家 了解 一下 什麼 是 單元測試\n影片 搭配 文章 看 學習效果 會 更好 喔\n什麼 是 單元測試 ？\n簡單 來說 程式碼 的 最小 單位 進行 測試 ， 確保 程式 邏輯 不會 在 團隊 維護 的 過程 中 出錯 ， 維護 程式碼 的 品質 。 所謂 的 最小 單位 ， 我用 個例 子來 舉例 ， 假如 你 今天 有 一個 主 功能 是 由\nA 跟 Ｂ 兩個 功能 所 組成 的 ， 而 這 兩個 功能 就是 我們 所說 的 最小 單位 ， 所以 在 撰寫 測試 的 時候 我們 重點 在 針對 A 跟 Ｂ 來 進行 測試 ， 主 功能 的 測試 中 不會 包含\nA 跟 Ｂ 的 測試 ， 這樣 的 測試 就是 我們 所說 的 單元測試 。\n為 什麼 需要 單元測試 ？\n我先 列出 幾個 優缺點 ， 我們 來 比較 一下\n優點 ：\n確保 團隊 跌代 的 時候 不會 影響 原本 的 功能\n確保 品質 ， 準確 對 程式碼 切割 最小 單位 ， 降低 耦合度\n程式 的\nreturn\n變成 可 預期\n重構 程式碼 可以 按照 測試 的 規格 走\n缺點\n:\n初期 可能 撰寫 單元測試 所 消耗 的 時間 可能 會 大於 實際 開發 時間\n如果 迭代 性高 ， 很常 寫 好 的 測試 要 重寫 ， 久 了 會 浪費 很多 時間\n測試 相關 的 配置 繁瑣 ， 為 了 配合 許多 開發 上 的 細節 要 處理 的 設定 很多\n從優 缺點 可以 知道 說 ， 撰寫 單元測試 的 初期 對於 開發 的 效益 並不高 ， 先 撇開 不 熟悉 測試 來說 ， 光 就 在 公司 常常 會 因為 需求 改變 就要 來來回回 改寫 程式 ， 我 就要 再花 許多 時間 來 重寫 測試 ， 怎麼 想 都 對於 有 時辰 壓力 的 專案 來說 不是 那麼 划算 ， 所以 往往 會 在 這個 時候 放棄 寫 測試 ， 就 像 我 如果 在 初期 會 遇到 不斷 修改 的 需求 的 時候 ， 我 也 不會 先寫 測試 （ 笑\n那 什麼 情況 下該 寫 單元測試 ？ 其實 產品開發 的 中期 的 時候 ， 基本上 中期 的 時候 大多數 的 平台 規格 都 確定 了 差不多 ， 就 可以 考慮 開始 補 單元測試 ， 因為 會 開始 遇到 前面 做好 的 功能 因為 新 的 功能 造成 預期 外 的 錯誤 ， 以及 專案 由 其他 同事 接手 的 時候 改壞 某個 功能 但是 同事 不 知道 ， 這些 我們 都 可以 透過 測試 來 了解 ， 避免 把 測試 沒 通過 的 案子 給推 上線 。\n開始 寫\nVue\n的 單元測試 前\n開始 寫 測試 前 我們 要 先 了解 一下 我們 是 透過 何種 技術 來 撰寫 測試 的\nJest\nJest\n是 由\nFacebook\n開發 維護 的 一款\nJavaScript\n測試 框架 ， 可以 用 簡潔 的 語法 來 測試 你 的\nfunction\n。\nVue\nTest\nUtils\nVue\nTest\nUtils\n是\nVue\n官方 推出 的 組件 單元測試 框架 ， 簡化 組件 的 測試 。 它 提供 了 一些 方法 來 以 區分 掛載 組件 之間 交互 。\n我們 會 透過 以上 兩種 測試 用 的 框架 來 針對 我們\nvue\n的\ncomponent\n進行 測試 ， Vue\nTest\nUtils\n負責 解析 我們 的\ncomponent ， 讓 我們 可以 不 透過\nbuild\n就 可以 模擬\nDOM\n被 渲染 出來 的 結果 ， 再 透過\nJest\n撰寫\ntest\ncase\n來 驗證 是否 符合 預期 。\n安裝\njest\n與\nVue\nTest\nUtils\n（\nVue - cli\n）\n如果 你 是 新 建立 一個 專案 ， 請 你 選擇\nUnit\nTesting\n- >\nJest ， 這樣 專案 預設 就 會 有 安裝\njest\n跟\nVue\nTest\nUtils\n如果 你 在 建立 專案 的 時候 沒有 選擇\nUnit\nTesting\n的話 你 可以 輸入 以下 指令\n現有 的\nCLI\n專案 ， 也 可以 加入\njest\n跟\nVue\nTest\nUtils\n基本 語法 介紹\ndescribe\n&\nit\n&\ntest\n先來 帶 大家 來看 一下 基本 的 語法\ndescribe\n：\n類似 群組 的 概念 ， 用來 將 一個 或是 多個 相關 的 測試 包再 一起 。\nit\n＆ test\n：\n為 測試 的 項目 單位 ， it\n為\ntest\n的 別名 兩個 是 一樣 的 東西 。\nexpect\n： 你 要 測試 的 項目 內容 。\ntoBe\n：\n斷言 ， 主要 是 來 檢查\nexpect\n回傳 的 內容 是否 符合 你 的 預期 ， 有 很 多種形式 的 斷言 。\n以上 的 這些 語法 屬於\njest\n的 語法\nAPI\n接下來 看看 如何 使用\nVue\nTest\nUtils\n負責 解析 我們 的\nComponent\n我們 可以 直接 使用\nshallowMount\n這個 方法 來 渲染 我們 的\nComponent ， 再 透過\n. text (\n)\n這個 方法 去 取得\nComponent\n裡面 所有 的 文字 內容 來 做 比對 ， 是不是 覺得 很 簡單 呢 ～\n最後\n好 啦 ！ 關於 單元測試 的 部分 就 到 這邊 先 告一段落 ， 如果 你 還想 知道 更 多 有 關於 單元測試 的 使用 以及 使用 情境 ， 歡迎 購買 我 的 新課程\nVue\n單元測試\nvue - test - utils ｜ 入門\n課程 網址 ：\n原價 新台幣\n2200\n元 ， 目前 還是 維持 預購 價新 台幣\n1800 元 ， 現在 輸入 折扣 碼 「\nPAJNBFUNO300 」 馬上 再折 300 元 優惠 。\n訂閱 Mike 的 頻道 享受 精彩 的 教學 與 分享\nMIke\n的 官方\nline\n帳號 ， 好友 搜尋\n@ mike _ cheng",
        "word_seg_processed_content_text": "前言\n系列 看過 vue 官方 文件 或學過 vue 下手 重構 網站 規畫 系列 文章 整理 vue 重構 很多 網站 經驗 分享 讀者\n單元測試 當你 接觸 開發 專案 一段時間 會 漸漸 聽到 專業術語 就讓 我來 了解 單元測試\n影片 搭配 文章 學習效果 會 更好 喔\n單元測試\n簡單 來說 程式碼 最小 單位 測試 確保 程式 邏輯 團隊 維護 過程 中 出錯 維護 程式碼 品質 最小 單位 我用 個例 子來 舉例 主 功能\na ｂ 兩個 功能 兩個 功能 所說 最小 單位 撰寫 測試 重點 針對 a ｂ 測試 主 功能 測試 中 包含\na ｂ 測試 測試 所說 單元測試\n單元測試\n我先 列出 幾個 優缺點\n優點\n確保 團隊 跌代 影響 原本 功能\n確保 品質 準確 程式碼 切割 最小 單位 降低 耦合度\n程式\nreturn\n預期\n重構 程式碼 測試 規格 走\n缺點\n\n初期 撰寫 單元測試 消耗 時間 會 大於 開發 時間\n迭代 性高 很常 寫 測試 重寫 久 會 浪費 很多 時間\n測試 相關 配置 繁瑣 配合 開發 細節 設定 很多\n從優 缺點 說 撰寫 單元測試 初期 開發 效益 並不高 先 撇開 熟悉 測試 來說 光 公司 會 需求 改變 就要 來來回回 改寫 程式 就要 再花 時間 重寫 測試 想 時辰 壓力 專案 來說 划算 會 放棄 寫 測試 初期 會 修改 需求 先寫 測試 笑\n情況 下該 寫 單元測試 產品開發 中期 基本上 中期 平台 規格 差不多 補 單元測試 會 做好 功能 新 功能 預期 外 錯誤 專案 同事 接手 改壞 功能 同事 透過 測試 了解 測試 沒 案子 給推 上線\n寫\nvue\n單元測試 前\n寫 測試 前 先 了解 透過 何種 技術 撰寫 測試\njest\njest\n\nfacebook\n開發 維護 一款\njavascript\n測試 框架 簡潔 語法 測試\nfunction\n\nvue\ntest\nutils\nvue\ntest\nutils\n\nvue\n官方 推出 組件 單元測試 框架 簡化 組件 測試 提供 方法 區分 掛載 組件 之間 交互\n會 透過 兩種 測試 框架 針對\nvue\n\ncomponent\n測試 vue\ntest\nutils\n負責 解析\ncomponent 透過\nbuild\n模擬\ndom\n渲染 透過\njest\n撰寫\ntest\ncase\n驗證 符合 預期\n安裝\njest\n\nvue\ntest\nutils\n\nvue cli\n\n新 建立 專案 請 選擇\nunit\ntesting\n\njest 專案 預設 會 安裝\njest\n\nvue\ntest\nutils\n建立 專案 選擇\nunit\ntesting\n輸入 指令\n現有\ncli\n專案\njest\n\nvue\ntest\nutils\n語法 介紹\ndescribe\n\n\n\ntest\n先來 帶 來看 語法\ndescribe\n\n類似 群組 概念 用來 多個 相關 測試 包再\n\ntest\n\n測試 項目 單位\n\ntest\n別名 兩個 東西\nexpect\n測試 項目 內容\ntobe\n\n斷言 檢查\nexpect\n回傳 內容 符合 預期 多種形式 斷言\n語法\njest\n語法\napi\n接下來\nvue\ntest\nutils\n負責 解析\ncomponent\n\nshallowmount\n方法 渲染\ncomponent 透過\ntext\n\n方法\ncomponent\n文字 內容 做 比對 簡單\n\n單元測試 先 告一段落 還想 更 單元測試 情境 購買 新課程\nvue\n單元測試\nvue test utils 入門\n課程 網址\n原價 新台幣\n2200\n元 預購 價新 台幣\n1800 元 輸入 折扣 碼\npajnbfuno300 馬上 再折 300 元 優惠\n訂閱 mike 頻道 享受 精彩 教學 分享\nmike\n官方\nline\n帳號 好友 搜尋\nmike cheng",
        "extracted_keywords": [
            "學習效果",
            "課程",
            "單元測試",
            "新課程",
            "testing"
        ],
        "extracted_keywords_phrases": [
            "單元測試 產品開發",
            "撰寫 單元測試",
            "單元測試 影片",
            "文章 學習效果",
            "單元測試 框架"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284601": {
        "href": "https://ithelp.ithome.com.tw/articles/10284601",
        "title": "[ 卡卡 DAY 31 ] - React Native 跨平台的 Shadow 處理",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>Shadow in React Native 原來有這門學問。<br>\n在專案中，遇到卡牌的陰影問題，以為可以使用 css3 中的 box-shadow 屬性，結果發現設定後，沒效果啊～！接著又發現雙平台的顯示竟然沒有統一，所以31天接續紀錄一下，就是寫這篇的原因了~ :P</p>\n<h2>Platform</h2>\n<p>首先你要先知道，react native 有個很平易近人的跨平台裝置判斷，請看下面這篇：<br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10267731\" target=\"_blank\" rel=\"noreferrer noopener\">[ 卡卡 DAY 8 ] - React Native 跨平台裝置判斷</a></p>\n<p>當學會判斷平台之後...，以下就知道是怎麼一回事了</p>\n<pre><code>import {\n  StyleSheet,\n  Platform\n} from 'react-native';\n\n\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    ...Platform.select({\n      ios: {\n        // ios style\n      },\n      android: {\n        // android style\n      }\n    })\n  },\n});\n</code></pre>\n<h2>style 實作</h2>\n<h4>iOS</h4>\n<pre><code>    shadowColor: '#aaa',  \n    // 陰影的顏色\n    shadowOffset:{width:0,height:0},  \n    // xy軸為基準，設定陰影的偏移，width = x軸,height ＝ y軸\n    shadowOpacity: 1,\n    // 陰影的透明度\n    shadowRadius: 1.5,  \n    // 設置陰影暈染半徑\n</code></pre>\n<h4>android</h4>\n<pre><code>    elevation:1.5,\n    // 支援 android5.0 以上\n    // 無法指定陰影的顏色以及偏移，只能設陰影高度，陰影效果主要在底部\n    // elevation 是只有 Android-only style property 使用在 View elements\n</code></pre>\n<h3>code</h3>\n<pre><code>import {\n  StyleSheet,\n  Platform\n} from 'react-native';\n\n//.....code....//\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    ...Platform.select({\n      ios: {\n        shadowColor: '#aaa',  \n        shadowOffset:{width:0,height:0},  \n        shadowOpacity: 1,\n        shadowRadius: 1.5,  \n      },\n      android: {\n         elevation:1.5,\n      }\n    })\n  },\n});\n</code></pre>\n<h2>結論</h2>\n<p>結果...你會發現，其實兩個裝置的樣式寫法根本就不一樣，所以不需要做平台判斷直接合併寫即可。</p>\n<pre><code>import {\n  StyleSheet\n} from 'react-native';\n\n//.....code....//\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    shadowColor: '#aaa',  \n    shadowOffset:{width:0,height:0},  \n    shadowOpacity: 1,\n    shadowRadius: 1.5,  \n    elevation:1.5,\n  },\n});\n</code></pre>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Mobile Development",
        "published_at": "2022-03-31 18:04:33",
        "author_href": "https://ithelp.ithome.com.tw/users/20142011/ironman",
        "author_name": "熟女卡卡",
        "series_href": "https://ithelp.ithome.com.tw/users/20142011/ironman/4880",
        "series_name": "卡卡30天學 React Native",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>Shadow in React Native 原來有這門學問。<br/>\n在專案中，遇到卡牌的陰影問題，以為可以使用 css3 中的 box-shadow 屬性，結果發現設定後，沒效果啊～！接著又發現雙平台的顯示竟然沒有統一，所以31天接續紀錄一下，就是寫這篇的原因了~ :P</p>\n<h2>Platform</h2>\n<p>首先你要先知道，react native 有個很平易近人的跨平台裝置判斷，請看下面這篇：<br/>\n</p>\n<p>當學會判斷平台之後...，以下就知道是怎麼一回事了</p>\n<pre></pre>\n<h2>style 實作</h2>\n<h4>iOS</h4>\n<pre></pre>\n<h4>android</h4>\n<pre></pre>\n<h3>code</h3>\n<pre></pre>\n<h2>結論</h2>\n<p>結果...你會發現，其實兩個裝置的樣式寫法根本就不一樣，所以不需要做平台判斷直接合併寫即可。</p>\n<pre></pre>\n<br/>\n</div>",
        "content_text": "Shadow in React Native 原來有這門學問。\n在專案中，遇到卡牌的陰影問題，以為可以使用 css3 中的 box-shadow 屬性，結果發現設定後，沒效果啊～！接著又發現雙平台的顯示竟然沒有統一，所以31天接續紀錄一下，就是寫這篇的原因了~ :P\nPlatform\n首先你要先知道，react native 有個很平易近人的跨平台裝置判斷，請看下面這篇：\n\n當學會判斷平台之後...，以下就知道是怎麼一回事了\n\nstyle 實作\niOS\n\nandroid\n\ncode\n\n結論\n結果...你會發現，其實兩個裝置的樣式寫法根本就不一樣，所以不需要做平台判斷直接合併寫即可。",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "import {\n  StyleSheet,\n  Platform\n} from 'react-native';\n\n\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    ...Platform.select({\n      ios: {\n        // ios style\n      },\n      android: {\n        // android style\n      }\n    })\n  },\n});\n"
            },
            {
                "language": "unknown",
                "content": "    shadowColor: '#aaa',  \n    // 陰影的顏色\n    shadowOffset:{width:0,height:0},  \n    // xy軸為基準，設定陰影的偏移，width = x軸,height ＝ y軸\n    shadowOpacity: 1,\n    // 陰影的透明度\n    shadowRadius: 1.5,  \n    // 設置陰影暈染半徑\n"
            },
            {
                "language": "unknown",
                "content": "    elevation:1.5,\n    // 支援 android5.0 以上\n    // 無法指定陰影的顏色以及偏移，只能設陰影高度，陰影效果主要在底部\n    // elevation 是只有 Android-only style property 使用在 View elements\n"
            },
            {
                "language": "unknown",
                "content": "import {\n  StyleSheet,\n  Platform\n} from 'react-native';\n\n//.....code....//\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    ...Platform.select({\n      ios: {\n        shadowColor: '#aaa',  \n        shadowOffset:{width:0,height:0},  \n        shadowOpacity: 1,\n        shadowRadius: 1.5,  \n      },\n      android: {\n         elevation:1.5,\n      }\n    })\n  },\n});\n"
            },
            {
                "language": "unknown",
                "content": "import {\n  StyleSheet\n} from 'react-native';\n\n//.....code....//\n\nconst styles = StyleSheet.create({\n  cardShadow: {\n    shadowColor: '#aaa',  \n    shadowOffset:{width:0,height:0},  \n    shadowOpacity: 1,\n    shadowRadius: 1.5,  \n    elevation:1.5,\n  },\n});\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "Shadow\nin\nReact\nNative\n原來 有 這門 學問 。\n在 專案 中 ， 遇到 卡牌 的 陰影 問題 ， 以為 可以 使用\ncss3\n中 的\nbox - shadow\n屬性 ， 結果 發現 設定 後 ， 沒 效果 啊 ～ ！ 接著 又 發現 雙 平台 的 顯示 竟然 沒有 統一 ， 所以 31 天 接續 紀錄 一下 ， 就是 寫 這篇 的 原因 了 ~\n: P\nPlatform\n首先 你 要 先 知道 ， react\nnative\n有個 很 平易近人 的 跨平台 裝置 判斷 ， 請 看 下面 這篇 ：\n當 學會 判斷 平台 之後 ... ， 以下 就 知道 是 怎麼 一 回事 了\nstyle\n實作\niOS\nandroid\ncode\n結論\n結果 ... 你 會 發現 ， 其實 兩個 裝置 的 樣式 寫法 根本 就 不 一樣 ， 所以 不 需要 做 平台 判斷 直接 合併 寫 即可 。",
        "word_seg_processed_content_text": "shadow\n\nreact\nnative\n這門 學問\n專案 中 卡牌 陰影\ncss3\n中\nbox shadow\n屬性 發現 設定 沒 效果 發現 雙 平台 顯示 竟然 統一 31 天 接續 紀錄 寫 這篇 原因\np\nplatform\n先 react\nnative\n有個 平易近人 跨平台 裝置 判斷 請 這篇\n學會 判斷 平台 ... 回事\nstyle\n實作\nios\nandroid\ncode\n結論\n... 會 發現 兩個 裝置 樣式 寫法 做 平台 判斷 合併 寫 即可",
        "extracted_keywords": [
            "shadow",
            "陰影",
            "跨平台",
            "平台",
            "css3"
        ],
        "extracted_keywords_phrases": [
            "陰影 css3",
            "shadow 屬性",
            "box shadow",
            "shadow react",
            "卡牌 陰影"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284458": {
        "href": "https://ithelp.ithome.com.tw/articles/10284458",
        "title": "【額外分享】How To Test The Smart Contract Of iParking NFT With Foundry",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h6>tags: <code>swfLAB</code></h6>\n<p>⚠️ <strong>Of course this is only my personal thoughts, don't be too serious haha...</strong> ⚠️</p>\n<p><strong>Final Updated: 2022/3/17</strong></p>\n<hr>\n<h2>Table of Contents</h2>\n<ul>\n<li>Intro. of the event</li>\n<li>Cast an eye over the contract</li>\n<li>What is Foundry!?</li>\n<li>Testing Time</li>\n<li>Conclusion</li>\n<li>Reference</li>\n</ul>\n<h3>Synchronization Link Tree</h3>\n<ul>\n<li>\n<a href=\"https://hackmd.io/@ChiHaoLu/iParking-Foundry-Testing\" target=\"_blank\" rel=\"noreferrer noopener\">HackMD</a>\n</li>\n<li>\n<a href=\"https://medium.com/@ChiHaoLu\" target=\"_blank\" rel=\"noreferrer noopener\">Medium</a>\n</li>\n<li>\n<a href=\"https://www.linkedin.com/in/ChiHaoLu/\" target=\"_blank\" rel=\"noreferrer noopener\">LinkedIn</a>\n</li>\n<li>\n<a href=\"https://github.com/ChiHaoLu\" target=\"_blank\" rel=\"noreferrer noopener\">Github</a>\n</li>\n</ul>\n<hr>\n<h2>Intro.</h2>\n<h3>iParking NFT &amp; What happened?</h3>\n<p>簡單來說我對事件的起因和過程也不是有著什麼深度的了解，主要接收資訊的來源也就是以下兩者，在這邊我就附上連結讓大家自行參考了！</p>\n<ul>\n<li>\n<a href=\"https://www.blocktempo.com/iparking-nft-mint-failed-due-to-low-gas-limit/\" target=\"_blank\" rel=\"noreferrer noopener\">嘟嘟房 NFT 白名單出包？網爆料「花上百美元手續費還失敗」，官方回應：Gas Limit 設太低</a>\n</li>\n<li>\n<a href=\"https://medium.com/fuly-ai-%E6%99%BA%E8%83%BD%E6%8A%95%E8%B3%87%E7%AD%96%E7%95%A5%E6%A9%9F%E5%99%A8%E4%BA%BA-bitfinex-%E6%94%BE%E8%B2%B8%E6%A9%9F%E5%99%A8%E4%BA%BA/%E5%98%9F%E5%98%9F%E6%88%BFnft%E5%87%BA%E5%8C%85%E4%BA%8B%E4%BB%B6%E6%87%B6%E4%BA%BA%E5%8C%85-4a4acd7fe0c2\" target=\"_blank\" rel=\"noreferrer noopener\">嘟嘟房NFT出包事件懶人包 - FulyAI Founder Rex Chen</a>\n</li>\n</ul>\n<h3>Motivation</h3>\n<p>我發現好像沒有看到人選擇以在合約部屬「前」會進行「測試」的角度來看這次的事件，而是在錯誤發生「後」用「肉眼」觀察合約來找到問題在哪。講這些並不是要說任何評論這件事情的好前輩和好夥伴們的不是！真正錯的也就只有開發團隊，還有沒有做好事後處理的 MOD 而已。</p>\n<p>固然這次的錯誤是肉眼清晰可見的，而且水汪汪的大眼睛和大腦某些時候確實是比手打程式碼好用許多的哈哈哈哈。</p>\n<p>不過 Testing 是我認為成為一個職業工程師一個很重要的檻，我自認為距離一個真正的工程師還有不小的距離，所以想要藉此機會來練習一下用之前陳品大大告訴我的 Foundry 撰寫測試！</p>\n<p>這篇文章的主軸其實還是我自己學習 Foundry 的小小筆記，嘟嘟房只是一個活例而已 :D</p>\n<p>那在開始之前，先回到整個文章最一開始的宣告：</p>\n<p>⚠️ <strong>Of course this is only my personal thoughts, don't be too serious haha...</strong> ⚠️</p>\n<blockquote>\n<p>大家如果發現文中的任何錯誤或有任何想法，請不吝、大方地告訴我，因為還在學習中，我會無條件接受所有意見和想法的！</p>\n</blockquote>\n<hr>\n<h2>Cast an eye over the contract</h2>\n<p>現在我們參考上述前輩和媒體的資料，大概率可以先把技術層面的問題定位在：</p>\n<ol>\n<li>使用 <code>array</code> 這個資料結構來實作白名單系統</li>\n<li>Gas Limit 的設定問題</li>\n</ol>\n<p>那是時候來看程式碼啦！</p>\n<p><a href=\"https://etherscan.io/address/0xae122962331c2b02f837b2aa501d3c5d903ed28a#code\" target=\"_blank\" rel=\"noreferrer noopener\">iParking NFT Source Code in Etherscan.io</a></p>\n<h3>The path of the Contract Inheritance</h3>\n<p>這邊基本上我是順過去的，我猜嘟嘟房的工程師應該，應該，應該沒有特別去改這些繼承而來的合約內容吧！如果有的話我先道歉&gt;&lt;</p>\n<pre><code class=\"language-mermaid\">%%{init: {'theme': 'forest' } }%%\ngraph TD;\n    library-{Strings, Address}\n    interface-IERC721Receiver--&gt;ERC721\n    IERC165--&gt;IERC721;\n    IERC721--&gt;IERC721Enumerable;\n    IERC165--&gt;ERC165;\n    IERC721--&gt;IERC721Metadata;\n    IERC721Metadata--&gt;ERC721;\n    IERC721--&gt;ERC721;\n    ERC165--&gt;ERC721;\n    Context--&gt;ERC721;\n    IERC721Enumerable--&gt;ERC721Enumerable;\n    ERC721--&gt;ERC721Enumerable;\n    Context---&gt;Ownable;\n    ERC721Enumerable--&gt;CarMan;\n    Ownable--&gt;CarMan;\n</code></pre>\n<p>但其實 OpenZeppelin 裡面有許多用不到的東西（變數、資料結構、宣告等）可以刪掉，能藉此來把 Gas Fee 降低。所以我自己在寫 Project 的時候都會習慣不要直接繼承 Github 上面的內容，而是把需要的東西貼過來一個一個改成想要的樣子。</p>\n<p>OpenZeppelin 的安全性和便利性是許多人所稱許的，可對我們這些科學家/工程師（像我這種菜雞可能是半個）來說，細細的斟酌一下我們要使用的東西也蠻重要的對吧！</p>\n<p>如果自己隨便亂改然後合約反而出現 Bug，那確實是拿石頭砸自己腳。我就很常這樣，哈哈...</p>\n<blockquote>\n<p>不過畢竟工作是有收薪水的，不管是繼承函式庫還是呼叫 API 都得要更小心。隨著我自己更深入地了解這門技術，才發現很多時候程式碼不是只有 Copy-Paste 那麼簡單。</p>\n</blockquote>\n<h3>CarMan</h3>\n<p>那我們就直接看到繼承了歷代先祖先烈們的遺產，準備迎來人生曙光的最後主合約吧！</p>\n<p>我並不會非常仔細的一一講解合約裡面的每個變數、函式的細節，這邊就是去大概摸出合約裡面有什麼東西而已。那希望大家隨著我文中的引用程式碼一起來看看裡面到底都寫了什麼吧！</p>\n<p>最開始都是宣告版本、宣告合約以及繼承，進到合約之後先宣告了一些常數：</p>\n<pre><code class=\"language-javascript\">pragma solidity &gt;=0.7.0 &lt;0.9.0;\n\ncontract CarMan is ERC721Enumerable, Ownable {\n  using Strings for uint256;\n\n  string public baseURI;\n  string public baseExtension = \".json\";\n  string public notRevealedUri;\n  uint256 public cost = 0.5 ether;\n  uint256 public maxSupply = 2000;\n  uint256 public maxMintAmount = 10;\n  uint256 public nftPerAddressLimit = 10;\n  uint256 public currentPhaseMintMaxAmount = 110;\n\n  uint32 public publicSaleStart = 1647136800;\n  uint32 public preSaleStart = 1646964000;\n  uint32 public vipSaleStart = 1646618400;\n\n  bool public publicSalePaused = true;\n  bool public preSalePaused = true;\n  bool public vipSalePaused = true;\n</code></pre>\n<p>馬上就遇到第一個被大家拿出來鞭的小夥伴，<code>array</code> 型態的 <code>whitelistedAddresses</code>：</p>\n<pre><code class=\"language-javascript\">  bool public revealed = false;\n  bool public onlyWhitelisted = true;\n  address[] whitelistedAddresses;\n\n  mapping(address =&gt; uint256) addressMintedBalance;\n  mapping(address =&gt; uint256) vipMintAmount;\n\n  // addresses to manage this contract\n  mapping(address =&gt; bool) controllers;\n</code></pre>\n<p>負責接收初始化參數們的建構子，還有指到 NFT Metadata 的 <code>baseURI</code>，如果是存在 IPFS 的話那就是他的 CID：</p>\n<pre><code class=\"language-javascript\">  constructor(\n    string memory _name,\n    string memory _symbol,\n    string memory _initBaseURI,\n    string memory _initNotRevealedUri\n  ) ERC721(_name, _symbol) {\n    baseURI = _initBaseURI;\n    notRevealedUri = _initNotRevealedUri;\n  }\n\n  // internal\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n</code></pre>\n<p>給 VIP 們 <code>mint</code> 的函式：</p>\n<pre><code class=\"language-javascript\">  // public\n  function vipSaleMint(uint256 _mintAmount) public {\n    require(_mintAmount &gt; 0, \"Mint Amount should be bigger than 0\");\n    require((!vipSalePaused)&amp;&amp;(vipSaleStart &lt;= block.timestamp), \"Not Reach VIP Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount &gt; 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount &lt;= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount &lt;= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount &lt;= maxSupply, \"max NFT limit exceeded\");\n\n    require(vipMintAmount[msg.sender] != 0, \"user is not VIP\");\n    uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n    uint256 vipMintCount = vipMintAmount[msg.sender];\n \n    require(ownerMintedCount + _mintAmount &lt;= vipMintCount, \"max VIP Mint Amount exceeded\");\n    require(ownerMintedCount + _mintAmount &lt;= nftPerAddressLimit, \"max NFT per address exceeded\");\n    \n    for (uint256 i = 1; i &lt;= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n\n</code></pre>\n<p>預售用的 <code>mint</code> 函式：</p>\n<pre><code class=\"language-javascript\">  function preSaleMint(uint256 _mintAmount) public payable {\n    require(_mintAmount &gt; 0, \"Mint Amount should be bigger than 0\");\n    require((!preSalePaused)&amp;&amp;(preSaleStart &lt;= block.timestamp), \"Not Reach Pre Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount &gt; 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount &lt;= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount &lt;= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount &lt;= maxSupply, \"max NFT limit exceeded\");\n\n    if (msg.sender != owner()) {\n        if(onlyWhitelisted == true) {\n            require(isWhitelisted(msg.sender), \"user is not whitelisted\");\n            uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n            require(ownerMintedCount + _mintAmount &lt;= nftPerAddressLimit, \"max NFT per address exceeded\");\n        }\n        require(msg.value &gt;= cost * _mintAmount, \"insufficient funds\");\n    }\n    \n    for (uint256 i = 1; i &lt;= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n</code></pre>\n<p>公售用的 <code>mint</code> 函式：</p>\n<pre><code class=\"language-javascript\">  function publicSaleMint(uint256 _mintAmount) public payable {\n    require(_mintAmount &gt; 0, \"Mint Amount should be bigger than 0\");\n    require((!publicSalePaused)&amp;&amp;(publicSaleStart &lt;= block.timestamp), \"Not Reach Public Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount &gt; 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount &lt;= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount &lt;= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount &lt;= maxSupply, \"max NFT limit exceeded\");\n\n    if (msg.sender != owner()) {\n        if(onlyWhitelisted == true) {\n            require(isWhitelisted(msg.sender), \"user is not whitelisted\");\n            uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n            require(ownerMintedCount + _mintAmount &lt;= nftPerAddressLimit, \"max NFT per address exceeded\");\n        }\n        require(msg.value &gt;= cost * _mintAmount, \"insufficient funds\");\n    }\n    \n    for (uint256 i = 1; i &lt;= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n</code></pre>\n<p>判斷當前訊息傳遞者（如果是交易或者 <code>mint</code> 那 <code>msg.sender</code> 自然是消費者）是否為白名單成員：</p>\n<pre><code class=\"language-javascript\">  function isWhitelisted(address _user) public view returns (bool) {\n    for (uint i = 0; i &lt; whitelistedAddresses.length; i++) {\n      if (whitelistedAddresses[i] == _user) {\n          return true;\n      }\n    }\n    return false;\n  }\n\n  function walletOfOwner(address _owner) public view returns (uint256[] memory)\n  {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\n    for (uint256 i; i &lt; ownerTokenCount; i++) {\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\n    }\n    return tokenIds;\n  }\n</code></pre>\n<p>正常的 NFT 合約有的 <code>tokenURI</code>：</p>\n<pre><code class=\"language-javascript\">  function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Metadata: URI query for nonexistent token\"\n    );\n    \n    if(revealed == false) {\n        return notRevealedUri;\n    }\n\n    string memory currentBaseURI = _baseURI();\n    return bytes(currentBaseURI).length &gt; 0\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\n        : \"\";\n  }\n</code></pre>\n<p>關於一些鑄造函式的啟動 &amp; 關閉條件。</p>\n<pre><code class=\"language-javascript\">  function publicSaleIsActive() public view returns (bool) {\n    return ( (publicSaleStart &lt;= block.timestamp) &amp;&amp; (!publicSalePaused) );\n  }\n\n  function preSaleIsActive() public view returns (bool) {\n    return ( (preSaleStart &lt;= block.timestamp) &amp;&amp; (!preSalePaused) );\n  }\n\n  function vipSaleIsActive() public view returns (bool) {\n    return ( (vipSaleStart &lt;= block.timestamp) &amp;&amp; (!vipSalePaused) );\n  }\n\n  function checkVIPMintAmount(address _account) public view returns (uint256) {\n    return vipMintAmount[_account];\n  }\n</code></pre>\n<p>是一些擁有管理權的人們才能呼叫的函式。通常這種函式越多我覺得就越中心化，不過既然一切都是透明且清楚明白的寫在程式碼上，其實 sign 了就代表我們同意接受這個合約對吧！</p>\n<pre><code class=\"language-javascript\">  // for controller\n  function reveal(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    revealed = _state;\n  }\n  \n  function setNftPerAddressLimit(uint256 _limit) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    nftPerAddressLimit = _limit;\n  }\n  \n  function setCost(uint256 _newCost) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    cost = _newCost;\n  }\n\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    maxMintAmount = _newmaxMintAmount;\n  }\n\n  function setcurrentPhaseMintMaxAmount(uint256 _newPhaseAmount) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    currentPhaseMintMaxAmount = _newPhaseAmount;\n  }\n\n  function setPublicSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    publicSaleStart = timestamp;\n  }\n  \n  function setPreSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    preSaleStart = timestamp;\n  } \n\n  function setVIPSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    vipSaleStart = timestamp;\n  }\n\n  function setBaseURI(string memory _newBaseURI) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    baseURI = _newBaseURI;\n  }\n\n  function setBaseExtension(string memory _newBaseExtension) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    baseExtension = _newBaseExtension;\n  }\n  \n  function setNotRevealedURI(string memory _notRevealedURI) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    notRevealedUri = _notRevealedURI;\n  }\n\n  function setPreSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    preSalePaused = _state;\n  }\n\n  function setVIPSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    vipSalePaused = _state;\n  }\n\n  function setVIPMintAmount(address[] memory _accounts, uint256[] memory _amounts) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    require(_accounts.length == _amounts.length, \"accounts and amounts array length mismatch\");\n\n    for (uint256 i = 0; i &lt; _accounts.length; ++i) {\n      vipMintAmount[_accounts[i]]=_amounts[i];\n    }\n  }\n\n  function setPublicSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    publicSalePaused = _state;\n  }\n  \n  function setOnlyWhitelisted(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    onlyWhitelisted = _state;\n  }\n  \n  function whitelistUsers(address[] calldata _users) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    delete whitelistedAddresses;\n    whitelistedAddresses = _users;\n  }\n</code></pre>\n<p>控制權，在這個合約裡面也算是管理權的人員管理函式：</p>\n<pre><code class=\"language-javascript\">  //only owner\n \n   /**\n   * enables an address for management\n   * @param controller the address to enable\n   */\n  function addController(address controller) external onlyOwner {\n    controllers[controller] = true;\n  }\n\n  /**\n   * disables an address for management\n   * @param controller the address to disbale\n   */\n  function removeController(address controller) external onlyOwner {\n    controllers[controller] = false;\n  }\n</code></pre>\n<p>賺了錢記得要把錢拿出來的 <code>withdraw</code> 函式：</p>\n<pre><code class=\"language-javascript\">  function withdraw() public onlyOwner {\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n    require(success);\n  }\n}\n</code></pre>\n<hr>\n<h2>What is Foundry!?</h2>\n<h3>Unit Testing of Smart Contract</h3>\n<p>過往我們在進行 Testing 的時候無非是使用 Hardhat, Truffle, DappTools 等撰寫 Javascript/ Typescript 語法的測試，最後搭配 Ganache, Infura 等來服用。其他藥物還會包含 ethers.js, mocha, waffle, chai 之類的 blablabla，大家自行體會 :D</p>\n<p>但有寫過的人可能都知道，在我們的 node_modules 裡面應該充滿了各式各樣的 dependencies，做任何開發之前都要先來一套刪套件、重載套件、降版本、環境變數之類的組合拳，也算是夠惱人的...</p>\n<p>雖然 Javascript 已經是一個人手一把的利器，但身為一個撰寫 Solidity 的工程師測試卻要用另外一個語言來寫，總是會覺得哪裡怪怪的（嗎）。更不用說 Big Number 這個套件某些時候還會造成一些問題。</p>\n<p>不過現在能夠用 Solidity 一劑打天下的疫苗出現了，那就是效果快狠準的 Foundry！（掌聲歡迎??）</p>\n<h3>Introduction</h3>\n<p><a href=\"https://github.com/gakonst/foundry\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Foundry</strong></a> 是一個使用 Rust 建置的開發工具，它自稱為以太坊所有開發環境中最快、最有彈性、擴充性最強的一款。連官方的 github 中都自己拿來和知名工具 dapptools 互相比較（理所當然是大勝，不然不會拿出來比）。</p>\n<p>Foundry 能夠從眾多工具中脫穎而出的特點除了快速之外，還有以 Solidity 撰寫測試這個特質，待會我們會有機會細細品味的！</p>\n<h3>Comparison</h3>\n<p>以下是一些比較基準和相關敘述，翻譯於 Foundry 官方文件：</p>\n<p>Forge 利用 <a href=\"https://github.com/gakonst/ethers-rs/tree/master/ethers-solc/\" target=\"_blank\" rel=\"noreferrer noopener\">ethers-solc</a> ，在編譯和測試的表現上都有非常快的速度。</p>\n<table>\n<thead>\n<tr>\n<th>Project</th>\n<th>Forge</th>\n<th>DappTools</th>\n<th>Speedup</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/hexonaut/guni-lev/\" target=\"_blank\" rel=\"noreferrer noopener\">guni-lev</a></td>\n<td>28.6s</td>\n<td>2m36s</td>\n<td>5.45x</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Rari-Capital/solmate/\" target=\"_blank\" rel=\"noreferrer noopener\">solmate</a></td>\n<td>6s</td>\n<td>46s</td>\n<td>7.66x</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/reflexer-labs/geb\" target=\"_blank\" rel=\"noreferrer noopener\">geb</a></td>\n<td>11s</td>\n<td>40s</td>\n<td>3.63x</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rari-capital/vaults\" target=\"_blank\" rel=\"noreferrer noopener\">vaults</a></td>\n<td>1.4s</td>\n<td>5.5s</td>\n<td>3.9x</td>\n</tr>\n</tbody>\n</table>\n<p>當我們在<a href=\"https://twitter.com/gakonst/status/1461289225337421829\" target=\"_blank\" rel=\"noreferrer noopener\">測試（tested）</a> 著名的函式庫 <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts\" target=\"_blank\" rel=\"noreferrer noopener\"><code>openzeppelin-contracts</code></a> 時，Hardhat 耗費了 15.244s 的時間編譯，而 Forge 只需要 9.449s (~4s cached)。</p>\n<h3>What features can use</h3>\n<p>Foundry 由以下兩者組成：</p>\n<ul>\n<li>\n<a href=\"https://github.com/gakonst/foundry/tree/master/forge\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Forge</strong></a>： 就像我們平常使用的其他開發工具一樣，是一個 Ethereum 的測試框架。</li>\n<li>\n<a href=\"https://github.com/gakonst/foundry/tree/master/cast\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>Cast</strong></a>：支援多種客戶端功能，像是與 EVM 智能合約互動、傳遞交易、取得鏈上資訊等，就像一把瑞士刀一樣（官方文件寫的）。</li>\n</ul>\n<p>來自官方的 Foundry 特性：</p>\n<ul>\n<li>Fast &amp; flexible compilation pipeline\n<ul>\n<li>Automatic Solidity compiler version detection &amp; installation (under ~/.svm)</li>\n<li>Incremental compilation &amp; caching: Only changed files are re-compiled</li>\n<li>Parallel compilation</li>\n<li>Non-standard directory structures support (e.g. Hardhat repos)</li>\n</ul>\n</li>\n<li>Tests are written in Solidity (like in DappTools)</li>\n<li>Fast fuzz testing with shrinking of inputs &amp; printing of counter-examples</li>\n<li>Fast remote RPC forking mode, leveraging Rust's async infrastructure like tokio</li>\n<li>Flexible debug logging\n<ul>\n<li>Dapptools-style, using DsTest's emitted logs</li>\n<li>Hardhat-style, using the popular console.sol contract</li>\n</ul>\n</li>\n<li>Portable (5-10MB) &amp; easy to install without requiring Nix or any other package manager</li>\n<li>Fast CI with the Foundry GitHub action.</li>\n</ul>\n<h3>Download Foundry</h3>\n<p>如果作業系統是 Linux 或 macOS 最簡單的方法就是使用以下方法下載 Foundry：</p>\n<pre><code class=\"language-javascript\">curl -L https://foundry.paradigm.xyz | bash\nfoundryup\n</code></pre>\n<p>下載完成之後再執行一次 <code>foundryup</code> 會將 Foundry 更新至最新版本，如果想要返回到指定版本，也可以使用指令 <code>foundryup -v $VERSION</code>。</p>\n<p>然而我自己是使用 Windows，下載的方式如下。</p>\n<p>在下載 Foundry 之前，我們的需要先準備好 Rust 和 Cargo，首先到 rustup.rs 下載 rust，然後執行：</p>\n<pre><code class=\"language-javascript\">rustup-init\n</code></pre>\n<p>這樣就可以同時準備好 Rust 和 Cargo，最後打開 CMD 使用以下指令就可以成功安裝 Foundry。</p>\n<pre><code class=\"language-javascript\">cargo install --git https://github.com/gakonst/foundry --bins --locked\n</code></pre>\n<p>如果在下載過程中像我一樣遇到以下錯誤：</p>\n<pre><code class=\"language-javascript\">error: linker link.exe not found\n  |\n  = note: program not found\n\nnote: the msvc targets depend on the msvc linker but link.exe was not found\n\nnote: please ensure that VS 2013, VS 2015, VS 2017 or VS 2019 was installed with the Visual C++ option\n\nerror: could not compile proc-macro2 due to previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: failed to compile `foundry-cli v0.1.0 (https://github.com/gakonst/foundry#d66f9d58)`, intermediate artifacts can be found at C:\\Users\\qazws\\AppData\\Local\\Temp\\cargo-installe6Rd6Y\n\nCaused by:\n  build failed\n</code></pre>\n<p>那就要下載 <a href=\"https://www.blogger.com/null\" target=\"_blank\" rel=\"noreferrer noopener\"> Visual Studio 2019 Build tools</a>，選擇 C++ Build Tools 然後重開機就可以解決了！下載大小約是 6 GB。</p>\n<h3>First Foundry Test</h3>\n<p>首先我們使用 <code>init</code> 初始化一個專案。</p>\n<pre><code class=\"language-javascript\">$ forge init hello_foundry\n</code></pre>\n<p>進到 <code>hello_foundry</code> 看看初始化之後在資料夾裡面出現了什麼：</p>\n<pre><code class=\"language-javascript\">$ cd hello_foundry\n$ tree .\n.\n├── lib\n│&nbsp;&nbsp; └── ds-test\n└── src\n    ├── Contract.sol\n    └── test\n        └── Contract.t.sol\n\n6 directories, 7 files\n</code></pre>\n<p>forge CLI 將會創建兩個檔案目錄：<code>lib</code> 和 <code>src</code>。</p>\n<ul>\n<li>\n<code>lib</code> 包含了 testing contract (lib/ds-test/src/test.sol)，同時也有其他各式各樣測試合約的實作 demo(lib/ds-test/demo/demo.sol)</li>\n<li>\n<code>src</code> 放了我們寫的智能合約和測試的原始碼</li>\n</ul>\n<p>編譯：</p>\n<pre><code class=\"language-javascript\">$ forge build\n&gt;\n\u001b[2K\u001b[1m[\u001b[32m⠰\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠃\u001b[0;1m]\u001b[0m installing solc version \"0.8.10\"\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Successfully installed solc 0.8.10\n\u001b[2K\u001b[1m[\u001b[32m⠊\u001b[0;1m]\u001b[0m Compiling 3 files with 0.8.10\nCompiler run successful\n</code></pre>\n<p>進行測試：</p>\n<pre><code class=\"language-javascript\">$ forge test\n&gt;\nNo files changed, compilation skipped\nRunning 1 test for ContractTest.json:ContractTest\n\u001b[32m[PASS]\u001b[0m testExample() (gas: 120)\n\n</code></pre>\n<h3>More Foundry Test</h3>\n<p>在 <code>$ iParking_foundry\\hello_foundry\\src\\Contract.sol</code> 中我們把合約修改成我們想要撰寫的其他合約：</p>\n<pre><code class=\"language-javascript\">// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ncontract Foo {\n  uint256 public x = 1;\n  function set(uint256 _x) external {\n    x = _x;\n  }\n\n  function double() external {\n    x = 2 * x;\n  }\n}\n</code></pre>\n<p>在檔案 <code>test/Contract.t.sol</code> 中：</p>\n<pre><code class=\"language-javascript\">// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"ds-test/test.sol\";\nimport 'src/Contract.sol';\n\ncontract FooTest is DSTest {\n  Foo foo;\n\n  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    foo = new Foo();\n  }\n\n  // A simple unit test\n  function testDouble() public {\n    require(foo.x() == 1);\n    foo.double();\n    require(foo.x() == 2);\n  }\n\n  // A failing unit test (function name starts with `testFail`)\n  function testFailDouble() public {\n    require(foo.x() == 1);\n    foo.double();\n    require(foo.x() == 4);\n  }\n}\n</code></pre>\n<p>進行測試：</p>\n<pre><code class=\"language-javascript=\">forge test\n&gt;\n\u001b[2K\u001b[1m[\u001b[32m⠰\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Compiling 2 files with 0.8.10\nCompiler run successful\n\nRunning 2 tests for FooTest.json:FooTest\n\u001b[32m[PASS]\u001b[0m testDouble() (gas: 9316)\n\u001b[32m[PASS]\u001b[0m testFailDouble() (gas: 9290)\n</code></pre>\n<p>除了以上我們最熟悉的 <code>require</code> 之外，也可以使用以下方式進行測試：</p>\n<pre><code class=\"language-javascript\">function testDouble() public {\n    assertEq(foo.x(), 1);\n    foo.double();\n    assertEq(foo.x(), 2);\n}\n</code></pre>\n<p>我們還有更多酷炫的 assertions 語法可以用來測試合約，在 <code>lib/ds-test/src/test.sol</code> 中可以找到他們：</p>\n<ul>\n<li>邏輯運算 - <code>assertTrue</code>\n</li>\n<li>十進制相等 - <code>assertEqDecimal</code>\n</li>\n<li>大於、小於 - <code>assertGt</code>, <code>assertGe</code>, <code>assertLt</code>, <code>assertLe</code>\n</li>\n</ul>\n<h3>More features can use</h3>\n<p>Foundry 同樣也支持 <a href=\"https://en.wikipedia.org/wiki/Fuzzing\" target=\"_blank\" rel=\"noreferrer noopener\">Fuzzing</a> 測試。因為當我們一個一個函式都進行測試時，即便全部都成功 PASS，但在邊際測資中其實也很有可能會出現一些問題，導致 Under/Overflow 或其他 RE/ME 之類的錯誤。</p>\n<p>我們在測試函式中增加參數之後，Fuzzing 能夠讓 Solidity test runner 隨機選擇大量的參數輸入我們的函式。</p>\n<pre><code class=\"language-javascript\">function testDoubleWithFuzzing(uint256 x) public {\n    foo.set(x);\n    require(foo.x() == x);\n    foo.double();\n    require(foo.x() == 2 * x);\n}\n</code></pre>\n<p>在以上例子中 fuzzer 會自動地對 <code>x</code> 嘗試各種隨機數，如果他發現當前輸入會導致測試失敗，便會回傳錯誤，這時候就可以開始 debug 啦！</p>\n<p>進行測試：</p>\n<pre><code class=\"language-javascript\">$ forge test\n&gt;\n\u001b[2K\u001b[1m[\u001b[32m⠆\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠔\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n\nRunning 3 tests for FooTest.json:FooTest\n\u001b[32m[PASS]\u001b[0m testDouble() (gas: 9384)\n\u001b[31m[FAIL. Reason: Arithmetic over/underflow. Counterexample: calldata=0xc80b36b68000000000000000000000000000000000000000000000000000000000000000, args=[57896044618658097711785492504343953926634992332820282019728792003956564819968]]\u001b[0m testDoubleWithFuzzing(uint256) (runs: 4, μ: 2867, ~: 3823)\n\u001b[32m[PASS]\u001b[0m testFailDouble() (gas: 9290)\n\nFailed tests:\n\u001b[31m[FAIL. Reason: Arithmetic over/underflow. Counterexample: calldata=0xc80b36b68000000000000000000000000000000000000000000000000000000000000000, args=[57896044618658097711785492504343953926634992332820282019728792003956564819968]]\u001b[0m testDoubleWithFuzzing(uint256) (runs: 4, μ: 2867, ~: 3823)\n\nEncountered a total of \u001b[31m1\u001b[0m failing tests, \u001b[32m2\u001b[0m tests succeeded\n</code></pre>\n<p>從以上錯誤可以發現當參數輸入為 <code>57896044618658097711785492504343953926634992332820282019728792003956564819968</code> 之後會出現錯誤，來到 <a href=\"https://www.wolframalpha.com/\" target=\"_blank\" rel=\"noreferrer noopener\">wolframe</a> 貼上這個數字之後會發現這個數字為 <code>5.789 * 10^76 ~= 2^255</code>。</p>\n<p>聽起來十分合理因為 <code>x</code> 的型態就是 <code>uint256</code>，所以如果要避免程式出現問題，勢必要在函式裡面增加一些關於型態的異常處理敘述。</p>\n<p>未來 Foundry 除了Fuzz Testing 之外，還會支援：</p>\n<ul>\n<li>Invariant Testing</li>\n<li>Symbolic Execution</li>\n<li>Mutation Testing</li>\n</ul>\n<p>Give me more information!!</p>\n<ul>\n<li>\n<a href=\"https://onbjerg.github.io/foundry-book/\" target=\"_blank\" rel=\"noreferrer noopener\">foundry-book</a>\n</li>\n</ul>\n<p>Give me more more more documentation!!!</p>\n<ul>\n<li>\n<a href=\"https://github.com/gakonst/foundry/blob/master/forge/README.md\" target=\"_blank\" rel=\"noreferrer noopener\">forge package</a>\n</li>\n<li>\n<a href=\"https://github.com/gakonst/foundry/blob/master/cli/README.md\" target=\"_blank\" rel=\"noreferrer noopener\">CLI README</a>.</li>\n</ul>\n<hr>\n<h2>⚗ Testing Time</h2>\n<h3>Initialization &amp; Preparation</h3>\n<p>打開一個空資料夾，使用 <code>init</code> 來初始化專案：</p>\n<pre><code class=\"language-javascript\">$ forge init iParking_foundry\n</code></pre>\n<p>因為我們要繼承許多 OpenZeppelin 的合約，所以這邊先將其導入到專案的 src 裡面。</p>\n<blockquote>\n<p>其實感覺不是要這樣子做，但這邊如果有正確的做法拜託提供給我 ?</p>\n</blockquote>\n<pre><code class=\"language-javascript\">$ cd src\n$ tree\n&gt;\n├─contracts\n│  ├─access\n│  ├─finance\n│  ├─governance\n│  │  ├─compatibility\n│  │  ├─extensions\n│  │  └─utils\n│  ├─interfaces\n│  ├─metatx\n│  ├─mocks\n│  │  ├─compound\n│  │  ├─ERC165\n│  │  ├─UUPS\n│  │  └─wizard\n│  ├─proxy\n│  │  ├─beacon\n│  │  ├─ERC1967\n│  │  ├─transparent\n│  │  └─utils\n│  ├─security\n│  ├─token\n│  │  ├─common\n│  │  ├─ERC1155\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  ├─ERC20\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  ├─ERC721\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  └─ERC777\n│  │      └─presets\n│  └─utils\n│      ├─cryptography\n│      ├─escrow\n│      ├─introspection\n│      ├─math\n│      └─structs\n└─test\n</code></pre>\n<p>在 <code>$ iParking_foundry\\src\\Contract.sol</code> 中我們把合約修改成嘟嘟房的 NFT 合約（記得要 import 要繼承的列祖列宗們）：</p>\n<pre><code class=\"language-javascript\">// SPDX-License-Identifier: MIT\npragma solidity &gt;=0.7.0 &lt;0.9.0;\n\nimport \"./contracts/access/Ownable.sol\";\nimport \"./contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract CarMan is ERC721Enumerable, Ownable {\n\n    // skip the contract here...\n}\n</code></pre>\n<p>同時也先把 <code>Contract.t.sol</code> 檔案中的測試合約準備好：</p>\n<pre><code class=\"language-javascript\">// SPDX-License-Identifier: MIT\npragma solidity &gt;=0.7.0 &lt;0.9.0;\n\nimport \"ds-test/test.sol\";\nimport 'src/Contract.sol';\n\ncontract CarManTest is DSTest {\n  CarMan carman;\n\n  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    carman = new CarMan(\"CarMan_Metaverse\", \"CMM\", \"ipfs://QmYvJEw4LHBpaehH6mYZV9YXC372QSWL4BPFVJvUkKqRCg/\", \"ipfs://.../\");\n  }\n}\n</code></pre>\n<p>建置並測試專案看編譯有沒有出現問題：</p>\n<pre><code class=\"language-javascript\">$ forge test\n&gt;\n\u001b[2K\u001b[1m[\u001b[32m⠆\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠘\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n</code></pre>\n<h3>Unit Testing</h3>\n<p>目標主要是看 <code>preSaleMint()</code> 這個函式的運作狀況，說到底我這邊也是屬於一種馬後炮的行為，因為我也懶得寫別的測試哈哈哈哈哈。</p>\n<p>廢話不多說，直接開測：</p>\n<pre><code class=\"language-javascript\">// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"ds-test/test.sol\";\nimport '../Contract.sol';\n\ncontract CarManTest is DSTest {\n  CarMan carman;\n  address DEPLOYER_ADDRESS;\n  address[] public temp;\n  // skip the code...\n}\n</code></pre>\n<p>首先就是先宣告版本，這邊我除了把主合約宣告進來之外，來宣告了 <code>DEPLOYER_ADDRESS</code> 來存合約 deployer 的地址；以及 <code>temp</code> 來暫存之後要增長的白名單。</p>\n<pre><code class=\"language-javascript\">  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    carman = new CarMan(\"CarMan_Metaverse\", \"CMM\", \"ipfs://QmYvJEw4LHBpaehH6mYZV9YXC372QSWL4BPFVJvUkKqRCg/\", \"ipfs://.../\");\n    DEPLOYER_ADDRESS = carman.owner();\n    carman.addController(DEPLOYER_ADDRESS); // deployer can addController\n    carman.setPreSalePause(false); // deployer/controller can setPreSalePause\n    for(uint i = 0; i &lt; 800; i++){\n      address randomish = address(uint160(uint(keccak256(abi.encodePacked(i, blockhash(block.number))))));\n      temp.push(randomish);\n    }\n    temp.push(DEPLOYER_ADDRESS);\n    carman.whitelistUsers(temp);\n  }\n</code></pre>\n<p>這段程式碼有很多個重點：</p>\n<p>一、<code>DEPLOYER_ADDRESS = carman.owner();</code>：</p>\n<p>這個敘述中我們首先需要知道 <code>msg.sender</code> 是誰，因為在 deploy 合約的時候決定 <code>owner</code> 是誰的方法就是看最一開始的 <code>msg.sender</code>。<br>\n我們可以從 <code>foundry.toml</code> 以及 <a href=\"https://onbjerg.github.io/foundry-book/reference/config.html\" target=\"_blank\" rel=\"noreferrer noopener\">foundry.toml Reference</a> 中得到各個環境變數、全域變數的設定檔與其預設值是多少。</p>\n<p>二、<code>carman.addController(DEPLOYER_ADDRESS);</code>：</p>\n<p>這是除了陣列存白名單外我覺得最弔詭的地方，那就是我在主合約裡面沒有看見他們把 <code>owner</code> 在建構子裡面就設定為 <code>Controller</code>。然而大部分的功能函式居然都是需要 <code>require(Controller)</code> 而不是使用 <code>onlyOwner</code> 的 <code>modifier</code>。所以我就在這邊幫自己（deployer）宣告了。</p>\n<p>三、增長白名單：</p>\n<pre><code class=\"language-javascript\">for(uint i = 0; i &lt; 800; i++){\n  address randomish = address(uint160(uint(keccak256(abi.encodePacked(i, blockhash(block.number))))));\n  temp.push(randomish);\n}\ntemp.push(DEPLOYER_ADDRESS);\ncarman.whitelistUsers(temp);\n</code></pre>\n<p>主要的重點為如何在合約中隨機製造帳戶地址，然後把他們都加進去 <code>temp</code> 這個陣列，最後再一次 <code>push</code> 到 <code>whitelistedAddresses</code> 中。</p>\n<p>接下來下一個程式碼讓我苦惱超級久，因為如果沒有實作 <code>_checkOnERC721Received</code> 的話，在直接宣告 <code>_safeMint()</code> 以後會瘋狂出現以下錯誤：</p>\n<pre><code>Running 1 test for CarManTest.json:CarManTest\n�[31m[FAIL. Reason: ERC721: transfer to non ERC721Receiver implementer]�[0m testDeployerCanMint() (gas: 192214)\n\nFailed tests:\n�[31m[FAIL. Reason: ERC721: transfer to non ERC721Receiver implementer]�[0m testDeployerCanMint() (gas: 192214)\n\nEncountered a total of �[31m1�[0m failing tests, �[32m0�[0m tests succeeded\n</code></pre>\n<p>根據我查到的資料 <code>_checkOnERC721Received</code> 有一個 verification logic 存在，如果今天 <code>to</code> 的地址是一個合約而不是 EOA，那就需要實作它的 body，這樣才可以在 ERC-721 的介面裡面回傳正確的 4 bytes hash。</p>\n<pre><code class=\"language-javascript\">  function onERC721Received(\n      address, \n      address, \n      uint256, \n      bytes calldata\n  )external pure returns(bytes4) {\n      return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n  } \n  /*\n  solved reference: https://docs.klaytn.com/smart-contract/sample-contracts/erc-721/1-erc721#3-safetransferfrom-and-transferfrom\n  */\n</code></pre>\n<p>第一個測試，這邊先試試水溫看自己（Deployer）能不能夠鑄造幾個 NFT。</p>\n<pre><code class=\"language-javascript\">  function testDeployerCanMint(uint x) public {\n    assertEq(carman.totalSupply(), 0); // nothing minted before\n    if(x &gt; carman.maxMintAmount()){\n      carman.preSaleMint(10);\n      assertEq(carman.totalSupply(), carman.maxMintAmount());\n    }\n    else if(x &gt; 0){\n      carman.preSaleMint(x);\n      assertEq(carman.totalSupply(), x);\n    }\n  }\n</code></pre>\n<p>第二個測試，這邊要使用 Foundry 提供的一個很酷的功能，那就是我們可以把自己的身分轉變成其他帳戶，藉此來以不同角度測試合約。</p>\n<p>首先我們要宣告 <code>CheatCodes</code> 的介面，之後在測試合約裡面宣告 <code>cheats</code>。最後只要在我們想要測試的合約裡面加上 <code>cheats.prank(address(0));</code> 就可以把自己的角度轉成 <code>address(0)</code>。</p>\n<pre><code class=\"language-javascript\">interface CheatCodes {\n  function prank(address) external;\n}\n\ncontract CarManTest is DSTest {\n  CheatCodes cheats = CheatCodes(HEVM_ADDRESS);\n    \n  // skip the code...\n    \n  function testFailNotWLMint() public {\n    cheats.prank(address(0));\n    carman.preSaleMint(10);\n  }  \n}\n</code></pre>\n<p>進行測試：</p>\n<pre><code class=\"language-javascript\">$ forge test\n&gt;\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠑\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n\nRunning 3 tests for CarManTest.json:CarManTest\n\u001b[32m[PASS]\u001b[0m testDeployerCanMint(uint256) (runs: 256, μ: 972407, ~: 1198664)\n\u001b[32m[PASS]\u001b[0m testFailNotWLMint() (gas: 2080543)\n</code></pre>\n<h3>Gas Report</h3>\n<p>Foundry 還有一個非常有趣的功能那就是 Gas Report：</p>\n<pre><code class=\"language-javascript\">$ forge test --gas-report\n&gt;\n[2K\u001b[1m[\u001b[32m⠔\u001b[0;1m]\u001b[0m Compiling...\nNo files changed, compilation skipped\n\nRunning 2 tests for CarManTest.json:CarManTest\n\u001b[32m[PASS]\u001b[0m testDeployerCanMint(uint256) (runs: 256, μ: 908620, ~: 1198597)\n\u001b[32m[PASS]\u001b[0m testFailNotWLMint() (gas: 2080543)\n╭─────────────────┬─────────────────┬──────────┬──────────┬──────────┬─────────╮\n│ CarMan contract ┆                 ┆          ┆          ┆          ┆         │\n╞═════════════════╪═════════════════╪══════════╪══════════╪══════════╪═════════╡\n│ Deployment Cost ┆ Deployment Size ┆          ┆          ┆          ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 3269119         ┆ 16173           ┆          ┆          ┆          ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name   ┆ min             ┆ avg      ┆ median   ┆ max      ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ addController   ┆ 22718           ┆ 22718    ┆ 22718    ┆ 22718    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ owner           ┆ 444             ┆ 444      ┆ 444      ┆ 444      ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ preSaleMint     ┆ 2070405         ┆ 2070405  ┆ 2070405  ┆ 2070405  ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setPreSalePause ┆ 858             ┆ 858      ┆ 858      ┆ 858      ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ whitelistUsers  ┆ 17822466        ┆ 17822466 ┆ 17822466 ┆ 17822466 ┆ 1       │\n╰─────────────────┴─────────────────┴──────────┴──────────┴──────────┴─────────╯\n</code></pre>\n<p>這個 Gas 果然是消耗驚人，如果要發現這個錯誤的話，在 <code>foundry.toml</code> 中就需要把 <code>gasLimit</code> 設定成我們想要的大小來控制，或者使用其他辦法之類的 :D</p>\n<hr>\n<h2>Conclusion</h2>\n<h3>Why do I not correct the contract</h3>\n<p>市面上有許多實作的例子，無論是最基本的 mapping，酷炫的 Merkle Tree(Hash Tree)，或甚至是稍微中心化但更易於管理和節省開銷的 Backend Signature Whitelist Data Base，其實多查一點資料應該是會選擇避免掉用 array 這個資料結構來存白名單的。</p>\n<p>不過因為我是一個菜鳥，我認識的所有會寫 Solidity 的人裡面有 99% 都比自己強哈哈哈哈哈，所以修正智能合約這種事情我先躲開好了！做 Auditing 的大師不少，還是讓他們來吧 :D</p>\n<h3>My point of view</h3>\n<p>固然使用 <code>array</code> 和遍歷這樣子的演算法來尋找白名單能稱得上是詭譎，不過從 Web2 跨足到 Web3 的公司們，其實有很多東西都需要學習。</p>\n<p>而且在這個才剛開始要蓬勃發展的產業與技術中，許多人也都還在摸索最好的技術模式、商業模式。也許給他們一個改善的機會，累積越來越多這樣的先例某種程度上也能夠讓這個產業邁向更好的發展！</p>\n<p>那希望我可以多多多多多多增進自己寫測試的實力，畢竟寫出一個會動的合約並不難，但要寫出一個不會出錯的難如登天阿！</p>\n<hr>\n<h2>Reference</h2>\n<h3>Foundry</h3>\n<ul>\n<li>\n<a href=\"https://www.paradigm.xyz/2021/12/introducing-the-foundry-ethereum-development-toolbox#You_should_be_writing_your_tests_in_Solidity\" target=\"_blank\" rel=\"noreferrer noopener\">Introducing the Foundry Ethereum development toolbox</a>\n</li>\n<li>\n<a href=\"https://nader.mirror.xyz/6Mn3HjrqKLhHzu2balLPv4SqE5a-oEESl4ycpRkWFsc\" target=\"_blank\" rel=\"noreferrer noopener\">Building and testing smart contracts with Foundry</a>\n</li>\n<li>\n<a href=\"https://www.youtube.com/watch?v=wqFnif_6Mbc\" target=\"_blank\" rel=\"noreferrer noopener\">Getting Started With Foundry</a>\n</li>\n<li>\n<a href=\"https://docs.fantom.foundation/tutorials/deploy-a-smart-contract-with-foundry-and-chainstack\" target=\"_blank\" rel=\"noreferrer noopener\">Deploy a smart contract with Foundry and Chainstack</a>\n</li>\n<li>\n<a href=\"https://chainstack.com/foundry-a-fast-solidity-contract-development-toolkit/\" target=\"_blank\" rel=\"noreferrer noopener\">Foundry: A fast Solidity contract development toolkit</a>\n</li>\n</ul>\n<h3>ERC-721 Contract Unit Testing</h3>\n<ul>\n<li>\n<a href=\"https://gigster.com/blog/deploy-a-fully-tested-nft-contract-using-openzeppelin/\" target=\"_blank\" rel=\"noreferrer noopener\">Deploy A Fully Tested NFT Contract Using OpenZeppelin</a>\n</li>\n<li>\n<a href=\"https://dev.to/jacobedawson/import-test-a-popular-nft-smart-contract-with-hardhat-ethers-12i5\" target=\"_blank\" rel=\"noreferrer noopener\">Import &amp; Test a Popular NFT Smart Contract with Hardhat &amp; Ethers</a>\n</li>\n<li>\n<a href=\"https://medium.com/upstate-interactive/a-simple-guide-for-how-to-write-unit-tests-for-smart-contracts-8ec4b645f57b\" target=\"_blank\" rel=\"noreferrer noopener\">A simple guide for how to write unit tests for smart contracts</a>\n</li>\n<li>\n<a href=\"https://leftasexercise.com/2021/10/10/implementing-and-testing-an-erc721-contract/\" target=\"_blank\" rel=\"noreferrer noopener\">Implementing and testing an ERC721 contract</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,ethereum,nft,solidity,web3.js",
        "genre": "Modern Web",
        "published_at": "2022-03-22 23:27:21",
        "author_href": "https://ithelp.ithome.com.tw/users/20140105/ironman",
        "author_name": "ALu",
        "series_href": "https://ithelp.ithome.com.tw/users/20140105/ironman/3939",
        "series_name": "All In One NFT Website Development",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<h6>tags: <code>swfLAB</code></h6>\n<p>⚠️ <strong>Of course this is only my personal thoughts, don't be too serious haha...</strong> ⚠️</p>\n<p><strong>Final Updated: 2022/3/17</strong></p>\n<hr/>\n<h2>Table of Contents</h2>\n<ul>\n<li>Intro. of the event</li>\n<li>Cast an eye over the contract</li>\n<li>What is Foundry!?</li>\n<li>Testing Time</li>\n<li>Conclusion</li>\n<li>Reference</li>\n</ul>\n<h3>Synchronization Link Tree</h3>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<hr/>\n<h2>Intro.</h2>\n<h3>iParking NFT &amp; What happened?</h3>\n<p>簡單來說我對事件的起因和過程也不是有著什麼深度的了解，主要接收資訊的來源也就是以下兩者，在這邊我就附上連結讓大家自行參考了！</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<h3>Motivation</h3>\n<p>我發現好像沒有看到人選擇以在合約部屬「前」會進行「測試」的角度來看這次的事件，而是在錯誤發生「後」用「肉眼」觀察合約來找到問題在哪。講這些並不是要說任何評論這件事情的好前輩和好夥伴們的不是！真正錯的也就只有開發團隊，還有沒有做好事後處理的 MOD 而已。</p>\n<p>固然這次的錯誤是肉眼清晰可見的，而且水汪汪的大眼睛和大腦某些時候確實是比手打程式碼好用許多的哈哈哈哈。</p>\n<p>不過 Testing 是我認為成為一個職業工程師一個很重要的檻，我自認為距離一個真正的工程師還有不小的距離，所以想要藉此機會來練習一下用之前陳品大大告訴我的 Foundry 撰寫測試！</p>\n<p>這篇文章的主軸其實還是我自己學習 Foundry 的小小筆記，嘟嘟房只是一個活例而已 :D</p>\n<p>那在開始之前，先回到整個文章最一開始的宣告：</p>\n<p>⚠️ <strong>Of course this is only my personal thoughts, don't be too serious haha...</strong> ⚠️</p>\n<blockquote>\n<p>大家如果發現文中的任何錯誤或有任何想法，請不吝、大方地告訴我，因為還在學習中，我會無條件接受所有意見和想法的！</p>\n</blockquote>\n<hr/>\n<h2>Cast an eye over the contract</h2>\n<p>現在我們參考上述前輩和媒體的資料，大概率可以先把技術層面的問題定位在：</p>\n<ol>\n<li>使用 <code>array</code> 這個資料結構來實作白名單系統</li>\n<li>Gas Limit 的設定問題</li>\n</ol>\n<p>那是時候來看程式碼啦！</p>\n<p></p>\n<h3>The path of the Contract Inheritance</h3>\n<p>這邊基本上我是順過去的，我猜嘟嘟房的工程師應該，應該，應該沒有特別去改這些繼承而來的合約內容吧！如果有的話我先道歉&gt;&lt;</p>\n<pre></pre>\n<p>但其實 OpenZeppelin 裡面有許多用不到的東西（變數、資料結構、宣告等）可以刪掉，能藉此來把 Gas Fee 降低。所以我自己在寫 Project 的時候都會習慣不要直接繼承 Github 上面的內容，而是把需要的東西貼過來一個一個改成想要的樣子。</p>\n<p>OpenZeppelin 的安全性和便利性是許多人所稱許的，可對我們這些科學家/工程師（像我這種菜雞可能是半個）來說，細細的斟酌一下我們要使用的東西也蠻重要的對吧！</p>\n<p>如果自己隨便亂改然後合約反而出現 Bug，那確實是拿石頭砸自己腳。我就很常這樣，哈哈...</p>\n<blockquote>\n<p>不過畢竟工作是有收薪水的，不管是繼承函式庫還是呼叫 API 都得要更小心。隨著我自己更深入地了解這門技術，才發現很多時候程式碼不是只有 Copy-Paste 那麼簡單。</p>\n</blockquote>\n<h3>CarMan</h3>\n<p>那我們就直接看到繼承了歷代先祖先烈們的遺產，準備迎來人生曙光的最後主合約吧！</p>\n<p>我並不會非常仔細的一一講解合約裡面的每個變數、函式的細節，這邊就是去大概摸出合約裡面有什麼東西而已。那希望大家隨著我文中的引用程式碼一起來看看裡面到底都寫了什麼吧！</p>\n<p>最開始都是宣告版本、宣告合約以及繼承，進到合約之後先宣告了一些常數：</p>\n<pre></pre>\n<p>馬上就遇到第一個被大家拿出來鞭的小夥伴，<code>array</code> 型態的 <code>whitelistedAddresses</code>：</p>\n<pre></pre>\n<p>負責接收初始化參數們的建構子，還有指到 NFT Metadata 的 <code>baseURI</code>，如果是存在 IPFS 的話那就是他的 CID：</p>\n<pre></pre>\n<p>給 VIP 們 <code>mint</code> 的函式：</p>\n<pre></pre>\n<p>預售用的 <code>mint</code> 函式：</p>\n<pre></pre>\n<p>公售用的 <code>mint</code> 函式：</p>\n<pre></pre>\n<p>判斷當前訊息傳遞者（如果是交易或者 <code>mint</code> 那 <code>msg.sender</code> 自然是消費者）是否為白名單成員：</p>\n<pre></pre>\n<p>正常的 NFT 合約有的 <code>tokenURI</code>：</p>\n<pre></pre>\n<p>關於一些鑄造函式的啟動 &amp; 關閉條件。</p>\n<pre></pre>\n<p>是一些擁有管理權的人們才能呼叫的函式。通常這種函式越多我覺得就越中心化，不過既然一切都是透明且清楚明白的寫在程式碼上，其實 sign 了就代表我們同意接受這個合約對吧！</p>\n<pre></pre>\n<p>控制權，在這個合約裡面也算是管理權的人員管理函式：</p>\n<pre></pre>\n<p>賺了錢記得要把錢拿出來的 <code>withdraw</code> 函式：</p>\n<pre></pre>\n<hr/>\n<h2>What is Foundry!?</h2>\n<h3>Unit Testing of Smart Contract</h3>\n<p>過往我們在進行 Testing 的時候無非是使用 Hardhat, Truffle, DappTools 等撰寫 Javascript/ Typescript 語法的測試，最後搭配 Ganache, Infura 等來服用。其他藥物還會包含 ethers.js, mocha, waffle, chai 之類的 blablabla，大家自行體會 :D</p>\n<p>但有寫過的人可能都知道，在我們的 node_modules 裡面應該充滿了各式各樣的 dependencies，做任何開發之前都要先來一套刪套件、重載套件、降版本、環境變數之類的組合拳，也算是夠惱人的...</p>\n<p>雖然 Javascript 已經是一個人手一把的利器，但身為一個撰寫 Solidity 的工程師測試卻要用另外一個語言來寫，總是會覺得哪裡怪怪的（嗎）。更不用說 Big Number 這個套件某些時候還會造成一些問題。</p>\n<p>不過現在能夠用 Solidity 一劑打天下的疫苗出現了，那就是效果快狠準的 Foundry！（掌聲歡迎??）</p>\n<h3>Introduction</h3>\n<p> 是一個使用 Rust 建置的開發工具，它自稱為以太坊所有開發環境中最快、最有彈性、擴充性最強的一款。連官方的 github 中都自己拿來和知名工具 dapptools 互相比較（理所當然是大勝，不然不會拿出來比）。</p>\n<p>Foundry 能夠從眾多工具中脫穎而出的特點除了快速之外，還有以 Solidity 撰寫測試這個特質，待會我們會有機會細細品味的！</p>\n<h3>Comparison</h3>\n<p>以下是一些比較基準和相關敘述，翻譯於 Foundry 官方文件：</p>\n<p>Forge 利用  ，在編譯和測試的表現上都有非常快的速度。</p>\n<table>\n<thead>\n<tr>\n<th>Project</th>\n<th>Forge</th>\n<th>DappTools</th>\n<th>Speedup</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>28.6s</td>\n<td>2m36s</td>\n<td>5.45x</td>\n</tr>\n<tr>\n<td></td>\n<td>6s</td>\n<td>46s</td>\n<td>7.66x</td>\n</tr>\n<tr>\n<td></td>\n<td>11s</td>\n<td>40s</td>\n<td>3.63x</td>\n</tr>\n<tr>\n<td></td>\n<td>1.4s</td>\n<td>5.5s</td>\n<td>3.9x</td>\n</tr>\n</tbody>\n</table>\n<p>當我們在 著名的函式庫  時，Hardhat 耗費了 15.244s 的時間編譯，而 Forge 只需要 9.449s (~4s cached)。</p>\n<h3>What features can use</h3>\n<p>Foundry 由以下兩者組成：</p>\n<ul>\n<li>\n： 就像我們平常使用的其他開發工具一樣，是一個 Ethereum 的測試框架。</li>\n<li>\n：支援多種客戶端功能，像是與 EVM 智能合約互動、傳遞交易、取得鏈上資訊等，就像一把瑞士刀一樣（官方文件寫的）。</li>\n</ul>\n<p>來自官方的 Foundry 特性：</p>\n<ul>\n<li>Fast &amp; flexible compilation pipeline\n<ul>\n<li>Automatic Solidity compiler version detection &amp; installation (under ~/.svm)</li>\n<li>Incremental compilation &amp; caching: Only changed files are re-compiled</li>\n<li>Parallel compilation</li>\n<li>Non-standard directory structures support (e.g. Hardhat repos)</li>\n</ul>\n</li>\n<li>Tests are written in Solidity (like in DappTools)</li>\n<li>Fast fuzz testing with shrinking of inputs &amp; printing of counter-examples</li>\n<li>Fast remote RPC forking mode, leveraging Rust's async infrastructure like tokio</li>\n<li>Flexible debug logging\n<ul>\n<li>Dapptools-style, using DsTest's emitted logs</li>\n<li>Hardhat-style, using the popular console.sol contract</li>\n</ul>\n</li>\n<li>Portable (5-10MB) &amp; easy to install without requiring Nix or any other package manager</li>\n<li>Fast CI with the Foundry GitHub action.</li>\n</ul>\n<h3>Download Foundry</h3>\n<p>如果作業系統是 Linux 或 macOS 最簡單的方法就是使用以下方法下載 Foundry：</p>\n<pre></pre>\n<p>下載完成之後再執行一次 <code>foundryup</code> 會將 Foundry 更新至最新版本，如果想要返回到指定版本，也可以使用指令 <code>foundryup -v $VERSION</code>。</p>\n<p>然而我自己是使用 Windows，下載的方式如下。</p>\n<p>在下載 Foundry 之前，我們的需要先準備好 Rust 和 Cargo，首先到 rustup.rs 下載 rust，然後執行：</p>\n<pre></pre>\n<p>這樣就可以同時準備好 Rust 和 Cargo，最後打開 CMD 使用以下指令就可以成功安裝 Foundry。</p>\n<pre></pre>\n<p>如果在下載過程中像我一樣遇到以下錯誤：</p>\n<pre></pre>\n<p>那就要下載 ，選擇 C++ Build Tools 然後重開機就可以解決了！下載大小約是 6 GB。</p>\n<h3>First Foundry Test</h3>\n<p>首先我們使用 <code>init</code> 初始化一個專案。</p>\n<pre></pre>\n<p>進到 <code>hello_foundry</code> 看看初始化之後在資料夾裡面出現了什麼：</p>\n<pre></pre>\n<p>forge CLI 將會創建兩個檔案目錄：<code>lib</code> 和 <code>src</code>。</p>\n<ul>\n<li>\n<code>lib</code> 包含了 testing contract (lib/ds-test/src/test.sol)，同時也有其他各式各樣測試合約的實作 demo(lib/ds-test/demo/demo.sol)</li>\n<li>\n<code>src</code> 放了我們寫的智能合約和測試的原始碼</li>\n</ul>\n<p>編譯：</p>\n<pre></pre>\n<p>進行測試：</p>\n<pre></pre>\n<h3>More Foundry Test</h3>\n<p>在 <code>$ iParking_foundry\\hello_foundry\\src\\Contract.sol</code> 中我們把合約修改成我們想要撰寫的其他合約：</p>\n<pre></pre>\n<p>在檔案 <code>test/Contract.t.sol</code> 中：</p>\n<pre></pre>\n<p>進行測試：</p>\n<pre></pre>\n<p>除了以上我們最熟悉的 <code>require</code> 之外，也可以使用以下方式進行測試：</p>\n<pre></pre>\n<p>我們還有更多酷炫的 assertions 語法可以用來測試合約，在 <code>lib/ds-test/src/test.sol</code> 中可以找到他們：</p>\n<ul>\n<li>邏輯運算 - <code>assertTrue</code>\n</li>\n<li>十進制相等 - <code>assertEqDecimal</code>\n</li>\n<li>大於、小於 - <code>assertGt</code>, <code>assertGe</code>, <code>assertLt</code>, <code>assertLe</code>\n</li>\n</ul>\n<h3>More features can use</h3>\n<p>Foundry 同樣也支持  測試。因為當我們一個一個函式都進行測試時，即便全部都成功 PASS，但在邊際測資中其實也很有可能會出現一些問題，導致 Under/Overflow 或其他 RE/ME 之類的錯誤。</p>\n<p>我們在測試函式中增加參數之後，Fuzzing 能夠讓 Solidity test runner 隨機選擇大量的參數輸入我們的函式。</p>\n<pre></pre>\n<p>在以上例子中 fuzzer 會自動地對 <code>x</code> 嘗試各種隨機數，如果他發現當前輸入會導致測試失敗，便會回傳錯誤，這時候就可以開始 debug 啦！</p>\n<p>進行測試：</p>\n<pre></pre>\n<p>從以上錯誤可以發現當參數輸入為 <code>57896044618658097711785492504343953926634992332820282019728792003956564819968</code> 之後會出現錯誤，來到  貼上這個數字之後會發現這個數字為 <code>5.789 * 10^76 ~= 2^255</code>。</p>\n<p>聽起來十分合理因為 <code>x</code> 的型態就是 <code>uint256</code>，所以如果要避免程式出現問題，勢必要在函式裡面增加一些關於型態的異常處理敘述。</p>\n<p>未來 Foundry 除了Fuzz Testing 之外，還會支援：</p>\n<ul>\n<li>Invariant Testing</li>\n<li>Symbolic Execution</li>\n<li>Mutation Testing</li>\n</ul>\n<p>Give me more information!!</p>\n<ul>\n<li>\n\n</li>\n</ul>\n<p>Give me more more more documentation!!!</p>\n<ul>\n<li>\n\n</li>\n<li>\n.</li>\n</ul>\n<hr/>\n<h2>⚗ Testing Time</h2>\n<h3>Initialization &amp; Preparation</h3>\n<p>打開一個空資料夾，使用 <code>init</code> 來初始化專案：</p>\n<pre></pre>\n<p>因為我們要繼承許多 OpenZeppelin 的合約，所以這邊先將其導入到專案的 src 裡面。</p>\n<blockquote>\n<p>其實感覺不是要這樣子做，但這邊如果有正確的做法拜託提供給我 ?</p>\n</blockquote>\n<pre></pre>\n<p>在 <code>$ iParking_foundry\\src\\Contract.sol</code> 中我們把合約修改成嘟嘟房的 NFT 合約（記得要 import 要繼承的列祖列宗們）：</p>\n<pre></pre>\n<p>同時也先把 <code>Contract.t.sol</code> 檔案中的測試合約準備好：</p>\n<pre></pre>\n<p>建置並測試專案看編譯有沒有出現問題：</p>\n<pre></pre>\n<h3>Unit Testing</h3>\n<p>目標主要是看 <code>preSaleMint()</code> 這個函式的運作狀況，說到底我這邊也是屬於一種馬後炮的行為，因為我也懶得寫別的測試哈哈哈哈哈。</p>\n<p>廢話不多說，直接開測：</p>\n<pre></pre>\n<p>首先就是先宣告版本，這邊我除了把主合約宣告進來之外，來宣告了 <code>DEPLOYER_ADDRESS</code> 來存合約 deployer 的地址；以及 <code>temp</code> 來暫存之後要增長的白名單。</p>\n<pre></pre>\n<p>這段程式碼有很多個重點：</p>\n<p>一、<code>DEPLOYER_ADDRESS = carman.owner();</code>：</p>\n<p>這個敘述中我們首先需要知道 <code>msg.sender</code> 是誰，因為在 deploy 合約的時候決定 <code>owner</code> 是誰的方法就是看最一開始的 <code>msg.sender</code>。<br/>\n我們可以從 <code>foundry.toml</code> 以及  中得到各個環境變數、全域變數的設定檔與其預設值是多少。</p>\n<p>二、<code>carman.addController(DEPLOYER_ADDRESS);</code>：</p>\n<p>這是除了陣列存白名單外我覺得最弔詭的地方，那就是我在主合約裡面沒有看見他們把 <code>owner</code> 在建構子裡面就設定為 <code>Controller</code>。然而大部分的功能函式居然都是需要 <code>require(Controller)</code> 而不是使用 <code>onlyOwner</code> 的 <code>modifier</code>。所以我就在這邊幫自己（deployer）宣告了。</p>\n<p>三、增長白名單：</p>\n<pre></pre>\n<p>主要的重點為如何在合約中隨機製造帳戶地址，然後把他們都加進去 <code>temp</code> 這個陣列，最後再一次 <code>push</code> 到 <code>whitelistedAddresses</code> 中。</p>\n<p>接下來下一個程式碼讓我苦惱超級久，因為如果沒有實作 <code>_checkOnERC721Received</code> 的話，在直接宣告 <code>_safeMint()</code> 以後會瘋狂出現以下錯誤：</p>\n<pre></pre>\n<p>根據我查到的資料 <code>_checkOnERC721Received</code> 有一個 verification logic 存在，如果今天 <code>to</code> 的地址是一個合約而不是 EOA，那就需要實作它的 body，這樣才可以在 ERC-721 的介面裡面回傳正確的 4 bytes hash。</p>\n<pre></pre>\n<p>第一個測試，這邊先試試水溫看自己（Deployer）能不能夠鑄造幾個 NFT。</p>\n<pre></pre>\n<p>第二個測試，這邊要使用 Foundry 提供的一個很酷的功能，那就是我們可以把自己的身分轉變成其他帳戶，藉此來以不同角度測試合約。</p>\n<p>首先我們要宣告 <code>CheatCodes</code> 的介面，之後在測試合約裡面宣告 <code>cheats</code>。最後只要在我們想要測試的合約裡面加上 <code>cheats.prank(address(0));</code> 就可以把自己的角度轉成 <code>address(0)</code>。</p>\n<pre></pre>\n<p>進行測試：</p>\n<pre></pre>\n<h3>Gas Report</h3>\n<p>Foundry 還有一個非常有趣的功能那就是 Gas Report：</p>\n<pre></pre>\n<p>這個 Gas 果然是消耗驚人，如果要發現這個錯誤的話，在 <code>foundry.toml</code> 中就需要把 <code>gasLimit</code> 設定成我們想要的大小來控制，或者使用其他辦法之類的 :D</p>\n<hr/>\n<h2>Conclusion</h2>\n<h3>Why do I not correct the contract</h3>\n<p>市面上有許多實作的例子，無論是最基本的 mapping，酷炫的 Merkle Tree(Hash Tree)，或甚至是稍微中心化但更易於管理和節省開銷的 Backend Signature Whitelist Data Base，其實多查一點資料應該是會選擇避免掉用 array 這個資料結構來存白名單的。</p>\n<p>不過因為我是一個菜鳥，我認識的所有會寫 Solidity 的人裡面有 99% 都比自己強哈哈哈哈哈，所以修正智能合約這種事情我先躲開好了！做 Auditing 的大師不少，還是讓他們來吧 :D</p>\n<h3>My point of view</h3>\n<p>固然使用 <code>array</code> 和遍歷這樣子的演算法來尋找白名單能稱得上是詭譎，不過從 Web2 跨足到 Web3 的公司們，其實有很多東西都需要學習。</p>\n<p>而且在這個才剛開始要蓬勃發展的產業與技術中，許多人也都還在摸索最好的技術模式、商業模式。也許給他們一個改善的機會，累積越來越多這樣的先例某種程度上也能夠讓這個產業邁向更好的發展！</p>\n<p>那希望我可以多多多多多多增進自己寫測試的實力，畢竟寫出一個會動的合約並不難，但要寫出一個不會出錯的難如登天阿！</p>\n<hr/>\n<h2>Reference</h2>\n<h3>Foundry</h3>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<h3>ERC-721 Contract Unit Testing</h3>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "tags: swfLAB\n⚠️ Of course this is only my personal thoughts, don't be too serious haha... ⚠️\nFinal Updated: 2022/3/17\n\nTable of Contents\n\nIntro. of the event\nCast an eye over the contract\nWhat is Foundry!?\nTesting Time\nConclusion\nReference\n\nSynchronization Link Tree\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIntro.\niParking NFT & What happened?\n簡單來說我對事件的起因和過程也不是有著什麼深度的了解，主要接收資訊的來源也就是以下兩者，在這邊我就附上連結讓大家自行參考了！\n\n\n\n\n\n\n\n\nMotivation\n我發現好像沒有看到人選擇以在合約部屬「前」會進行「測試」的角度來看這次的事件，而是在錯誤發生「後」用「肉眼」觀察合約來找到問題在哪。講這些並不是要說任何評論這件事情的好前輩和好夥伴們的不是！真正錯的也就只有開發團隊，還有沒有做好事後處理的 MOD 而已。\n固然這次的錯誤是肉眼清晰可見的，而且水汪汪的大眼睛和大腦某些時候確實是比手打程式碼好用許多的哈哈哈哈。\n不過 Testing 是我認為成為一個職業工程師一個很重要的檻，我自認為距離一個真正的工程師還有不小的距離，所以想要藉此機會來練習一下用之前陳品大大告訴我的 Foundry 撰寫測試！\n這篇文章的主軸其實還是我自己學習 Foundry 的小小筆記，嘟嘟房只是一個活例而已 :D\n那在開始之前，先回到整個文章最一開始的宣告：\n⚠️ Of course this is only my personal thoughts, don't be too serious haha... ⚠️\n\n大家如果發現文中的任何錯誤或有任何想法，請不吝、大方地告訴我，因為還在學習中，我會無條件接受所有意見和想法的！\n\n\nCast an eye over the contract\n現在我們參考上述前輩和媒體的資料，大概率可以先把技術層面的問題定位在：\n\n使用 array 這個資料結構來實作白名單系統\nGas Limit 的設定問題\n\n那是時候來看程式碼啦！\n\nThe path of the Contract Inheritance\n這邊基本上我是順過去的，我猜嘟嘟房的工程師應該，應該，應該沒有特別去改這些繼承而來的合約內容吧！如果有的話我先道歉><\n\n但其實 OpenZeppelin 裡面有許多用不到的東西（變數、資料結構、宣告等）可以刪掉，能藉此來把 Gas Fee 降低。所以我自己在寫 Project 的時候都會習慣不要直接繼承 Github 上面的內容，而是把需要的東西貼過來一個一個改成想要的樣子。\nOpenZeppelin 的安全性和便利性是許多人所稱許的，可對我們這些科學家/工程師（像我這種菜雞可能是半個）來說，細細的斟酌一下我們要使用的東西也蠻重要的對吧！\n如果自己隨便亂改然後合約反而出現 Bug，那確實是拿石頭砸自己腳。我就很常這樣，哈哈...\n\n不過畢竟工作是有收薪水的，不管是繼承函式庫還是呼叫 API 都得要更小心。隨著我自己更深入地了解這門技術，才發現很多時候程式碼不是只有 Copy-Paste 那麼簡單。\n\nCarMan\n那我們就直接看到繼承了歷代先祖先烈們的遺產，準備迎來人生曙光的最後主合約吧！\n我並不會非常仔細的一一講解合約裡面的每個變數、函式的細節，這邊就是去大概摸出合約裡面有什麼東西而已。那希望大家隨著我文中的引用程式碼一起來看看裡面到底都寫了什麼吧！\n最開始都是宣告版本、宣告合約以及繼承，進到合約之後先宣告了一些常數：\n\n馬上就遇到第一個被大家拿出來鞭的小夥伴，array 型態的 whitelistedAddresses：\n\n負責接收初始化參數們的建構子，還有指到 NFT Metadata 的 baseURI，如果是存在 IPFS 的話那就是他的 CID：\n\n給 VIP 們 mint 的函式：\n\n預售用的 mint 函式：\n\n公售用的 mint 函式：\n\n判斷當前訊息傳遞者（如果是交易或者 mint 那 msg.sender 自然是消費者）是否為白名單成員：\n\n正常的 NFT 合約有的 tokenURI：\n\n關於一些鑄造函式的啟動 & 關閉條件。\n\n是一些擁有管理權的人們才能呼叫的函式。通常這種函式越多我覺得就越中心化，不過既然一切都是透明且清楚明白的寫在程式碼上，其實 sign 了就代表我們同意接受這個合約對吧！\n\n控制權，在這個合約裡面也算是管理權的人員管理函式：\n\n賺了錢記得要把錢拿出來的 withdraw 函式：\n\n\nWhat is Foundry!?\nUnit Testing of Smart Contract\n過往我們在進行 Testing 的時候無非是使用 Hardhat, Truffle, DappTools 等撰寫 Javascript/ Typescript 語法的測試，最後搭配 Ganache, Infura 等來服用。其他藥物還會包含 ethers.js, mocha, waffle, chai 之類的 blablabla，大家自行體會 :D\n但有寫過的人可能都知道，在我們的 node_modules 裡面應該充滿了各式各樣的 dependencies，做任何開發之前都要先來一套刪套件、重載套件、降版本、環境變數之類的組合拳，也算是夠惱人的...\n雖然 Javascript 已經是一個人手一把的利器，但身為一個撰寫 Solidity 的工程師測試卻要用另外一個語言來寫，總是會覺得哪裡怪怪的（嗎）。更不用說 Big Number 這個套件某些時候還會造成一些問題。\n不過現在能夠用 Solidity 一劑打天下的疫苗出現了，那就是效果快狠準的 Foundry！（掌聲歡迎??）\nIntroduction\n 是一個使用 Rust 建置的開發工具，它自稱為以太坊所有開發環境中最快、最有彈性、擴充性最強的一款。連官方的 github 中都自己拿來和知名工具 dapptools 互相比較（理所當然是大勝，不然不會拿出來比）。\nFoundry 能夠從眾多工具中脫穎而出的特點除了快速之外，還有以 Solidity 撰寫測試這個特質，待會我們會有機會細細品味的！\nComparison\n以下是一些比較基準和相關敘述，翻譯於 Foundry 官方文件：\nForge 利用  ，在編譯和測試的表現上都有非常快的速度。\n\n\n\nProject\nForge\nDappTools\nSpeedup\n\n\n\n\n\n28.6s\n2m36s\n5.45x\n\n\n\n6s\n46s\n7.66x\n\n\n\n11s\n40s\n3.63x\n\n\n\n1.4s\n5.5s\n3.9x\n\n\n\n當我們在 著名的函式庫  時，Hardhat 耗費了 15.244s 的時間編譯，而 Forge 只需要 9.449s (~4s cached)。\nWhat features can use\nFoundry 由以下兩者組成：\n\n\n： 就像我們平常使用的其他開發工具一樣，是一個 Ethereum 的測試框架。\n\n：支援多種客戶端功能，像是與 EVM 智能合約互動、傳遞交易、取得鏈上資訊等，就像一把瑞士刀一樣（官方文件寫的）。\n\n來自官方的 Foundry 特性：\n\nFast & flexible compilation pipeline\n\nAutomatic Solidity compiler version detection & installation (under ~/.svm)\nIncremental compilation & caching: Only changed files are re-compiled\nParallel compilation\nNon-standard directory structures support (e.g. Hardhat repos)\n\n\nTests are written in Solidity (like in DappTools)\nFast fuzz testing with shrinking of inputs & printing of counter-examples\nFast remote RPC forking mode, leveraging Rust's async infrastructure like tokio\nFlexible debug logging\n\nDapptools-style, using DsTest's emitted logs\nHardhat-style, using the popular console.sol contract\n\n\nPortable (5-10MB) & easy to install without requiring Nix or any other package manager\nFast CI with the Foundry GitHub action.\n\nDownload Foundry\n如果作業系統是 Linux 或 macOS 最簡單的方法就是使用以下方法下載 Foundry：\n\n下載完成之後再執行一次 foundryup 會將 Foundry 更新至最新版本，如果想要返回到指定版本，也可以使用指令 foundryup -v $VERSION。\n然而我自己是使用 Windows，下載的方式如下。\n在下載 Foundry 之前，我們的需要先準備好 Rust 和 Cargo，首先到 rustup.rs 下載 rust，然後執行：\n\n這樣就可以同時準備好 Rust 和 Cargo，最後打開 CMD 使用以下指令就可以成功安裝 Foundry。\n\n如果在下載過程中像我一樣遇到以下錯誤：\n\n那就要下載 ，選擇 C++ Build Tools 然後重開機就可以解決了！下載大小約是 6 GB。\nFirst Foundry Test\n首先我們使用 init 初始化一個專案。\n\n進到 hello_foundry 看看初始化之後在資料夾裡面出現了什麼：\n\nforge CLI 將會創建兩個檔案目錄：lib 和 src。\n\n\nlib 包含了 testing contract (lib/ds-test/src/test.sol)，同時也有其他各式各樣測試合約的實作 demo(lib/ds-test/demo/demo.sol)\n\nsrc 放了我們寫的智能合約和測試的原始碼\n\n編譯：\n\n進行測試：\n\nMore Foundry Test\n在 $ iParking_foundry\\hello_foundry\\src\\Contract.sol 中我們把合約修改成我們想要撰寫的其他合約：\n\n在檔案 test/Contract.t.sol 中：\n\n進行測試：\n\n除了以上我們最熟悉的 require 之外，也可以使用以下方式進行測試：\n\n我們還有更多酷炫的 assertions 語法可以用來測試合約，在 lib/ds-test/src/test.sol 中可以找到他們：\n\n邏輯運算 - assertTrue\n\n十進制相等 - assertEqDecimal\n\n大於、小於 - assertGt, assertGe, assertLt, assertLe\n\n\nMore features can use\nFoundry 同樣也支持  測試。因為當我們一個一個函式都進行測試時，即便全部都成功 PASS，但在邊際測資中其實也很有可能會出現一些問題，導致 Under/Overflow 或其他 RE/ME 之類的錯誤。\n我們在測試函式中增加參數之後，Fuzzing 能夠讓 Solidity test runner 隨機選擇大量的參數輸入我們的函式。\n\n在以上例子中 fuzzer 會自動地對 x 嘗試各種隨機數，如果他發現當前輸入會導致測試失敗，便會回傳錯誤，這時候就可以開始 debug 啦！\n進行測試：\n\n從以上錯誤可以發現當參數輸入為 57896044618658097711785492504343953926634992332820282019728792003956564819968 之後會出現錯誤，來到  貼上這個數字之後會發現這個數字為 5.789 * 10^76 ~= 2^255。\n聽起來十分合理因為 x 的型態就是 uint256，所以如果要避免程式出現問題，勢必要在函式裡面增加一些關於型態的異常處理敘述。\n未來 Foundry 除了Fuzz Testing 之外，還會支援：\n\nInvariant Testing\nSymbolic Execution\nMutation Testing\n\nGive me more information!!\n\n\n\n\n\nGive me more more more documentation!!!\n\n\n\n\n\n.\n\n\n⚗ Testing Time\nInitialization & Preparation\n打開一個空資料夾，使用 init 來初始化專案：\n\n因為我們要繼承許多 OpenZeppelin 的合約，所以這邊先將其導入到專案的 src 裡面。\n\n其實感覺不是要這樣子做，但這邊如果有正確的做法拜託提供給我 ?\n\n\n在 $ iParking_foundry\\src\\Contract.sol 中我們把合約修改成嘟嘟房的 NFT 合約（記得要 import 要繼承的列祖列宗們）：\n\n同時也先把 Contract.t.sol 檔案中的測試合約準備好：\n\n建置並測試專案看編譯有沒有出現問題：\n\nUnit Testing\n目標主要是看 preSaleMint() 這個函式的運作狀況，說到底我這邊也是屬於一種馬後炮的行為，因為我也懶得寫別的測試哈哈哈哈哈。\n廢話不多說，直接開測：\n\n首先就是先宣告版本，這邊我除了把主合約宣告進來之外，來宣告了 DEPLOYER_ADDRESS 來存合約 deployer 的地址；以及 temp 來暫存之後要增長的白名單。\n\n這段程式碼有很多個重點：\n一、DEPLOYER_ADDRESS = carman.owner();：\n這個敘述中我們首先需要知道 msg.sender 是誰，因為在 deploy 合約的時候決定 owner 是誰的方法就是看最一開始的 msg.sender。\n我們可以從 foundry.toml 以及  中得到各個環境變數、全域變數的設定檔與其預設值是多少。\n二、carman.addController(DEPLOYER_ADDRESS);：\n這是除了陣列存白名單外我覺得最弔詭的地方，那就是我在主合約裡面沒有看見他們把 owner 在建構子裡面就設定為 Controller。然而大部分的功能函式居然都是需要 require(Controller) 而不是使用 onlyOwner 的 modifier。所以我就在這邊幫自己（deployer）宣告了。\n三、增長白名單：\n\n主要的重點為如何在合約中隨機製造帳戶地址，然後把他們都加進去 temp 這個陣列，最後再一次 push 到 whitelistedAddresses 中。\n接下來下一個程式碼讓我苦惱超級久，因為如果沒有實作 _checkOnERC721Received 的話，在直接宣告 _safeMint() 以後會瘋狂出現以下錯誤：\n\n根據我查到的資料 _checkOnERC721Received 有一個 verification logic 存在，如果今天 to 的地址是一個合約而不是 EOA，那就需要實作它的 body，這樣才可以在 ERC-721 的介面裡面回傳正確的 4 bytes hash。\n\n第一個測試，這邊先試試水溫看自己（Deployer）能不能夠鑄造幾個 NFT。\n\n第二個測試，這邊要使用 Foundry 提供的一個很酷的功能，那就是我們可以把自己的身分轉變成其他帳戶，藉此來以不同角度測試合約。\n首先我們要宣告 CheatCodes 的介面，之後在測試合約裡面宣告 cheats。最後只要在我們想要測試的合約裡面加上 cheats.prank(address(0)); 就可以把自己的角度轉成 address(0)。\n\n進行測試：\n\nGas Report\nFoundry 還有一個非常有趣的功能那就是 Gas Report：\n\n這個 Gas 果然是消耗驚人，如果要發現這個錯誤的話，在 foundry.toml 中就需要把 gasLimit 設定成我們想要的大小來控制，或者使用其他辦法之類的 :D\n\nConclusion\nWhy do I not correct the contract\n市面上有許多實作的例子，無論是最基本的 mapping，酷炫的 Merkle Tree(Hash Tree)，或甚至是稍微中心化但更易於管理和節省開銷的 Backend Signature Whitelist Data Base，其實多查一點資料應該是會選擇避免掉用 array 這個資料結構來存白名單的。\n不過因為我是一個菜鳥，我認識的所有會寫 Solidity 的人裡面有 99% 都比自己強哈哈哈哈哈，所以修正智能合約這種事情我先躲開好了！做 Auditing 的大師不少，還是讓他們來吧 :D\nMy point of view\n固然使用 array 和遍歷這樣子的演算法來尋找白名單能稱得上是詭譎，不過從 Web2 跨足到 Web3 的公司們，其實有很多東西都需要學習。\n而且在這個才剛開始要蓬勃發展的產業與技術中，許多人也都還在摸索最好的技術模式、商業模式。也許給他們一個改善的機會，累積越來越多這樣的先例某種程度上也能夠讓這個產業邁向更好的發展！\n那希望我可以多多多多多多增進自己寫測試的實力，畢竟寫出一個會動的合約並不難，但要寫出一個不會出錯的難如登天阿！\n\nReference\nFoundry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nERC-721 Contract Unit Testing",
        "content_code_info": [
            {
                "language": "mermaid",
                "content": "%%{init: {'theme': 'forest' } }%%\ngraph TD;\n    library-{Strings, Address}\n    interface-IERC721Receiver-->ERC721\n    IERC165-->IERC721;\n    IERC721-->IERC721Enumerable;\n    IERC165-->ERC165;\n    IERC721-->IERC721Metadata;\n    IERC721Metadata-->ERC721;\n    IERC721-->ERC721;\n    ERC165-->ERC721;\n    Context-->ERC721;\n    IERC721Enumerable-->ERC721Enumerable;\n    ERC721-->ERC721Enumerable;\n    Context--->Ownable;\n    ERC721Enumerable-->CarMan;\n    Ownable-->CarMan;\n"
            },
            {
                "language": "javascript",
                "content": "pragma solidity >=0.7.0 <0.9.0;\n\ncontract CarMan is ERC721Enumerable, Ownable {\n  using Strings for uint256;\n\n  string public baseURI;\n  string public baseExtension = \".json\";\n  string public notRevealedUri;\n  uint256 public cost = 0.5 ether;\n  uint256 public maxSupply = 2000;\n  uint256 public maxMintAmount = 10;\n  uint256 public nftPerAddressLimit = 10;\n  uint256 public currentPhaseMintMaxAmount = 110;\n\n  uint32 public publicSaleStart = 1647136800;\n  uint32 public preSaleStart = 1646964000;\n  uint32 public vipSaleStart = 1646618400;\n\n  bool public publicSalePaused = true;\n  bool public preSalePaused = true;\n  bool public vipSalePaused = true;\n"
            },
            {
                "language": "javascript",
                "content": "  bool public revealed = false;\n  bool public onlyWhitelisted = true;\n  address[] whitelistedAddresses;\n\n  mapping(address => uint256) addressMintedBalance;\n  mapping(address => uint256) vipMintAmount;\n\n  // addresses to manage this contract\n  mapping(address => bool) controllers;\n"
            },
            {
                "language": "javascript",
                "content": "  constructor(\n    string memory _name,\n    string memory _symbol,\n    string memory _initBaseURI,\n    string memory _initNotRevealedUri\n  ) ERC721(_name, _symbol) {\n    baseURI = _initBaseURI;\n    notRevealedUri = _initNotRevealedUri;\n  }\n\n  // internal\n  function _baseURI() internal view virtual override returns (string memory) {\n    return baseURI;\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  // public\n  function vipSaleMint(uint256 _mintAmount) public {\n    require(_mintAmount > 0, \"Mint Amount should be bigger than 0\");\n    require((!vipSalePaused)&&(vipSaleStart <= block.timestamp), \"Not Reach VIP Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount > 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount <= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount <= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount <= maxSupply, \"max NFT limit exceeded\");\n\n    require(vipMintAmount[msg.sender] != 0, \"user is not VIP\");\n    uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n    uint256 vipMintCount = vipMintAmount[msg.sender];\n \n    require(ownerMintedCount + _mintAmount <= vipMintCount, \"max VIP Mint Amount exceeded\");\n    require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, \"max NFT per address exceeded\");\n    \n    for (uint256 i = 1; i <= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n\n"
            },
            {
                "language": "javascript",
                "content": "  function preSaleMint(uint256 _mintAmount) public payable {\n    require(_mintAmount > 0, \"Mint Amount should be bigger than 0\");\n    require((!preSalePaused)&&(preSaleStart <= block.timestamp), \"Not Reach Pre Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount > 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount <= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount <= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount <= maxSupply, \"max NFT limit exceeded\");\n\n    if (msg.sender != owner()) {\n        if(onlyWhitelisted == true) {\n            require(isWhitelisted(msg.sender), \"user is not whitelisted\");\n            uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n            require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, \"max NFT per address exceeded\");\n        }\n        require(msg.value >= cost * _mintAmount, \"insufficient funds\");\n    }\n    \n    for (uint256 i = 1; i <= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  function publicSaleMint(uint256 _mintAmount) public payable {\n    require(_mintAmount > 0, \"Mint Amount should be bigger than 0\");\n    require((!publicSalePaused)&&(publicSaleStart <= block.timestamp), \"Not Reach Public Sale Time\");\n  \n    uint256 supply = totalSupply();\n    require(_mintAmount > 0, \"need to mint at least 1 NFT\");\n    require(_mintAmount <= maxMintAmount, \"max mint amount per session exceeded\");\n    require(supply + _mintAmount <= currentPhaseMintMaxAmount, \"reach current Phase NFT limit\");\n    require(supply + _mintAmount <= maxSupply, \"max NFT limit exceeded\");\n\n    if (msg.sender != owner()) {\n        if(onlyWhitelisted == true) {\n            require(isWhitelisted(msg.sender), \"user is not whitelisted\");\n            uint256 ownerMintedCount = addressMintedBalance[msg.sender];\n            require(ownerMintedCount + _mintAmount <= nftPerAddressLimit, \"max NFT per address exceeded\");\n        }\n        require(msg.value >= cost * _mintAmount, \"insufficient funds\");\n    }\n    \n    for (uint256 i = 1; i <= _mintAmount; i++) {\n        addressMintedBalance[msg.sender]++;\n      _safeMint(msg.sender, supply + i);\n    }\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  function isWhitelisted(address _user) public view returns (bool) {\n    for (uint i = 0; i < whitelistedAddresses.length; i++) {\n      if (whitelistedAddresses[i] == _user) {\n          return true;\n      }\n    }\n    return false;\n  }\n\n  function walletOfOwner(address _owner) public view returns (uint256[] memory)\n  {\n    uint256 ownerTokenCount = balanceOf(_owner);\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\n    for (uint256 i; i < ownerTokenCount; i++) {\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\n    }\n    return tokenIds;\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  function tokenURI(uint256 tokenId) public view virtual override returns (string memory)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Metadata: URI query for nonexistent token\"\n    );\n    \n    if(revealed == false) {\n        return notRevealedUri;\n    }\n\n    string memory currentBaseURI = _baseURI();\n    return bytes(currentBaseURI).length > 0\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\n        : \"\";\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  function publicSaleIsActive() public view returns (bool) {\n    return ( (publicSaleStart <= block.timestamp) && (!publicSalePaused) );\n  }\n\n  function preSaleIsActive() public view returns (bool) {\n    return ( (preSaleStart <= block.timestamp) && (!preSalePaused) );\n  }\n\n  function vipSaleIsActive() public view returns (bool) {\n    return ( (vipSaleStart <= block.timestamp) && (!vipSalePaused) );\n  }\n\n  function checkVIPMintAmount(address _account) public view returns (uint256) {\n    return vipMintAmount[_account];\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  // for controller\n  function reveal(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    revealed = _state;\n  }\n  \n  function setNftPerAddressLimit(uint256 _limit) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    nftPerAddressLimit = _limit;\n  }\n  \n  function setCost(uint256 _newCost) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    cost = _newCost;\n  }\n\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    maxMintAmount = _newmaxMintAmount;\n  }\n\n  function setcurrentPhaseMintMaxAmount(uint256 _newPhaseAmount) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    currentPhaseMintMaxAmount = _newPhaseAmount;\n  }\n\n  function setPublicSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    publicSaleStart = timestamp;\n  }\n  \n  function setPreSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    preSaleStart = timestamp;\n  } \n\n  function setVIPSaleStart(uint32 timestamp) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    vipSaleStart = timestamp;\n  }\n\n  function setBaseURI(string memory _newBaseURI) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    baseURI = _newBaseURI;\n  }\n\n  function setBaseExtension(string memory _newBaseExtension) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    baseExtension = _newBaseExtension;\n  }\n  \n  function setNotRevealedURI(string memory _notRevealedURI) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    notRevealedUri = _notRevealedURI;\n  }\n\n  function setPreSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    preSalePaused = _state;\n  }\n\n  function setVIPSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    vipSalePaused = _state;\n  }\n\n  function setVIPMintAmount(address[] memory _accounts, uint256[] memory _amounts) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    require(_accounts.length == _amounts.length, \"accounts and amounts array length mismatch\");\n\n    for (uint256 i = 0; i < _accounts.length; ++i) {\n      vipMintAmount[_accounts[i]]=_amounts[i];\n    }\n  }\n\n  function setPublicSalePause(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    publicSalePaused = _state;\n  }\n  \n  function setOnlyWhitelisted(bool _state) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    onlyWhitelisted = _state;\n  }\n  \n  function whitelistUsers(address[] calldata _users) public {\n    require(controllers[msg.sender], \"Only controllers can operate this function\");\n    delete whitelistedAddresses;\n    whitelistedAddresses = _users;\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  //only owner\n \n   /**\n   * enables an address for management\n   * @param controller the address to enable\n   */\n  function addController(address controller) external onlyOwner {\n    controllers[controller] = true;\n  }\n\n  /**\n   * disables an address for management\n   * @param controller the address to disbale\n   */\n  function removeController(address controller) external onlyOwner {\n    controllers[controller] = false;\n  }\n"
            },
            {
                "language": "javascript",
                "content": "  function withdraw() public onlyOwner {\n    (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n    require(success);\n  }\n}\n"
            },
            {
                "language": "javascript",
                "content": "curl -L https://foundry.paradigm.xyz | bash\nfoundryup\n"
            },
            {
                "language": "javascript",
                "content": "rustup-init\n"
            },
            {
                "language": "javascript",
                "content": "cargo install --git https://github.com/gakonst/foundry --bins --locked\n"
            },
            {
                "language": "javascript",
                "content": "error: linker link.exe not found\n  |\n  = note: program not found\n\nnote: the msvc targets depend on the msvc linker but link.exe was not found\n\nnote: please ensure that VS 2013, VS 2015, VS 2017 or VS 2019 was installed with the Visual C++ option\n\nerror: could not compile proc-macro2 due to previous error\nwarning: build failed, waiting for other jobs to finish...\nerror: failed to compile `foundry-cli v0.1.0 (https://github.com/gakonst/foundry#d66f9d58)`, intermediate artifacts can be found at C:\\Users\\qazws\\AppData\\Local\\Temp\\cargo-installe6Rd6Y\n\nCaused by:\n  build failed\n"
            },
            {
                "language": "javascript",
                "content": "$ forge init hello_foundry\n"
            },
            {
                "language": "javascript",
                "content": "$ cd hello_foundry\n$ tree .\n.\n├── lib\n│   └── ds-test\n└── src\n    ├── Contract.sol\n    └── test\n        └── Contract.t.sol\n\n6 directories, 7 files\n"
            },
            {
                "language": "javascript",
                "content": "$ forge build\n>\n\u001b[2K\u001b[1m[\u001b[32m⠰\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠃\u001b[0;1m]\u001b[0m installing solc version \"0.8.10\"\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Successfully installed solc 0.8.10\n\u001b[2K\u001b[1m[\u001b[32m⠊\u001b[0;1m]\u001b[0m Compiling 3 files with 0.8.10\nCompiler run successful\n"
            },
            {
                "language": "javascript",
                "content": "$ forge test\n>\nNo files changed, compilation skipped\nRunning 1 test for ContractTest.json:ContractTest\n\u001b[32m[PASS]\u001b[0m testExample() (gas: 120)\n\n"
            },
            {
                "language": "javascript",
                "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ncontract Foo {\n  uint256 public x = 1;\n  function set(uint256 _x) external {\n    x = _x;\n  }\n\n  function double() external {\n    x = 2 * x;\n  }\n}\n"
            },
            {
                "language": "javascript",
                "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"ds-test/test.sol\";\nimport 'src/Contract.sol';\n\ncontract FooTest is DSTest {\n  Foo foo;\n\n  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    foo = new Foo();\n  }\n\n  // A simple unit test\n  function testDouble() public {\n    require(foo.x() == 1);\n    foo.double();\n    require(foo.x() == 2);\n  }\n\n  // A failing unit test (function name starts with `testFail`)\n  function testFailDouble() public {\n    require(foo.x() == 1);\n    foo.double();\n    require(foo.x() == 4);\n  }\n}\n"
            },
            {
                "language": "javascript",
                "content": "forge test\n>\n\u001b[2K\u001b[1m[\u001b[32m⠰\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Compiling 2 files with 0.8.10\nCompiler run successful\n\nRunning 2 tests for FooTest.json:FooTest\n\u001b[32m[PASS]\u001b[0m testDouble() (gas: 9316)\n\u001b[32m[PASS]\u001b[0m testFailDouble() (gas: 9290)\n"
            },
            {
                "language": "javascript",
                "content": "function testDouble() public {\n    assertEq(foo.x(), 1);\n    foo.double();\n    assertEq(foo.x(), 2);\n}\n"
            },
            {
                "language": "javascript",
                "content": "function testDoubleWithFuzzing(uint256 x) public {\n    foo.set(x);\n    require(foo.x() == x);\n    foo.double();\n    require(foo.x() == 2 * x);\n}\n"
            },
            {
                "language": "javascript",
                "content": "$ forge test\n>\n\u001b[2K\u001b[1m[\u001b[32m⠆\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠔\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n\nRunning 3 tests for FooTest.json:FooTest\n\u001b[32m[PASS]\u001b[0m testDouble() (gas: 9384)\n\u001b[31m[FAIL. Reason: Arithmetic over/underflow. Counterexample: calldata=0xc80b36b68000000000000000000000000000000000000000000000000000000000000000, args=[57896044618658097711785492504343953926634992332820282019728792003956564819968]]\u001b[0m testDoubleWithFuzzing(uint256) (runs: 4, μ: 2867, ~: 3823)\n\u001b[32m[PASS]\u001b[0m testFailDouble() (gas: 9290)\n\nFailed tests:\n\u001b[31m[FAIL. Reason: Arithmetic over/underflow. Counterexample: calldata=0xc80b36b68000000000000000000000000000000000000000000000000000000000000000, args=[57896044618658097711785492504343953926634992332820282019728792003956564819968]]\u001b[0m testDoubleWithFuzzing(uint256) (runs: 4, μ: 2867, ~: 3823)\n\nEncountered a total of \u001b[31m1\u001b[0m failing tests, \u001b[32m2\u001b[0m tests succeeded\n"
            },
            {
                "language": "javascript",
                "content": "$ forge init iParking_foundry\n"
            },
            {
                "language": "javascript",
                "content": "$ cd src\n$ tree\n>\n├─contracts\n│  ├─access\n│  ├─finance\n│  ├─governance\n│  │  ├─compatibility\n│  │  ├─extensions\n│  │  └─utils\n│  ├─interfaces\n│  ├─metatx\n│  ├─mocks\n│  │  ├─compound\n│  │  ├─ERC165\n│  │  ├─UUPS\n│  │  └─wizard\n│  ├─proxy\n│  │  ├─beacon\n│  │  ├─ERC1967\n│  │  ├─transparent\n│  │  └─utils\n│  ├─security\n│  ├─token\n│  │  ├─common\n│  │  ├─ERC1155\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  ├─ERC20\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  ├─ERC721\n│  │  │  ├─extensions\n│  │  │  ├─presets\n│  │  │  └─utils\n│  │  └─ERC777\n│  │      └─presets\n│  └─utils\n│      ├─cryptography\n│      ├─escrow\n│      ├─introspection\n│      ├─math\n│      └─structs\n└─test\n"
            },
            {
                "language": "javascript",
                "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./contracts/access/Ownable.sol\";\nimport \"./contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\ncontract CarMan is ERC721Enumerable, Ownable {\n\n    // skip the contract here...\n}\n"
            },
            {
                "language": "javascript",
                "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"ds-test/test.sol\";\nimport 'src/Contract.sol';\n\ncontract CarManTest is DSTest {\n  CarMan carman;\n\n  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    carman = new CarMan(\"CarMan_Metaverse\", \"CMM\", \"ipfs://QmYvJEw4LHBpaehH6mYZV9YXC372QSWL4BPFVJvUkKqRCg/\", \"ipfs://.../\");\n  }\n}\n"
            },
            {
                "language": "javascript",
                "content": "$ forge test\n>\n\u001b[2K\u001b[1m[\u001b[32m⠆\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠘\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n"
            },
            {
                "language": "javascript",
                "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"ds-test/test.sol\";\nimport '../Contract.sol';\n\ncontract CarManTest is DSTest {\n  CarMan carman;\n  address DEPLOYER_ADDRESS;\n  address[] public temp;\n  // skip the code...\n}\n"
            },
            {
                "language": "javascript",
                "content": "  // The state of the contract gets reset before each\n  // test is run, with the `setUp()` function being called\n  // each time after deployment. Think of this like a JavaScript\n  // `beforeEach` block\n  function setUp() public {\n    carman = new CarMan(\"CarMan_Metaverse\", \"CMM\", \"ipfs://QmYvJEw4LHBpaehH6mYZV9YXC372QSWL4BPFVJvUkKqRCg/\", \"ipfs://.../\");\n    DEPLOYER_ADDRESS = carman.owner();\n    carman.addController(DEPLOYER_ADDRESS); // deployer can addController\n    carman.setPreSalePause(false); // deployer/controller can setPreSalePause\n    for(uint i = 0; i < 800; i++){\n      address randomish = address(uint160(uint(keccak256(abi.encodePacked(i, blockhash(block.number))))));\n      temp.push(randomish);\n    }\n    temp.push(DEPLOYER_ADDRESS);\n    carman.whitelistUsers(temp);\n  }\n"
            },
            {
                "language": "javascript",
                "content": "for(uint i = 0; i < 800; i++){\n  address randomish = address(uint160(uint(keccak256(abi.encodePacked(i, blockhash(block.number))))));\n  temp.push(randomish);\n}\ntemp.push(DEPLOYER_ADDRESS);\ncarman.whitelistUsers(temp);\n"
            },
            {
                "language": "unknown",
                "content": "Running 1 test for CarManTest.json:CarManTest\n�[31m[FAIL. Reason: ERC721: transfer to non ERC721Receiver implementer]�[0m testDeployerCanMint() (gas: 192214)\n\nFailed tests:\n�[31m[FAIL. Reason: ERC721: transfer to non ERC721Receiver implementer]�[0m testDeployerCanMint() (gas: 192214)\n\nEncountered a total of �[31m1�[0m failing tests, �[32m0�[0m tests succeeded\n"
            },
            {
                "language": "javascript",
                "content": "  function onERC721Received(\n      address, \n      address, \n      uint256, \n      bytes calldata\n  )external pure returns(bytes4) {\n      return bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n  } \n  /*\n  solved reference: https://docs.klaytn.com/smart-contract/sample-contracts/erc-721/1-erc721#3-safetransferfrom-and-transferfrom\n  */\n"
            },
            {
                "language": "javascript",
                "content": "  function testDeployerCanMint(uint x) public {\n    assertEq(carman.totalSupply(), 0); // nothing minted before\n    if(x > carman.maxMintAmount()){\n      carman.preSaleMint(10);\n      assertEq(carman.totalSupply(), carman.maxMintAmount());\n    }\n    else if(x > 0){\n      carman.preSaleMint(x);\n      assertEq(carman.totalSupply(), x);\n    }\n  }\n"
            },
            {
                "language": "javascript",
                "content": "interface CheatCodes {\n  function prank(address) external;\n}\n\ncontract CarManTest is DSTest {\n  CheatCodes cheats = CheatCodes(HEVM_ADDRESS);\n    \n  // skip the code...\n    \n  function testFailNotWLMint() public {\n    cheats.prank(address(0));\n    carman.preSaleMint(10);\n  }  \n}\n"
            },
            {
                "language": "javascript",
                "content": "$ forge test\n>\n\u001b[2K\u001b[1m[\u001b[32m⠒\u001b[0;1m]\u001b[0m Compiling...\n\u001b[2K\u001b[1m[\u001b[32m⠑\u001b[0;1m]\u001b[0m Compiling 1 files with 0.8.10\nCompiler run successful\n\nRunning 3 tests for CarManTest.json:CarManTest\n\u001b[32m[PASS]\u001b[0m testDeployerCanMint(uint256) (runs: 256, μ: 972407, ~: 1198664)\n\u001b[32m[PASS]\u001b[0m testFailNotWLMint() (gas: 2080543)\n"
            },
            {
                "language": "javascript",
                "content": "$ forge test --gas-report\n>\n[2K\u001b[1m[\u001b[32m⠔\u001b[0;1m]\u001b[0m Compiling...\nNo files changed, compilation skipped\n\nRunning 2 tests for CarManTest.json:CarManTest\n\u001b[32m[PASS]\u001b[0m testDeployerCanMint(uint256) (runs: 256, μ: 908620, ~: 1198597)\n\u001b[32m[PASS]\u001b[0m testFailNotWLMint() (gas: 2080543)\n╭─────────────────┬─────────────────┬──────────┬──────────┬──────────┬─────────╮\n│ CarMan contract ┆                 ┆          ┆          ┆          ┆         │\n╞═════════════════╪═════════════════╪══════════╪══════════╪══════════╪═════════╡\n│ Deployment Cost ┆ Deployment Size ┆          ┆          ┆          ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ 3269119         ┆ 16173           ┆          ┆          ┆          ┆         │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ Function Name   ┆ min             ┆ avg      ┆ median   ┆ max      ┆ # calls │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ addController   ┆ 22718           ┆ 22718    ┆ 22718    ┆ 22718    ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ owner           ┆ 444             ┆ 444      ┆ 444      ┆ 444      ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ preSaleMint     ┆ 2070405         ┆ 2070405  ┆ 2070405  ┆ 2070405  ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ setPreSalePause ┆ 858             ┆ 858      ┆ 858      ┆ 858      ┆ 1       │\n├╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌┤\n│ whitelistUsers  ┆ 17822466        ┆ 17822466 ┆ 17822466 ┆ 17822466 ┆ 1       │\n╰─────────────────┴─────────────────┴──────────┴──────────┴──────────┴─────────╯\n"
            }
        ],
        "programming_languages": [
            "mermaid",
            "javascript"
        ],
        "word_seg_content_text": "tags :\nswfLAB\n⚠ ️\nOf\ncourse\nthis\nis\nonly\nmy\npersonal\nthoughts ,\ndon ' t\nbe\ntoo\nserious\nhaha ...\n⚠ ️\nFinal\nUpdated :\n2022 / 3 / 17\nTable\nof\nContents\nIntro .\nof\nthe\nevent\nCast\nan\neye\nover\nthe\ncontract\nWhat\nis\nFoundry ! ?\nTesting\nTime\nConclusion\nReference\nSynchronization\nLink\nTree\nIntro .\niParking\nNFT\n&\nWhat\nhappened ?\n簡單 來說 我 對 事件 的 起因 和 過程 也 不是 有著 什麼 深度 的 了解 ， 主要 接收 資訊 的 來源 也 就是 以下 兩者 ， 在 這邊 我 就 附上 連結 讓 大家 自行 參考 了 ！\nMotivation\n我 發現 好像 沒有 看到 人 選擇 以 在 合約 部屬 「 前 」 會 進行 「 測試 」 的 角度 來看 這次 的 事件 ， 而是 在 錯誤 發生 「 後 」 用 「 肉眼 」 觀察 合約 來 找到 問題 在 哪 。 講 這些 並 不是 要說 任何 評論 這件 事情 的 好 前輩 和 好 夥伴 們 的 不是 ！ 真正 錯 的 也 就 只有 開發 團隊 ， 還有 沒有 做好 事後 處理 的\nMOD\n而已 。\n固然 這次 的 錯誤 是 肉眼 清晰可見 的 ， 而且 水汪汪 的 大 眼睛 和 大腦 某些 時候 確實 是 比手 打 程式碼 好用 許多 的 哈哈哈哈 。\n不過\nTesting\n是 我 認為 成為 一個 職業 工程師 一個 很 重要 的 檻 ， 我 自認 為 距離 一個 真正 的 工程師 還有 不小 的 距離 ， 所以 想要 藉此機會 來 練習 一下 用 之前 陳品 大大 告訴 我 的\nFoundry\n撰寫 測試 ！\n這 篇文章 的 主軸 其實 還是 我 自己 學習\nFoundry\n的 小小 筆記 ， 嘟嘟 房 只是 一個 活例 而已\n: D\n那 在 開始 之前 ， 先回到 整個 文章 最一 開始 的 宣告 ：\n⚠ ️\nOf\ncourse\nthis\nis\nonly\nmy\npersonal\nthoughts ,\ndon ' t\nbe\ntoo\nserious\nhaha ...\n⚠ ️\n大家 如果 發現 文中 的 任何 錯誤 或 有 任何 想法 ， 請 不吝 、 大方 地 告訴 我 ， 因為 還在 學習 中 ， 我會 無條件 接受 所有 意見 和 想法 的 ！\nCast\nan\neye\nover\nthe\ncontract\n現在 我們 參考 上述 前輩 和 媒體 的 資料 ， 大 概率 可以 先 把 技術 層面 的 問題 定位 在 ：\n使用\narray\n這個 資料 結構 來 實作 白名單 系統\nGas\nLimit\n的 設定 問題\n那 是 時候 來看 程式碼 啦 ！\nThe\npath\nof\nthe\nContract\nInheritance\n這邊 基本上 我 是 順 過去 的 ， 我 猜 嘟嘟 房 的 工程師 應該 ， 應該 ， 應該 沒有 特別 去 改 這些 繼承 而來 的 合約 內容 吧 ！ 如果 有 的話 我先 道歉 > <\n但 其實\nOpenZeppelin\n裡面 有 許多 用 不到 的 東西 （ 變數 、 資料 結構 、 宣告 等 ） 可以 刪掉 ， 能 藉此 來 把\nGas\nFee\n降低 。 所以 我 自己 在 寫\nProject\n的 時候 都 會 習慣 不要 直接 繼承\nGithub\n上面 的 內容 ， 而是 把 需要 的 東西 貼過來 一個 一個 改成 想要 的 樣子 。\nOpenZeppelin\n的 安全性 和 便利性 是 許多 人 所 稱許 的 ， 可 對 我們 這些 科學家 / 工程師 （ 像 我 這種 菜雞 可能 是 半個 ） 來說 ， 細細的 斟酌一下 我們 要 使用 的 東西 也 蠻 重要 的 對 吧 ！\n如果 自己 隨便 亂改 然後 合約 反而 出現\nBug ， 那 確實 是 拿 石頭砸 自己 腳 。 我 就 很常 這樣 ， 哈哈 ...\n不過 畢竟 工作 是 有 收 薪水 的 ， 不管 是 繼承 函式 庫 還是 呼叫\nAPI\n都 得 要 更 小心 。 隨著 我 自己 更 深入 地 了解 這門 技術 ， 才 發現 很多 時候 程式碼 不是 只有\nCopy - Paste\n那麼 簡單 。\nCarMan\n那 我們 就 直接 看到 繼承 了 歷代 先祖 先烈 們 的 遺產 ， 準備 迎來 人生 曙光 的 最後 主 合約 吧 ！\n我並 不會 非常 仔細 的 一一 講解 合約 裡面 的 每個 變數 、 函式 的 細節 ， 這邊 就是 去 大概 摸 出 合約 裡面 有 什麼 東西 而已 。 那 希望 大家 隨著 我 文中 的 引用 程式碼 一 起來 看看 裡面 到底 都 寫 了 什麼 吧 ！\n最 開始 都 是 宣告 版本 、 宣告 合約 以及 繼承 ， 進 到 合約 之後 先 宣告 了 一些 常數 ：\n馬上 就 遇到 第一個 被 大家 拿 出來 鞭 的 小夥伴 ， array\n型態 的\nwhitelistedAddresses ：\n負責 接收 初始化 參數 們 的 建構 子 ， 還有 指 到\nNFT\nMetadata\n的\nbaseURI ， 如果 是 存在\nIPFS\n的話 那 就是 他 的\nCID ：\n給\nVIP\n們\nmint\n的 函式 ：\n預售 用 的\nmint\n函式 ：\n公售 用 的\nmint\n函式 ：\n判斷 當前 訊息 傳遞 者 （ 如果 是 交易 或者\nmint\n那\nmsg . sender\n自然 是 消費者 ） 是否 為 白名單 成員 ：\n正常 的\nNFT\n合約 有 的\ntokenURI ：\n關於 一些 鑄造 函式 的 啟動\n&\n關閉 條件 。\n是 一些 擁有 管理權 的 人們 才能 呼叫 的 函式 。 通常 這種 函式 越 多 我 覺得 就 越 中心化 ， 不過 既然 一切都是 透明 且 清楚 明白 的 寫 在 程式碼 上 ， 其實\nsign\n了 就 代表 我們 同意 接受 這個 合約 對 吧 ！\n控制權 ， 在 這個 合約 裡面 也 算是 管理權 的 人員 管理 函式 ：\n賺了錢 記得 要 把 錢 拿 出來 的\nwithdraw\n函式 ：\nWhat\nis\nFoundry ! ?\nUnit\nTesting\nof\nSmart\nContract\n過往 我們 在 進行\nTesting\n的 時候 無非 是 使用\nHardhat ,\nTruffle ,\nDappTools\n等 撰寫\nJavascript /\nTypescript\n語法 的 測試 ， 最後 搭配\nGanache ,\nInfura\n等 來 服用 。 其他 藥物 還會 包含\nethers . js ,\nmocha ,\nwaffle ,\nchai\n之類 的\nblablabla ， 大家 自行 體會\n: D\n但 有 寫過 的 人 可能 都 知道 ， 在 我們 的\nnode _ modules\n裡面 應該 充滿 了 各式各樣 的\ndependencies ， 做 任何 開發 之前 都 要 先來 一套 刪 套件 、 重載 套件 、 降 版本 、 環境 變數 之類 的 組合拳 ， 也 算是 夠 惱人 的 ...\n雖然\nJavascript\n已經 是 一個 人手 一把 的 利器 ， 但身 為 一個 撰寫\nSolidity\n的 工程師 測試 卻 要 用 另外 一個 語言 來 寫 ， 總是 會 覺得 哪裡 怪怪的 （ 嗎 ） 。 更 不用說\nBig\nNumber\n這個 套件 某些 時候 還會 造成 一些 問題 。\n不過 現在 能夠 用\nSolidity\n一 劑 打天下 的 疫苗 出現 了 ， 那 就是 效果 快狠準 的\nFoundry ！ （ 掌聲 歡迎 ? ? ）\nIntroduction\n是 一個 使用\nRust\n建置 的 開發工具 ， 它 自稱 為 以太 坊 所有 開發 環境 中 最快 、 最有 彈性 、 擴充性 最強 的 一款 。 連 官方 的\ngithub\n中 都 自己 拿來 和 知名 工具\ndapptools\n互相 比較 （ 理所當然 是 大勝 ， 不然 不會 拿 出來 比 ） 。\nFoundry\n能夠 從眾 多 工具 中 脫穎而出 的 特點 除了 快速 之外 ， 還有 以\nSolidity\n撰寫 測試 這個 特質 ， 待 會 我們 會 有 機會 細細品味 的 ！\nComparison\n以下 是 一些 比較 基準 和 相關 敘述 ， 翻譯 於\nFoundry\n官方 文件 ：\nForge\n利用\n， 在 編譯 和 測試 的 表現 上 都 有 非常 快 的 速度 。\nProject\nForge\nDappTools\nSpeedup\n28.6 s\n2m36s\n5.45 x\n6s\n46s\n7.66 x\n11s\n40s\n3.63 x\n1.4 s\n5.5 s\n3.9 x\n當 我們 在\n著名 的 函式 庫\n時 ， Hardhat\n耗費 了\n15.244 s\n的 時間 編譯 ， 而\nForge\n只 需要\n9.449 s\n( ~ 4s\ncached ) 。\nWhat\nfeatures\ncan\nuse\nFoundry\n由 以下 兩者 組成 ：\n：\n就 像 我們 平常 使用 的 其他 開發工具 一樣 ， 是 一個\nEthereum\n的 測試 框架 。\n： 支援 多種 客戶端 功能 ， 像是 與\nEVM\n智能 合約 互動 、 傳遞 交易 、 取得 鏈上 資訊 等 ， 就 像 一把 瑞士刀 一樣 （ 官方 文件 寫 的 ） 。\n來自 官方 的\nFoundry\n特性 ：\nFast\n&\nflexible\ncompilation\npipeline\nAutomatic\nSolidity\ncompiler\nversion\ndetection\n&\ninstallation\n( under\n~ / . svm )\nIncremental\ncompilation\n&\ncaching :\nOnly\nchanged\nfiles\nare\nre - compiled\nParallel\ncompilation\nNon - standard\ndirectory\nstructures\nsupport\n( e . g .\nHardhat\nrepos )\nTests\nare\nwritten\nin\nSolidity\n( like\nin\nDappTools )\nFast\nfuzz\ntesting\nwith\nshrinking\nof\ninputs\n&\nprinting\nof\ncounter - examples\nFast\nremote\nRPC\nforking\nmode ,\nleveraging\nRust ' s\nasync\ninfrastructure\nlike\ntokio\nFlexible\ndebug\nlogging\nDapptools - style ,\nusing\nDsTest ' s\nemitted\nlogs\nHardhat - style ,\nusing\nthe\npopular\nconsole . sol\ncontract\nPortable\n( 5 - 10MB )\n&\neasy\nto\ninstall\nwithout\nrequiring\nNix\nor\nany\nother\npackage\nmanager\nFast\nCI\nwith\nthe\nFoundry\nGitHub\naction .\nDownload\nFoundry\n如果 作業系統 是\nLinux\n或\nmacOS\n最 簡單 的 方法 就是 使用 以下 方法 下載\nFoundry ：\n下載 完成 之後 再 執行 一次\nfoundryup\n會將\nFoundry\n更新 至 最新 版本 ， 如果 想要 返回 到 指定 版本 ， 也 可以 使用 指令\nfoundryup\n- v\n$ VERSION 。\n然而 我 自己 是 使用\nWindows ， 下載 的 方式 如下 。\n在 下載\nFoundry\n之前 ， 我們 的 需要 先 準備 好\nRust\n和\nCargo ， 首先 到\nrustup . rs\n下載\nrust ， 然後 執行 ：\n這樣 就 可以 同時 準備 好\nRust\n和\nCargo ， 最後 打開\nCMD\n使用 以下 指令 就 可以 成功 安裝\nFoundry 。\n如果 在 下載 過程 中像 我 一樣 遇到 以下 錯誤 ：\n那 就要 下載\n， 選擇\nC++\nBuild\nTools\n然後 重 開機 就 可以 解決 了 ！ 下載 大小 約 是\n6\nGB 。\nFirst\nFoundry\nTest\n首先 我們 使用\ninit\n初始化 一個 專案 。\n進 到\nhello _ foundry\n看看 初始化 之後 在 資料夾 裡面 出現 了 什麼 ：\nforge\nCLI\n將會 創建 兩個 檔案 目錄 ： lib\n和\nsrc 。\nlib\n包含 了\ntesting\ncontract\n( lib / ds - test / src / test . sol ) ， 同時 也 有 其他 各式各樣 測試 合約 的 實作\ndemo ( lib / ds - test / demo / demo . sol )\nsrc\n放 了 我們 寫 的 智能 合約 和 測試 的 原始 碼\n編譯 ：\n進行 測試 ：\nMore\nFoundry\nTest\n在\n$\niParking _ foundry \\ hello _ foundry \\ src \\ Contract . sol\n中 我們 把 合約 修改 成 我們 想要 撰寫 的 其他 合約 ：\n在 檔案\ntest / Contract . t . sol\n中 ：\n進行 測試 ：\n除了 以上 我們 最 熟悉 的\nrequire\n之外 ， 也 可以 使用 以下 方式 進行 測試 ：\n我們 還有 更多酷 炫 的\nassertions\n語法 可以 用來 測試 合約 ， 在\nlib / ds - test / src / test . sol\n中 可以 找到 他們 ：\n邏輯運算\n-\nassertTrue\n十進制 相等\n-\nassertEqDecimal\n大於 、 小於\n-\nassertGt ,\nassertGe ,\nassertLt ,\nassertLe\nMore\nfeatures\ncan\nuse\nFoundry\n同樣 也 支持\n測試 。 因為當 我們 一個 一個 函式 都 進行 測試 時 ， 即便 全部 都 成功\nPASS ， 但 在 邊際 測 資中 其實 也 很 有 可能 會 出現 一些 問題 ， 導致\nUnder / Overflow\n或 其他\nRE / ME\n之類 的 錯誤 。\n我們 在 測試 函式 中 增加 參數 之後 ， Fuzzing\n能夠 讓\nSolidity\ntest\nrunner\n隨機 選擇 大量 的 參數 輸入 我們 的 函式 。\n在 以上 例子 中\nfuzzer\n會 自動 地 對\nx\n嘗試 各種 隨機數 ， 如果 他 發現 當前 輸入 會 導致 測試 失敗 ， 便會 回傳 錯誤 ， 這時候 就 可以 開始\ndebug\n啦 ！\n進行 測試 ：\n從 以上 錯誤 可以 發現 當 參數 輸入 為\n57896044618658097711785492504343953926634992332820282019728792003956564819968\n之後 會 出現 錯誤 ， 來到\n貼 上 這個 數字 之後 會 發現 這個 數字 為\n5.789\n*\n10 ^ 76\n~ =\n2 ^ 255 。\n聽 起來 十分 合理 因為\nx\n的 型態 就是\nuint256 ， 所以 如果 要 避免 程式 出現 問題 ， 勢必 要 在 函式 裡面 增加 一些 關於 型態 的 異常 處理 敘述 。\n未來\nFoundry\n除了 Fuzz\nTesting\n之外 ， 還會 支援 ：\nInvariant\nTesting\nSymbolic\nExecution\nMutation\nTesting\nGive\nme\nmore\ninformation ! !\nGive\nme\nmore\nmore\nmore\ndocumentation ! ! !\n.\n⚗\nTesting\nTime\nInitialization\n&\nPreparation\n打開 一個 空 資料夾 ， 使用\ninit\n來 初始化 專案 ：\n因為 我們 要 繼承 許多\nOpenZeppelin\n的 合約 ， 所以 這邊 先將 其 導入到 專案 的\nsrc\n裡面 。\n其實 感覺 不是 要 這樣 子 做 ， 但 這邊 如果 有 正確 的 做法 拜託 提供 給我\n?\n在\n$\niParking _ foundry \\ src \\ Contract . sol\n中 我們 把 合約 修改 成 嘟嘟 房 的\nNFT\n合約 （ 記得 要\nimport\n要 繼承 的 列祖列宗 們 ） ：\n同時 也 先 把\nContract . t . sol\n檔案 中 的 測試 合約 準備 好 ：\n建置 並 測試 專案 看 編譯 有沒有 出現 問題 ：\nUnit\nTesting\n目標 主要 是 看\npreSaleMint ( )\n這個 函式 的 運作 狀況 ， 說到底 我 這邊 也 是 屬於 一種 馬後炮 的 行為 ， 因為 我 也 懶得 寫 別的 測試 哈哈哈 哈哈 。\n廢話 不多 說 ， 直接 開測 ：\n首先 就是 先 宣告 版本 ， 這邊 我 除了 把 主 合約 宣告 進來 之外 ， 來 宣告 了\nDEPLOYER _ ADDRESS\n來存 合約\ndeployer\n的 地址 ； 以及\ntemp\n來 暫存 之後 要 增長 的 白名單 。\n這段 程式碼 有 很 多個 重點 ：\n一 、 DEPLOYER _ ADDRESS\n=\ncarman . owner ( ) ; ：\n這個 敘述 中 我們 首先 需要 知道\nmsg . sender\n是 誰 ， 因為 在\ndeploy\n合約 的 時候 決定\nowner\n是 誰 的 方法 就是 看 最 一 開始 的\nmsg . sender 。\n我們 可以 從\nfoundry . toml\n以及\n中 得到 各個 環境 變數 、 全域 變數 的 設定 檔 與其 預設值 是 多少 。\n二 、 carman . addController ( DEPLOYER _ ADDRESS ) ; ：\n這是 除了 陣列 存 白名單 外 我 覺得 最 弔 詭 的 地方 ， 那 就是 我 在 主 合約 裡面 沒有 看見 他們 把\nowner\n在 建構 子裡面 就 設定 為\nController 。 然而 大部分 的 功能 函式 居然 都 是 需要\nrequire ( Controller )\n而 不是 使用\nonlyOwner\n的\nmodifier 。 所以 我 就 在 這邊 幫 自己 （ deployer ） 宣告 了 。\n三 、 增長 白名單 ：\n主要 的 重點 為 如何 在 合約 中 隨機 製造 帳戶 地址 ， 然後 把 他們 都 加進去\ntemp\n這個 陣列 ， 最後 再 一次\npush\n到\nwhitelistedAddresses\n中 。\n接下來 下 一個 程式碼 讓 我 苦惱 超級 久 ， 因為 如果 沒有 實作\n_ checkOnERC721Received\n的話 ， 在 直接 宣告\n_ safeMint ( )\n以後 會 瘋狂 出現 以下 錯誤 ：\n根據 我查 到 的 資料\n_ checkOnERC721Received\n有 一個\nverification\nlogic\n存在 ， 如果 今天\nto\n的 地址 是 一個 合約 而 不是\nEOA ， 那 就 需要 實作 它 的\nbody ， 這樣 才 可以 在\nERC - 721\n的 介面 裡面 回傳 正確 的\n4\nbytes\nhash 。\n第一個 測試 ， 這邊 先 試試 水溫 看 自己 （ Deployer ） 能不能夠 鑄造 幾個\nNFT 。\n第二個 測試 ， 這邊 要 使用\nFoundry\n提供 的 一個 很酷 的 功能 ， 那 就是 我們 可以 把 自己 的 身分 轉變成 其他 帳戶 ， 藉此 來 以 不同 角度 測試 合約 。\n首先 我們 要 宣告\nCheatCodes\n的 介面 ， 之後 在 測試 合約 裡面 宣告\ncheats 。 最後 只要 在 我們 想要 測試 的 合約 裡面 加上\ncheats . prank ( address ( 0 ) ) ;\n就 可以 把 自己 的 角度 轉成\naddress ( 0 ) 。\n進行 測試 ：\nGas\nReport\nFoundry\n還有 一個 非常 有趣 的 功能 那 就是\nGas\nReport ：\n這個\nGas\n果然 是 消耗 驚人 ， 如果 要 發現 這個 錯誤 的話 ， 在\nfoundry . toml\n中 就 需要 把\ngasLimit\n設定 成 我們 想要 的 大小 來 控制 ， 或者 使用 其他 辦法 之類 的\n: D\nConclusion\nWhy\ndo\nI\nnot\ncorrect\nthe\ncontract\n市面上 有 許多 實作 的 例子 ， 無論是 最 基本 的\nmapping ， 酷炫 的\nMerkle\nTree ( Hash\nTree ) ， 或 甚至 是 稍微 中心化 但 更 易於 管理 和 節省 開銷 的\nBackend\nSignature\nWhitelist\nData\nBase ， 其實 多查 一點 資料 應該 是 會 選擇 避免 掉 用\narray\n這個 資料 結構 來存 白名單 的 。\n不過 因為 我 是 一個 菜鳥 ， 我 認識 的 所有 會 寫\nSolidity\n的 人裡面 有\n99%\n都 比 自己 強 哈哈哈 哈哈 ， 所以 修正 智能 合約 這種 事情 我先 躲開 好 了 ！ 做\nAuditing\n的 大師 不少 ， 還是 讓 他們 來 吧\n: D\nMy\npoint\nof\nview\n固然 使用\narray\n和 遍歷 這樣 子 的 演算法 來 尋找 白名單 能 稱得上 是 詭譎 ， 不過 從\nWeb2\n跨足 到\nWeb3\n的 公司 們 ， 其實 有 很多 東西 都 需要 學習 。\n而且 在 這個 才剛 開始 要 蓬勃發展 的 產業 與 技術 中 ， 許多 人 也 都 還在 摸索 最好 的 技術 模式 、 商業模式 。 也許 給 他們 一個 改善 的 機會 ， 累積 越來越 多 這樣 的 先例 某種程度 上 也 能夠 讓 這個 產業 邁向 更好 的 發展 ！\n那 希望 我 可以 多多 多多 多多 增進 自己 寫 測試 的 實力 ， 畢竟 寫出 一個 會動 的 合約 並 不難 ， 但 要 寫出 一個 不會 出錯 的 難如登天 阿 ！\nReference\nFoundry\nERC - 721\nContract\nUnit\nTesting",
        "word_seg_processed_content_text": "tags\nswflab\n⚠ ️\n\ncourse\n\n\nonly\nmy\npersonal\nthoughts\ndon ' t\n\ntoo\nserious\nhaha ...\n⚠ ️\nfinal\nupdated\n2022 3 17\ntable\n\ncontents\nintro\n\n\nevent\ncast\n\neye\nover\n\ncontract\nwhat\n\nfoundry\ntesting\ntime\nconclusion\nreference\nsynchronization\nlink\ntree\nintro\niparking\nnft\n\nwhat\nhappened\n簡單 來說 事件 起因 過程 深度 了解 接收 資訊 來源 附上 連結 自行 參考\nmotivation\n發現 好像 選擇 合約 部屬 前 會 測試 角度 來看 這次 事件 錯誤 發生 肉眼 觀察 合約 找到 講 要說 評論 這件 事情 前輩 夥伴 錯 開發 團隊 做好 事後\nmod\n\n這次 錯誤 肉眼 清晰可見 水汪汪 大 眼睛 大腦 確實 比手 程式碼 好用 哈哈哈哈\n\ntesting\n職業 工程師 檻 自認 距離 工程師 不小 距離 想要 藉此機會 陳品 告訴\nfoundry\n撰寫 測試\n篇文章 主軸 學習\nfoundry\n小小 筆記 嘟嘟 房 活例\nd\n先回到 文章 最一 宣告\n⚠ ️\n\ncourse\n\n\nonly\nmy\npersonal\nthoughts\ndon ' t\n\ntoo\nserious\nhaha ...\n⚠ ️\n發現 文中 錯誤 想法 請 不吝 大方 告訴 還在 學習 中 我會 無條件 接受 意見 想法\ncast\n\neye\nover\n\ncontract\n參考 前輩 媒體 資料 大 概率 先 技術 層面 定位\n\narray\n資料 結構 實作 白名單 系統\ngas\nlimit\n設定\n來看 程式碼\n\npath\n\n\ncontract\ninheritance\n基本上 猜 嘟嘟 房 工程師 特別 改 繼承 而來 合約 內容 我先 道歉\n\nopenzeppelin\n不到 東西 變數 資料 結構 宣告 刪掉 藉此\ngas\nfee\n降低 寫\nproject\n會 習慣 繼承\ngithub\n內容 東西 貼過來 改成 想要 樣子\nopenzeppelin\n安全性 便利性 稱許 科學家 工程師 菜雞 半個 來說 細細的 斟酌一下 東西 蠻\n隨便 亂改 合約 反而\nbug 確實 石頭砸 腳 很常 ...\n畢竟 工作 收 薪水 繼承 函式 庫 呼叫\napi\n更 小心 更 了解 這門 技術 才 發現 很多 程式碼\ncopy paste\n簡單\ncarman\n繼承 歷代 先祖 先烈 遺產 迎來 人生 曙光 主 合約\n我並 仔細 一一 講解 合約 變數 函式 細節 大概 摸 出 合約 東西 希望 文中 引用 程式碼 到底 寫\n宣告 版本 宣告 合約 繼承 進 合約 先 宣告 常數\n馬上 第一個 鞭 小夥伴 array\n型態\nwhitelistedaddresses\n負責 接收 初始化 參數 建構 子 指\nnft\nmetadata\n\nbaseuri\nipfs\n\ncid\n\nvip\n\nmint\n函式\n預售\nmint\n函式\n公售\nmint\n函式\n判斷 訊息 傳遞 交易\nmint\n\nmsg sender\n自然 消費者 白名單 成員\n\nnft\n合約\ntokenuri\n鑄造 函式 啟動\n\n關閉 條件\n擁有 管理權 才能 呼叫 函式 函式 越 越 中心化 一切都是 透明 明白 寫 程式碼\nsign\n代表 同意 接受 合約\n控制權 合約 算是 管理權 人員 管理 函式\n賺了錢 記得 錢\nwithdraw\n函式\nwhat\n\nfoundry\nunit\ntesting\n\nsmart\ncontract\n過往\ntesting\n無非\nhardhat\ntruffle\ndapptools\n撰寫\njavascript\ntypescript\n語法 測試 搭配\nganache\ninfura\n服用 藥物 還會 包含\nethers js\nmocha\nwaffle\nchai\n\nblablabla 自行 體會\nd\n寫過\nnode modules\n充滿 各式各樣\ndependencies 做 開發 先來 一套 刪 套件 重載 套件 降 版本 環境 變數 組合拳 算是 夠 惱人 ...\n\njavascript\n人手 一把 利器 但身 撰寫\nsolidity\n工程師 測試 語言 寫 會 怪怪的 更 不用說\nbig\nnumber\n套件 還會\n\nsolidity\n劑 打天下 疫苗 效果 快狠準\nfoundry 掌聲\nintroduction\n\nrust\n建置 開發工具 自稱 以太 坊 開發 環境 中 最快 最有 彈性 擴充性 最強 一款 官方\ngithub\n中 拿來 知名 工具\ndapptools\n理所當然 大勝\nfoundry\n從眾 工具 中 脫穎而出 快速 之外\nsolidity\n撰寫 測試 特質 會 會 機會 細細品味\ncomparison\n基準 相關 敘述 翻譯\nfoundry\n官方 文件\nforge\n利用\n編譯 測試 表現 快 速度\nproject\nforge\ndapptools\nspeedup\n28.6 s\n2m36s\n5.45 x\n6s\n46s\n7.66 x\n11s\n40s\n3.63 x\n1.4 s\n5.5 s\n3.9 x\n\n著名 函式 庫\n時 hardhat\n耗費\n15.244 s\n時間 編譯\nforge\n\n9.449 s\n4s\ncached\nwhat\nfeatures\n\nuse\nfoundry\n\n\n平常 開發工具\nethereum\n測試 框架\n支援 多種 客戶端 功能 像是\nevm\n智能 合約 互動 傳遞 交易 鏈上 資訊 一把 瑞士刀 官方 文件 寫\n來自 官方\nfoundry\n特性\nfast\n\nflexible\ncompilation\npipeline\nautomatic\nsolidity\ncompiler\nversion\ndetection\n\ninstallation\nunder\nsvm\nincremental\ncompilation\n\ncaching\nonly\nchanged\nfiles\n\nre compiled\nparallel\ncompilation\nnon standard\ndirectory\nstructures\nsupport\ne g\nhardhat\nrepos\ntests\n\nwritten\n\nsolidity\nlike\n\ndapptools\nfast\nfuzz\ntesting\n\nshrinking\n\ninputs\n\nprinting\n\ncounter examples\nfast\nremote\nrpc\nforking\nmode\nleveraging\nrust ' s\nasync\ninfrastructure\nlike\ntokio\nflexible\ndebug\nlogging\ndapptools style\nusing\ndstest ' s\nemitted\nlogs\nhardhat style\nusing\n\npopular\nconsole sol\ncontract\nportable\n5 10mb\n\neasy\n\ninstall\nwithout\nrequiring\nnix\n\nany\nother\npackage\nmanager\nfast\nci\n\n\nfoundry\ngithub\naction\ndownload\nfoundry\n作業系統\nlinux\n\nmacos\n簡單 方法 方法 下載\nfoundry\n下載 執行\nfoundryup\n會將\nfoundry\n更新 最新 版本 想要 返回 指定 版本 指令\nfoundryup\nv\nversion\n\nwindows 下載 方式\n下載\nfoundry\n先\nrust\n\ncargo\nrustup rs\n下載\nrust 執行\n\nrust\n\ncargo 打開\ncmd\n指令 成功 安裝\nfoundry\n下載 過程 中像 錯誤\n就要 下載\n選擇\nc++\nbuild\ntools\n重 開機 解決 下載 大小 約\n6\ngb\nfirst\nfoundry\ntest\n\ninit\n初始化 專案\n進\nhello foundry\n初始化 資料夾\nforge\ncli\n將會 創建 兩個 檔案 目錄 lib\n\nsrc\nlib\n包含\ntesting\ncontract\nlib ds test src test sol 各式各樣 測試 合約 實作\ndemo lib ds test demo demo sol\nsrc\n放 寫 智能 合約 測試 原始 碼\n編譯\n測試\nmore\nfoundry\ntest\n\n\niparking foundry hello foundry src contract sol\n中 合約 修改 成 想要 撰寫 合約\n檔案\ntest contract t sol\n中\n測試\n熟悉\nrequire\n之外 方式 測試\n更多酷 炫\nassertions\n語法 用來 測試 合約\nlib ds test src test sol\n中 找到\n邏輯運算\n\nasserttrue\n十進制\n\nasserteqdecimal\n大於 小於\n\nassertgt\nassertge\nassertlt\nassertle\nmore\nfeatures\n\nuse\nfoundry\n支持\n測試 因為當 函式 測試 時 成功\npass 邊際 測 資中 會 導致\nunder overflow\n\nre me\n錯誤\n測試 函式 中 增加 參數 fuzzing\n\nsolidity\ntest\nrunner\n隨機 選擇 參數 輸入 函式\n例子 中\nfuzzer\n會 自動\nx\n嘗試 隨機數 發現 輸入 會 導致 測試 失敗 便會 回傳 錯誤 這時候\ndebug\n\n測試\n錯誤 發現 參數 輸入\n57896044618658097711785492504343953926634992332820282019728792003956564819968\n會 錯誤 來到\n貼 數字 會 發現 數字\n5.789\n\n10 76\n\n2 255\n聽\nx\n型態\nuint256 程式 勢必 函式 增加 型態 異常 敘述\n未來\nfoundry\nfuzz\ntesting\n之外 還會 支援\ninvariant\ntesting\nsymbolic\nexecution\nmutation\ntesting\ngive\nme\nmore\ninformation\ngive\nme\nmore\nmore\nmore\ndocumentation\n\n⚗\ntesting\ntime\ninitialization\n\npreparation\n打開 空 資料夾\ninit\n初始化 專案\n繼承\nopenzeppelin\n合約 先將 導入到 專案\nsrc\n\n感覺 子 做 正確 做法 拜託 提供 給我\n\n\n\niparking foundry src contract sol\n中 合約 修改 成 嘟嘟 房\nnft\n合約 記得\nimport\n繼承 列祖列宗\n先\ncontract t sol\n檔案 中 測試 合約\n建置 測試 專案 編譯 有沒有\nunit\ntesting\n目標\npresalemint\n函式 運作 狀況 說到底 一種 馬後炮 懶得 寫 測試 哈哈哈\n廢話 不多 說 開測\n先 宣告 版本 主 合約 宣告 進來 之外 宣告\ndeployer address\n來存 合約\ndeployer\n地址\ntemp\n暫存 增長 白名單\n這段 程式碼 多個 重點\ndeployer address\n\ncarman owner\n敘述 中\nmsg sender\n\ndeploy\n合約\nowner\n方法\nmsg sender\n\nfoundry toml\n\n中 環境 變數 全域 變數 設定 檔 預設值\n二 carman addcontroller deployer address\n這是 陣列 存 白名單 外 弔 詭 地方 主 合約\nowner\n建構 子裡面 設定\ncontroller 大部分 功能 函式 居然\nrequire controller\n\nonlyowner\n\nmodifier 幫 deployer 宣告\n三 增長 白名單\n重點 合約 中 隨機 製造 帳戶 地址 加進去\ntemp\n陣列\npush\n\nwhitelistedaddresses\n中\n接下來 程式碼 苦惱 超級 久 實作\ncheckonerc721received\n宣告\nsafemint\n會 瘋狂 錯誤\n我查 資料\ncheckonerc721received\n\nverification\nlogic\n\n\n地址 合約\neoa 實作\nbody 才\nerc 721\n介面 回傳 正確\n4\nbytes\nhash\n第一個 測試 先 試試 水溫 deployer 能不能夠 鑄造 幾個\nnft\n第二個 測試\nfoundry\n提供 很酷 功能 身分 轉變成 帳戶 藉此 角度 測試 合約\n宣告\ncheatcodes\n介面 測試 合約 宣告\ncheats 想要 測試 合約 加上\ncheats prank address 0\n角度 轉成\naddress 0\n測試\ngas\nreport\nfoundry\n有趣 功能\ngas\nreport\n\ngas\n消耗 驚人 發現 錯誤\nfoundry toml\n中\ngaslimit\n設定 成 想要 大小 控制 辦法\nd\nconclusion\nwhy\ndo\ni\n\ncorrect\n\ncontract\n市面上 實作 例子 無論是\nmapping 酷炫\nmerkle\ntree hash\ntree 稍微 中心化 更 易於 管理 節省 開銷\nbackend\nsignature\nwhitelist\ndata\nbase 多查 一點 資料 會 選擇 掉\narray\n資料 結構 來存 白名單\n菜鳥 會 寫\nsolidity\n人裡面\n99%\n強 哈哈哈 修正 智能 合約 事情 我先 躲開 做\nauditing\n大師 不少\nd\nmy\npoint\n\nview\n\narray\n遍歷 子 演算法 尋找 白名單 稱得上 詭譎\nweb2\n跨足\nweb3\n公司 很多 東西 學習\n才剛 蓬勃發展 產業 技術 中 還在 摸索 技術 模式 商業模式 也許 改善 機會 累積 越來越 先例 某種程度 產業 邁向 更好 發展\n希望 多多 多多 多多 增進 寫 測試 實力 畢竟 寫出 會動 合約 不難 寫出 出錯 難如登天\nreference\nfoundry\nerc 721\ncontract\nunit\ntesting",
        "extracted_keywords": [
            "swflab",
            "synchronization",
            "合約",
            "鏈上",
            "event"
        ],
        "extracted_keywords_phrases": [
            "time conclusion",
            "reference synchronization",
            "事件 起因",
            "觀察 合約",
            "合約 宣告"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284340": {
        "href": "https://ithelp.ithome.com.tw/articles/10284340",
        "title": "送件電路板的流程分享",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>我在<a href=\"https://ithelp.ithome.com.tw/articles/10263973\" target=\"_blank\" rel=\"noreferrer noopener\">做一塊自己的開發板-DAY2</a>的時候有提到如何做一塊屬於自己的開發板，我覺得要來分享我的PCB在淘寶送洗的經驗吧，自己動手做一塊來玩很有成就感。</p>\n<ol>\n<li>先想辦法註冊好淘寶帳號，要過電話認證</li>\n<li>手機下載\"EZway\"，手機要通過認證這軟體是為了要實名認證，要確保這裡的電話跟淘寶是一樣的這攸關到你海關貨物實名認證的問題。</li>\n<li>手機也下載好淘寶APP，後面會說到這用途。</li>\n<li>電腦下載\"阿里旺旺\"這個是為了要和大陸的賣家溝通的軟體，不下載也可以就用手機的淘寶APP做溝通。</li>\n<li>設定淘寶你的送貨地址。</li>\n</ol>\n<p>完成好上面的步驟就可以開始上淘寶買自己想要的東西瞜，首先找一家淘寶的PCB廠家我找的是捷配，找到賣家後在賣家商場的首頁點選聯絡客服，這裡就直接跟客服說你要PCB打樣，這時候賣家就會叫你傳文件給他，我們這邊的IP位置無法用阿里旺旺傳給客服，這時候就問賣家能發郵件給您嗎?(這邊我會用大陸的說法，當然你用我們台灣的說法也是OK，他們都看得懂)，這時候他會給你信箱再把PCB元件寄給他吧他們可以只收.PcbDoc的檔案就可以了，這時候他們會問你工藝至於他們能做到的工藝在賣家網頁都有寫清楚有興趣在自己看瞜，假如不介意規格就跟他說常規工藝，他們會說常規工藝如下(我直接截對話紀錄)，還有最少的片數是5片喔~</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220315/201419799eqgYbTeRg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220315/201419799eqgYbTeRg.png\"></p>\n<p>之後他們會在確認你傳過來的文件有沒有問題，有問題賣家會跟你說，都沒問題後賣家會傳個付款連結，選擇下單後再來是選擇運送方式運送方式有很多種，主要有兩種：</p>\n<ol>\n<li>貨物到集運倉在繳一次運費送來台灣，這有個好處多個賣家的商品全都送到XX集運倉在統一附一次郵件費送來台灣省運費</li>\n<li>也可以跟賣家說順豐直發台灣這通常會比較快，兩者價錢差不多，不了解的話可以在問賣家)</li>\n</ol>\n<p>接下來看你要用甚麼方式付款，有以下兩種：</p>\n<ol>\n<li>小7點ibon輸入付款條碼，我前面有說到要下載手機淘寶APP，這時候一定要用手機產生付款條碼，去年改的原本網頁也可以產生，但現在規定只能用手機APP的軟體產生小七付款號碼</li>\n<li>用信用卡</li>\n</ol>\n<p>付款完後跟賣家說一下，假如你是新客戶淘寶賣家會跟你要身分證字號，一定要提供喔不然貨物進不來，現在海關都要實名認證了，大致就這樣就等貨回來了喔~，可以在淘寶APP查看貨物狀態，假設貨都沒來也以直接壓退款，退款會退到玉山銀行，至於詳細可以打去玉山客服去詢問喔淘寶的交易是由他們管理的。</p>\n<p>這時候就等自己電路板的到來了，已將重點列出來沒辦法花太多時間做一步步教學，所有有問題的話可以在下面提出來喔</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "開發板,pcb",
        "genre": "Arm Platforms",
        "published_at": "2022-03-15 18:37:01",
        "author_href": "https://ithelp.ithome.com.tw/users/20141979/ironman",
        "author_name": "Shortbread",
        "series_href": "https://ithelp.ithome.com.tw/users/20141979/ironman/4820",
        "series_name": "基於ARM-M0架構MCU之落摔檢測韌體開發",
        "series_num": "34",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>我在的時候有提到如何做一塊屬於自己的開發板，我覺得要來分享我的PCB在淘寶送洗的經驗吧，自己動手做一塊來玩很有成就感。</p>\n<ol>\n<li>先想辦法註冊好淘寶帳號，要過電話認證</li>\n<li>手機下載\"EZway\"，手機要通過認證這軟體是為了要實名認證，要確保這裡的電話跟淘寶是一樣的這攸關到你海關貨物實名認證的問題。</li>\n<li>手機也下載好淘寶APP，後面會說到這用途。</li>\n<li>電腦下載\"阿里旺旺\"這個是為了要和大陸的賣家溝通的軟體，不下載也可以就用手機的淘寶APP做溝通。</li>\n<li>設定淘寶你的送貨地址。</li>\n</ol>\n<p>完成好上面的步驟就可以開始上淘寶買自己想要的東西瞜，首先找一家淘寶的PCB廠家我找的是捷配，找到賣家後在賣家商場的首頁點選聯絡客服，這裡就直接跟客服說你要PCB打樣，這時候賣家就會叫你傳文件給他，我們這邊的IP位置無法用阿里旺旺傳給客服，這時候就問賣家能發郵件給您嗎?(這邊我會用大陸的說法，當然你用我們台灣的說法也是OK，他們都看得懂)，這時候他會給你信箱再把PCB元件寄給他吧他們可以只收.PcbDoc的檔案就可以了，這時候他們會問你工藝至於他們能做到的工藝在賣家網頁都有寫清楚有興趣在自己看瞜，假如不介意規格就跟他說常規工藝，他們會說常規工藝如下(我直接截對話紀錄)，還有最少的片數是5片喔~</p>\n<p></p>\n<p>之後他們會在確認你傳過來的文件有沒有問題，有問題賣家會跟你說，都沒問題後賣家會傳個付款連結，選擇下單後再來是選擇運送方式運送方式有很多種，主要有兩種：</p>\n<ol>\n<li>貨物到集運倉在繳一次運費送來台灣，這有個好處多個賣家的商品全都送到XX集運倉在統一附一次郵件費送來台灣省運費</li>\n<li>也可以跟賣家說順豐直發台灣這通常會比較快，兩者價錢差不多，不了解的話可以在問賣家)</li>\n</ol>\n<p>接下來看你要用甚麼方式付款，有以下兩種：</p>\n<ol>\n<li>小7點ibon輸入付款條碼，我前面有說到要下載手機淘寶APP，這時候一定要用手機產生付款條碼，去年改的原本網頁也可以產生，但現在規定只能用手機APP的軟體產生小七付款號碼</li>\n<li>用信用卡</li>\n</ol>\n<p>付款完後跟賣家說一下，假如你是新客戶淘寶賣家會跟你要身分證字號，一定要提供喔不然貨物進不來，現在海關都要實名認證了，大致就這樣就等貨回來了喔~，可以在淘寶APP查看貨物狀態，假設貨都沒來也以直接壓退款，退款會退到玉山銀行，至於詳細可以打去玉山客服去詢問喔淘寶的交易是由他們管理的。</p>\n<p>這時候就等自己電路板的到來了，已將重點列出來沒辦法花太多時間做一步步教學，所有有問題的話可以在下面提出來喔</p>\n<br/>\n</div>",
        "content_text": "我在的時候有提到如何做一塊屬於自己的開發板，我覺得要來分享我的PCB在淘寶送洗的經驗吧，自己動手做一塊來玩很有成就感。\n\n先想辦法註冊好淘寶帳號，要過電話認證\n手機下載\"EZway\"，手機要通過認證這軟體是為了要實名認證，要確保這裡的電話跟淘寶是一樣的這攸關到你海關貨物實名認證的問題。\n手機也下載好淘寶APP，後面會說到這用途。\n電腦下載\"阿里旺旺\"這個是為了要和大陸的賣家溝通的軟體，不下載也可以就用手機的淘寶APP做溝通。\n設定淘寶你的送貨地址。\n\n完成好上面的步驟就可以開始上淘寶買自己想要的東西瞜，首先找一家淘寶的PCB廠家我找的是捷配，找到賣家後在賣家商場的首頁點選聯絡客服，這裡就直接跟客服說你要PCB打樣，這時候賣家就會叫你傳文件給他，我們這邊的IP位置無法用阿里旺旺傳給客服，這時候就問賣家能發郵件給您嗎?(這邊我會用大陸的說法，當然你用我們台灣的說法也是OK，他們都看得懂)，這時候他會給你信箱再把PCB元件寄給他吧他們可以只收.PcbDoc的檔案就可以了，這時候他們會問你工藝至於他們能做到的工藝在賣家網頁都有寫清楚有興趣在自己看瞜，假如不介意規格就跟他說常規工藝，他們會說常規工藝如下(我直接截對話紀錄)，還有最少的片數是5片喔~\n\n之後他們會在確認你傳過來的文件有沒有問題，有問題賣家會跟你說，都沒問題後賣家會傳個付款連結，選擇下單後再來是選擇運送方式運送方式有很多種，主要有兩種：\n\n貨物到集運倉在繳一次運費送來台灣，這有個好處多個賣家的商品全都送到XX集運倉在統一附一次郵件費送來台灣省運費\n也可以跟賣家說順豐直發台灣這通常會比較快，兩者價錢差不多，不了解的話可以在問賣家)\n\n接下來看你要用甚麼方式付款，有以下兩種：\n\n小7點ibon輸入付款條碼，我前面有說到要下載手機淘寶APP，這時候一定要用手機產生付款條碼，去年改的原本網頁也可以產生，但現在規定只能用手機APP的軟體產生小七付款號碼\n用信用卡\n\n付款完後跟賣家說一下，假如你是新客戶淘寶賣家會跟你要身分證字號，一定要提供喔不然貨物進不來，現在海關都要實名認證了，大致就這樣就等貨回來了喔~，可以在淘寶APP查看貨物狀態，假設貨都沒來也以直接壓退款，退款會退到玉山銀行，至於詳細可以打去玉山客服去詢問喔淘寶的交易是由他們管理的。\n這時候就等自己電路板的到來了，已將重點列出來沒辦法花太多時間做一步步教學，所有有問題的話可以在下面提出來喔",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "我 在 的 時候 有 提到 如何 做 一塊 屬於 自己 的 開發板 ， 我 覺得 要來 分享 我 的 PCB 在 淘寶 送洗 的 經驗 吧 ， 自己 動手做 一塊 來 玩 很 有 成就感 。\n先想 辦法 註冊 好 淘寶 帳號 ， 要過 電話 認證\n手機 下載 \" EZway \" ， 手機 要 通過 認證 這 軟體 是 為 了 要 實名 認證 ， 要 確保 這裡 的 電話 跟 淘寶 是 一樣 的 這 攸關 到 你 海關 貨物 實名 認證 的 問題 。\n手機 也 下載 好 淘寶 APP ， 後面 會 說 到 這 用途 。\n電腦 下載 \" 阿里 旺旺 \" 這個 是 為 了 要 和 大陸 的 賣家 溝通 的 軟體 ， 不 下載 也 可以 就 用 手機 的 淘寶 APP 做 溝通 。\n設定 淘寶 你 的 送貨 地址 。\n完成 好 上面 的 步驟 就 可以 開始 上 淘寶 買 自己 想要 的 東西 瞜 ， 首先 找 一家 淘寶 的 PCB 廠家 我 找 的 是 捷配 ， 找到 賣家 後 在 賣家 商場 的 首頁 點選 聯絡 客服 ， 這裡 就 直接 跟 客服 說 你 要 PCB 打樣 ， 這時候 賣家 就 會 叫 你 傳 文件 給他 ， 我們 這邊 的 IP 位置 無法 用 阿里 旺旺 傳給 客服 ， 這時候 就問 賣家 能 發郵件 給 您 嗎 ? ( 這邊 我會 用 大陸 的 說法 ， 當然 你 用 我們 台灣 的 說法 也 是 OK ， 他們 都 看得懂 ) ， 這時候 他會給 你 信箱 再 把 PCB 元件 寄給 他 吧 他們 可以 只收 . PcbDoc 的 檔案 就 可以 了 ， 這時候 他們 會問 你 工藝 至於 他們 能 做到 的 工藝 在 賣家 網頁 都 有 寫 清楚 有 興趣 在 自己 看 瞜 ， 假如 不介意 規格 就 跟 他 說 常規 工藝 ， 他們 會 說 常規 工藝 如下 ( 我 直接 截 對話 紀錄 ) ， 還有 最少 的 片數 是 5 片 喔 ~\n之後 他們 會 在 確認 你 傳過來 的 文件 有沒有 問題 ， 有 問題 賣家 會 跟 你 說 ， 都 沒 問題 後 賣家 會 傳個 付款 連結 ， 選擇 下單 後 再來 是 選擇 運送 方式 運送 方式 有 很 多種 ， 主要 有 兩種 ：\n貨物 到 集運 倉在繳 一次 運費 送來 台灣 ， 這有 個 好處 多個 賣家 的 商品 全都 送到 XX 集運 倉 在 統一 附 一次 郵件 費 送來 台灣省 運費\n也 可以 跟 賣家 說順 豐直 發台灣 這 通常 會 比較 快 ， 兩者 價錢 差不多 ， 不 了解 的話 可以 在問 賣家 )\n接下來 看 你 要 用 甚麼 方式 付款 ， 有 以下 兩種 ：\n小 7 點 ibon 輸入 付款 條碼 ， 我 前面 有 說 到 要 下載 手機 淘寶 APP ， 這時候 一定 要 用 手機 產生 付款 條碼 ， 去年 改 的 原本 網頁 也 可以 產生 ， 但 現在 規定 只能 用 手機 APP 的 軟體 產生 小七 付款 號碼\n用 信用卡\n付款 完後跟 賣家 說 一下 ， 假如 你 是 新 客戶 淘寶 賣家 會 跟 你 要 身分證 字號 ， 一定 要 提供 喔 不然 貨物 進不來 ， 現在 海關 都 要 實名 認證 了 ， 大致 就 這樣 就 等貨 回來 了 喔 ~ ， 可以 在 淘寶 APP 查看 貨物 狀態 ， 假設 貨都 沒來 也 以 直接 壓 退款 ， 退款 會退 到 玉山 銀行 ， 至於 詳細 可以 打 去 玉山 客服 去 詢問 喔 淘寶 的 交易 是 由 他們 管理 的 。\n這時候 就 等 自己 電路板 的 到來 了 ， 已將 重點 列出來 沒 辦法 花太多 時間 做 一步步 教學 ， 所有 有 問題 的話 可以 在 下面 提 出來 喔",
        "word_seg_processed_content_text": "提到 做 一塊 開發板 要來 分享 pcb 淘寶 送洗 經驗 動手做 一塊 玩 成就感\n先想 辦法 註冊 淘寶 帳號 要過 電話 認證\n手機 下載 ezway 手機 認證 軟體 實名 認證 確保 電話 淘寶 攸關 海關 貨物 實名 認證\n手機 下載 淘寶 app 會 說 用途\n電腦 下載 阿里 旺旺 大陸 賣家 溝通 軟體 下載 手機 淘寶 app 做 溝通\n設定 淘寶 送貨 地址\n步驟 淘寶 買 想要 東西 瞜 找 一家 淘寶 pcb 廠家 找 捷配 找到 賣家 賣家 商場 首頁 點選 聯絡 客服 客服 說 pcb 打樣 這時候 賣家 會 傳 文件 給他 ip 位置 阿里 旺旺 傳給 客服 這時候 就問 賣家 發郵件 我會 大陸 說法 台灣 說法 ok 看得懂 這時候 他會給 信箱 pcb 元件 寄給 只收 pcbdoc 檔案 這時候 會問 工藝 工藝 賣家 網頁 寫 興趣 瞜 不介意 規格 說 常規 工藝 會 說 常規 工藝 截 對話 紀錄 最少 片數 5 片 喔\n會 確認 傳過來 文件 有沒有 賣家 會 說 沒 賣家 會 傳個 付款 連結 選擇 下單 再來 選擇 運送 方式 運送 方式 多種 兩種\n貨物 集運 倉在繳 運費 送來 台灣 這有 好處 多個 賣家 商品 全都 送到 xx 集運 倉 統一 附 郵件 費 送來 台灣省 運費\n賣家 說順 豐直 發台灣 會 快 價錢 差不多 了解 在問 賣家\n接下來 方式 付款 兩種\n7 點 ibon 輸入 付款 條碼 說 下載 手機 淘寶 app 這時候 手機 付款 條碼 去年 改 原本 網頁 只能 手機 app 軟體 小七 付款 號碼\n信用卡\n付款 完後跟 賣家 說 新 客戶 淘寶 賣家 會 身分證 字號 提供 喔 貨物 進不來 海關 實名 認證 大致 等貨 回來 喔 淘寶 app 查看 貨物 狀態 假設 貨都 沒來 壓 退款 退款 會退 玉山 銀行 詳細 玉山 客服 詢問 喔 淘寶 交易 管理\n這時候 電路板 到來 已將 重點 列出來 沒 辦法 花太多 時間 做 一步步 教學 提 喔",
        "extracted_keywords": [
            "開發板",
            "pcb",
            "pcbdoc",
            "軟體",
            "電腦"
        ],
        "extracted_keywords_phrases": [
            "pcb 淘寶",
            "淘寶 pcb",
            "分享 pcb",
            "溝通 軟體",
            "手機 淘寶"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284271": {
        "href": "https://ithelp.ithome.com.tw/articles/10284271",
        "title": "[Bonus 系列] - 和 useEffect 很像的 useLayoutEffect",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>這篇要補充一個比較少使用到的 useLayoutEffect hook，和 useEffect 語法相同，但它們的執行時機不太一樣。</p>\n<h3>和 useEffect 差異</h3>\n<p>先假設畫面上有一個 toggle 按鈕，已經綁定對應的事件和 state，那當它被點擊的瞬間，DOM 經過了以下四個步驟做改變:</p>\n<ol>\n<li>state 狀態更新，引起畫面變化</li>\n<li>建構新的 virtual dom tree</li>\n<li>和舊的 virtual dom tree 比較，透過 diff 演算法找出需要更新的部分</li>\n<li>將更新的部分更新到 real dom</li>\n</ol>\n<p>在第四步驟結束時 useEffect 才開始執行放在它裡面的函式，但 useLayoutEffect 不同，它在第三步驟就會開始執行，而由於 useLayoutEffect 是同步的，所以它會有拖延到畫面呈現的問題。</p>\n<h3>使用時機</h3>\n<p>它主要在<strong>操作 DOM 時，有發現到有閃爍情況時使用</strong>。</p>\n<p>在以下範例中，點擊按鈕後會跳出一段文字，從圖片可以看出 useEffect 彈出文字有殘影，若從圖片不易看出讀者也可以點範例去做嘗試。<br>\n<a href=\"https://codepen.io/dot-code/pen/jOajaqj\" target=\"_blank\" rel=\"noreferrer noopener\">範例程式</a></p>\n<p>useEffect:<br>\n<img src=\"https://i.imgur.com/9Aae2cP.gif\" alt=\"\"></p>\n<p>useLayoutEffect:<br>\n<img src=\"https://i.imgur.com/MXZUIt9.gif\" alt=\"\"></p>\n<blockquote>\n<p>註: 也許跳出文字在實際開發中有別的寫法，但這裡主要想表示它們的差別</p>\n</blockquote>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,uselayouteffect",
        "genre": "Modern Web",
        "published_at": "2022-03-09 22:00:53",
        "author_href": "https://ithelp.ithome.com.tw/users/20116883/ironman",
        "author_name": "harry xie",
        "series_href": "https://ithelp.ithome.com.tw/users/20116883/ironman/4069",
        "series_name": "用30天更加認識 React.js 這個好朋友",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>這篇要補充一個比較少使用到的 useLayoutEffect hook，和 useEffect 語法相同，但它們的執行時機不太一樣。</p>\n<h3>和 useEffect 差異</h3>\n<p>先假設畫面上有一個 toggle 按鈕，已經綁定對應的事件和 state，那當它被點擊的瞬間，DOM 經過了以下四個步驟做改變:</p>\n<ol>\n<li>state 狀態更新，引起畫面變化</li>\n<li>建構新的 virtual dom tree</li>\n<li>和舊的 virtual dom tree 比較，透過 diff 演算法找出需要更新的部分</li>\n<li>將更新的部分更新到 real dom</li>\n</ol>\n<p>在第四步驟結束時 useEffect 才開始執行放在它裡面的函式，但 useLayoutEffect 不同，它在第三步驟就會開始執行，而由於 useLayoutEffect 是同步的，所以它會有拖延到畫面呈現的問題。</p>\n<h3>使用時機</h3>\n<p>它主要在<strong>操作 DOM 時，有發現到有閃爍情況時使用</strong>。</p>\n<p>在以下範例中，點擊按鈕後會跳出一段文字，從圖片可以看出 useEffect 彈出文字有殘影，若從圖片不易看出讀者也可以點範例去做嘗試。<br/>\n</p>\n<p>useEffect:<br/>\n</p>\n<p>useLayoutEffect:<br/>\n</p>\n<blockquote>\n<p>註: 也許跳出文字在實際開發中有別的寫法，但這裡主要想表示它們的差別</p>\n</blockquote>\n<br/>\n</div>",
        "content_text": "這篇要補充一個比較少使用到的 useLayoutEffect hook，和 useEffect 語法相同，但它們的執行時機不太一樣。\n和 useEffect 差異\n先假設畫面上有一個 toggle 按鈕，已經綁定對應的事件和 state，那當它被點擊的瞬間，DOM 經過了以下四個步驟做改變:\n\nstate 狀態更新，引起畫面變化\n建構新的 virtual dom tree\n和舊的 virtual dom tree 比較，透過 diff 演算法找出需要更新的部分\n將更新的部分更新到 real dom\n\n在第四步驟結束時 useEffect 才開始執行放在它裡面的函式，但 useLayoutEffect 不同，它在第三步驟就會開始執行，而由於 useLayoutEffect 是同步的，所以它會有拖延到畫面呈現的問題。\n使用時機\n它主要在操作 DOM 時，有發現到有閃爍情況時使用。\n在以下範例中，點擊按鈕後會跳出一段文字，從圖片可以看出 useEffect 彈出文字有殘影，若從圖片不易看出讀者也可以點範例去做嘗試。\n\nuseEffect:\n\nuseLayoutEffect:\n\n\n註: 也許跳出文字在實際開發中有別的寫法，但這裡主要想表示它們的差別",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "這篇要 補充 一個 比較 少 使用 到 的\nuseLayoutEffect\nhook ， 和\nuseEffect\n語法 相同 ， 但 它們 的 執行 時機 不太 一樣 。\n和\nuseEffect\n差異\n先 假設 畫面 上 有 一個\ntoggle\n按鈕 ， 已經 綁定 對應 的 事件 和\nstate ， 那當 它 被 點擊 的 瞬間 ， DOM\n經過 了 以下 四個 步驟 做 改變 :\nstate\n狀態 更新 ， 引起 畫面 變化\n建構 新 的\nvirtual\ndom\ntree\n和 舊 的\nvirtual\ndom\ntree\n比較 ， 透過\ndiff\n演算法 找出 需要 更新 的 部分\n將 更新 的 部分 更新 到\nreal\ndom\n在 第四 步驟 結束 時\nuseEffect\n才 開始 執行 放在 它裡面 的 函式 ， 但\nuseLayoutEffect\n不同 ， 它 在 第三 步驟 就 會 開始 執行 ， 而 由於\nuseLayoutEffect\n是 同步 的 ， 所以 它會 有 拖延 到 畫面 呈現 的 問題 。\n使用 時機\n它 主要 在 操作\nDOM\n時 ， 有 發現 到 有 閃爍 情況 時 使用 。\n在 以下 範例 中 ， 點擊 按鈕 後 會 跳出 一段 文字 ， 從 圖片 可以 看出\nuseEffect\n彈 出 文字 有 殘影 ， 若 從 圖片 不易 看出 讀者 也 可以 點 範例 去 做 嘗試 。\nuseEffect :\nuseLayoutEffect :\n註 :\n也許 跳出 文字 在 實際 開發 中有 別的 寫法 ， 但 這裡 主要 想 表示 它們 的 差別",
        "word_seg_processed_content_text": "這篇要 補充 少\nuselayouteffect\nhook\nuseeffect\n語法 執行 時機 不太\n\nuseeffect\n差異\n先 假設 畫面\ntoggle\n按鈕 綁定 事件\nstate 那當 點擊 瞬間 dom\n四個 步驟 做 改變\nstate\n狀態 更新 畫面 變化\n建構 新\nvirtual\ndom\ntree\n舊\nvirtual\ndom\ntree\n透過\ndiff\n演算法 找出 更新\n更新 更新\nreal\ndom\n第四 步驟 結束 時\nuseeffect\n才 執行 放在 它裡面 函式\nuselayouteffect\n第三 步驟 會 執行\nuselayouteffect\n同步 它會 拖延 畫面 呈現\n時機\n操作\ndom\n時 發現 閃爍 情況 時\n範例 中 點擊 按鈕 會 跳出 一段 文字 圖片\nuseeffect\n彈 出 文字 殘影 圖片 不易 讀者 點 範例 做 嘗試\nuseeffect\nuselayouteffect\n註\n也許 跳出 文字 開發 中有 寫法 想 差別",
        "extracted_keywords": [
            "uselayouteffect",
            "useeffect",
            "按鈕",
            "點擊",
            "hook"
        ],
        "extracted_keywords_phrases": [
            "執行 uselayouteffect",
            "uselayouteffect hook",
            "uselayouteffect 也許",
            "補充 uselayouteffect",
            "useeffect uselayouteffect"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284118": {
        "href": "https://ithelp.ithome.com.tw/articles/10284118",
        "title": "淺談DevOps & Observability",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>公司內部分享</p>\n<p>公司20年老系統+傳統組織, 正面臨數位轉型中<br>\n團隊管理與開發定義SLO目標<br>\nDevOps這文化帶給傳統開發團隊的新思維與習慣<br>\n紀錄,監控與可觀測性帶給開發與維運雙方團隊的好處</p>\n<p><a href=\"https://hackmd.io/@AmdAc990TDm3EkP4EmImTA/S1TCG9qk5\" target=\"_blank\" rel=\"noreferrer noopener\">文章連結</a></p>\n<h1>Talking About DevOps &amp; Observability</h1>\n<hr>\n<h1>Outline</h1>\n<ul>\n<li>運維盲區Operational Blindness</li>\n<li>監控Monitoring</li>\n<li>紀錄Logging</li>\n<li>指標Metrics</li>\n<li>Observability</li>\n</ul>\n<hr>\n<h1>前言</h1>\n<p>主要針對公司內部現況做分享.<br>\n站在DevOps的右側, 偏運維角度看事情<br>\nObservability的部分只是介紹</p>\n<hr>\n<h2>Operational Blindness</h2>\n<p><img src=\"https://i.imgur.com/1dnit6x.jpg\" alt=\"\"></p>\n<hr>\n<h3>War Story</h3>\n<p><img src=\"https://i.imgur.com/POdkXcJ.png\" alt=\"\"><br>\nNote:<br>\n某天中午, 運維組內暴發出警報通知, 一堆訊息湧現. 大家也跳了起來, 發現網站癱瘓了, 外部監控近幾次健康檢查都沒過, 而觸發了警報.</p>\n<hr>\n<p><img src=\"https://i.imgur.com/k8DCN9x.png\" alt=\"\"><br>\nNote:<br>\n發現網站癱瘓了</p>\n<hr>\n<h3>Black-Box Monitoring</h3>\n<p><img src=\"https://i.imgur.com/CknOiks.png\" alt=\"\"><br>\nNote:<br>\n登入主機監控系統, 發現網站的系統指標正常, 記憶體也還有, CPU沒到100%, Disk跟IO也還在容許範圍內, 資料庫也活著</p>\n<hr>\n<p><img src=\"https://i.imgur.com/G82g0nD.png\" alt=\"\"><br>\nNote:<br>\n不知道原因只好把問題擴大到開發團隊, 因為主機與網站服務的進程本身看起來還算正常</p>\n<hr>\n<p><img src=\"https://i.imgur.com/Vm783kK.png\" alt=\"\"><br>\nNote:<br>\n開發團隊也不確定要看什麼, 且它們沒有直接登入正式環境主機的權限; 也不會讓所有人都有權限進入主機, 管理成本高與資安風險高</p>\n<hr>\n<p><img src=\"https://i.imgur.com/uep3689.png\" alt=\"\"><br>\nNote:<br>\n開發團隊只好與運維團隊一起工作並且只能發號施令<br>\n最終在資料庫上發現, 一堆慢查詢跟一堆連線處於CLOSE_WAIT狀態<br>\n在Web服務上也看到有幾乎一樣多數量的進程<br>\n推測很可能Web服務已經達到了最大處理容量並停止響應新的request(例如healthcheck)<br>\n最後把db的query session都砍掉, Web服務上的請求隊列也清空, 就正常了</p>\n<hr>\n<p><img src=\"https://i.imgur.com/wI4sTlx.png\" alt=\"\"><br>\nNote:<br>\n查找這些問題的根源, 浪費了很多時間;<br>\n當問題被升級時,  被波及的人也沒足夠權限查看對找問題有用的主機資訊與服務資訊.<br>\n最終還是得依賴運維團隊.且在這種情境下, 每一分鐘的無法服務或停機時間都是要錢的<br>\n運維團隊之所以只能把問題擴大, 是因為他們能看到的就幾乎只有主機的監控指標,</p>\n<hr>\n<h3>Question</h3>\n<ul>\n<li>Dev/Ops團隊的分離, 這樣的組織與溝通方式, 有間接成本的產生<br>\nNote:<br>\n傳統的結構上, 有一條明顯的紅線把開發與運維的職責劃分開.<br>\n運維團隊負責主機與基礎設施, 使得應用程式的交付成為可能.</li>\n</ul>\n<hr>\n<p><img src=\"https://i.imgur.com/X3kUYGy.png\" alt=\"\"><br>\nNote:<br>\nDeveloper與Operations如果組織結構與合作方式上職責分的太開, 往往會像拔河一般, 分散了力道.<br>\n相互拉扯中, 復原時間就流逝了.</p>\n<hr>\n<p><img src=\"https://i.imgur.com/EW4950D.png\" alt=\"\"><br>\nNote:<br>\n最可怕的還是, 使用者對平台提供的服務品質沒信心了, 跳去競品平台了</p>\n<hr>\n<h2>DevOps</h2>\n<p><img src=\"https://i.imgur.com/B4a94yh.png\" alt=\"\"></p>\n<h6><a href=\"https://youtu.be/OnK4IKgLl24\" target=\"_blank\" rel=\"noreferrer noopener\">What is SRE | Tasks and Responsibilities of an SRE | SRE vs DevOps</a></h6>\n<p>Note:<br>\nDeveloper與Operations不應該相互拉扯在拔河, 而分散了眾人的力道.</p>\n<hr>\n<p><img src=\"https://i.imgur.com/mQNibxr.png\" alt=\"\"></p>\n<hr>\n<p><img src=\"https://i.imgur.com/IuNaQsC.png\" alt=\"\"></p>\n<h6><a href=\"https://www.91app.tech/static/97979df17dd25408c24c20ae74e27155/SLO-design-of-the-asynchronous-system-Andrew.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">非同步系統的服務水準保證 淺談非同步系統的 SLO 設計-91APP</a></h6>\n<p>Note:<br>\nSLI（service level indicator）<br>\n指的是指標，例如：QPS，TPS，Duration，準確性，延遲，性能等</p>\n<p>不是所有的metric都視為SLI，選擇儘可能少的SLI，但這些SLI卻能說明服務是否穩定，可靠。</p>\n<p>SLO（service level objective）:服務等級目標<br>\n指的是一段時間內的目標，例如：1個月內的QPS 99.99%，響應時間&lt;10ms等等</p>\n<p>SLO是一組值的範圍，這個值就是由SLI定義的服務級別數值。自然的SLO定義就是，某SLI在正常情況下需要小於某值或者處於某個大小值之間。<br>\n選擇一個合適的SLO並不是一件容易的事情，當然一開始並不需要設定好這個範圍</p>\n<p>SLA （service level agreement）:服務等級協議<br>\n指的是整個協議，協議的內容包含了SLI，SLO以及恢復的方式和時間等等一系列所構成的協議</p>\n<hr>\n<ul>\n<li>基於時間的可用性</li>\n</ul>\n<blockquote>\n<p>基於時間的可用性 = 系統正常運行時間 /  (系統正常運行時間 + 停機時間)<br>\nSLO 99.95%, 以一年來看, 不可用佔了4小時22分鐘<br>\nSLO 99.99%, 以一年來看, 不可用佔了52分鐘</p>\n</blockquote>\n<hr>\n<ul>\n<li>基於次數合計的可用性</li>\n</ul>\n<blockquote>\n<p>基於合計的可用性 = 成功請求數 / 請求數總和<br>\nSLO 99.99%, 如果一天要接受2.5M個請求, 每天錯誤個數應&lt;250個</p>\n</blockquote>\n<h6><a href=\"https://study-area.sre.tw/Incidents/\" target=\"_blank\" rel=\"noreferrer noopener\">事件處理案例</a></h6>\n<hr>\n<ul>\n<li>基於延遲</li>\n</ul>\n<blockquote>\n<p>SLO 99% 前台每秒User訪問延遲 &lt; 300ms</p>\n</blockquote>\n<h6><a href=\"https://columns.chicken-house.net/2021/06/04/slo/\" target=\"_blank\" rel=\"noreferrer noopener\">[架構師的修練] #2, SLO - 如何確保服務水準?</a></h6>\n<hr>\n<h2>Monitoring</h2>\n<p><img src=\"https://i.imgur.com/6rgwWMz.png\" alt=\"\"></p>\n<hr>\n<h2>Types of Monitoring</h2>\n<p><img src=\"https://i.imgur.com/YUJ8QG7.png\" alt=\"\"></p>\n<h6><a href=\"https://www.meshcloud.io/2020/08/28/multi-cloud-monitoring-a-cloud-security-essential/\" target=\"_blank\" rel=\"noreferrer noopener\">Multi-Cloud Monitoring</a></h6>\n<hr>\n<h2>Monitoring Layers</h2>\n<p><img src=\"https://i.imgur.com/vImhE4B.png\" alt=\"\"></p>\n<hr>\n<h2>Logging</h2>\n<p>Deal with discrete events</p>\n<ul>\n<li>Application debug or error messages</li>\n<li>Audit-trail events</li>\n<li>Request-specific metadata</li>\n<li>Specific events<br>\nNote:<br>\n應用程式錯誤訊息、稽核事件、HTTP請求事件</li>\n</ul>\n<hr>\n<h2>Log Monitoring</h2>\n<p><img src=\"https://i.imgur.com/J9PjBD0.png\" alt=\"\"></p>\n<ul>\n<li>Troubleshooting</li>\n<li>Monitor</li>\n</ul>\n<hr>\n<ul>\n<li>Clearly log level</li>\n<li>Good log message (<a href=\"https://ithelp.ithome.com.tw/articles/10277678\" target=\"_blank\" rel=\"noreferrer noopener\">Structured Log</a>)</li>\n<li>Log aggregation<br>\nNote:<br>\nShow Loki<br>\n單行Log, 又是JSON格式, 針對各種類型的服務定義出固定的metadata key</li>\n</ul>\n<hr>\n<h2>Defect of Log Monitor</h2>\n<ul>\n<li>Low value density</li>\n</ul>\n<pre><code>[INFO] .... initializing...\n[INFO] ... request from xxx.xxx.xxx.xxx user_id xxxxxx\n</code></pre>\n<p>Note:<br>\n有價值的資訊密度太低, 很多都是第一行那樣的無價值資訊</p>\n<hr>\n<p>這部影片主要講了很多<br>\nLog Cetralize and Monitor的好處<br>\n跟Log要怎清楚的表達<br>\n<a href=\"https://www.youtube.com/watch?v=zdfhgtcm4uk\" target=\"_blank\" rel=\"noreferrer noopener\">Logging in the age of Microservices and the Cloud</a></p>\n<hr>\n<ul>\n<li>Write log into RDBMS\n<ul>\n<li>log如果併發寫入很高, 寫入的資料庫又是RDBMS, 併發事務量不會很高\n<ul>\n<li>就算buffer pool加大, 也是有極限的, 也不建議</li>\n</ul>\n</li>\n<li>log字段很多種類, 索引選擇困難</li>\n<li>DB真出事了, 想登入看log也沒法, 搞不好還沒寫進去</li>\n<li>很容易就是壓死DB的那根樹枝</li>\n<li>讓DB回歸, 業務狀態與資料的存儲與存取吧</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Metrics</h2>\n<p>4 Golden Signals</p>\n<ul>\n<li>Latency : time to serivce a request</li>\n<li>Traffic : requests/second</li>\n<li>Error : error rate of request</li>\n<li>Saturation : fullness of a service</li>\n</ul>\n<h6><a href=\"https://sre.google/sre-book/monitoring-distributed-systems/\" target=\"_blank\" rel=\"noreferrer noopener\">SRE-book</a></h6>\n<h6><a href=\"https://www.youtube.com/watch?v=ZVKrN1RLetI\" target=\"_blank\" rel=\"noreferrer noopener\">Observability: Metric, Logging, and Tracing, Oh My!</a></h6>\n<p>Note:<br>\n反映用戶體驗，衡量系統核心性能。如：系統的處理時間，作業計算系統的作業完成時間等。</p>\n<p>反映系統的服務量。如：請求數，發出和接收的網絡封包大小等。</p>\n<p>幫助發現和定位故障和問題。如：錯誤總量、調用服務失敗率等。</p>\n<p>反映系統的飽和度和負載。如：系統佔用的內存、作業隊列的長度等。</p>\n<hr>\n<ul>\n<li>\n<a href=\"https://prometheus.io/docs/concepts/data_model/#notation\" target=\"_blank\" rel=\"noreferrer noopener\">Metrics</a> for Prometheus\n<ul>\n<li>metric name and label sets</li>\n</ul>\n</li>\n</ul>\n<pre><code>&lt;metric name&gt;{&lt;label name&gt;=&lt;label value&gt;, ...}\n</code></pre>\n<pre><code># TYPE http_requests_total counter\n|--------------------------- Metric ----------------------------|-timestamp -|-value-|\n|--- metric name --|------------------ labelsets ---------------|\nhttp_requests_total{code=\"200\",handler=\"prometheus\",method=\"get\"}               721\n</code></pre>\n<p>Note:<br>\nlabel sets代表了這個metric name下的一個維度,可以有多個維度方便做聚合操作</p>\n<hr>\n<h2>Metric Types</h2>\n<pre><code>- Counters (rate)\n- Gauges (value)\n- Distribution \n\t- Histogram (heatmap)\n\t- Summary \n</code></pre>\n<h6><a href=\"https://www.youtube.com/watch?v=SoZZzB-yTOk&amp;list=WL&amp;index=115&amp;t=77s\" target=\"_blank\" rel=\"noreferrer noopener\">Observability of Distributed Systems</a></h6>\n<p>Note:<br>\ncounter只增不減, 通常用來取得request總量, 任務完成的數量,  錯誤發生次數, 或者計算某段時間內的rate變化率; 能事前透過壓力與負載測試能取得可預期的上限, 做監控與警告;<br>\n查詢當前系統中，訪問量前10的HTTP URL.</p>\n<p>gauge即時變化情況, 隨著時間不斷變化, 通常用來記錄cpu, mem用量, coroutine數量, pool usage, 併發請求數...;<br>\n透過計算樣本的線性回歸模型, 對數據的變化趨勢進行預測.</p>\n<p>Histogram會對觀測數據取樣，然後將觀測數據放入有數值上界的桶中，並記錄各桶中數據的個數，所有數據的個數和數據數值總和, 請求時延, 各種有樣本數據;用來區分是平均的慢還是長尾的慢,快速了解監控樣本的分佈情況<br>\nSummary 與 Histogram 類似，會對觀測數據進行取樣，得到數據的個數和總和。此外，還會取一個滑動窗口，計算窗口內樣本數據的分位數。</p>\n<hr>\n<h2>Archetecture</h2>\n<p><img src=\"https://i.imgur.com/MHtKRgQ.png\" alt=\"\"></p>\n<hr>\n<h2>Observability</h2>\n<p><img src=\"https://i.imgur.com/Z0x2oFn.jpg\" alt=\"\"></p>\n<h6><a href=\"https://www.slideshare.net/TylerTreat/the-observability-pipeline\" target=\"_blank\" rel=\"noreferrer noopener\">The Observability Pipeline</a></h6>\n<p>Note:<br>\nMonitoring tells you whether system works, observability lets you ask why it's not working</p>\n<hr>\n<p><img src=\"https://i.imgur.com/dNaiuoB.png\" alt=\"\"></p>\n<hr>\n<h2>Pilliars of Obersvability</h2>\n<p><img src=\"https://i.imgur.com/kf6Xd1i.jpg\" alt=\"\"></p>\n<hr>\n<h1>News</h1>\n<p><a href=\"https://www.ithome.com.tw/news/144120\" target=\"_blank\" rel=\"noreferrer noopener\">【企業SRE實例：新加坡星展集團】頂尖數位銀行如何再進化，SRE轉型是變身科技公司的關鍵</a><br>\n<a href=\"https://www.ithome.com.tw/news/144122\" target=\"_blank\" rel=\"noreferrer noopener\">【臺灣SRE實例：17Live集團】多功能型SRE化身內部信心來源，天天成為開發團隊後盾</a><br>\n<a href=\"https://www.ithome.com.tw/news/144121\" target=\"_blank\" rel=\"noreferrer noopener\">【臺灣SRE實例：Line臺灣】如何確保Line服務天天不中斷，專責SRE扮演開發與維運的橋樑</a><br>\n<a href=\"https://www.ithome.com.tw/news/149317\" target=\"_blank\" rel=\"noreferrer noopener\">Line臺灣百億筆遙測數據的可觀察性平臺架構大公開</a><br>\n<a href=\"https://www.ithome.com.tw/news/144119\" target=\"_blank\" rel=\"noreferrer noopener\">臺灣大型企業如何上手SRE，Google建議先做這4件事</a></p>\n<hr>\n<h2>Reference</h2>\n<p><a href=\"https://sre.google/sre-book/table-of-contents/\" target=\"_blank\" rel=\"noreferrer noopener\">SRE-BOOK</a><br>\n<a href=\"https://books.google.com.tw/books?id=g3kFEAAAQBAJ&amp;dq=Operations+Anti-Patterns,+DevOps+Solutions&amp;hl=zh-TW&amp;source=gbs_navlinks_s\" target=\"_blank\" rel=\"noreferrer noopener\">Operations Anti-Patterns, DevOps Solutions</a><br>\n<a href=\"https://books.google.com.tw/books?id=Rf8M_X_YTUoC&amp;dq=logging+and+log+management&amp;hl=zh-TW&amp;source=gbs_navlinks_s\" target=\"_blank\" rel=\"noreferrer noopener\">Logging and Log Management</a><br>\n<a href=\"https://help.aliyun.com/document_detail/48869.html\" target=\"_blank\" rel=\"noreferrer noopener\">阿里雲-日誌服務</a><br>\n<a href=\"https://grafana.com/docs/grafana/latest/\" target=\"_blank\" rel=\"noreferrer noopener\">Grafana Documentation</a><br>\n<a href=\"https://prometheus.io/docs/prometheus/latest/getting_started/\" target=\"_blank\" rel=\"noreferrer noopener\">Prometheus</a><br>\n<a href=\"https://grafana.com/docs/loki/latest/\" target=\"_blank\" rel=\"noreferrer noopener\">Loki Documentation</a><br>\n<a href=\"https://docs.fluentbit.io/manual/\" target=\"_blank\" rel=\"noreferrer noopener\">FluentBit Documentation</a></p>\n<hr>\n<h3>Thank you!</h3>\n<p>You can find me on<br>\n<img src=\"https://member.ithome.com.tw/avatars/120846?s=ithelp\" alt=\"\"></p>\n<ul>\n<li>\n<a href=\"https://tedmax100.github.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Blog</a>\n</li>\n<li>\n<a href=\"https://ithelp.ithome.com.tw/users/20104930/ironman\" target=\"_blank\" rel=\"noreferrer noopener\">IT邦</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-24 11:24:07",
        "author_href": "https://ithelp.ithome.com.tw/users/20104930/ironman",
        "author_name": "雷N",
        "series_href": "https://ithelp.ithome.com.tw/users/20104930/ironman/3882",
        "series_name": "系統與服務雜談",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>公司內部分享</p>\n<p>公司20年老系統+傳統組織, 正面臨數位轉型中<br/>\n團隊管理與開發定義SLO目標<br/>\nDevOps這文化帶給傳統開發團隊的新思維與習慣<br/>\n紀錄,監控與可觀測性帶給開發與維運雙方團隊的好處</p>\n<p></p>\n<h1>Talking About DevOps &amp; Observability</h1>\n<hr/>\n<h1>Outline</h1>\n<ul>\n<li>運維盲區Operational Blindness</li>\n<li>監控Monitoring</li>\n<li>紀錄Logging</li>\n<li>指標Metrics</li>\n<li>Observability</li>\n</ul>\n<hr/>\n<h1>前言</h1>\n<p>主要針對公司內部現況做分享.<br/>\n站在DevOps的右側, 偏運維角度看事情<br/>\nObservability的部分只是介紹</p>\n<hr/>\n<h2>Operational Blindness</h2>\n<p></p>\n<hr/>\n<h3>War Story</h3>\n<p><br/>\nNote:<br/>\n某天中午, 運維組內暴發出警報通知, 一堆訊息湧現. 大家也跳了起來, 發現網站癱瘓了, 外部監控近幾次健康檢查都沒過, 而觸發了警報.</p>\n<hr/>\n<p><br/>\nNote:<br/>\n發現網站癱瘓了</p>\n<hr/>\n<h3>Black-Box Monitoring</h3>\n<p><br/>\nNote:<br/>\n登入主機監控系統, 發現網站的系統指標正常, 記憶體也還有, CPU沒到100%, Disk跟IO也還在容許範圍內, 資料庫也活著</p>\n<hr/>\n<p><br/>\nNote:<br/>\n不知道原因只好把問題擴大到開發團隊, 因為主機與網站服務的進程本身看起來還算正常</p>\n<hr/>\n<p><br/>\nNote:<br/>\n開發團隊也不確定要看什麼, 且它們沒有直接登入正式環境主機的權限; 也不會讓所有人都有權限進入主機, 管理成本高與資安風險高</p>\n<hr/>\n<p><br/>\nNote:<br/>\n開發團隊只好與運維團隊一起工作並且只能發號施令<br/>\n最終在資料庫上發現, 一堆慢查詢跟一堆連線處於CLOSE_WAIT狀態<br/>\n在Web服務上也看到有幾乎一樣多數量的進程<br/>\n推測很可能Web服務已經達到了最大處理容量並停止響應新的request(例如healthcheck)<br/>\n最後把db的query session都砍掉, Web服務上的請求隊列也清空, 就正常了</p>\n<hr/>\n<p><br/>\nNote:<br/>\n查找這些問題的根源, 浪費了很多時間;<br/>\n當問題被升級時,  被波及的人也沒足夠權限查看對找問題有用的主機資訊與服務資訊.<br/>\n最終還是得依賴運維團隊.且在這種情境下, 每一分鐘的無法服務或停機時間都是要錢的<br/>\n運維團隊之所以只能把問題擴大, 是因為他們能看到的就幾乎只有主機的監控指標,</p>\n<hr/>\n<h3>Question</h3>\n<ul>\n<li>Dev/Ops團隊的分離, 這樣的組織與溝通方式, 有間接成本的產生<br/>\nNote:<br/>\n傳統的結構上, 有一條明顯的紅線把開發與運維的職責劃分開.<br/>\n運維團隊負責主機與基礎設施, 使得應用程式的交付成為可能.</li>\n</ul>\n<hr/>\n<p><br/>\nNote:<br/>\nDeveloper與Operations如果組織結構與合作方式上職責分的太開, 往往會像拔河一般, 分散了力道.<br/>\n相互拉扯中, 復原時間就流逝了.</p>\n<hr/>\n<p><br/>\nNote:<br/>\n最可怕的還是, 使用者對平台提供的服務品質沒信心了, 跳去競品平台了</p>\n<hr/>\n<h2>DevOps</h2>\n<p></p>\n<h6></h6>\n<p>Note:<br/>\nDeveloper與Operations不應該相互拉扯在拔河, 而分散了眾人的力道.</p>\n<hr/>\n<p></p>\n<hr/>\n<p></p>\n<h6></h6>\n<p>Note:<br/>\nSLI（service level indicator）<br/>\n指的是指標，例如：QPS，TPS，Duration，準確性，延遲，性能等</p>\n<p>不是所有的metric都視為SLI，選擇儘可能少的SLI，但這些SLI卻能說明服務是否穩定，可靠。</p>\n<p>SLO（service level objective）:服務等級目標<br/>\n指的是一段時間內的目標，例如：1個月內的QPS 99.99%，響應時間&lt;10ms等等</p>\n<p>SLO是一組值的範圍，這個值就是由SLI定義的服務級別數值。自然的SLO定義就是，某SLI在正常情況下需要小於某值或者處於某個大小值之間。<br/>\n選擇一個合適的SLO並不是一件容易的事情，當然一開始並不需要設定好這個範圍</p>\n<p>SLA （service level agreement）:服務等級協議<br/>\n指的是整個協議，協議的內容包含了SLI，SLO以及恢復的方式和時間等等一系列所構成的協議</p>\n<hr/>\n<ul>\n<li>基於時間的可用性</li>\n</ul>\n<blockquote>\n<p>基於時間的可用性 = 系統正常運行時間 /  (系統正常運行時間 + 停機時間)<br/>\nSLO 99.95%, 以一年來看, 不可用佔了4小時22分鐘<br/>\nSLO 99.99%, 以一年來看, 不可用佔了52分鐘</p>\n</blockquote>\n<hr/>\n<ul>\n<li>基於次數合計的可用性</li>\n</ul>\n<blockquote>\n<p>基於合計的可用性 = 成功請求數 / 請求數總和<br/>\nSLO 99.99%, 如果一天要接受2.5M個請求, 每天錯誤個數應&lt;250個</p>\n</blockquote>\n<h6></h6>\n<hr/>\n<ul>\n<li>基於延遲</li>\n</ul>\n<blockquote>\n<p>SLO 99% 前台每秒User訪問延遲 &lt; 300ms</p>\n</blockquote>\n<h6></h6>\n<hr/>\n<h2>Monitoring</h2>\n<p></p>\n<hr/>\n<h2>Types of Monitoring</h2>\n<p></p>\n<h6></h6>\n<hr/>\n<h2>Monitoring Layers</h2>\n<p></p>\n<hr/>\n<h2>Logging</h2>\n<p>Deal with discrete events</p>\n<ul>\n<li>Application debug or error messages</li>\n<li>Audit-trail events</li>\n<li>Request-specific metadata</li>\n<li>Specific events<br/>\nNote:<br/>\n應用程式錯誤訊息、稽核事件、HTTP請求事件</li>\n</ul>\n<hr/>\n<h2>Log Monitoring</h2>\n<p></p>\n<ul>\n<li>Troubleshooting</li>\n<li>Monitor</li>\n</ul>\n<hr/>\n<ul>\n<li>Clearly log level</li>\n<li>Good log message ()</li>\n<li>Log aggregation<br/>\nNote:<br/>\nShow Loki<br/>\n單行Log, 又是JSON格式, 針對各種類型的服務定義出固定的metadata key</li>\n</ul>\n<hr/>\n<h2>Defect of Log Monitor</h2>\n<ul>\n<li>Low value density</li>\n</ul>\n<pre></pre>\n<p>Note:<br/>\n有價值的資訊密度太低, 很多都是第一行那樣的無價值資訊</p>\n<hr/>\n<p>這部影片主要講了很多<br/>\nLog Cetralize and Monitor的好處<br/>\n跟Log要怎清楚的表達<br/>\n</p>\n<hr/>\n<ul>\n<li>Write log into RDBMS\n<ul>\n<li>log如果併發寫入很高, 寫入的資料庫又是RDBMS, 併發事務量不會很高\n<ul>\n<li>就算buffer pool加大, 也是有極限的, 也不建議</li>\n</ul>\n</li>\n<li>log字段很多種類, 索引選擇困難</li>\n<li>DB真出事了, 想登入看log也沒法, 搞不好還沒寫進去</li>\n<li>很容易就是壓死DB的那根樹枝</li>\n<li>讓DB回歸, 業務狀態與資料的存儲與存取吧</li>\n</ul>\n</li>\n</ul>\n<hr/>\n<h2>Metrics</h2>\n<p>4 Golden Signals</p>\n<ul>\n<li>Latency : time to serivce a request</li>\n<li>Traffic : requests/second</li>\n<li>Error : error rate of request</li>\n<li>Saturation : fullness of a service</li>\n</ul>\n<h6></h6>\n<h6></h6>\n<p>Note:<br/>\n反映用戶體驗，衡量系統核心性能。如：系統的處理時間，作業計算系統的作業完成時間等。</p>\n<p>反映系統的服務量。如：請求數，發出和接收的網絡封包大小等。</p>\n<p>幫助發現和定位故障和問題。如：錯誤總量、調用服務失敗率等。</p>\n<p>反映系統的飽和度和負載。如：系統佔用的內存、作業隊列的長度等。</p>\n<hr/>\n<ul>\n<li>\n for Prometheus\n<ul>\n<li>metric name and label sets</li>\n</ul>\n</li>\n</ul>\n<pre></pre>\n<pre></pre>\n<p>Note:<br/>\nlabel sets代表了這個metric name下的一個維度,可以有多個維度方便做聚合操作</p>\n<hr/>\n<h2>Metric Types</h2>\n<pre></pre>\n<h6></h6>\n<p>Note:<br/>\ncounter只增不減, 通常用來取得request總量, 任務完成的數量,  錯誤發生次數, 或者計算某段時間內的rate變化率; 能事前透過壓力與負載測試能取得可預期的上限, 做監控與警告;<br/>\n查詢當前系統中，訪問量前10的HTTP URL.</p>\n<p>gauge即時變化情況, 隨著時間不斷變化, 通常用來記錄cpu, mem用量, coroutine數量, pool usage, 併發請求數...;<br/>\n透過計算樣本的線性回歸模型, 對數據的變化趨勢進行預測.</p>\n<p>Histogram會對觀測數據取樣，然後將觀測數據放入有數值上界的桶中，並記錄各桶中數據的個數，所有數據的個數和數據數值總和, 請求時延, 各種有樣本數據;用來區分是平均的慢還是長尾的慢,快速了解監控樣本的分佈情況<br/>\nSummary 與 Histogram 類似，會對觀測數據進行取樣，得到數據的個數和總和。此外，還會取一個滑動窗口，計算窗口內樣本數據的分位數。</p>\n<hr/>\n<h2>Archetecture</h2>\n<p></p>\n<hr/>\n<h2>Observability</h2>\n<p></p>\n<h6></h6>\n<p>Note:<br/>\nMonitoring tells you whether system works, observability lets you ask why it's not working</p>\n<hr/>\n<p></p>\n<hr/>\n<h2>Pilliars of Obersvability</h2>\n<p></p>\n<hr/>\n<h1>News</h1>\n<p><br/>\n<br/>\n<br/>\n<br/>\n</p>\n<hr/>\n<h2>Reference</h2>\n<p><br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n</p>\n<hr/>\n<h3>Thank you!</h3>\n<p>You can find me on<br/>\n</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "公司內部分享\n公司20年老系統+傳統組織, 正面臨數位轉型中\n團隊管理與開發定義SLO目標\nDevOps這文化帶給傳統開發團隊的新思維與習慣\n紀錄,監控與可觀測性帶給開發與維運雙方團隊的好處\n\nTalking About DevOps & Observability\n\nOutline\n\n運維盲區Operational Blindness\n監控Monitoring\n紀錄Logging\n指標Metrics\nObservability\n\n\n前言\n主要針對公司內部現況做分享.\n站在DevOps的右側, 偏運維角度看事情\nObservability的部分只是介紹\n\nOperational Blindness\n\n\nWar Story\n\nNote:\n某天中午, 運維組內暴發出警報通知, 一堆訊息湧現. 大家也跳了起來, 發現網站癱瘓了, 外部監控近幾次健康檢查都沒過, 而觸發了警報.\n\n\nNote:\n發現網站癱瘓了\n\nBlack-Box Monitoring\n\nNote:\n登入主機監控系統, 發現網站的系統指標正常, 記憶體也還有, CPU沒到100%, Disk跟IO也還在容許範圍內, 資料庫也活著\n\n\nNote:\n不知道原因只好把問題擴大到開發團隊, 因為主機與網站服務的進程本身看起來還算正常\n\n\nNote:\n開發團隊也不確定要看什麼, 且它們沒有直接登入正式環境主機的權限; 也不會讓所有人都有權限進入主機, 管理成本高與資安風險高\n\n\nNote:\n開發團隊只好與運維團隊一起工作並且只能發號施令\n最終在資料庫上發現, 一堆慢查詢跟一堆連線處於CLOSE_WAIT狀態\n在Web服務上也看到有幾乎一樣多數量的進程\n推測很可能Web服務已經達到了最大處理容量並停止響應新的request(例如healthcheck)\n最後把db的query session都砍掉, Web服務上的請求隊列也清空, 就正常了\n\n\nNote:\n查找這些問題的根源, 浪費了很多時間;\n當問題被升級時,  被波及的人也沒足夠權限查看對找問題有用的主機資訊與服務資訊.\n最終還是得依賴運維團隊.且在這種情境下, 每一分鐘的無法服務或停機時間都是要錢的\n運維團隊之所以只能把問題擴大, 是因為他們能看到的就幾乎只有主機的監控指標,\n\nQuestion\n\nDev/Ops團隊的分離, 這樣的組織與溝通方式, 有間接成本的產生\nNote:\n傳統的結構上, 有一條明顯的紅線把開發與運維的職責劃分開.\n運維團隊負責主機與基礎設施, 使得應用程式的交付成為可能.\n\n\n\nNote:\nDeveloper與Operations如果組織結構與合作方式上職責分的太開, 往往會像拔河一般, 分散了力道.\n相互拉扯中, 復原時間就流逝了.\n\n\nNote:\n最可怕的還是, 使用者對平台提供的服務品質沒信心了, 跳去競品平台了\n\nDevOps\n\n\nNote:\nDeveloper與Operations不應該相互拉扯在拔河, 而分散了眾人的力道.\n\n\n\n\n\nNote:\nSLI（service level indicator）\n指的是指標，例如：QPS，TPS，Duration，準確性，延遲，性能等\n不是所有的metric都視為SLI，選擇儘可能少的SLI，但這些SLI卻能說明服務是否穩定，可靠。\nSLO（service level objective）:服務等級目標\n指的是一段時間內的目標，例如：1個月內的QPS 99.99%，響應時間<10ms等等\nSLO是一組值的範圍，這個值就是由SLI定義的服務級別數值。自然的SLO定義就是，某SLI在正常情況下需要小於某值或者處於某個大小值之間。\n選擇一個合適的SLO並不是一件容易的事情，當然一開始並不需要設定好這個範圍\nSLA （service level agreement）:服務等級協議\n指的是整個協議，協議的內容包含了SLI，SLO以及恢復的方式和時間等等一系列所構成的協議\n\n\n基於時間的可用性\n\n\n基於時間的可用性 = 系統正常運行時間 /  (系統正常運行時間 + 停機時間)\nSLO 99.95%, 以一年來看, 不可用佔了4小時22分鐘\nSLO 99.99%, 以一年來看, 不可用佔了52分鐘\n\n\n\n基於次數合計的可用性\n\n\n基於合計的可用性 = 成功請求數 / 請求數總和\nSLO 99.99%, 如果一天要接受2.5M個請求, 每天錯誤個數應<250個\n\n\n\n\n基於延遲\n\n\nSLO 99% 前台每秒User訪問延遲 < 300ms\n\n\n\nMonitoring\n\n\nTypes of Monitoring\n\n\n\nMonitoring Layers\n\n\nLogging\nDeal with discrete events\n\nApplication debug or error messages\nAudit-trail events\nRequest-specific metadata\nSpecific events\nNote:\n應用程式錯誤訊息、稽核事件、HTTP請求事件\n\n\nLog Monitoring\n\n\nTroubleshooting\nMonitor\n\n\n\nClearly log level\nGood log message ()\nLog aggregation\nNote:\nShow Loki\n單行Log, 又是JSON格式, 針對各種類型的服務定義出固定的metadata key\n\n\nDefect of Log Monitor\n\nLow value density\n\n\nNote:\n有價值的資訊密度太低, 很多都是第一行那樣的無價值資訊\n\n這部影片主要講了很多\nLog Cetralize and Monitor的好處\n跟Log要怎清楚的表達\n\n\n\nWrite log into RDBMS\n\nlog如果併發寫入很高, 寫入的資料庫又是RDBMS, 併發事務量不會很高\n\n就算buffer pool加大, 也是有極限的, 也不建議\n\n\nlog字段很多種類, 索引選擇困難\nDB真出事了, 想登入看log也沒法, 搞不好還沒寫進去\n很容易就是壓死DB的那根樹枝\n讓DB回歸, 業務狀態與資料的存儲與存取吧\n\n\n\n\nMetrics\n4 Golden Signals\n\nLatency : time to serivce a request\nTraffic : requests/second\nError : error rate of request\nSaturation : fullness of a service\n\n\n\nNote:\n反映用戶體驗，衡量系統核心性能。如：系統的處理時間，作業計算系統的作業完成時間等。\n反映系統的服務量。如：請求數，發出和接收的網絡封包大小等。\n幫助發現和定位故障和問題。如：錯誤總量、調用服務失敗率等。\n反映系統的飽和度和負載。如：系統佔用的內存、作業隊列的長度等。\n\n\n\n for Prometheus\n\nmetric name and label sets\n\n\n\n\n\nNote:\nlabel sets代表了這個metric name下的一個維度,可以有多個維度方便做聚合操作\n\nMetric Types\n\n\nNote:\ncounter只增不減, 通常用來取得request總量, 任務完成的數量,  錯誤發生次數, 或者計算某段時間內的rate變化率; 能事前透過壓力與負載測試能取得可預期的上限, 做監控與警告;\n查詢當前系統中，訪問量前10的HTTP URL.\ngauge即時變化情況, 隨著時間不斷變化, 通常用來記錄cpu, mem用量, coroutine數量, pool usage, 併發請求數...;\n透過計算樣本的線性回歸模型, 對數據的變化趨勢進行預測.\nHistogram會對觀測數據取樣，然後將觀測數據放入有數值上界的桶中，並記錄各桶中數據的個數，所有數據的個數和數據數值總和, 請求時延, 各種有樣本數據;用來區分是平均的慢還是長尾的慢,快速了解監控樣本的分佈情況\nSummary 與 Histogram 類似，會對觀測數據進行取樣，得到數據的個數和總和。此外，還會取一個滑動窗口，計算窗口內樣本數據的分位數。\n\nArchetecture\n\n\nObservability\n\n\nNote:\nMonitoring tells you whether system works, observability lets you ask why it's not working\n\n\n\nPilliars of Obersvability\n\n\nNews\n\n\n\n\n\n\nReference\n\n\n\n\n\n\n\n\n\nThank you!\nYou can find me on",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "[INFO] .... initializing...\n[INFO] ... request from xxx.xxx.xxx.xxx user_id xxxxxx\n"
            },
            {
                "language": "unknown",
                "content": "<metric name>{<label name>=<label value>, ...}\n"
            },
            {
                "language": "unknown",
                "content": "# TYPE http_requests_total counter\n|--------------------------- Metric ----------------------------|-timestamp -|-value-|\n|--- metric name --|------------------ labelsets ---------------|\nhttp_requests_total{code=\"200\",handler=\"prometheus\",method=\"get\"}               721\n"
            },
            {
                "language": "unknown",
                "content": "- Counters (rate)\n- Gauges (value)\n- Distribution \n\t- Histogram (heatmap)\n\t- Summary \n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "公司 內部 分享\n公司 20 年老 系統 + 傳統 組織 ,\n正 面臨 數位 轉型 中\n團隊 管理 與 開發 定義 SLO 目標\nDevOps 這 文化 帶給 傳統 開發 團隊 的 新思維 與 習慣\n紀錄 , 監控 與 可 觀測 性 帶給 開發 與 維運 雙方 團隊 的 好處\nTalking\nAbout\nDevOps\n&\nObservability\nOutline\n運維 盲區 Operational\nBlindness\n監控 Monitoring\n紀錄 Logging\n指標 Metrics\nObservability\n前言\n主要 針對 公司 內部 現況 做 分享 .\n站 在 DevOps 的 右側 ,\n偏運維 角度看 事情\nObservability 的 部分 只是 介紹\nOperational\nBlindness\nWar\nStory\nNote :\n某 天 中午 ,\n運維 組內 暴發 出 警報 通知 ,\n一堆 訊息 湧現 .\n大家 也 跳 了 起來 ,\n發現 網站 癱瘓 了 ,\n外部 監控 近 幾次 健康檢查 都 沒過 ,\n而 觸發 了 警報 .\nNote :\n發現 網站 癱瘓 了\nBlack - Box\nMonitoring\nNote :\n登入 主機 監控 系統 ,\n發現 網站 的 系統 指標 正常 ,\n記憶體 也 還有 ,\nCPU 沒到 100% ,\nDisk 跟 IO 也 還在 容許 範圍 內 ,\n資料庫 也 活著\nNote :\n不 知道 原因 只好 把 問題 擴大 到 開發 團隊 ,\n因為 主機 與 網站 服務 的 進程 本身 看起來 還 算 正常\nNote :\n開發 團隊 也 不 確定 要 看 什麼 ,\n且 它們 沒有 直接 登入 正式 環境 主機 的 權限 ;\n也 不會 讓 所有人 都 有 權限 進入 主機 ,\n管理 成本高 與 資安 風險 高\nNote :\n開發 團隊 只好 與 運維 團隊 一起 工作 並且 只能 發號施令\n最終 在 資料庫 上 發現 ,\n一堆 慢 查詢 跟 一堆 連線 處於 CLOSE _ WAIT 狀態\n在 Web 服務 上 也 看到 有 幾乎 一樣 多 數量 的 進程\n推測 很 可能 Web 服務 已經 達到 了 最大 處理 容量 並 停止 響應 新 的 request ( 例如 healthcheck )\n最後 把 db 的 query\nsession 都 砍掉 ,\nWeb 服務 上 的 請求 隊列 也 清空 ,\n就 正常 了\nNote :\n查找 這些 問題 的 根源 ,\n浪費 了 很多 時間 ;\n當 問題 被 升級 時 ,\n被 波及 的 人 也 沒 足夠 權限 查看 對 找 問題 有用 的 主機 資訊 與 服務 資訊 .\n最終 還是 得 依賴 運維 團隊 . 且 在 這種 情境 下 ,\n每 一分鐘 的 無法 服務 或 停機 時間 都 是 要錢 的\n運維 團隊 之所以 只能 把 問題 擴大 ,\n是 因為 他們 能 看到 的 就 幾乎 只有 主機 的 監控 指標 ,\nQuestion\nDev / Ops 團隊 的 分離 ,\n這樣 的 組織 與 溝通 方式 ,\n有 間接成本 的 產生\nNote :\n傳統 的 結構 上 ,\n有 一條 明顯 的 紅線 把 開發 與 運維 的 職責 劃分 開 .\n運維 團隊 負責 主機 與 基礎設施 ,\n使得 應用程式 的 交付 成為 可能 .\nNote :\nDeveloper 與 Operations 如果 組織 結構 與 合作 方式 上 職責 分 的 太開 ,\n往往 會 像 拔河 一般 ,\n分散 了 力道 .\n相互 拉扯 中 ,\n復原 時間 就 流逝 了 .\nNote :\n最 可怕 的 還是 ,\n使用者 對 平台 提供 的 服務 品質 沒 信心 了 ,\n跳去 競品 平台 了\nDevOps\nNote :\nDeveloper 與 Operations 不 應該 相互 拉扯 在 拔河 ,\n而 分散 了 眾人 的 力道 .\nNote :\nSLI （ service\nlevel\nindicator ）\n指 的 是 指標 ， 例如 ： QPS ， TPS ， Duration ， 準確性 ， 延遲 ， 性能 等\n不是 所有 的 metric 都 視為 SLI ， 選擇 儘可能少 的 SLI ， 但 這些 SLI 卻 能 說明 服務 是否 穩定 ， 可靠 。\nSLO （ service\nlevel\nobjective ） : 服務 等級 目標\n指 的 是 一段時間 內 的 目標 ， 例如 ： 1 個 月 內 的 QPS\n99.99% ， 響應 時間 < 10ms 等等\nSLO 是 一組 值 的 範圍 ， 這個 值 就是 由 SLI 定義 的 服務 級別 數值 。 自然 的 SLO 定義 就是 ， 某 SLI 在 正常 情況 下 需要 小於 某值 或者 處於 某個 大小 值 之間 。\n選擇 一個 合適 的 SLO 並 不是 一件 容易 的 事情 ， 當然 一 開始 並不需要 設定 好 這個 範圍\nSLA\n（ service\nlevel\nagreement ） : 服務 等級 協議\n指 的 是 整個 協議 ， 協議 的 內容 包含 了 SLI ， SLO 以及 恢復 的 方式 和 時間 等等 一系列 所 構成 的 協議\n基於 時間 的 可用性\n基於 時間 的 可用性\n=\n系統 正常 運行 時間\n/\n( 系統 正常 運行 時間\n+\n停機 時間 )\nSLO\n99.95% ,\n以 一年 來看 ,\n不可 用 佔 了 4 小時 22 分鐘\nSLO\n99.99% ,\n以 一年 來看 ,\n不可 用 佔 了 52 分鐘\n基於 次數 合計 的 可用性\n基於 合計 的 可用性\n=\n成功 請求 數\n/\n請求 數 總和\nSLO\n99.99% ,\n如果 一天 要 接受 2.5 M 個 請求 ,\n每天 錯誤 個數 應 < 250 個\n基於 延遲\nSLO\n99%\n前台 每秒 User 訪問 延遲\n<\n300ms\nMonitoring\nTypes\nof\nMonitoring\nMonitoring\nLayers\nLogging\nDeal\nwith\ndiscrete\nevents\nApplication\ndebug\nor\nerror\nmessages\nAudit - trail\nevents\nRequest - specific\nmetadata\nSpecific\nevents\nNote :\n應用程式 錯誤 訊息 、 稽核 事件 、 HTTP 請求 事件\nLog\nMonitoring\nTroubleshooting\nMonitor\nClearly\nlog\nlevel\nGood\nlog\nmessage\n( )\nLog\naggregation\nNote :\nShow\nLoki\n單行 Log ,\n又 是 JSON 格式 ,\n針對 各種類型 的 服務 定義出 固定 的 metadata\nkey\nDefect\nof\nLog\nMonitor\nLow\nvalue\ndensity\nNote :\n有 價值 的 資訊 密度 太低 ,\n很多 都 是 第一行 那樣 的 無 價值 資訊\n這部 影片 主要 講了 很多\nLog\nCetralize\nand\nMonitor 的 好處\n跟 Log 要 怎 清楚 的 表達\nWrite\nlog\ninto\nRDBMS\nlog 如果 併發 寫入 很 高 ,\n寫入 的 資料庫 又 是 RDBMS ,\n併發 事務 量 不會 很 高\n就算 buffer\npool 加大 ,\n也 是 有 極限 的 ,\n也 不 建議\nlog 字段 很多 種類 ,\n索引 選擇 困難\nDB 真 出事 了 ,\n想 登入 看 log 也 沒法 ,\n搞不好 還沒 寫進去\n很 容易 就是 壓死 DB 的 那根 樹枝\n讓 DB 回歸 ,\n業務 狀態 與 資料 的 存儲 與 存取 吧\nMetrics\n4\nGolden\nSignals\nLatency\n:\ntime\nto\nserivce\na\nrequest\nTraffic\n:\nrequests / second\nError\n:\nerror\nrate\nof\nrequest\nSaturation\n:\nfullness\nof\na\nservice\nNote :\n反映 用戶 體驗 ， 衡量 系統核心 性能 。 如 ： 系統 的 處理 時間 ， 作業 計算 系統 的 作業 完成 時間 等 。\n反映 系統 的 服務 量 。 如 ： 請求 數 ， 發出 和 接收 的 網絡 封包 大小 等 。\n幫助 發現 和 定位 故障 和 問題 。 如 ： 錯誤 總量 、 調用 服務 失敗率 等 。\n反映 系統 的 飽和度 和 負載 。 如 ： 系統 佔用 的 內存 、 作業 隊列 的 長度 等 。\nfor\nPrometheus\nmetric\nname\nand\nlabel\nsets\nNote :\nlabel\nsets 代表 了 這個 metric\nname 下 的 一個 維度 , 可以 有 多個 維度 方便 做 聚合 操作\nMetric\nTypes\nNote :\ncounter 只增 不減 ,\n通常 用來 取得 request 總量 ,\n任務 完成 的 數量 ,\n錯誤 發生 次數 ,\n或者 計算 某 段時間 內 的 rate 變化率 ;\n能 事前 透過 壓力 與 負載 測試 能 取得 可 預期 的 上限 ,\n做 監控 與 警告 ;\n查詢 當前 系統 中 ， 訪問量 前 10 的 HTTP\nURL .\ngauge 即時 變化 情況 ,\n隨著 時間 不斷 變化 ,\n通常 用來 記錄 cpu ,\nmem 用量 ,\ncoroutine 數量 ,\npool\nusage ,\n併發 請求 數 ... ;\n透過 計算 樣本 的 線性 回歸 模型 ,\n對 數據 的 變化趨勢 進行 預測 .\nHistogram 會 對 觀測 數據 取樣 ， 然後 將 觀測 數據 放入 有 數值 上界 的 桶 中 ， 並 記錄 各桶 中 數據 的 個數 ， 所有 數據 的 個數 和 數據 數值 總和 ,\n請求 時延 ,\n各種 有 樣本 數據 ; 用來 區分 是 平均 的 慢 還是 長尾 的 慢 , 快速 了解 監控 樣本 的 分佈 情況\nSummary\n與\nHistogram\n類似 ， 會 對 觀測 數據 進行 取樣 ， 得到 數據 的 個數 和 總和 。 此外 ， 還會取 一個 滑動 窗口 ， 計算 窗口 內 樣本 數據 的 分 位數 。\nArchetecture\nObservability\nNote :\nMonitoring\ntells\nyou\nwhether\nsystem\nworks ,\nobservability\nlets\nyou\nask\nwhy\nit ' s\nnot\nworking\nPilliars\nof\nObersvability\nNews\nReference\nThank\nyou !\nYou\ncan\nfind\nme\non",
        "word_seg_processed_content_text": "公司 內部 分享\n公司 20 年老 系統 傳統 組織\n正 面臨 數位 轉型 中\n團隊 管理 開發 定義 slo 目標\ndevops 文化 帶給 傳統 開發 團隊 新思維 習慣\n紀錄 監控 觀測 性 帶給 開發 維運 團隊 好處\ntalking\nabout\ndevops\n\nobservability\noutline\n運維 盲區 operational\nblindness\n監控 monitoring\n紀錄 logging\n指標 metrics\nobservability\n前言\n針對 公司 內部 現況 做 分享\n站 devops 右側\n偏運維 角度看 事情\nobservability 介紹\noperational\nblindness\nwar\nstory\nnote\n天 中午\n運維 組內 暴發 出 警報 通知\n一堆 訊息 湧現\n跳\n發現 網站 癱瘓\n外部 監控 近 幾次 健康檢查 沒過\n觸發 警報\nnote\n發現 網站 癱瘓\nblack box\nmonitoring\nnote\n登入 主機 監控 系統\n發現 網站 系統 指標\n記憶體\ncpu 沒到 100%\ndisk io 還在 容許 內\n資料庫 活著\nnote\n原因 只好 開發 團隊\n主機 網站 服務 進程 本身 看起來 算\nnote\n開發 團隊\n登入 正式 環境 主機 權限\n所有人 權限 主機\n管理 成本高 資安 風險 高\nnote\n開發 團隊 只好 運維 團隊 工作 只能 發號施令\n最終 資料庫 發現\n一堆 慢 查詢 一堆 連線 處於 close wait 狀態\nweb 服務 數量 進程\n推測 web 服務 容量 停止 響應 新 request healthcheck\ndb query\nsession 砍掉\nweb 服務 請求 隊列 清空\n\nnote\n查找 根源\n浪費 很多 時間\n升級 時\n波及 沒 足夠 權限 查看 找 有用 主機 資訊 服務 資訊\n最終 依賴 運維 團隊 情境\n一分鐘 服務 停機 時間 要錢\n運維 團隊 只能\n主機 監控 指標\nquestion\ndev ops 團隊 分離\n組織 溝通 方式\n間接成本\nnote\n傳統 結構\n一條 紅線 開發 運維 職責 劃分 開\n運維 團隊 負責 主機 基礎設施\n應用程式 交付\nnote\ndeveloper operations 組織 結構 合作 方式 職責 分 太開\n會 拔河\n分散 力道\n相互 拉扯 中\n復原 時間 流逝\nnote\n可怕\n使用者 平台 提供 服務 品質 沒 信心\n跳去 競品 平台\ndevops\nnote\ndeveloper operations 相互 拉扯 拔河\n分散 眾人 力道\nnote\nsli service\nlevel\nindicator\n指 指標 qps tps duration 準確性 延遲 性能\nmetric 視為 sli 選擇 儘可能少 sli sli 服務 穩定 可靠\nslo service\nlevel\nobjective 服務 等級 目標\n指 一段時間 內 目標 1 月 內 qps\n99.99% 響應 時間 10ms\nslo 一組 值 值 sli 定義 服務 級別 數值 自然 slo 定義 sli 情況 小於 某值 處於 大小 值 之間\n選擇 合適 slo 一件 事情 並不需要 設定\nsla\nservice\nlevel\nagreement 服務 等級 協議\n指 協議 協議 內容 包含 sli slo 恢復 方式 時間 一系列 協議\n基於 時間 可用性\n基於 時間 可用性\n\n系統 運行 時間\n\n系統 運行 時間\n\n停機 時間\nslo\n99.95%\n一年 來看\n佔 4 小時 22 分鐘\nslo\n99.99%\n一年 來看\n佔 52 分鐘\n基於 次數 合計 可用性\n基於 合計 可用性\n\n成功 請求 數\n\n請求 數 總和\nslo\n99.99%\n接受 2.5 m 請求\n錯誤 個數 應 250\n基於 延遲\nslo\n99%\n前台 每秒 user 訪問 延遲\n\n300ms\nmonitoring\ntypes\n\nmonitoring\nmonitoring\nlayers\nlogging\ndeal\n\ndiscrete\nevents\napplication\ndebug\n\nerror\nmessages\naudit trail\nevents\nrequest specific\nmetadata\nspecific\nevents\nnote\n應用程式 錯誤 訊息 稽核 事件 http 請求 事件\nlog\nmonitoring\ntroubleshooting\nmonitor\nclearly\nlog\nlevel\ngood\nlog\nmessage\n\nlog\naggregation\nnote\nshow\nloki\n單行 log\njson 格式\n針對 各種類型 服務 定義出 固定 metadata\nkey\ndefect\n\nlog\nmonitor\nlow\nvalue\ndensity\nnote\n價值 資訊 密度 太低\n很多 第一行 價值 資訊\n這部 影片 講了 很多\nlog\ncetralize\n\nmonitor 好處\nlog 表達\nwrite\nlog\ninto\nrdbms\nlog 併發 寫入 高\n寫入 資料庫 rdbms\n併發 事務 量 高\n就算 buffer\npool 加大\n極限\n建議\nlog 字段 很多 種類\n索引 選擇 困難\ndb 真 出事\n想 登入 log 沒法\n搞不好 還沒 寫進去\n壓死 db 那根 樹枝\ndb 回歸\n業務 狀態 資料 存儲 存取\nmetrics\n4\ngolden\nsignals\nlatency\n\ntime\n\nserivce\na\nrequest\ntraffic\n\nrequests second\nerror\n\nerror\nrate\n\nrequest\nsaturation\n\nfullness\n\na\nservice\nnote\n用戶 體驗 衡量 系統核心 性能 系統 時間 作業 計算 系統 作業 時間\n系統 服務 量 請求 數 發出 接收 網絡 封包 大小\n發現 定位 故障 錯誤 總量 調用 服務 失敗率\n系統 飽和度 負載 系統 佔用 內存 作業 隊列 長度\n\nprometheus\nmetric\nname\n\nlabel\nsets\nnote\nlabel\nsets 代表 metric\nname 維度 多個 維度 做 聚合 操作\nmetric\ntypes\nnote\ncounter 只增 不減\n用來 request 總量\n數量\n錯誤 發生 次數\n計算 段時間 內 rate 變化率\n事前 透過 壓力 負載 測試 預期 上限\n做 監控 警告\n查詢 系統 中 訪問量 前 10 http\nurl\ngauge 即時 變化 情況\n時間 變化\n用來 記錄 cpu\nmem 用量\ncoroutine 數量\npool\nusage\n併發 請求 數 ...\n透過 計算 樣本 線性 回歸 模型\n數據 變化趨勢 預測\nhistogram 會 觀測 數據 取樣 觀測 數據 放入 數值 上界 桶 中 記錄 各桶 中 數據 個數 數據 個數 數據 數值 總和\n請求 時延\n樣本 數據 用來 區分 平均 慢 長尾 慢 快速 了解 監控 樣本 分佈 情況\nsummary\n\nhistogram\n類似 會 觀測 數據 取樣 數據 個數 總和 還會取 滑動 窗口 計算 窗口 內 樣本 數據 分 位數\narchetecture\nobservability\nnote\nmonitoring\ntells\n\nwhether\nsystem\nworks\nobservability\nlets\n\nask\nwhy\n' s\n\nworking\npilliars\n\nobersvability\nnews\nreference\nthank\n\n\n\nfind\nme\n",
        "extracted_keywords": [
            "組織",
            "數位",
            "公司",
            "變化趨勢",
            "基礎設施"
        ],
        "extracted_keywords_phrases": [
            "數位 轉型",
            "組織 面臨",
            "面臨 數位",
            "年老 系統",
            "組織 溝通"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284080": {
        "href": "https://ithelp.ithome.com.tw/articles/10284080",
        "title": "以Ardiuno控制CPU散熱器呼吸燈",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjSDV5_bKGmTT7IkBWmHyRo88lVrLldgTfJ7wq_NoOhNNa3pCyEy81rnk31y0ZWsj2SRy56WEbEFDigtxIH8VDOXogML2D8JwP28OICNPKtGal9hLl6Dh51dmrzs5YzGzY3Fh-1QtzgiQqDQSo6DotVRSRL8JkaFxYmCd7AhAeBqly9dORZKNweQs1SNg=w640-h480\" alt=\"\"><br>\n▲  AR12-TUF採用導熱管與CPU直接接觸的熱導管直觸技術(HDC)，4根Ø 6mm全銅熱導管搭配和全鋁散熱鰭片，液相作動流體於吸熱端蒸發成汽相，相變吸收了大量熱量，流體高速流向放熱端，放熱端遇冷凝結成液相後，相變又釋放出大量熱量，最後藉由重力/毛細力/離心力迴流至吸熱端，如此反覆循環。由此可知吸熱端位於相對下方較為理想。</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgyCJGb331XXjFBmjOC7SbxI-EFJ8K-b6oSBuVYqSihELKVZH_dL8yLJZXS-kGD8YM3tZxZZFKH_HcvaB3rwtuf58MFstc3lODrCTt9GMxpoRMARhK1j7iYJv6y7cD4LJ933XqKsEOJygWCG7TeJjXPAwrBlB6xml0UITERg5kvOzckbekHAXElEfulWA=w640-h480\" alt=\"\"><br>\n▲ 12公分高效能九葉片風扇屬於PWM風扇，主機板能透過控制線調整風扇轉速，使用者可自行調整效能或靜音。風扇中央帶有8顆ARGB LED, 能與各家主機板連動軟體協作同步控制燈效設定。接頭為4 pin PWM &amp; 4-1 pin ARGB (5V LED)，可安裝在主機板上的4Pin接腳，或者中間經過集線器與更多aRGB裝置偕同運作。</p>\n<p>★ ★ ★ ★  Ardiuno控制  ★ ★ ★ ★</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEjY5PBgieGy1-dvOxUz6GSQJxeIJ5ISAyCMMXNeMvyqQrUteKMbcVCIrFW_XsiqqeGn4g6sVz-BwdGHAgNN8QZQrbKI6GX23xPxUtHcYLM3i-FDnpDx1e0kVwTv6zNEpWNHSz69h1iqlvRKN7Eh9rejvdRmCs5_TwqXVE0ShRozBCNvAdX78jkiX0lQ1Q=w640-h480\" alt=\"\"><br>\n▲ 裝上機殼偕同運作貌，由於主機板上沒有4Pin接腳。文章就這樣藥草草結束了嗎？絕對不是這樣，aRGB風扇電力輸入是5V DC手邊，光好想到Arduino開發板上也是有5V輸出，便想以Ardiuno控制SilverStone AR12-TUF散熱器呼吸燈。</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhTGkZqMfKyL1lfyFsNb89ronZCD5MsZbNP-vatte_IyPWaHcjV7LMVd658kHujMyGQyAa-cuHzrfwge6mzX4aVwIOHhb2wJCYHX_6DIhEVmW0-LpqSwcGNJmzRSyoIXdDzo0G-s40aZM5gMkL5GbCUzaInc4FfbErkfA47J8EPcDp2oWv9ZX5_vj4cJg=w640-h480\" alt=\"\"><br>\n▲ 麵包版的結構請自行參考其他網站，使用麵包版的好處就是能代替aRGB Hub，以並聯方式控制許多aRGB裝置，而且可以隨時調整，價格又很便宜，小尺寸的30元上下即可入手，固定上就使用雙面膠即可。</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEglqK3sYiV8anK4-SSu89HT8TOB-FpEBVVMdOLdfl2KJQor8EgS2acJmYNP4hxdmsTgdDKa4sMwv2zwM4FXPl1b4ib3Dp49fxNOh2GyUTEzDKm7exdnUJXGn3LLn0YRcZmf8sDpg4wrqjAnZyBz__v0NZgo3AOgwoLZL1Z5f7HZpqVIcoNqxj9Aq1J_Fw=w640-h480\" alt=\"\"><br>\n▲ 杜邦現在的長度插不進控制線的孔徑，附上的蓋子原來是一截排針，就可以直插在麵包版上。</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEj5mAbpL6YGxLRjeeSd_Sq_K4j2po2dWryJ6aNvcBpC4Jd-pTZSbb1X9_zKczEsA54glpgV_NQHCnuH7uZa8L4OqA4iwoWcdA-PA7_81t8OePM-K6GV6MPgltKmjRv5QpuKWMsjPw8aQO5oxn70Tvbgd52f1PNz88GZ6GQE629W6IkM6vHYIRzBjsOxpA=w640-h480\" alt=\"\"><br>\n▲ 看板子上的小抄，把5V與接地對上，資料線安排在第五針，要改動的只有#define DATA_PIN 5 這一行。</p>\n<h2>下載以下程式碼與安裝FastLED函式庫。Arduino IDE的安裝使用請自行google。</h2>\n<pre><code>#include &lt;FastLED.h&gt;\n\n\n\nFASTLED_USING_NAMESPACE\n\n\n\n#if defined(FASTLED_VERSION) &amp;&amp; (FASTLED_VERSION &lt; 3001000)\n\n#warning \"Requires FastLED 3.1 or later; check github for latest code.\"\n\n#endif\n\n\n\n#define DATA_PIN    5\n\n//#define CLK_PIN   4\n\n#define LED_TYPE    WS2811\n\n#define COLOR_ORDER GRB\n\n#define NUM_LEDS    17\n\nCRGB leds[NUM_LEDS];\n\n\n\n#define BRIGHTNESS          100\n\n#define FRAMES_PER_SECOND  120\n\n\n\nvoid setup() {\n\n  delay(3000); // 3 second delay for recovery\n\n  \n\n  // tell FastLED about the LED strip configuration\n\n  FastLED.addLeds&lt;LED_TYPE,DATA_PIN,COLOR_ORDER&gt;(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);\n\n\n\n  // set master brightness control\n\n  FastLED.setBrightness(BRIGHTNESS);\n\n}\n\n\n\nuint8_t gHue = 0; // rotating \"base color\" used by many of the patterns\n\n  \n\nvoid loop()\n\n{\n\n  // Call the current pattern function once, updating the 'leds' array\n\n  rainbow();\n\n  \n\n  // send the 'leds' array out to the actual LED strip\n\n  FastLED.show();  \n\n  // insert a delay to keep the framerate modest\n\n  FastLED.delay(1000/FRAMES_PER_SECOND); \n\n\n\n  // do some periodic updates\n\n  EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the \"base color\" through the rainbow\n\n}\n\nvoid rainbow() \n\n{\n\n  // FastLED's built-in rainbow generator\n\n  fill_rainbow( leds, NUM_LEDS, gHue, 7);\n\n}\n</code></pre>\n<p>--</p>\n<p><img src=\"https://blogger.googleusercontent.com/img/a/AVvXsEgvRhBFY5_nZRsagxYP3p1GCUWXd8mTenneIaR3oA2dOkI2XGYPiDhzwXVweSYO8Vd5v60Y-oGWYwygbpwNnZFJkYiWWYz0X4DAre2N52_nBUX-t7IrJ62Wcj9cLCWBNVtm-F3Uzxg3W5W69ax3YYHidzUqAhW1lAFYJgsIjDXjtiFrLlH4r9Yf3_trQQ=w640-h480\" alt=\"\"><br>\n▲ 編譯上傳後能更正常執行，由於官方的提醒字樣「務必確認所欲接的控制盒、主機板RGB 連接埠部分的排列定義與AR12-TUF相同。若是連接至不正確的連接埠則可能造成無法使用甚至損毀」，再三使用電錶確認電阻與腳位，最後一次成功，比想像的簡單許多。Youtube影片連結在此供參。而風扇在上機上電後自然會跟著轉動。</p>\n<p>★ ★ ★ ★ 心得  ★ ★ ★ ★</p>\n<p>使用燈控軟體有簡單易用的好處，當然會吃上一點系統資源。使用開發版就是玩家想要燈校怎麼展現就能怎麼展現，看是要與音樂撥放同步，根據白天黑夜來切換，用程式控制一定比燈控軟體來的有彈性。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "AI & Data",
        "published_at": "2022-02-22 11:40:03",
        "author_href": "https://ithelp.ithome.com.tw/users/20030355/ironman",
        "author_name": "krarm",
        "series_href": "https://ithelp.ithome.com.tw/users/20030355/ironman/4873",
        "series_name": "Krazure",
        "series_num": "1",
        "processed_content_html": "<div class=\"markdown__style\">\n<p><br/>\n▲  AR12-TUF採用導熱管與CPU直接接觸的熱導管直觸技術(HDC)，4根Ø 6mm全銅熱導管搭配和全鋁散熱鰭片，液相作動流體於吸熱端蒸發成汽相，相變吸收了大量熱量，流體高速流向放熱端，放熱端遇冷凝結成液相後，相變又釋放出大量熱量，最後藉由重力/毛細力/離心力迴流至吸熱端，如此反覆循環。由此可知吸熱端位於相對下方較為理想。</p>\n<p><br/>\n▲ 12公分高效能九葉片風扇屬於PWM風扇，主機板能透過控制線調整風扇轉速，使用者可自行調整效能或靜音。風扇中央帶有8顆ARGB LED, 能與各家主機板連動軟體協作同步控制燈效設定。接頭為4 pin PWM &amp; 4-1 pin ARGB (5V LED)，可安裝在主機板上的4Pin接腳，或者中間經過集線器與更多aRGB裝置偕同運作。</p>\n<p>★ ★ ★ ★  Ardiuno控制  ★ ★ ★ ★</p>\n<p><br/>\n▲ 裝上機殼偕同運作貌，由於主機板上沒有4Pin接腳。文章就這樣藥草草結束了嗎？絕對不是這樣，aRGB風扇電力輸入是5V DC手邊，光好想到Arduino開發板上也是有5V輸出，便想以Ardiuno控制SilverStone AR12-TUF散熱器呼吸燈。</p>\n<p><br/>\n▲ 麵包版的結構請自行參考其他網站，使用麵包版的好處就是能代替aRGB Hub，以並聯方式控制許多aRGB裝置，而且可以隨時調整，價格又很便宜，小尺寸的30元上下即可入手，固定上就使用雙面膠即可。</p>\n<p><br/>\n▲ 杜邦現在的長度插不進控制線的孔徑，附上的蓋子原來是一截排針，就可以直插在麵包版上。</p>\n<p><br/>\n▲ 看板子上的小抄，把5V與接地對上，資料線安排在第五針，要改動的只有#define DATA_PIN 5 這一行。</p>\n<h2>下載以下程式碼與安裝FastLED函式庫。Arduino IDE的安裝使用請自行google。</h2>\n<pre></pre>\n<p>--</p>\n<p><br/>\n▲ 編譯上傳後能更正常執行，由於官方的提醒字樣「務必確認所欲接的控制盒、主機板RGB 連接埠部分的排列定義與AR12-TUF相同。若是連接至不正確的連接埠則可能造成無法使用甚至損毀」，再三使用電錶確認電阻與腳位，最後一次成功，比想像的簡單許多。Youtube影片連結在此供參。而風扇在上機上電後自然會跟著轉動。</p>\n<p>★ ★ ★ ★ 心得  ★ ★ ★ ★</p>\n<p>使用燈控軟體有簡單易用的好處，當然會吃上一點系統資源。使用開發版就是玩家想要燈校怎麼展現就能怎麼展現，看是要與音樂撥放同步，根據白天黑夜來切換，用程式控制一定比燈控軟體來的有彈性。</p>\n<br/>\n</div>",
        "content_text": "▲  AR12-TUF採用導熱管與CPU直接接觸的熱導管直觸技術(HDC)，4根Ø 6mm全銅熱導管搭配和全鋁散熱鰭片，液相作動流體於吸熱端蒸發成汽相，相變吸收了大量熱量，流體高速流向放熱端，放熱端遇冷凝結成液相後，相變又釋放出大量熱量，最後藉由重力/毛細力/離心力迴流至吸熱端，如此反覆循環。由此可知吸熱端位於相對下方較為理想。\n\n▲ 12公分高效能九葉片風扇屬於PWM風扇，主機板能透過控制線調整風扇轉速，使用者可自行調整效能或靜音。風扇中央帶有8顆ARGB LED, 能與各家主機板連動軟體協作同步控制燈效設定。接頭為4 pin PWM & 4-1 pin ARGB (5V LED)，可安裝在主機板上的4Pin接腳，或者中間經過集線器與更多aRGB裝置偕同運作。\n★ ★ ★ ★  Ardiuno控制  ★ ★ ★ ★\n\n▲ 裝上機殼偕同運作貌，由於主機板上沒有4Pin接腳。文章就這樣藥草草結束了嗎？絕對不是這樣，aRGB風扇電力輸入是5V DC手邊，光好想到Arduino開發板上也是有5V輸出，便想以Ardiuno控制SilverStone AR12-TUF散熱器呼吸燈。\n\n▲ 麵包版的結構請自行參考其他網站，使用麵包版的好處就是能代替aRGB Hub，以並聯方式控制許多aRGB裝置，而且可以隨時調整，價格又很便宜，小尺寸的30元上下即可入手，固定上就使用雙面膠即可。\n\n▲ 杜邦現在的長度插不進控制線的孔徑，附上的蓋子原來是一截排針，就可以直插在麵包版上。\n\n▲ 看板子上的小抄，把5V與接地對上，資料線安排在第五針，要改動的只有#define DATA_PIN 5 這一行。\n下載以下程式碼與安裝FastLED函式庫。Arduino IDE的安裝使用請自行google。\n\n--\n\n▲ 編譯上傳後能更正常執行，由於官方的提醒字樣「務必確認所欲接的控制盒、主機板RGB 連接埠部分的排列定義與AR12-TUF相同。若是連接至不正確的連接埠則可能造成無法使用甚至損毀」，再三使用電錶確認電阻與腳位，最後一次成功，比想像的簡單許多。Youtube影片連結在此供參。而風扇在上機上電後自然會跟著轉動。\n★ ★ ★ ★ 心得  ★ ★ ★ ★\n使用燈控軟體有簡單易用的好處，當然會吃上一點系統資源。使用開發版就是玩家想要燈校怎麼展現就能怎麼展現，看是要與音樂撥放同步，根據白天黑夜來切換，用程式控制一定比燈控軟體來的有彈性。",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "#include <FastLED.h>\n\n\n\nFASTLED_USING_NAMESPACE\n\n\n\n#if defined(FASTLED_VERSION) && (FASTLED_VERSION < 3001000)\n\n#warning \"Requires FastLED 3.1 or later; check github for latest code.\"\n\n#endif\n\n\n\n#define DATA_PIN    5\n\n//#define CLK_PIN   4\n\n#define LED_TYPE    WS2811\n\n#define COLOR_ORDER GRB\n\n#define NUM_LEDS    17\n\nCRGB leds[NUM_LEDS];\n\n\n\n#define BRIGHTNESS          100\n\n#define FRAMES_PER_SECOND  120\n\n\n\nvoid setup() {\n\n  delay(3000); // 3 second delay for recovery\n\n  \n\n  // tell FastLED about the LED strip configuration\n\n  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip);\n\n\n\n  // set master brightness control\n\n  FastLED.setBrightness(BRIGHTNESS);\n\n}\n\n\n\nuint8_t gHue = 0; // rotating \"base color\" used by many of the patterns\n\n  \n\nvoid loop()\n\n{\n\n  // Call the current pattern function once, updating the 'leds' array\n\n  rainbow();\n\n  \n\n  // send the 'leds' array out to the actual LED strip\n\n  FastLED.show();  \n\n  // insert a delay to keep the framerate modest\n\n  FastLED.delay(1000/FRAMES_PER_SECOND); \n\n\n\n  // do some periodic updates\n\n  EVERY_N_MILLISECONDS( 20 ) { gHue++; } // slowly cycle the \"base color\" through the rainbow\n\n}\n\nvoid rainbow() \n\n{\n\n  // FastLED's built-in rainbow generator\n\n  fill_rainbow( leds, NUM_LEDS, gHue, 7);\n\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "▲\nAR12 - TUF 採用 導熱管 與 CPU 直接 接觸 的 熱導管 直觸 技術 ( HDC ) ， 4 根 Ø\n6mm 全銅 熱導管 搭配 和 全鋁 散熱 鰭 片 ， 液相 作動 流體 於 吸熱 端 蒸發 成汽相 ， 相變 吸收 了 大量 熱量 ， 流體 高速 流向 放熱 端 ， 放熱 端遇 冷凝 結成 液相 後 ， 相變 又 釋放出 大量 熱量 ， 最後 藉由 重力 / 毛細 力 / 離心力 迴流 至 吸熱 端 ， 如此 反覆 循環 。 由此可知 吸熱 端 位於 相對 下方 較 為 理想 。\n▲\n12 公分 高效能 九 葉片 風扇 屬於 PWM 風扇 ， 主機板 能 透過 控制線 調整 風扇 轉速 ， 使用者 可 自行 調整 效能 或 靜音 。 風扇 中央 帶有 8 顆 ARGB\nLED ,\n能 與 各家 主機板 連動 軟體 協作 同步控制 燈效 設定 。 接頭 為 4\npin\nPWM\n&\n4 - 1\npin\nARGB\n( 5V\nLED ) ， 可 安裝 在 主機板 上 的 4Pin 接腳 ， 或者 中間 經過 集線器 與 更 多 aRGB 裝置 偕同 運作 。\n★\n★\n★\n★\nArdiuno 控制\n★\n★\n★\n★\n▲\n裝 上 機殼 偕同 運作 貌 ， 由於 主機板 上 沒有 4Pin 接腳 。 文章 就 這樣 藥 草草 結束 了 嗎 ？ 絕對 不是 這樣 ， aRGB 風扇 電力 輸入 是 5V\nDC 手邊 ， 光好 想到 Arduino 開發板 上 也 是 有 5V 輸出 ， 便 想 以 Ardiuno 控制 SilverStone\nAR12 - TUF 散熱器 呼吸 燈 。\n▲\n麵 包版 的 結構 請 自行 參考 其他 網站 ， 使用 麵 包版 的 好處 就是 能 代替 aRGB\nHub ， 以 並聯 方式 控制 許多 aRGB 裝置 ， 而且 可以 隨時 調整 ， 價格 又 很 便宜 ， 小 尺寸 的 30 元 上下 即可 入手 ， 固定 上 就 使用 雙面膠 即可 。\n▲\n杜邦 現在 的 長度 插不進 控制線 的 孔徑 ， 附上 的 蓋子 原來 是 一截 排針 ， 就 可以 直 插 在 麵 包版上 。\n▲\n看 板子 上 的 小抄 ， 把 5V 與 接地 對 上 ， 資料 線 安排 在 第五 針 ， 要 改動 的 只有 # define\nDATA _ PIN\n5\n這 一行 。\n下載 以下 程式碼 與 安裝 FastLED 函式 庫 。 Arduino\nIDE 的 安裝 使用 請 自行 google 。\n--\n▲\n編譯 上傳 後 能 更 正常 執行 ， 由於 官方 的 提醒 字樣 「 務必 確認 所欲 接 的 控制 盒 、 主機板 RGB\n連接埠 部分 的 排列 定義 與 AR12 - TUF 相同 。 若 是 連接 至 不 正確 的 連接埠 則 可能 造成 無法 使用 甚至 損毀 」 ， 再三 使用 電錶 確認 電阻 與 腳位 ， 最後 一次 成功 ， 比 想像 的 簡單 許多 。 Youtube 影片 連結 在 此供 參 。 而 風扇 在 上 機上 電後 自然 會 跟 著 轉動 。\n★\n★\n★\n★\n心得\n★\n★\n★\n★\n使用 燈控 軟體 有 簡單 易用 的 好處 ， 當然 會 吃 上 一點 系統資源 。 使用 開發 版 就是 玩家 想要 燈校 怎麼 展現 就 能 怎麼 展現 ， 看 是 要 與 音樂 撥放 同步 ， 根據 白天黑夜 來 切換 ， 用 程式 控制 一定 比燈控 軟體 來 的 有 彈性 。",
        "word_seg_processed_content_text": "▲\nar12 tuf 採用 導熱管 cpu 接觸 熱導管 直觸 技術 hdc 4 根 ø\n6mm 全銅 熱導管 搭配 全鋁 散熱 鰭 片 液相 作動 流體 吸熱 端 蒸發 成汽相 相變 吸收 熱量 流體 高速 流向 放熱 端 放熱 端遇 冷凝 結成 液相 相變 釋放出 熱量 藉由 重力 毛細 力 離心力 迴流 吸熱 端 反覆 循環 由此可知 吸熱 端 位於 下方 理想\n▲\n12 公分 高效能 九 葉片 風扇 pwm 風扇 主機板 透過 控制線 調整 風扇 轉速 使用者 自行 調整 效能 靜音 風扇 中央 帶有 8 顆 argb\nled\n各家 主機板 連動 軟體 協作 同步控制 燈效 設定 接頭 4\npin\npwm\n\n4 1\npin\nargb\n5v\nled 安裝 主機板 4pin 接腳 集線器 更 argb 裝置 偕同 運作\n★\n★\n★\n★\nardiuno 控制\n★\n★\n★\n★\n▲\n裝 機殼 偕同 運作 貌 主機板 4pin 接腳 文章 藥 草草 結束 argb 風扇 電力 輸入 5v\ndc 手邊 光好 想到 arduino 開發板 5v 輸出 便 想 ardiuno 控制 silverstone\nar12 tuf 散熱器 呼吸 燈\n▲\n麵 包版 結構 請 自行 參考 網站 麵 包版 好處 argb\nhub 並聯 方式 控制 argb 裝置 隨時 調整 價格 便宜 尺寸 30 元 即可 入手 固定 雙面膠 即可\n▲\n杜邦 長度 插不進 控制線 孔徑 附上 蓋子 一截 排針 直 插 麵 包版上\n▲\n板子 小抄 5v 接地 資料 線 安排 第五 針 改動 define\ndata pin\n5\n一行\n下載 程式碼 安裝 fastled 函式 庫 arduino\nide 安裝 請 自行 google\n--\n▲\n編譯 上傳 更 執行 官方 提醒 字樣 務必 確認 所欲 接 控制 盒 主機板 rgb\n連接埠 排列 定義 ar12 tuf 連接 正確 連接埠 損毀 再三 電錶 確認 電阻 腳位 成功 想像 簡單 youtube 影片 連結 此供 參 風扇 機上 電後 自然 會\n★\n★\n★\n★\n心得\n★\n★\n★\n★\n燈控 軟體 簡單 易用 好處 會 吃 一點 系統資源 開發 版 玩家 想要 燈校 展現 展現 音樂 撥放 同步 白天黑夜 切換 程式 控制 比燈控 軟體 彈性",
        "extracted_keywords": [
            "熱導管",
            "導熱管",
            "散熱器",
            "熱量",
            "ar12"
        ],
        "extracted_keywords_phrases": [
            "tuf 散熱器",
            "熱導管 搭配",
            "導熱管 cpu",
            "採用 導熱管",
            "全銅 熱導管"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284054": {
        "href": "https://ithelp.ithome.com.tw/articles/10284054",
        "title": "【額外分享】超深度鐵人賽後自我審視",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>本文同步刊於 <a href=\"https://medium.com/@ChiHaoLu\" target=\"_blank\" rel=\"noreferrer noopener\">Medium</a></p>\n<h4>目錄</h4>\n<ul>\n<li>前言</li>\n<li>鐵人賽</li>\n<li>系列文提到的項目</li>\n<li>比賽結束之後</li>\n<li>區塊鏈</li>\n<li>近期規劃</li>\n<li>未來規劃</li>\n<li>結語</li>\n</ul>\n<h4>前言</h4>\n<p>會寫這篇文的原因是參加 2021 鐵人賽，說不定真正意義上地改變我的人生哈哈哈哈哈哈。這樣講並不是要給自己的鐵人文章冠上一個無上榮耀的意思，而是我認為自己從深度層面獲得了很多。</p>\n<p>在開始之前先來聽個歌吧！</p>\n<p><iframe width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" src=\"https://www.youtube.com/embed/i7J9aU6yCzw\"></iframe></p>\n<h4>鐵人賽</h4>\n<p>我平常就有習慣寫文章紀錄學習內容、心得的習慣，只是過往都當作是宣洩心情的一種方式，或者是作為分享自己近狀發在 FB 或 IG 上。</p>\n<p>所以知道有鐵人賽的時候，並沒有想太多就覺得自己可以參加。畢竟從小到大就很喜歡寫東寫西的，所以擠出一點內容來鋪滿三十天並不是太困難。這裡想說的是在得獎前我從來沒想過可以得到肯定，只是覺得可以有一個新的媒介分享自己學習的歷程頗有趣的！</p>\n<p>鐵人賽是一個極度有意義的活動，因為我身邊有很多朋友其實總是會在寒、暑假規劃自己要學什麼東西，但一直沒有一個動力來 Push 自己。而這個比賽的團體完賽獎，就是要藉由同儕或組員的壓力來<strong>互相督促砥礪</strong>，若是大家都有心要對得起彼此，就會願意多花一點心力寫文章。</p>\n<p>只是參加這個比賽，為達質量，為防意外，為獲肯定，為求舒適，<strong>「累積存稿」</strong> 真的是不可避免的。因為沒有累積一定的文章數量，絕對是會遇到各種意外或者讓自己（和組員們）到最後那一陣子痛苦至極。</p>\n<p>至少我要求組員是必須要在開賽之前，都要累積到 20~25 篇以上。雖然這樣看起來我是個很嚴厲的隊長，但過暑假的大學生真的是超級悠閒的吧？實在沒有什麼理由可以不先存稿硬要拖到要開學才寫。</p>\n<blockquote>\n<p>如果自以為可以安排好最後幾天再衝刺，那為什麼前幾個寒暑假還會毫無收穫的結束呢。</p>\n</blockquote>\n<h4>系列文提到的項目</h4>\n<p>這個項目最後是胎死腹中的，因為成本、獲利，各種奇形怪狀、撲朔迷離的現象所以沒有成功。要說如果真的 Deploy 上去能 Mint 多少 E 還真不知道，但我猜回本是絕對沒問題的。</p>\n<p>區塊鏈這個領域是被技術統治的世界，科學家和工程師真的可以做到太多太多太多事情，不只是因為所有交易（MainNet, TestNet）都是透明的導致跟單和鎖址機器人橫行，還有許多不熟悉（甚至熟悉）區塊鏈的夥伴很容易被各種釣魚網站、駭客攻擊而損失資產。更不用說這裡充斥一堆假博士和騙子了，無腦的去推一些公鏈生態系和項目，根本就和老鼠會沒兩樣。</p>\n<blockquote>\n<p>在這個嶄新的領域裡面，一個項目怎麼去衡量 Developer、Marketing、Artist 誰的努力多寡、功過如何，真的是沒有一個好的評量準則或既定模式。</p>\n</blockquote>\n<p>唯一能確認的就是：<strong>在做任何項目和合夥之前，都必須把錢的事情講好</strong>。否則講到「錢」，很多人都是六親不認的呵呵。</p>\n<p>這半年我接觸越來越多同行的前輩和夥伴，便聽到越來越多奇聞軼事，賣不出去的時候就想要怪 Marketing，要分錢的時候就想把專利拿回 Artist 手中，寫出 Bug 的時候 Developer 就道歉然後就沒了。如何把一個項目或說公司、組織經營的好，確實是一門大功課。</p>\n<p>因為組織穩定就會非常直接地影響社群信心和向心力。而 NFT 的價值水平無他的就是跟「人」有關，非同質化的代幣沒有什麼發行量、吞吐量、通膨率、代幣模型可以去估值，頂多就是同時持有的人能有幾位。<strong>最終還是要回到整個社群的營運、福利、向心力，藝術價值和品牌形象。</strong></p>\n<p>不知道還要說些什麼，反正這個世界就是這樣，有緣就做、沒緣就算了，現在把自己該做好的事情做好那就好了。</p>\n<h4>比賽結束之後</h4>\n<p>這半年接收到不少的合作訊息還有信件，雖然其中不免有一些詐騙或看起來稍微詭譎的內容，但大部分的大家還是很有興趣的。只是請原諒小弟不常看 iThome 的網站和信箱，所以有時候可能會漏掉了一些資訊！</p>\n<p>最近看到很多中文創作者或社群開發 NFT 或 DAPP 的時候參考了我的文章，對此我是非常開心的。</p>\n<blockquote>\n<p>因為我其實沒有那麼厲害（至少當初在寫這系列文的時候，菜的跟什麼一樣），卻能給大家一丁點的幫助。就像是我當初從很多厲害又慷慨的大神們手中獲得的一樣，差別只在我不是大神也不厲害。</p>\n</blockquote>\n<p>自比賽結束以來，我充實了自己非常多，找到了一份自己蠻喜歡的工作，然後接觸到好多好多厲害的工程師，也收到很多工作面試的邀約。可我著重的點其實不是賺了多少錢（雖然也沒多少），而是我能藉由這些機會更知道自己哪裡還有不足。</p>\n<p>就像我印象很深刻我目前收到面試規模最大的公司，他開出了七、八個技術門檻而我勉勉強強才能達到一半。光是這個案例就夠自己再努力好一陣子了。</p>\n<h4>區塊鏈</h4>\n<p>對我來說區塊鏈是一個極度迷人的技術，在這之中龐大的市場像是迷幻的魔法，去中心化的概念像是革命的號角，高深莫測的底層技術、電腦科學和密碼學像是把人類往下一個時代推進的產物。</p>\n<p>身為一個反骨的青年，我對很多現行的社會制度、資本橫行的現象、中間人造成的信息不對稱和壟斷、金融業和央行詭異的作為，都感到非常的不舒適。雖然我不會想要一股腦地推翻什麼，但我相信這項技術能帶來更多不一樣的改變。</p>\n<p>我這個人非常喜歡「原型」的東西，所以對區塊鏈底層技術有點興趣，但數學、密碼學、網路學還有各種計算機學科，其實都給我這個非本科系的學生帶來不少的麻煩。這也是導致為什麼直到此時此刻我還在應用層面佇足，而沒有向底層鑽。</p>\n<p>未來我也會發更多我學習區塊鏈，不管是應用還是底層技術的筆記跟心得在 <a href=\"https://medium.com/@ChiHaoLu\" target=\"_blank\" rel=\"noreferrer noopener\">Medium</a> 裡面。</p>\n<h4>近期規劃</h4>\n<p>近期規劃我歸類在 7 月的暑假之前，主要的任務除了這學期的課業、助教工作之外，還有兩份出版品，兩場表演，一場 Tech. Meet-Up，以及一份實習，最後是帶隊參加 ETH Global Hackathon。</p>\n<h4>未來規劃</h4>\n<p>經過了鐵人賽之後其實我更加確定要往 Blockchain Developer 前進的決心，就像我上文或平常都會掛在嘴邊的一句話：「像我這樣非電資科系的人…」其實我對自己是非常沒有自信的。</p>\n<p>當然不是說拿了一個小小的佳作就飛上天了，覺得能贏過本科系訓練出來的學生們。而是經過這個比賽之後體會到，其實很多我嚮往的事情是該去挑戰看看的。就像是原本以為自己根本沒辦法寫出合約、串上 API、規劃一個 DAPP 的架構，最後才發現要做出一個「能動的東西」，倒真沒那麼難。</p>\n<blockquote>\n<p>那是不是或許要把這些能動的東西變成「好用的東西」、「安全的東西」，只要把那些該學會的東西（公司開出來的技術門檻）弄好，就有機會了呢？我修的資料結構與演算法也是 NTU-CSIE 的，當的助教也是 NTU-IM 的，實在沒理由什麼都不嘗試就放棄對吧？</p>\n</blockquote>\n<p>當我有這樣的想法之後，面對一切的挑戰好像就沒那麼害怕了。雖然我知道真正直視各種可怕的科目時，自己還是會怨聲載道地想放棄哈哈哈哈哈哈哈。</p>\n<h4>結語</h4>\n<p>回首超過半年前的那三十篇文章，可以說是槽點滿滿，但我並不會覺得這是多麼羞恥的事情。因為能看出了這些內容漏洞百出，或者是每個地方我現在都能想出更棒的寫法，某種程度上是證明了從比賽結束到現在我不是虛度光陰的。</p>\n<p>其實我已經開始寫今年鐵人賽的文章了，本來想說要不要一次衝 60~90 篇（可以有 2~3 部系列文），後來覺得還是算了，真的是沒時間ㄚ！</p>\n<p>不過這邊先不講主題是什麼嘿嘿，但會是我個人很喜歡的內容！</p>\n<p>衷心希望今年可以重現 Blockchain 組，這樣我就不用把自己擺在 SWE 組或 MW 組了。DevOps 組其實也是考慮的組別，因為下一次系列文有一個大部分的重點是 Unit Testing、CI/CD 和自動化工作流。</p>\n<p>特別感謝一直以來和我共事的好友們，支持我的心靈支柱，給我無數機會和肯定的每位老師和前輩，無償提供資源和產出的大神們。</p>\n<p>大家 2022 IT 鐵人見</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2022-02-21 03:18:32",
        "author_href": "https://ithelp.ithome.com.tw/users/20140105/ironman",
        "author_name": "ALu",
        "series_href": "https://ithelp.ithome.com.tw/users/20140105/ironman/3939",
        "series_name": "All In One NFT Website Development",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>本文同步刊於 </p>\n<h4>目錄</h4>\n<ul>\n<li>前言</li>\n<li>鐵人賽</li>\n<li>系列文提到的項目</li>\n<li>比賽結束之後</li>\n<li>區塊鏈</li>\n<li>近期規劃</li>\n<li>未來規劃</li>\n<li>結語</li>\n</ul>\n<h4>前言</h4>\n<p>會寫這篇文的原因是參加 2021 鐵人賽，說不定真正意義上地改變我的人生哈哈哈哈哈哈。這樣講並不是要給自己的鐵人文章冠上一個無上榮耀的意思，而是我認為自己從深度層面獲得了很多。</p>\n<p>在開始之前先來聽個歌吧！</p>\n<p><iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/i7J9aU6yCzw\" width=\"560\"></iframe></p>\n<h4>鐵人賽</h4>\n<p>我平常就有習慣寫文章紀錄學習內容、心得的習慣，只是過往都當作是宣洩心情的一種方式，或者是作為分享自己近狀發在 FB 或 IG 上。</p>\n<p>所以知道有鐵人賽的時候，並沒有想太多就覺得自己可以參加。畢竟從小到大就很喜歡寫東寫西的，所以擠出一點內容來鋪滿三十天並不是太困難。這裡想說的是在得獎前我從來沒想過可以得到肯定，只是覺得可以有一個新的媒介分享自己學習的歷程頗有趣的！</p>\n<p>鐵人賽是一個極度有意義的活動，因為我身邊有很多朋友其實總是會在寒、暑假規劃自己要學什麼東西，但一直沒有一個動力來 Push 自己。而這個比賽的團體完賽獎，就是要藉由同儕或組員的壓力來<strong>互相督促砥礪</strong>，若是大家都有心要對得起彼此，就會願意多花一點心力寫文章。</p>\n<p>只是參加這個比賽，為達質量，為防意外，為獲肯定，為求舒適，<strong>「累積存稿」</strong> 真的是不可避免的。因為沒有累積一定的文章數量，絕對是會遇到各種意外或者讓自己（和組員們）到最後那一陣子痛苦至極。</p>\n<p>至少我要求組員是必須要在開賽之前，都要累積到 20~25 篇以上。雖然這樣看起來我是個很嚴厲的隊長，但過暑假的大學生真的是超級悠閒的吧？實在沒有什麼理由可以不先存稿硬要拖到要開學才寫。</p>\n<blockquote>\n<p>如果自以為可以安排好最後幾天再衝刺，那為什麼前幾個寒暑假還會毫無收穫的結束呢。</p>\n</blockquote>\n<h4>系列文提到的項目</h4>\n<p>這個項目最後是胎死腹中的，因為成本、獲利，各種奇形怪狀、撲朔迷離的現象所以沒有成功。要說如果真的 Deploy 上去能 Mint 多少 E 還真不知道，但我猜回本是絕對沒問題的。</p>\n<p>區塊鏈這個領域是被技術統治的世界，科學家和工程師真的可以做到太多太多太多事情，不只是因為所有交易（MainNet, TestNet）都是透明的導致跟單和鎖址機器人橫行，還有許多不熟悉（甚至熟悉）區塊鏈的夥伴很容易被各種釣魚網站、駭客攻擊而損失資產。更不用說這裡充斥一堆假博士和騙子了，無腦的去推一些公鏈生態系和項目，根本就和老鼠會沒兩樣。</p>\n<blockquote>\n<p>在這個嶄新的領域裡面，一個項目怎麼去衡量 Developer、Marketing、Artist 誰的努力多寡、功過如何，真的是沒有一個好的評量準則或既定模式。</p>\n</blockquote>\n<p>唯一能確認的就是：<strong>在做任何項目和合夥之前，都必須把錢的事情講好</strong>。否則講到「錢」，很多人都是六親不認的呵呵。</p>\n<p>這半年我接觸越來越多同行的前輩和夥伴，便聽到越來越多奇聞軼事，賣不出去的時候就想要怪 Marketing，要分錢的時候就想把專利拿回 Artist 手中，寫出 Bug 的時候 Developer 就道歉然後就沒了。如何把一個項目或說公司、組織經營的好，確實是一門大功課。</p>\n<p>因為組織穩定就會非常直接地影響社群信心和向心力。而 NFT 的價值水平無他的就是跟「人」有關，非同質化的代幣沒有什麼發行量、吞吐量、通膨率、代幣模型可以去估值，頂多就是同時持有的人能有幾位。<strong>最終還是要回到整個社群的營運、福利、向心力，藝術價值和品牌形象。</strong></p>\n<p>不知道還要說些什麼，反正這個世界就是這樣，有緣就做、沒緣就算了，現在把自己該做好的事情做好那就好了。</p>\n<h4>比賽結束之後</h4>\n<p>這半年接收到不少的合作訊息還有信件，雖然其中不免有一些詐騙或看起來稍微詭譎的內容，但大部分的大家還是很有興趣的。只是請原諒小弟不常看 iThome 的網站和信箱，所以有時候可能會漏掉了一些資訊！</p>\n<p>最近看到很多中文創作者或社群開發 NFT 或 DAPP 的時候參考了我的文章，對此我是非常開心的。</p>\n<blockquote>\n<p>因為我其實沒有那麼厲害（至少當初在寫這系列文的時候，菜的跟什麼一樣），卻能給大家一丁點的幫助。就像是我當初從很多厲害又慷慨的大神們手中獲得的一樣，差別只在我不是大神也不厲害。</p>\n</blockquote>\n<p>自比賽結束以來，我充實了自己非常多，找到了一份自己蠻喜歡的工作，然後接觸到好多好多厲害的工程師，也收到很多工作面試的邀約。可我著重的點其實不是賺了多少錢（雖然也沒多少），而是我能藉由這些機會更知道自己哪裡還有不足。</p>\n<p>就像我印象很深刻我目前收到面試規模最大的公司，他開出了七、八個技術門檻而我勉勉強強才能達到一半。光是這個案例就夠自己再努力好一陣子了。</p>\n<h4>區塊鏈</h4>\n<p>對我來說區塊鏈是一個極度迷人的技術，在這之中龐大的市場像是迷幻的魔法，去中心化的概念像是革命的號角，高深莫測的底層技術、電腦科學和密碼學像是把人類往下一個時代推進的產物。</p>\n<p>身為一個反骨的青年，我對很多現行的社會制度、資本橫行的現象、中間人造成的信息不對稱和壟斷、金融業和央行詭異的作為，都感到非常的不舒適。雖然我不會想要一股腦地推翻什麼，但我相信這項技術能帶來更多不一樣的改變。</p>\n<p>我這個人非常喜歡「原型」的東西，所以對區塊鏈底層技術有點興趣，但數學、密碼學、網路學還有各種計算機學科，其實都給我這個非本科系的學生帶來不少的麻煩。這也是導致為什麼直到此時此刻我還在應用層面佇足，而沒有向底層鑽。</p>\n<p>未來我也會發更多我學習區塊鏈，不管是應用還是底層技術的筆記跟心得在  裡面。</p>\n<h4>近期規劃</h4>\n<p>近期規劃我歸類在 7 月的暑假之前，主要的任務除了這學期的課業、助教工作之外，還有兩份出版品，兩場表演，一場 Tech. Meet-Up，以及一份實習，最後是帶隊參加 ETH Global Hackathon。</p>\n<h4>未來規劃</h4>\n<p>經過了鐵人賽之後其實我更加確定要往 Blockchain Developer 前進的決心，就像我上文或平常都會掛在嘴邊的一句話：「像我這樣非電資科系的人…」其實我對自己是非常沒有自信的。</p>\n<p>當然不是說拿了一個小小的佳作就飛上天了，覺得能贏過本科系訓練出來的學生們。而是經過這個比賽之後體會到，其實很多我嚮往的事情是該去挑戰看看的。就像是原本以為自己根本沒辦法寫出合約、串上 API、規劃一個 DAPP 的架構，最後才發現要做出一個「能動的東西」，倒真沒那麼難。</p>\n<blockquote>\n<p>那是不是或許要把這些能動的東西變成「好用的東西」、「安全的東西」，只要把那些該學會的東西（公司開出來的技術門檻）弄好，就有機會了呢？我修的資料結構與演算法也是 NTU-CSIE 的，當的助教也是 NTU-IM 的，實在沒理由什麼都不嘗試就放棄對吧？</p>\n</blockquote>\n<p>當我有這樣的想法之後，面對一切的挑戰好像就沒那麼害怕了。雖然我知道真正直視各種可怕的科目時，自己還是會怨聲載道地想放棄哈哈哈哈哈哈哈。</p>\n<h4>結語</h4>\n<p>回首超過半年前的那三十篇文章，可以說是槽點滿滿，但我並不會覺得這是多麼羞恥的事情。因為能看出了這些內容漏洞百出，或者是每個地方我現在都能想出更棒的寫法，某種程度上是證明了從比賽結束到現在我不是虛度光陰的。</p>\n<p>其實我已經開始寫今年鐵人賽的文章了，本來想說要不要一次衝 60~90 篇（可以有 2~3 部系列文），後來覺得還是算了，真的是沒時間ㄚ！</p>\n<p>不過這邊先不講主題是什麼嘿嘿，但會是我個人很喜歡的內容！</p>\n<p>衷心希望今年可以重現 Blockchain 組，這樣我就不用把自己擺在 SWE 組或 MW 組了。DevOps 組其實也是考慮的組別，因為下一次系列文有一個大部分的重點是 Unit Testing、CI/CD 和自動化工作流。</p>\n<p>特別感謝一直以來和我共事的好友們，支持我的心靈支柱，給我無數機會和肯定的每位老師和前輩，無償提供資源和產出的大神們。</p>\n<p>大家 2022 IT 鐵人見</p>\n<br/>\n</div>",
        "content_text": "本文同步刊於 \n目錄\n\n前言\n鐵人賽\n系列文提到的項目\n比賽結束之後\n區塊鏈\n近期規劃\n未來規劃\n結語\n\n前言\n會寫這篇文的原因是參加 2021 鐵人賽，說不定真正意義上地改變我的人生哈哈哈哈哈哈。這樣講並不是要給自己的鐵人文章冠上一個無上榮耀的意思，而是我認為自己從深度層面獲得了很多。\n在開始之前先來聽個歌吧！\n\n鐵人賽\n我平常就有習慣寫文章紀錄學習內容、心得的習慣，只是過往都當作是宣洩心情的一種方式，或者是作為分享自己近狀發在 FB 或 IG 上。\n所以知道有鐵人賽的時候，並沒有想太多就覺得自己可以參加。畢竟從小到大就很喜歡寫東寫西的，所以擠出一點內容來鋪滿三十天並不是太困難。這裡想說的是在得獎前我從來沒想過可以得到肯定，只是覺得可以有一個新的媒介分享自己學習的歷程頗有趣的！\n鐵人賽是一個極度有意義的活動，因為我身邊有很多朋友其實總是會在寒、暑假規劃自己要學什麼東西，但一直沒有一個動力來 Push 自己。而這個比賽的團體完賽獎，就是要藉由同儕或組員的壓力來互相督促砥礪，若是大家都有心要對得起彼此，就會願意多花一點心力寫文章。\n只是參加這個比賽，為達質量，為防意外，為獲肯定，為求舒適，「累積存稿」 真的是不可避免的。因為沒有累積一定的文章數量，絕對是會遇到各種意外或者讓自己（和組員們）到最後那一陣子痛苦至極。\n至少我要求組員是必須要在開賽之前，都要累積到 20~25 篇以上。雖然這樣看起來我是個很嚴厲的隊長，但過暑假的大學生真的是超級悠閒的吧？實在沒有什麼理由可以不先存稿硬要拖到要開學才寫。\n\n如果自以為可以安排好最後幾天再衝刺，那為什麼前幾個寒暑假還會毫無收穫的結束呢。\n\n系列文提到的項目\n這個項目最後是胎死腹中的，因為成本、獲利，各種奇形怪狀、撲朔迷離的現象所以沒有成功。要說如果真的 Deploy 上去能 Mint 多少 E 還真不知道，但我猜回本是絕對沒問題的。\n區塊鏈這個領域是被技術統治的世界，科學家和工程師真的可以做到太多太多太多事情，不只是因為所有交易（MainNet, TestNet）都是透明的導致跟單和鎖址機器人橫行，還有許多不熟悉（甚至熟悉）區塊鏈的夥伴很容易被各種釣魚網站、駭客攻擊而損失資產。更不用說這裡充斥一堆假博士和騙子了，無腦的去推一些公鏈生態系和項目，根本就和老鼠會沒兩樣。\n\n在這個嶄新的領域裡面，一個項目怎麼去衡量 Developer、Marketing、Artist 誰的努力多寡、功過如何，真的是沒有一個好的評量準則或既定模式。\n\n唯一能確認的就是：在做任何項目和合夥之前，都必須把錢的事情講好。否則講到「錢」，很多人都是六親不認的呵呵。\n這半年我接觸越來越多同行的前輩和夥伴，便聽到越來越多奇聞軼事，賣不出去的時候就想要怪 Marketing，要分錢的時候就想把專利拿回 Artist 手中，寫出 Bug 的時候 Developer 就道歉然後就沒了。如何把一個項目或說公司、組織經營的好，確實是一門大功課。\n因為組織穩定就會非常直接地影響社群信心和向心力。而 NFT 的價值水平無他的就是跟「人」有關，非同質化的代幣沒有什麼發行量、吞吐量、通膨率、代幣模型可以去估值，頂多就是同時持有的人能有幾位。最終還是要回到整個社群的營運、福利、向心力，藝術價值和品牌形象。\n不知道還要說些什麼，反正這個世界就是這樣，有緣就做、沒緣就算了，現在把自己該做好的事情做好那就好了。\n比賽結束之後\n這半年接收到不少的合作訊息還有信件，雖然其中不免有一些詐騙或看起來稍微詭譎的內容，但大部分的大家還是很有興趣的。只是請原諒小弟不常看 iThome 的網站和信箱，所以有時候可能會漏掉了一些資訊！\n最近看到很多中文創作者或社群開發 NFT 或 DAPP 的時候參考了我的文章，對此我是非常開心的。\n\n因為我其實沒有那麼厲害（至少當初在寫這系列文的時候，菜的跟什麼一樣），卻能給大家一丁點的幫助。就像是我當初從很多厲害又慷慨的大神們手中獲得的一樣，差別只在我不是大神也不厲害。\n\n自比賽結束以來，我充實了自己非常多，找到了一份自己蠻喜歡的工作，然後接觸到好多好多厲害的工程師，也收到很多工作面試的邀約。可我著重的點其實不是賺了多少錢（雖然也沒多少），而是我能藉由這些機會更知道自己哪裡還有不足。\n就像我印象很深刻我目前收到面試規模最大的公司，他開出了七、八個技術門檻而我勉勉強強才能達到一半。光是這個案例就夠自己再努力好一陣子了。\n區塊鏈\n對我來說區塊鏈是一個極度迷人的技術，在這之中龐大的市場像是迷幻的魔法，去中心化的概念像是革命的號角，高深莫測的底層技術、電腦科學和密碼學像是把人類往下一個時代推進的產物。\n身為一個反骨的青年，我對很多現行的社會制度、資本橫行的現象、中間人造成的信息不對稱和壟斷、金融業和央行詭異的作為，都感到非常的不舒適。雖然我不會想要一股腦地推翻什麼，但我相信這項技術能帶來更多不一樣的改變。\n我這個人非常喜歡「原型」的東西，所以對區塊鏈底層技術有點興趣，但數學、密碼學、網路學還有各種計算機學科，其實都給我這個非本科系的學生帶來不少的麻煩。這也是導致為什麼直到此時此刻我還在應用層面佇足，而沒有向底層鑽。\n未來我也會發更多我學習區塊鏈，不管是應用還是底層技術的筆記跟心得在  裡面。\n近期規劃\n近期規劃我歸類在 7 月的暑假之前，主要的任務除了這學期的課業、助教工作之外，還有兩份出版品，兩場表演，一場 Tech. Meet-Up，以及一份實習，最後是帶隊參加 ETH Global Hackathon。\n未來規劃\n經過了鐵人賽之後其實我更加確定要往 Blockchain Developer 前進的決心，就像我上文或平常都會掛在嘴邊的一句話：「像我這樣非電資科系的人…」其實我對自己是非常沒有自信的。\n當然不是說拿了一個小小的佳作就飛上天了，覺得能贏過本科系訓練出來的學生們。而是經過這個比賽之後體會到，其實很多我嚮往的事情是該去挑戰看看的。就像是原本以為自己根本沒辦法寫出合約、串上 API、規劃一個 DAPP 的架構，最後才發現要做出一個「能動的東西」，倒真沒那麼難。\n\n那是不是或許要把這些能動的東西變成「好用的東西」、「安全的東西」，只要把那些該學會的東西（公司開出來的技術門檻）弄好，就有機會了呢？我修的資料結構與演算法也是 NTU-CSIE 的，當的助教也是 NTU-IM 的，實在沒理由什麼都不嘗試就放棄對吧？\n\n當我有這樣的想法之後，面對一切的挑戰好像就沒那麼害怕了。雖然我知道真正直視各種可怕的科目時，自己還是會怨聲載道地想放棄哈哈哈哈哈哈哈。\n結語\n回首超過半年前的那三十篇文章，可以說是槽點滿滿，但我並不會覺得這是多麼羞恥的事情。因為能看出了這些內容漏洞百出，或者是每個地方我現在都能想出更棒的寫法，某種程度上是證明了從比賽結束到現在我不是虛度光陰的。\n其實我已經開始寫今年鐵人賽的文章了，本來想說要不要一次衝 60~90 篇（可以有 2~3 部系列文），後來覺得還是算了，真的是沒時間ㄚ！\n不過這邊先不講主題是什麼嘿嘿，但會是我個人很喜歡的內容！\n衷心希望今年可以重現 Blockchain 組，這樣我就不用把自己擺在 SWE 組或 MW 組了。DevOps 組其實也是考慮的組別，因為下一次系列文有一個大部分的重點是 Unit Testing、CI/CD 和自動化工作流。\n特別感謝一直以來和我共事的好友們，支持我的心靈支柱，給我無數機會和肯定的每位老師和前輩，無償提供資源和產出的大神們。\n大家 2022 IT 鐵人見",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "本文 同步 刊 於\n目錄\n前言\n鐵人 賽\n系列 文 提到 的 項目\n比賽 結束 之後\n區塊 鏈\n近期 規劃\n未來 規劃\n結語\n前言\n會 寫 這篇文 的 原因 是 參加\n2021\n鐵人 賽 ， 說不定 真正 意義 上 地 改變 我 的 人生 哈哈哈 哈哈哈 。 這樣 講並 不是 要給 自己 的 鐵人 文章 冠上 一個 無 上 榮耀 的 意思 ， 而是 我 認為 自己 從 深度 層面 獲得 了 很多 。\n在 開始 之前 先來 聽個 歌 吧 ！\n鐵人 賽\n我 平常 就 有 習慣 寫文章 紀錄 學習 內容 、 心得 的 習慣 ， 只是 過往 都 當作 是 宣洩 心情 的 一種 方式 ， 或者 是 作為 分享 自己 近狀 發在\nFB\n或\nIG\n上 。\n所以 知道 有 鐵人 賽 的 時候 ， 並 沒有 想太多 就 覺得 自己 可以 參加 。 畢竟 從小到大 就 很 喜歡 寫東 寫西 的 ， 所以 擠出 一點 內容 來 鋪滿 三十天 並 不是 太 困難 。 這裡 想 說 的 是 在 得獎 前 我 從來沒 想過 可以 得到 肯定 ， 只是 覺得 可以 有 一個 新 的 媒介 分享 自己 學習 的 歷程 頗 有趣 的 ！\n鐵人 賽是 一個 極度 有 意義 的 活動 ， 因為 我 身邊 有 很多 朋友 其實 總是 會 在 寒 、 暑假 規劃 自己 要學 什麼 東西 ， 但 一直 沒有 一個 動力 來\nPush\n自己 。 而 這個 比賽 的 團體 完賽獎 ， 就是 要 藉由 同儕 或 組員 的 壓力 來 互相 督促 砥礪 ， 若 是 大家 都 有心 要 對得起 彼此 ， 就 會 願意 多花 一點 心力 寫文章 。\n只是 參加 這個 比賽 ， 為 達 質量 ， 為防 意外 ， 為 獲 肯定 ， 為求 舒適 ， 「 累積 存稿 」\n真的 是 不可避免 的 。 因為 沒有 累積 一定 的 文章 數量 ， 絕對 是 會 遇到 各種 意外 或者 讓 自己 （ 和 組員 們 ） 到 最後 那 一陣子 痛苦 至極 。\n至少 我 要求 組員 是 必須 要 在 開賽 之前 ， 都 要 累積到\n20 ~ 25\n篇 以上 。 雖然 這樣 看起來 我 是 個 很 嚴厲 的 隊長 ， 但過 暑假 的 大學生 真的 是 超級 悠閒 的 吧 ？ 實在 沒有 什麼 理由 可以 不 先存 稿 硬 要 拖 到 要 開學 才 寫 。\n如果 自以 為 可以 安排 好 最後 幾天 再 衝刺 ， 那為 什麼 前 幾個 寒暑假 還會 毫無 收穫 的 結束 呢 。\n系列 文 提到 的 項目\n這個 項目 最後 是 胎死腹中 的 ， 因為 成本 、 獲利 ， 各種 奇形怪狀 、 撲朔迷離 的 現象 所以 沒有 成功 。 要說 如果 真的\nDeploy\n上去 能\nMint\n多少\nE\n還 真不知道 ， 但 我 猜 回本 是 絕對 沒 問題 的 。\n區塊 鏈 這個 領域 是 被 技術 統治 的 世界 ， 科學家 和 工程師 真的 可以 做到 太多 太多太多 事情 ， 不 只是 因為 所有 交易 （ MainNet ,\nTestNet ） 都 是 透明 的 導致 跟 單和鎖址 機器人 橫行 ， 還有 許多 不 熟悉 （ 甚至 熟悉 ） 區塊 鏈 的 夥伴 很 容易 被 各種 釣魚 網站 、 駭客 攻擊 而 損失 資產 。 更 不用說 這裡 充斥 一堆 假 博士 和 騙子 了 ， 無腦 的 去 推 一些 公鏈 生態系 和 項目 ， 根本 就 和 老鼠會 沒 兩樣 。\n在 這個 嶄新 的 領域 裡面 ， 一個 項目 怎麼 去 衡量\nDeveloper 、 Marketing 、 Artist\n誰 的 努力 多寡 、 功過 如何 ， 真的 是 沒有 一個 好 的 評量 準則 或 既定 模式 。\n唯一 能 確認 的 就是 ： 在 做 任何 項目 和 合夥 之前 ， 都 必須 把 錢 的 事情 講好 。 否則 講到 「 錢 」 ， 很多 人 都 是 六親不認 的 呵呵 。\n這 半年 我 接觸 越來越 多 同行 的 前輩 和 夥伴 ， 便 聽到 越來越 多 奇聞 軼事 ， 賣不出去 的 時候 就 想要 怪\nMarketing ， 要 分錢 的 時候 就 想 把 專利 拿 回\nArtist\n手中 ， 寫出\nBug\n的 時候\nDeveloper\n就 道歉 然後 就 沒 了 。 如何 把 一個 項目 或 說 公司 、 組織 經營 的 好 ， 確實 是 一門 大 功課 。\n因為 組織 穩定 就 會 非常 直接 地 影響 社群 信心 和 向心力 。 而\nNFT\n的 價值 水平 無 他 的 就是 跟 「 人 」 有關 ， 非 同質化 的 代幣 沒有 什麼 發行量 、 吞吐量 、 通膨率 、 代幣 模型 可以 去 估值 ， 頂多 就是 同時 持有 的 人 能 有 幾位 。 最終 還是 要 回到 整個 社群 的 營運 、 福利 、 向心力 ， 藝術 價值 和 品牌形象 。\n不 知道 還 要說 些 什麼 ， 反正 這個 世界 就是 這樣 ， 有緣 就 做 、 沒緣 就算 了 ， 現在 把 自己 該 做好 的 事情 做好 那就好 了 。\n比賽 結束 之後\n這 半年 接收 到 不少 的 合作 訊息 還有 信件 ， 雖然 其中 不免 有 一些 詐騙 或 看起來 稍微 詭譎 的 內容 ， 但 大部分 的 大家 還是 很 有 興趣 的 。 只是 請原諒 小弟 不常 看\niThome\n的 網站 和 信箱 ， 所以 有時候 可能 會 漏掉 了 一些 資訊 ！\n最近 看到 很多 中文 創作者 或 社群 開發\nNFT\n或\nDAPP\n的 時候 參考 了 我 的 文章 ， 對此 我 是 非常 開心 的 。\n因為 我 其實 沒有 那麼 厲害 （ 至少 當初 在 寫 這 系列 文 的 時候 ， 菜 的 跟 什麼 一樣 ） ， 卻 能給 大家 一丁點 的 幫助 。 就 像是 我 當初 從 很多 厲害 又 慷慨 的 大神 們 手中 獲得 的 一樣 ， 差別 只 在 我 不是 大神 也 不 厲害 。\n自 比賽 結束 以來 ， 我 充實 了 自己 非常 多 ， 找到 了 一份 自己 蠻 喜歡 的 工作 ， 然後 接觸 到 好多好多 厲害 的 工程師 ， 也 收到 很多 工作 面試 的 邀約 。 可 我 著 重的點 其實 不是 賺 了 多少錢 （ 雖然 也 沒 多少 ） ， 而是 我能 藉由 這些 機會 更 知道 自己 哪裡 還有 不足 。\n就 像 我 印象 很 深刻 我 目前 收到 面試 規模 最大 的 公司 ， 他 開出 了 七 、 八個 技術 門檻 而 我 勉勉強強 才能 達到 一半 。 光是 這個 案例 就夠 自己 再 努力 好 一陣子 了 。\n區塊 鏈\n對 我 來說 區塊 鏈是 一個 極度 迷人 的 技術 ， 在 這 之中 龐大 的 市場 像是 迷幻 的 魔法 ， 去 中心化 的 概念 像是 革命 的 號角 ， 高深莫測 的 底層 技術 、 電腦 科學 和 密碼學 像是 把 人類 往 下 一個 時代 推進 的 產物 。\n身為 一個 反骨 的 青年 ， 我 對 很多 現行 的 社會制度 、 資本 橫行 的 現象 、 中間人 造成 的 信息 不 對稱 和 壟斷 、 金融業 和 央行 詭異 的 作為 ， 都 感到 非常 的 不 舒適 。 雖然 我 不會 想要 一股腦 地 推翻 什麼 ， 但 我 相信 這項 技術 能 帶來 更 多 不 一樣 的 改變 。\n我 這個 人 非常 喜歡 「 原型 」 的 東西 ， 所以 對 區塊 鏈 底層 技術 有點 興趣 ， 但 數學 、 密碼學 、 網路 學 還有 各種 計算機 學科 ， 其實 都給 我 這個 非 本科 系 的 學生 帶來 不少 的 麻煩 。 這也 是 導致 為 什麼 直到 此時此刻 我 還在 應用 層面 佇足 ， 而 沒有 向 底層 鑽 。\n未來 我 也 會發 更 多 我 學習 區塊 鏈 ， 不管 是 應用 還是 底層 技術 的 筆記 跟 心得 在\n裡面 。\n近期 規劃\n近期 規劃 我 歸類 在\n7\n月 的 暑假 之前 ， 主要 的 任務 除了 這 學期 的 課業 、 助教 工作 之外 ， 還有 兩份 出版 品 ， 兩場 表演 ， 一場\nTech .\nMeet - Up ， 以及 一份 實習 ， 最後 是 帶隊參加\nETH\nGlobal\nHackathon 。\n未來 規劃\n經過 了 鐵人 賽 之後 其實 我 更加 確定 要往\nBlockchain\nDeveloper\n前進 的 決心 ， 就 像 我 上文 或 平常 都 會掛 在 嘴邊 的 一句 話 ： 「 像 我 這樣 非電資 科系 的 人 … 」 其實 我 對 自己 是 非常 沒有 自信 的 。\n當然 不是 說 拿 了 一個 小小的 佳作 就 飛 上天 了 ， 覺得 能 贏過 本科 系 訓練 出來 的 學生 們 。 而是 經過 這個 比賽 之後 體會 到 ， 其實 很多 我 嚮往 的 事情 是 該 去 挑戰 看看 的 。 就 像是 原本 以為 自己 根本 沒 辦法 寫出 合約 、 串上\nAPI 、 規劃 一個\nDAPP\n的 架構 ， 最後 才 發現 要 做出 一個 「 能動 的 東西 」 ， 倒 真 沒 那麼 難 。\n那 是不是 或許 要 把 這些 能動 的 東西 變成 「 好用 的 東西 」 、 「 安全 的 東西 」 ， 只要 把 那些 該 學會 的 東西 （ 公司 開 出來 的 技術 門檻 ） 弄 好 ， 就 有 機會 了 呢 ？ 我修 的 資料 結構 與 演算法 也 是\nNTU - CSIE\n的 ， 當的 助教 也 是\nNTU - IM\n的 ， 實在 沒理由 什麼 都 不 嘗試 就 放棄 對 吧 ？\n當我 有 這樣 的 想法 之後 ， 面對 一切 的 挑戰 好像 就 沒 那麼 害怕 了 。 雖然 我 知道 真正 直視 各種 可怕 的 科目 時 ， 自己 還是 會 怨聲載道 地想 放棄 哈哈哈哈 哈哈哈 。\n結語\n回首 超過 半年前 的 那 三十篇 文章 ， 可以 說 是 槽點 滿滿 ， 但 我並 不會 覺得 這是 多麼 羞恥 的 事情 。 因為 能 看出 了 這些 內容 漏洞百出 ， 或者 是 每個 地方 我 現在 都 能 想 出 更 棒 的 寫法 ， 某種程度 上 是 證明 了 從 比賽 結束 到 現在 我 不是 虛度光陰 的 。\n其實 我 已經 開始 寫 今年 鐵人 賽 的 文章 了 ， 本來 想 說 要 不要 一次 衝\n60 ~ 90\n篇 （ 可以 有\n2 ~ 3\n部 系列 文 ） ， 後來 覺得 還是 算了 ， 真的 是 沒 時間 ㄚ ！\n不過 這邊 先不講 主題 是 什麼 嘿嘿 ， 但會 是 我 個人 很 喜歡 的 內容 ！\n衷心希望 今年 可以 重現\nBlockchain\n組 ， 這樣 我 就 不用 把 自己 擺在\nSWE\n組 或\nMW\n組了 。 DevOps\n組 其實 也 是 考慮 的 組別 ， 因為 下 一次 系列 文有 一個 大部分 的 重點 是\nUnit\nTesting 、 CI / CD\n和 自動化 工作 流 。\n特別感謝 一直 以來 和 我 共事 的 好友 們 ， 支持 我 的 心靈 支柱 ， 給我 無數 機會 和 肯定 的 每位 老師 和 前輩 ， 無償 提供 資源 和 產出 的 大神 們 。\n大家\n2022\nIT\n鐵人 見",
        "word_seg_processed_content_text": "本文 同步 刊\n目錄\n前言\n鐵人 賽\n系列 文 提到 項目\n比賽 結束\n區塊 鏈\n近期 規劃\n未來 規劃\n結語\n前言\n會 寫 這篇文 原因 參加\n2021\n鐵人 賽 說不定 意義 改變 人生 哈哈哈 哈哈哈 講並 要給 鐵人 文章 冠上 榮耀 深度 層面 很多\n先來 聽個 歌\n鐵人 賽\n平常 習慣 寫文章 紀錄 學習 內容 心得 習慣 過往 當作 宣洩 心情 一種 方式 分享 近狀 發在\nfb\n\nig\n\n鐵人 賽 想太多 參加 畢竟 從小到大 喜歡 寫東 寫西 擠出 一點 內容 鋪滿 三十天 太 困難 想 說 得獎 前 從來沒 想過 肯定 新 媒介 分享 學習 歷程 頗 有趣\n鐵人 賽是 極度 意義 活動 身邊 很多 朋友 會 寒 暑假 規劃 要學 東西 動力\npush\n比賽 團體 完賽獎 藉由 同儕 組員 壓力 督促 砥礪 有心 對得起 會 多花 一點 心力 寫文章\n參加 比賽 達 質量 為防 意外 獲 肯定 為求 舒適 累積 存稿\n真的 不可避免 累積 文章 數量 會 意外 組員 一陣子 痛苦 至極\n至少 組員 開賽 累積到\n20 25\n篇 看起來 嚴厲 隊長 但過 暑假 大學生 真的 超級 悠閒 實在 理由 先存 稿 硬 拖 開學 才 寫\n自以 安排 幾天 衝刺 那為 前 幾個 寒暑假 還會 毫無 收穫 結束\n系列 文 提到 項目\n項目 胎死腹中 成本 獲利 奇形怪狀 撲朔迷離 現象 成功 要說 真的\ndeploy\n\nmint\n\ne\n真不知道 猜 回本 沒\n區塊 鏈 領域 技術 統治 世界 科學家 工程師 真的 太多 太多太多 事情 交易 mainnet\ntestnet 透明 導致 單和鎖址 機器人 橫行 熟悉 熟悉 區塊 鏈 夥伴 釣魚 網站 駭客 攻擊 損失 資產 更 不用說 充斥 一堆 假 博士 騙子 無腦 推 公鏈 生態系 項目 老鼠會 沒 兩樣\n嶄新 領域 項目 衡量\ndeveloper marketing artist\n努力 多寡 功過 真的 評量 準則 既定 模式\n唯一 確認 做 項目 合夥 錢 事情 講好 講到 錢 很多 六親不認 呵呵\n半年 接觸 越來越 同行 前輩 夥伴 便 聽到 越來越 奇聞 軼事 賣不出去 想要 怪\nmarketing 分錢 想 專利 回\nartist\n手中 寫出\nbug\n\ndeveloper\n道歉 沒 項目 說 公司 組織 經營 確實 一門 大 功課\n組織 穩定 會 影響 社群 信心 向心力\nnft\n價值 水平 非 同質化 代幣 發行量 吞吐量 通膨率 代幣 模型 估值 頂多 持有 幾位 最終 回到 社群 營運 福利 向心力 藝術 價值 品牌形象\n要說 反正 世界 有緣 做 沒緣 就算 做好 事情 做好 那就好\n比賽 結束\n半年 接收 不少 合作 訊息 信件 不免 詐騙 看起來 稍微 詭譎 內容 大部分 興趣 請原諒 小弟 不常\nithome\n網站 信箱 有時候 會 漏掉 資訊\n很多 中文 創作者 社群 開發\nnft\n\ndapp\n參考 文章 對此 開心\n厲害 至少 當初 寫 系列 文 菜 能給 一丁點 像是 當初 很多 厲害 慷慨 大神 手中 差別 大神 厲害\n比賽 結束 充實 找到 一份 蠻 喜歡 工作 接觸 好多好多 厲害 工程師 收到 很多 工作 面試 邀約 重的點 賺 多少錢 沒 我能 藉由 機會 更\n印象 深刻 收到 面試 規模 公司 開出 七 八個 技術 門檻 勉勉強強 才能 一半 光是 案例 就夠 努力 一陣子\n區塊 鏈\n來說 區塊 鏈是 極度 迷人 技術 之中 龐大 市場 像是 迷幻 魔法 中心化 概念 像是 革命 號角 高深莫測 底層 技術 電腦 科學 密碼學 像是 人類 時代 推進 產物\n身為 反骨 青年 很多 現行 社會制度 資本 橫行 現象 中間人 信息 對稱 壟斷 金融業 央行 詭異 感到 舒適 想要 一股腦 推翻 這項 技術 帶來 更 改變\n喜歡 原型 東西 區塊 鏈 底層 技術 興趣 數學 密碼學 網路 學 計算機 學科 都給 非 本科 系 學生 帶來 不少 麻煩 這也 導致 此時此刻 還在 層面 佇足 底層 鑽\n未來 會發 更 學習 區塊 鏈 底層 技術 筆記 心得\n\n近期 規劃\n近期 規劃 歸類\n7\n月 暑假 學期 課業 助教 工作 之外 兩份 出版 品 兩場 表演 一場\ntech\nmeet up 一份 實習 帶隊參加\neth\nglobal\nhackathon\n未來 規劃\n鐵人 賽 要往\nblockchain\ndeveloper\n決心 上文 平常 會掛 嘴邊 一句 話 非電資 科系 自信\n說 小小的 佳作 飛 上天 贏過 本科 系 訓練 學生 比賽 體會 很多 嚮往 事情 挑戰 像是 原本 沒 辦法 寫出 合約 串上\napi 規劃\ndapp\n架構 才 發現 做出 能動 東西 倒 真 沒 難\n或許 能動 東西 好用 東西 東西 學會 東西 公司 開 技術 門檻 弄 機會 我修 資料 結構 演算法\nntu csie\n當的 助教\nntu im\n實在 沒理由 嘗試 放棄\n當我 想法 面對 挑戰 好像 沒 害怕 直視 可怕 科目 時 會 怨聲載道 地想 放棄 哈哈哈哈 哈哈哈\n結語\n回首 超過 半年前 三十篇 文章 說 槽點 滿滿 我並 這是 多麼 羞恥 事情 內容 漏洞百出 地方 想 出 更 棒 寫法 某種程度 證明 比賽 結束 虛度光陰\n寫 鐵人 賽 文章 本來 想 說\n60 90\n篇\n2 3\n部 系列 文 算了 真的 沒 時間 ㄚ\n先不講 主題 嘿嘿 但會 喜歡 內容\n衷心希望 重現\nblockchain\n組 不用 擺在\nswe\n組\nmw\n組了 devops\n組 組別 系列 文有 大部分 重點\nunit\ntesting ci cd\n自動化 工作 流\n特別感謝 共事 好友 支持 心靈 支柱 給我 無數 機會 肯定 每位 老師 前輩 無償 提供 資源 產出 大神\n\n2022\n\n鐵人 見",
        "extracted_keywords": [
            "寫出",
            "本文",
            "內容",
            "前言",
            "寫法"
        ],
        "extracted_keywords_phrases": [
            "目錄 前言",
            "心得 近期",
            "系列 文有",
            "寫出",
            "本文"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284045": {
        "href": "https://ithelp.ithome.com.tw/articles/10284045",
        "title": "建立表與表之間的關聯(Day28)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>文章同時發佈於: <a href=\"https://kevinyay945.com/smart-home-tutorial/028/\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/028/</a></p>\n<p>在之前的過程中，已經建立了request以及command，而預計的規劃是可以透過一個command來觸發多個request的功能，而且多個command可以觸發同一個request，而觸發的順序可以自己定義，那要完成這個需求，預計要多開一張表，名為commands_requests，而這張表的主要目的是要將commands跟requests建立起關聯，因此目前規劃的欄位有</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>commands_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>requests_uuid</td>\n<td>uuid</td>\n</tr>\n</tbody>\n</table>\n<p>另外，因為需要有觸發順序，所以欄位中要多上一個順序的欄位</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>commands_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>requests_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>order</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p>並且</p>\n<ul>\n<li>commands_requests.commands_uuid &lt;= command.uuid</li>\n<li>commands_requests.requests_uuid &lt;= requests.uuid</li>\n</ul>\n<p>將相關的欄位做foreign key的關聯，這樣做就可以讓資料庫來幫我們保證在commands_requests中的兩個uuid都一定存在於另外兩張表中</p>\n<p>資料庫語法如下</p>\n<pre><code class=\"language-=sql\">CREATE TABLE public.commands_requests  \n(  \n  uuid uuid        NOT NULL DEFAULT uuid_generate_v4(),  \n  create_at timestamptz NOT NULL DEFAULT now(),  \n  update_at timestamptz NOT NULL DEFAULT now(),  \n  commands_uuid uuid        NOT NULL,  \n  requests_uuid uuid        NOT NULL,  \n  \"order\" int8        NOT NULL,  \n  CONSTRAINT commands_requests_pk PRIMARY KEY (uuid),  \n  CONSTRAINT commands_requests_fk FOREIGN KEY (commands_uuid) REFERENCES public.commands (uuid) ON DELETE SET NULL ON UPDATE CASCADE,  \n  CONSTRAINT commands_requests_fk_1 FOREIGN KEY (requests_uuid) REFERENCES public.requests (uuid) ON DELETE SET NULL ON UPDATE CASCADE  \n);\n</code></pre>\n<p>另外，因為有發現到之前的commands跟requests並沒有primary key，所以也將建立Primary Key的語法補上去</p>\n<pre><code class=\"language-=sql\">ALTER TABLE public.commands  \n  ADD CONSTRAINT commands_pk PRIMARY KEY (uuid);  \nALTER TABLE public.requests  \n  ADD CONSTRAINT requests_pk PRIMARY KEY (uuid);\n</code></pre>\n<p>最後，因為怕在自動產生uuid的extension在postgresql中沒建立，所以將建立這個extension的功能也放上</p>\n<pre><code class=\"language-=sql\">CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n</code></pre>\n<p>另外，也補上了之前沒寫到的down檔</p>\n<p>影片和code如下</p>\n<p><a href=\"https://www.youtube.com/watch?v=ScRe3zVh8-E\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=ScRe3zVh8-E</a></p>\n<p><a href=\"https://github.com/kevinyay945/smart-home-backend/tree/0442b034cb84a31bbb59858f70f64a5aa871578f\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/0442b034cb84a31bbb59858f70f64a5aa871578f</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-19 19:34:09",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "28",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>文章同時發佈於: </p>\n<p>在之前的過程中，已經建立了request以及command，而預計的規劃是可以透過一個command來觸發多個request的功能，而且多個command可以觸發同一個request，而觸發的順序可以自己定義，那要完成這個需求，預計要多開一張表，名為commands_requests，而這張表的主要目的是要將commands跟requests建立起關聯，因此目前規劃的欄位有</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>commands_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>requests_uuid</td>\n<td>uuid</td>\n</tr>\n</tbody>\n</table>\n<p>另外，因為需要有觸發順序，所以欄位中要多上一個順序的欄位</p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>commands_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>requests_uuid</td>\n<td>uuid</td>\n</tr>\n<tr>\n<td>order</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n<p>並且</p>\n<ul>\n<li>commands_requests.commands_uuid &lt;= command.uuid</li>\n<li>commands_requests.requests_uuid &lt;= requests.uuid</li>\n</ul>\n<p>將相關的欄位做foreign key的關聯，這樣做就可以讓資料庫來幫我們保證在commands_requests中的兩個uuid都一定存在於另外兩張表中</p>\n<p>資料庫語法如下</p>\n<pre></pre>\n<p>另外，因為有發現到之前的commands跟requests並沒有primary key，所以也將建立Primary Key的語法補上去</p>\n<pre></pre>\n<p>最後，因為怕在自動產生uuid的extension在postgresql中沒建立，所以將建立這個extension的功能也放上</p>\n<pre></pre>\n<p>另外，也補上了之前沒寫到的down檔</p>\n<p>影片和code如下</p>\n<p></p>\n<p></p>\n<br/>\n</div>",
        "content_text": "文章同時發佈於: \n在之前的過程中，已經建立了request以及command，而預計的規劃是可以透過一個command來觸發多個request的功能，而且多個command可以觸發同一個request，而觸發的順序可以自己定義，那要完成這個需求，預計要多開一張表，名為commands_requests，而這張表的主要目的是要將commands跟requests建立起關聯，因此目前規劃的欄位有\n\n\n\nname\ntype\n\n\n\n\nuuid\nuuid\n\n\ncommands_uuid\nuuid\n\n\nrequests_uuid\nuuid\n\n\n\n另外，因為需要有觸發順序，所以欄位中要多上一個順序的欄位\n\n\n\nname\ntype\n\n\n\n\nuuid\nuuid\n\n\ncommands_uuid\nuuid\n\n\nrequests_uuid\nuuid\n\n\norder\nint\n\n\n\n並且\n\ncommands_requests.commands_uuid <= command.uuid\ncommands_requests.requests_uuid <= requests.uuid\n\n將相關的欄位做foreign key的關聯，這樣做就可以讓資料庫來幫我們保證在commands_requests中的兩個uuid都一定存在於另外兩張表中\n資料庫語法如下\n\n另外，因為有發現到之前的commands跟requests並沒有primary key，所以也將建立Primary Key的語法補上去\n\n最後，因為怕在自動產生uuid的extension在postgresql中沒建立，所以將建立這個extension的功能也放上\n\n另外，也補上了之前沒寫到的down檔\n影片和code如下",
        "content_code_info": [
            {
                "language": "sql",
                "content": "CREATE TABLE public.commands_requests  \n(  \n  uuid uuid        NOT NULL DEFAULT uuid_generate_v4(),  \n  create_at timestamptz NOT NULL DEFAULT now(),  \n  update_at timestamptz NOT NULL DEFAULT now(),  \n  commands_uuid uuid        NOT NULL,  \n  requests_uuid uuid        NOT NULL,  \n  \"order\" int8        NOT NULL,  \n  CONSTRAINT commands_requests_pk PRIMARY KEY (uuid),  \n  CONSTRAINT commands_requests_fk FOREIGN KEY (commands_uuid) REFERENCES public.commands (uuid) ON DELETE SET NULL ON UPDATE CASCADE,  \n  CONSTRAINT commands_requests_fk_1 FOREIGN KEY (requests_uuid) REFERENCES public.requests (uuid) ON DELETE SET NULL ON UPDATE CASCADE  \n);\n"
            },
            {
                "language": "sql",
                "content": "ALTER TABLE public.commands  \n  ADD CONSTRAINT commands_pk PRIMARY KEY (uuid);  \nALTER TABLE public.requests  \n  ADD CONSTRAINT requests_pk PRIMARY KEY (uuid);\n"
            },
            {
                "language": "sql",
                "content": "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n"
            }
        ],
        "programming_languages": [
            "sql"
        ],
        "word_seg_content_text": "文章 同時 發佈 於 :\n在 之前 的 過程 中 ， 已經 建立 了 request 以及 command ， 而 預計 的 規劃 是 可以 透過 一個 command 來 觸發 多個 request 的 功能 ， 而且 多個 command 可以 觸發 同一個 request ， 而 觸發 的 順序 可以 自己 定義 ， 那要 完成 這個 需求 ， 預計 要 多開 一張 表 ， 名為 commands _ requests ， 而 這張表 的 主要 目的 是 要將 commands 跟 requests 建立 起 關聯 ， 因此 目前 規劃 的 欄位 有\nname\ntype\nuuid\nuuid\ncommands _ uuid\nuuid\nrequests _ uuid\nuuid\n另外 ， 因為 需要 有 觸發 順序 ， 所以 欄位 中要 多 上 一個 順序 的 欄位\nname\ntype\nuuid\nuuid\ncommands _ uuid\nuuid\nrequests _ uuid\nuuid\norder\nint\n並且\ncommands _ requests . commands _ uuid\n< =\ncommand . uuid\ncommands _ requests . requests _ uuid\n< =\nrequests . uuid\n將相 關的 欄位 做 foreign\nkey 的 關聯 ， 這樣 做 就 可以 讓 資料庫 來 幫 我們 保證 在 commands _ requests 中 的 兩個 uuid 都 一定 存 在於 另外 兩張 表中\n資料庫 語法 如下\n另外 ， 因為 有 發現 到 之前 的 commands 跟 requests 並 沒有 primary\nkey ， 所以 也將 建立 Primary\nKey 的 語法 補上去\n最後 ， 因為 怕 在 自動 產生 uuid 的 extension 在 postgresql 中 沒 建立 ， 所以 將 建立 這個 extension 的 功能 也 放上\n另外 ， 也 補上 了 之前 沒寫 到 的 down 檔\n影片 和 code 如下",
        "word_seg_processed_content_text": "文章 發佈\n過程 中 建立 request command 預計 規劃 透過 command 觸發 多個 request 功能 多個 command 觸發 同一個 request 觸發 順序 定義 那要 需求 預計 多開 一張 表 名為 commands requests 這張表 目的 要將 commands requests 建立 關聯 規劃 欄位\nname\ntype\nuuid\nuuid\ncommands uuid\nuuid\nrequests uuid\nuuid\n觸發 順序 欄位 中要 順序 欄位\nname\ntype\nuuid\nuuid\ncommands uuid\nuuid\nrequests uuid\nuuid\norder\nint\n\ncommands requests commands uuid\n\ncommand uuid\ncommands requests requests uuid\n\nrequests uuid\n將相 關的 欄位 做 foreign\nkey 關聯 做 資料庫 幫 保證 commands requests 中 兩個 uuid 存 在於 兩張 表中\n資料庫 語法\n發現 commands requests primary\nkey 也將 建立 primary\nkey 語法 補上去\n怕 自動 uuid extension postgresql 中 沒 建立 建立 extension 功能 放上\n補上 沒寫 down 檔\n影片 code",
        "extracted_keywords": [
            "requests",
            "commands",
            "command",
            "順序",
            "request"
        ],
        "extracted_keywords_phrases": [
            "requests commands",
            "commands requests",
            "requests 建立",
            "request command",
            "多個 request"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284040": {
        "href": "https://ithelp.ithome.com.tw/articles/10284040",
        "title": "【Day ?(31)】測試環境無法登入",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>現在測試環境無法登入囉～<br>\n該如何是好呢？</p>\n<hr>\n<h1>無法登入</h1>\n<p>先前可以使用測試環境與測試帳號登入，如<a href=\"day3.md\" target=\"_blank\" rel=\"noreferrer noopener\">Day3</a>的程式碼：</p>\n<pre><code>import shioaji as sj\n\napi = sj.Shioaji(simulation=True)\naccounts = api.login(\n    person_id=\"PAPIUSER01\",\n    passwd=\"2222\",\n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\"),\n)\n\n</code></pre>\n<p>可以取得商品類別資料，表示我們有登入成功（如<a href=\".day4.md\" target=\"_blank\" rel=\"noreferrer noopener\">Day4</a>）。<br>\n但是近期使用，卻得到這樣的回應：</p>\n<pre><code>(700008ea2000) Connect attempt for host '（遮蔽...） for session '(c0,s1)_sinopac(client name '（遮蔽...）', VPN name 'sinopac', peer address 'hostname '218.32.76.102:80' IP 218.32.76.102:80', connection 'tcp_TxRx' local address 'IP 10.88.22.46:60217')' timed out\npysolace/core/sol.cpp(257): connected failed, return Not ready\n[16:47:02.298421] [3077790] [pysolace/core/sol.cpp:445:SendRequest] [E] [thread 3215562] Not ready\nResponse Code: 0 | Event Code: 2 | Info: Session connect timeout | Event: Session connection attempt failed\nTraceback (most recent call last):\n  File \"（遮蔽路徑...）\", line 4, in &lt;module&gt;\n    accounts = api.login(\n  File \"（遮蔽路徑...）\", line 133, in login\n    accounts = self._solace.login(person_id, passwd, hashed)\n  File \"shioaji/backend/solace/api.pyx\", line 332, in shioaji.backend.solace.api.SolaceAPI.login\n  File \"（遮蔽路徑...）\", line 49, in raise_resp_error\n    raise Exception(resp)\nException: {}\n</code></pre>\n<p>在連線進去後，卻在程式內部出現錯誤。探究原因後，才知道原來他們把測試環境關閉了，因此我們無法使用測試環境進行測試。只能用正式環境的方式進行進行開發與測試，因此要小心別亂下單喔！</p>\n<h1>正式環境登入</h1>\n<p>想要在正式環境登入，就先去永豐開戶，取得登入的帳號密碼後，就可以在正式環境使用shioaji。正式環境登入的方式可以參考：<a href=\"https://sinotrade.github.io/tutor/login/%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E5%9C%A8%E5%88%9D%E5%A7%8B%E8%A9%B1%E7%89%A9%E4%BB%B6%E6%99%82%E5%80%99%EF%BC%8C%E6%8A%8A%E6%B8%AC%E8%A9%A6%E7%92%B0%E5%A2%83%E7%9A%84%E5%8F%83%E6%95%B8%E6%8B%BF%E6%8E%89%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%8A%8A%60api\" target=\"_blank\" rel=\"noreferrer noopener\">https://sinotrade.github.io/tutor/login/，也就是在初始話物件時候，把測試環境的參數拿掉，也就是把`api</a> = sj.Shioaji(simulation=True)<code>改成</code>api = sj.Shioaji()`即可。</p>\n<p>程式可以參考範例：</p>\n<pre><code>import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n</code></pre>\n<hr>\n<h1>後記</h1>\n<p>在過了這麼久後有人跟我討論，才發現測試環境已經不能用了。真可惜，只能下實單，希望以後能開放，這樣開發的時候不會怕...</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,shioaji,永豐 apis,api,python",
        "genre": "永豐金融APIs",
        "published_at": "2022-02-18 17:25:43",
        "author_href": "https://ithelp.ithome.com.tw/users/20103826/ironman",
        "author_name": "eyelash*睫毛",
        "series_href": "https://ithelp.ithome.com.tw/users/20103826/ironman/4540",
        "series_name": "永豐證API X Python",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>現在測試環境無法登入囉～<br/>\n該如何是好呢？</p>\n<hr/>\n<h1>無法登入</h1>\n<p>先前可以使用測試環境與測試帳號登入，如的程式碼：</p>\n<pre></pre>\n<p>可以取得商品類別資料，表示我們有登入成功（如）。<br/>\n但是近期使用，卻得到這樣的回應：</p>\n<pre></pre>\n<p>在連線進去後，卻在程式內部出現錯誤。探究原因後，才知道原來他們把測試環境關閉了，因此我們無法使用測試環境進行測試。只能用正式環境的方式進行進行開發與測試，因此要小心別亂下單喔！</p>\n<h1>正式環境登入</h1>\n<p>想要在正式環境登入，就先去永豐開戶，取得登入的帳號密碼後，就可以在正式環境使用shioaji。正式環境登入的方式可以參考： = sj.Shioaji(simulation=True)<code>改成</code>api = sj.Shioaji()`即可。</p>\n<p>程式可以參考範例：</p>\n<pre></pre>\n<hr/>\n<h1>後記</h1>\n<p>在過了這麼久後有人跟我討論，才發現測試環境已經不能用了。真可惜，只能下實單，希望以後能開放，這樣開發的時候不會怕...</p>\n<br/>\n</div>",
        "content_text": "現在測試環境無法登入囉～\n該如何是好呢？\n\n無法登入\n先前可以使用測試環境與測試帳號登入，如的程式碼：\n\n可以取得商品類別資料，表示我們有登入成功（如）。\n但是近期使用，卻得到這樣的回應：\n\n在連線進去後，卻在程式內部出現錯誤。探究原因後，才知道原來他們把測試環境關閉了，因此我們無法使用測試環境進行測試。只能用正式環境的方式進行進行開發與測試，因此要小心別亂下單喔！\n正式環境登入\n想要在正式環境登入，就先去永豐開戶，取得登入的帳號密碼後，就可以在正式環境使用shioaji。正式環境登入的方式可以參考： = sj.Shioaji(simulation=True)改成api = sj.Shioaji()`即可。\n程式可以參考範例：\n\n\n後記\n在過了這麼久後有人跟我討論，才發現測試環境已經不能用了。真可惜，只能下實單，希望以後能開放，這樣開發的時候不會怕...",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "import shioaji as sj\n\napi = sj.Shioaji(simulation=True)\naccounts = api.login(\n    person_id=\"PAPIUSER01\",\n    passwd=\"2222\",\n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\"),\n)\n\n"
            },
            {
                "language": "unknown",
                "content": "(700008ea2000) Connect attempt for host '（遮蔽...） for session '(c0,s1)_sinopac(client name '（遮蔽...）', VPN name 'sinopac', peer address 'hostname '218.32.76.102:80' IP 218.32.76.102:80', connection 'tcp_TxRx' local address 'IP 10.88.22.46:60217')' timed out\npysolace/core/sol.cpp(257): connected failed, return Not ready\n[16:47:02.298421] [3077790] [pysolace/core/sol.cpp:445:SendRequest] [E] [thread 3215562] Not ready\nResponse Code: 0 | Event Code: 2 | Info: Session connect timeout | Event: Session connection attempt failed\nTraceback (most recent call last):\n  File \"（遮蔽路徑...）\", line 4, in <module>\n    accounts = api.login(\n  File \"（遮蔽路徑...）\", line 133, in login\n    accounts = self._solace.login(person_id, passwd, hashed)\n  File \"shioaji/backend/solace/api.pyx\", line 332, in shioaji.backend.solace.api.SolaceAPI.login\n  File \"（遮蔽路徑...）\", line 49, in raise_resp_error\n    raise Exception(resp)\nException: {}\n"
            },
            {
                "language": "unknown",
                "content": "import shioaji as sj\napi = sj.Shioaji()\napi.login(\n    person_id=\"YOUR_ID\", \n    passwd=\"YOUR_PASSWORD\", \n    contracts_cb=lambda security_type: print(f\"{repr(security_type)} fetch done.\")\n)\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "現在 測試環境 無法 登入 囉 ～\n該 如何是好 呢 ？\n無法 登入\n先前 可以 使用 測試環境 與 測試 帳號 登入 ， 如 的 程式碼 ：\n可以 取得 商品 類別 資料 ， 表示 我們 有 登入 成功 （ 如 ） 。\n但是 近期 使用 ， 卻 得到 這樣 的 回應 ：\n在 連線 進去 後 ， 卻 在 程式 內部 出現 錯誤 。 探究 原因 後 ， 才 知道 原來 他們 把 測試環境 關閉 了 ， 因此 我們 無法 使用 測試環境 進行 測試 。 只能 用 正式 環境 的 方式 進行 進行 開發 與 測試 ， 因此 要 小心 別亂 下單 喔 ！\n正式 環境 登入\n想要 在 正式 環境 登入 ， 就 先 去 永豐 開戶 ， 取得 登入 的 帳號密碼 後 ， 就 可以 在 正式 環境 使用 shioaji 。 正式 環境 登入 的 方式 可以 參考 ：\n=\nsj . Shioaji ( simulation = True ) 改成 api\n=\nsj . Shioaji ( ) ` 即可 。\n程式 可以 參考 範例 ：\n後記\n在過 了 這麼久 後 有人 跟 我 討論 ， 才 發現 測試環境 已經 不能 用 了 。 真 可惜 ， 只能 下 實單 ， 希望 以後 能 開放 ， 這樣 開發 的 時候 不會 怕 ...",
        "word_seg_processed_content_text": "測試環境 登入 囉\n如何是好\n登入\n先前 測試環境 測試 帳號 登入 程式碼\n商品 類別 資料 登入 成功\n近期 回應\n連線 進去 程式 內部 錯誤 探究 原因 才 測試環境 關閉 測試環境 測試 只能 正式 環境 方式 開發 測試 小心 別亂 下單 喔\n正式 環境 登入\n想要 正式 環境 登入 先 永豐 開戶 登入 帳號密碼 正式 環境 shioaji 正式 環境 登入 方式 參考\n\nsj shioaji simulation true 改成 api\n\nsj shioaji 即可\n程式 參考 範例\n後記\n在過 這麼久 有人 討論 才 發現 測試環境 真 可惜 只能 實單 希望 開放 開發 怕 ...",
        "extracted_keywords": [
            "測試環境",
            "環境",
            "測試",
            "登入",
            "開放"
        ],
        "extracted_keywords_phrases": [
            "測試環境 登入",
            "環境 登入",
            "測試環境 測試",
            "測試環境",
            "先前 測試環境"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10284028": {
        "href": "https://ithelp.ithome.com.tw/articles/10284028",
        "title": "使用程式來管理資料庫(DB Migrate) (Day27)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>以下內容同步更新於<br>\n<a href=\"https://kevinyay945.com/smart-home-tutorial/027/\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/027/</a></p>\n<p>在這個之前的程式，都是先到資料庫那邊下語法建好表，然後再到程式這邊新增需要的屬性，但這個會有個問題是，如果有一天你需要到新的環境將你的程式部署起來，或是你需要兩個月前的資料庫型態，這時候就會發生你不知道之前執行了什麼樣的sql語法，不曉得兩個月前的資料庫長得怎麼樣(在你資料庫沒有定期備份的情況下)<br>\n因此，需要有個機制可以將資料庫的狀態也那納入git的版本控制</p>\n<p>在這邊，我使用到的是<br>\n<a href=\"https://github.com/golang-migrate/migrate\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/golang-migrate/migrate</a><br>\n來幫我們進行資料庫的版本控制<br>\n沒有選擇使用gorm的migrate而是直接使用語法的原因主要是因為資料庫如果需要用一些gorm沒有寫到的extension，還是得把這些extension放到程式中，所以才會直接選擇使用語法來進行資料庫的表的版本控制</p>\n<p>而這個migrate的工具的使用方式還蠻簡單的<br>\n<a href=\"https://github.com/golang-migrate/migrate/blob/master/MIGRATIONS.md\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/golang-migrate/migrate/blob/master/MIGRATIONS.md</a><br>\n在你需要的地方放上他指定規則的sql檔案</p>\n<pre><code>{version}_{title}.up.{extension}\n{version}_{title}.down.{extension}\n</code></pre>\n<p>他的version要持續變多，第一個是1，第二個就是2，當然你也可以直接跳10，只要數字變多就可以了<br>\n接著，關於up/down的部分，因為在這種版本控制呢，會出現說你今天把原本的程式升級到v2.0.0版，卻發生了很大的bug，需要退回到v1.9.7版，那你的資料庫也會需要將資料變成v1.9.7的形狀，所以up跟down基本上是要相輔相成的，如果up有創表(create table...)，那down就要刪表(drop table ...)</p>\n<p>他的教學也寫得蠻詳盡的，如果有需要可以點進他的github閱讀他的readme喔</p>\n<p>而下面是這次的寫的過成和程式碼</p>\n<p><a href=\"https://www.youtube.com/watch?v=98v_rdLQdYs\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=98v_rdLQdYs</a></p>\n<p><a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.6.0\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.6.0</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-17 20:27:00",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "27",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>以下內容同步更新於<br/>\n</p>\n<p>在這個之前的程式，都是先到資料庫那邊下語法建好表，然後再到程式這邊新增需要的屬性，但這個會有個問題是，如果有一天你需要到新的環境將你的程式部署起來，或是你需要兩個月前的資料庫型態，這時候就會發生你不知道之前執行了什麼樣的sql語法，不曉得兩個月前的資料庫長得怎麼樣(在你資料庫沒有定期備份的情況下)<br/>\n因此，需要有個機制可以將資料庫的狀態也那納入git的版本控制</p>\n<p>在這邊，我使用到的是<br/>\n<br/>\n來幫我們進行資料庫的版本控制<br/>\n沒有選擇使用gorm的migrate而是直接使用語法的原因主要是因為資料庫如果需要用一些gorm沒有寫到的extension，還是得把這些extension放到程式中，所以才會直接選擇使用語法來進行資料庫的表的版本控制</p>\n<p>而這個migrate的工具的使用方式還蠻簡單的<br/>\n<br/>\n在你需要的地方放上他指定規則的sql檔案</p>\n<pre></pre>\n<p>他的version要持續變多，第一個是1，第二個就是2，當然你也可以直接跳10，只要數字變多就可以了<br/>\n接著，關於up/down的部分，因為在這種版本控制呢，會出現說你今天把原本的程式升級到v2.0.0版，卻發生了很大的bug，需要退回到v1.9.7版，那你的資料庫也會需要將資料變成v1.9.7的形狀，所以up跟down基本上是要相輔相成的，如果up有創表(create table...)，那down就要刪表(drop table ...)</p>\n<p>他的教學也寫得蠻詳盡的，如果有需要可以點進他的github閱讀他的readme喔</p>\n<p>而下面是這次的寫的過成和程式碼</p>\n<p></p>\n<p></p>\n<br/>\n</div>",
        "content_text": "以下內容同步更新於\n\n在這個之前的程式，都是先到資料庫那邊下語法建好表，然後再到程式這邊新增需要的屬性，但這個會有個問題是，如果有一天你需要到新的環境將你的程式部署起來，或是你需要兩個月前的資料庫型態，這時候就會發生你不知道之前執行了什麼樣的sql語法，不曉得兩個月前的資料庫長得怎麼樣(在你資料庫沒有定期備份的情況下)\n因此，需要有個機制可以將資料庫的狀態也那納入git的版本控制\n在這邊，我使用到的是\n\n來幫我們進行資料庫的版本控制\n沒有選擇使用gorm的migrate而是直接使用語法的原因主要是因為資料庫如果需要用一些gorm沒有寫到的extension，還是得把這些extension放到程式中，所以才會直接選擇使用語法來進行資料庫的表的版本控制\n而這個migrate的工具的使用方式還蠻簡單的\n\n在你需要的地方放上他指定規則的sql檔案\n\n他的version要持續變多，第一個是1，第二個就是2，當然你也可以直接跳10，只要數字變多就可以了\n接著，關於up/down的部分，因為在這種版本控制呢，會出現說你今天把原本的程式升級到v2.0.0版，卻發生了很大的bug，需要退回到v1.9.7版，那你的資料庫也會需要將資料變成v1.9.7的形狀，所以up跟down基本上是要相輔相成的，如果up有創表(create table...)，那down就要刪表(drop table ...)\n他的教學也寫得蠻詳盡的，如果有需要可以點進他的github閱讀他的readme喔\n而下面是這次的寫的過成和程式碼",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "{version}_{title}.up.{extension}\n{version}_{title}.down.{extension}\n"
            }
        ],
        "programming_languages": [
            "sql"
        ],
        "word_seg_content_text": "以下內容 同步 更新 於\n在 這個 之前 的 程式 ， 都 是 先到 資料庫 那邊 下 語法 建好表 ， 然後 再 到 程式 這邊 新增 需要 的 屬性 ， 但 這個 會 有 個 問題 是 ， 如果 有 一天 你 需要 到 新 的 環境 將你 的 程式 部署 起來 ， 或是 你 需要 兩個 月 前 的 資料庫 型態 ， 這時候 就 會 發生 你 不 知道 之前 執行 了 什麼樣 的 sql 語法 ， 不 曉得 兩個 月 前 的 資料庫 長 得 怎麼樣 ( 在 你 資料庫 沒有 定期 備份 的 情況 下 )\n因此 ， 需要 有個 機制 可以 將 資料庫 的 狀態 也 那 納入 git 的 版本控制\n在 這邊 ， 我 使用 到 的 是\n來 幫 我們 進行 資料庫 的 版本控制\n沒有 選擇 使用 gorm 的 migrate 而是 直接 使用 語法 的 原因 主要 是 因為 資料庫 如果 需要 用 一些 gorm 沒有 寫到 的 extension ， 還是 得 把 這些 extension 放到 程式 中 ， 所以 才 會 直接 選擇 使用 語法 來 進行 資料庫 的 表 的 版本控制\n而 這個 migrate 的 工具 的 使用 方式 還蠻 簡單 的\n在 你 需要 的 地方 放上 他 指定 規則 的 sql 檔案\n他 的 version 要 持續 變多 ， 第一個 是 1 ， 第二個 就是 2 ， 當然 你 也 可以 直接 跳 10 ， 只要 數字 變多 就 可以 了\n接著 ， 關於 up / down 的 部分 ， 因為 在 這種 版本控制 呢 ， 會 出現 說 你 今天 把 原本 的 程式 升級 到 v2.0 . 0 版 ， 卻 發生 了 很大 的 bug ， 需要 退回 到 v1.9 . 7 版 ， 那 你 的 資料庫 也 會 需要 將 資料 變成 v1.9 . 7 的 形狀 ， 所以 up 跟 down 基本上 是 要 相輔相成 的 ， 如果 up 有 創表 ( create\ntable ... ) ， 那 down 就要 刪表 ( drop\ntable\n... )\n他 的 教學 也 寫 得 蠻 詳盡 的 ， 如果 有 需要 可以 點進 他 的 github 閱讀 他 的 readme 喔\n而 下面 是 這次 的 寫 的 過成 和 程式碼",
        "word_seg_processed_content_text": "以下內容 同步 更新\n程式 先到 資料庫 語法 建好表 程式 新增 屬性 會 新 環境 將你 程式 部署 兩個 月 前 資料庫 型態 這時候 會 發生 執行 sql 語法 曉得 兩個 月 前 資料庫 長 資料庫 定期 備份 情況\n有個 機制 資料庫 狀態 納入 git 版本控制\n\n幫 資料庫 版本控制\n選擇 gorm migrate 語法 原因 資料庫 gorm 寫到 extension extension 放到 程式 中 才 會 選擇 語法 資料庫 表 版本控制\nmigrate 工具 方式 還蠻 簡單\n地方 放上 指定 規則 sql 檔案\nversion 持續 變多 第一個 1 第二個 2 跳 10 數字 變多\nup down 版本控制 會 說 原本 程式 升級 v2.0 0 版 發生 很大 bug 退回 v1.9 7 版 資料庫 會 資料 v1.9 7 形狀 up down 基本上 相輔相成 up 創表 create\ntable ... down 就要 刪表 drop\ntable\n...\n教學 寫 蠻 詳盡 點進 github 閱讀 readme 喔\n這次 寫 過成 程式碼",
        "extracted_keywords": [
            "資料庫",
            "sql",
            "版本控制",
            "更新",
            "程式"
        ],
        "extracted_keywords_phrases": [
            "資料庫 版本控制",
            "版本控制 資料庫",
            "資料庫 語法",
            "資料庫 型態",
            "資料庫 定期"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10277460": {
        "href": "https://ithelp.ithome.com.tw/articles/10277460",
        "title": "Day 31 - 遲來的鐵人賽心得",
        "content_html": "<div class=\"markdown__style\">\n                                                            <blockquote>\n<p>某人可能會遲到，但從不缺席 (沒x 失蹤很久了好嗎==</p>\n</blockquote>\n<h2>故事原點</h2>\n<p>在正式參加鐵人賽之前，我從不知道有這個活動，或者也可以說沒有真正的逛過iT邦幫忙這個網站。第一次真正意義上讓我看到鐵人賽，是因為在學校上UNIX作業系統時遇到瓶頸，然後著急地到網路上尋找其他人學習恐龍書之後所寫的心得，緣分使然讓我在無意間看到\"<strong>小黑馬作業系統教室統整</strong>\"的鐵人賽系列文(已被下架QQ)，令我在重新拾回學習信心同時，也在心中浮現下次的鐵人賽參賽計畫(2021第13屆)。</p>\n<ul>\n<li>恐龍書 (圖源: <a href=\"https://cdnec.sanmin.com.tw/product_images/957/957483793.jpg\" target=\"_blank\" rel=\"noreferrer noopener\">三民網路書店</a>)<br>\n<img src=\"https://i.imgur.com/Ind4xj0.jpg\" alt=\"\">\n</li>\n</ul>\n<p>由於是初次參加鐵人賽，我選擇報名的是\"<strong>自我挑戰組</strong>\"。(或許是因為覺得相對自由的關係?) 在想這30天要寫些什麼的時候，我最原始的想法是想寫我開始接觸網頁的心得，像是網頁三本柱以及前期踩的坑之類的，但後來看到有人分享 <strong>JS30</strong> 的課程心得，又因為它剛好就是30天的課程，當下我就確定要寫\"<strong>JS30學習日記</strong>\"系列文。</p>\n<hr>\n<h2>故事伊始</h2>\n<p>在鐵人賽正式開賽(2021-09-01)之前，我有思考過該不該寫稿起來放(後來在鐵人賽開賽後沒幾天，我就看到有人在文章中說他已經寫完30天的文章。自爆XD)，考慮到時間安排彈性的問題，我在開賽前屯了10篇左右的稿子。</p>\n<p>當然不是說我每天晚上12:00剛過，就上來丟篇文章打卡這麼簡單，如果各位大大、前輩們有稍微看過我寫的系列文，就會發現我JS真的很菜，非常依賴在網路上查各種算是\"<strong>常識</strong>\"的資料(我自己認為是這樣)，查資料的時間甚至比我看課程影片+寫學習心得的時間還要長哈哈。</p>\n<hr>\n<h2>故事途中</h2>\n<p>前期每天就在準時上來發心得文(確認發表前我都會再確認一次內容，盡量讓文章不要出現錯字)、寫之後的文章內容、觀看教學影片以及查大量的資料中平靜地度過。</p>\n<p>而故事的轉折點，發生在開學之後課業(大學生ing~)與鐵人賽的事情剛好重疊在一起，我開始只能用相對零碎的時間來寫鐵人賽的系列文。</p>\n<hr>\n<h2>故事轉折</h2>\n<p>對我這個大學生而言，開學第一週都在思考整學期的課程安排，要怎麼選到可以帶走東西的課是每學期都有的挑戰，我會非常仔細地看課程大綱還有之前的課程評價等等來參考，當然有些萬惡的必修課仍無法避免XD。</p>\n<p>想當然耳，跟前面說的一樣只能用零碎的時間繼續維持每天發文，過程中也曾經想要放棄，但畢竟就剩幾天就可以完賽，心裡浮現的那份不甘願促使我要繼續往前進。</p>\n<p>我也稍微能夠體會為什麼有些優質系列文會無法挑戰成功，因為真的會有很多突發狀況讓人沒有時間寫完，一篇優質的文章或許只要短短不到10分鐘就能快速閱讀完畢，但作者卻要花數倍時間來寫和整理相關資料。</p>\n<hr>\n<h2>故事尾聲</h2>\n<p>在Stack Overflow、前人的JS30課程筆記、MDN Web Docs的大力支援下，\"JS30學習日記\"系列文就這樣順利地完成了。儘管因為開學，比較後面的文章有寫得比較隨便，但完賽的那個瞬間，真的帶給我滿滿的感動與成就感。除此之外，瀏覽次數、Like數、訂閱數的跳動，都讓我有被人認同的感覺。</p>\n<p>最後真的非常感謝網路上的各位前輩們~ (更新於2022/02/28)</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,鐵人賽心得,2021鐵人賽,it鐵人賽 2021",
        "genre": "自我挑戰組",
        "published_at": "2022-02-15 20:02:47",
        "author_href": "https://ithelp.ithome.com.tw/users/20135354/ironman",
        "author_name": "Xiang1009",
        "series_href": "https://ithelp.ithome.com.tw/users/20135354/ironman/4136",
        "series_name": "JS30 學習日記",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<blockquote>\n<p>某人可能會遲到，但從不缺席 (沒x 失蹤很久了好嗎==</p>\n</blockquote>\n<h2>故事原點</h2>\n<p>在正式參加鐵人賽之前，我從不知道有這個活動，或者也可以說沒有真正的逛過iT邦幫忙這個網站。第一次真正意義上讓我看到鐵人賽，是因為在學校上UNIX作業系統時遇到瓶頸，然後著急地到網路上尋找其他人學習恐龍書之後所寫的心得，緣分使然讓我在無意間看到\"<strong>小黑馬作業系統教室統整</strong>\"的鐵人賽系列文(已被下架QQ)，令我在重新拾回學習信心同時，也在心中浮現下次的鐵人賽參賽計畫(2021第13屆)。</p>\n<ul>\n<li>恐龍書 (圖源: )<br/>\n\n</li>\n</ul>\n<p>由於是初次參加鐵人賽，我選擇報名的是\"<strong>自我挑戰組</strong>\"。(或許是因為覺得相對自由的關係?) 在想這30天要寫些什麼的時候，我最原始的想法是想寫我開始接觸網頁的心得，像是網頁三本柱以及前期踩的坑之類的，但後來看到有人分享 <strong>JS30</strong> 的課程心得，又因為它剛好就是30天的課程，當下我就確定要寫\"<strong>JS30學習日記</strong>\"系列文。</p>\n<hr/>\n<h2>故事伊始</h2>\n<p>在鐵人賽正式開賽(2021-09-01)之前，我有思考過該不該寫稿起來放(後來在鐵人賽開賽後沒幾天，我就看到有人在文章中說他已經寫完30天的文章。自爆XD)，考慮到時間安排彈性的問題，我在開賽前屯了10篇左右的稿子。</p>\n<p>當然不是說我每天晚上12:00剛過，就上來丟篇文章打卡這麼簡單，如果各位大大、前輩們有稍微看過我寫的系列文，就會發現我JS真的很菜，非常依賴在網路上查各種算是\"<strong>常識</strong>\"的資料(我自己認為是這樣)，查資料的時間甚至比我看課程影片+寫學習心得的時間還要長哈哈。</p>\n<hr/>\n<h2>故事途中</h2>\n<p>前期每天就在準時上來發心得文(確認發表前我都會再確認一次內容，盡量讓文章不要出現錯字)、寫之後的文章內容、觀看教學影片以及查大量的資料中平靜地度過。</p>\n<p>而故事的轉折點，發生在開學之後課業(大學生ing~)與鐵人賽的事情剛好重疊在一起，我開始只能用相對零碎的時間來寫鐵人賽的系列文。</p>\n<hr/>\n<h2>故事轉折</h2>\n<p>對我這個大學生而言，開學第一週都在思考整學期的課程安排，要怎麼選到可以帶走東西的課是每學期都有的挑戰，我會非常仔細地看課程大綱還有之前的課程評價等等來參考，當然有些萬惡的必修課仍無法避免XD。</p>\n<p>想當然耳，跟前面說的一樣只能用零碎的時間繼續維持每天發文，過程中也曾經想要放棄，但畢竟就剩幾天就可以完賽，心裡浮現的那份不甘願促使我要繼續往前進。</p>\n<p>我也稍微能夠體會為什麼有些優質系列文會無法挑戰成功，因為真的會有很多突發狀況讓人沒有時間寫完，一篇優質的文章或許只要短短不到10分鐘就能快速閱讀完畢，但作者卻要花數倍時間來寫和整理相關資料。</p>\n<hr/>\n<h2>故事尾聲</h2>\n<p>在Stack Overflow、前人的JS30課程筆記、MDN Web Docs的大力支援下，\"JS30學習日記\"系列文就這樣順利地完成了。儘管因為開學，比較後面的文章有寫得比較隨便，但完賽的那個瞬間，真的帶給我滿滿的感動與成就感。除此之外，瀏覽次數、Like數、訂閱數的跳動，都讓我有被人認同的感覺。</p>\n<p>最後真的非常感謝網路上的各位前輩們~ (更新於2022/02/28)</p>\n<br/>\n</div>",
        "content_text": "某人可能會遲到，但從不缺席 (沒x 失蹤很久了好嗎==\n\n故事原點\n在正式參加鐵人賽之前，我從不知道有這個活動，或者也可以說沒有真正的逛過iT邦幫忙這個網站。第一次真正意義上讓我看到鐵人賽，是因為在學校上UNIX作業系統時遇到瓶頸，然後著急地到網路上尋找其他人學習恐龍書之後所寫的心得，緣分使然讓我在無意間看到\"小黑馬作業系統教室統整\"的鐵人賽系列文(已被下架QQ)，令我在重新拾回學習信心同時，也在心中浮現下次的鐵人賽參賽計畫(2021第13屆)。\n\n恐龍書 (圖源: )\n\n\n\n由於是初次參加鐵人賽，我選擇報名的是\"自我挑戰組\"。(或許是因為覺得相對自由的關係?) 在想這30天要寫些什麼的時候，我最原始的想法是想寫我開始接觸網頁的心得，像是網頁三本柱以及前期踩的坑之類的，但後來看到有人分享 JS30 的課程心得，又因為它剛好就是30天的課程，當下我就確定要寫\"JS30學習日記\"系列文。\n\n故事伊始\n在鐵人賽正式開賽(2021-09-01)之前，我有思考過該不該寫稿起來放(後來在鐵人賽開賽後沒幾天，我就看到有人在文章中說他已經寫完30天的文章。自爆XD)，考慮到時間安排彈性的問題，我在開賽前屯了10篇左右的稿子。\n當然不是說我每天晚上12:00剛過，就上來丟篇文章打卡這麼簡單，如果各位大大、前輩們有稍微看過我寫的系列文，就會發現我JS真的很菜，非常依賴在網路上查各種算是\"常識\"的資料(我自己認為是這樣)，查資料的時間甚至比我看課程影片+寫學習心得的時間還要長哈哈。\n\n故事途中\n前期每天就在準時上來發心得文(確認發表前我都會再確認一次內容，盡量讓文章不要出現錯字)、寫之後的文章內容、觀看教學影片以及查大量的資料中平靜地度過。\n而故事的轉折點，發生在開學之後課業(大學生ing~)與鐵人賽的事情剛好重疊在一起，我開始只能用相對零碎的時間來寫鐵人賽的系列文。\n\n故事轉折\n對我這個大學生而言，開學第一週都在思考整學期的課程安排，要怎麼選到可以帶走東西的課是每學期都有的挑戰，我會非常仔細地看課程大綱還有之前的課程評價等等來參考，當然有些萬惡的必修課仍無法避免XD。\n想當然耳，跟前面說的一樣只能用零碎的時間繼續維持每天發文，過程中也曾經想要放棄，但畢竟就剩幾天就可以完賽，心裡浮現的那份不甘願促使我要繼續往前進。\n我也稍微能夠體會為什麼有些優質系列文會無法挑戰成功，因為真的會有很多突發狀況讓人沒有時間寫完，一篇優質的文章或許只要短短不到10分鐘就能快速閱讀完畢，但作者卻要花數倍時間來寫和整理相關資料。\n\n故事尾聲\n在Stack Overflow、前人的JS30課程筆記、MDN Web Docs的大力支援下，\"JS30學習日記\"系列文就這樣順利地完成了。儘管因為開學，比較後面的文章有寫得比較隨便，但完賽的那個瞬間，真的帶給我滿滿的感動與成就感。除此之外，瀏覽次數、Like數、訂閱數的跳動，都讓我有被人認同的感覺。\n最後真的非常感謝網路上的各位前輩們~ (更新於2022/02/28)",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "某人 可能 會 遲到 ， 但 從不 缺席\n( 沒 x\n失蹤 很久 了 好 嗎 = =\n故事 原點\n在 正式 參加 鐵人 賽 之前 ， 我 從不 知道 有 這個 活動 ， 或者 也 可以 說 沒有 真正 的 逛過 iT 邦 幫忙 這個 網站 。 第一次 真正 意義 上 讓 我 看到 鐵人 賽 ， 是 因為 在 學校 上 UNIX 作業系統 時 遇到 瓶頸 ， 然後 著急 地到 網路上 尋找 其他人 學習 恐龍 書 之後 所寫 的 心得 ， 緣分 使然 讓 我 在 無意間 看到 \" 小 黑馬 作業系統 教室 統整 \" 的 鐵人 賽 系列 文 ( 已 被 下架 QQ ) ， 令 我 在 重新 拾回 學習 信心 同時 ， 也 在 心中 浮現 下次 的 鐵人 賽 參賽 計畫 ( 2021 第 13 屆 ) 。\n恐龍 書\n( 圖源 :\n)\n由於 是 初次 參加 鐵人 賽 ， 我 選擇 報名 的 是 \" 自我 挑戰 組 \" 。 ( 或許 是 因為 覺得 相對 自由 的 關係 ? )\n在 想 這 30 天要 寫些 什麼 的 時候 ， 我 最 原始 的 想法 是 想 寫 我 開始 接觸 網頁 的 心得 ， 像是 網頁 三本 柱 以及 前期 踩 的 坑 之類 的 ， 但 後來 看到 有人 分享\nJS30\n的 課程 心得 ， 又 因為 它 剛好 就是 30 天 的 課程 ， 當下 我 就 確定 要 寫 \" JS30 學習 日記 \" 系列 文 。\n故事 伊始\n在 鐵人 賽 正式 開賽 ( 2021 - 09 - 01 ) 之前 ， 我 有 思考 過 該不該 寫稿 起來 放 ( 後來 在 鐵人 賽 開賽 後 沒 幾天 ， 我 就 看到 有人 在 文章 中說 他 已經 寫 完 30 天 的 文章 。 自爆 XD ) ， 考慮 到 時間 安排 彈性 的 問題 ， 我 在 開賽 前屯 了 10 篇 左右 的 稿子 。\n當然 不是 說 我 每天晚上 12 : 00 剛過 ， 就 上來 丟 篇文章 打卡 這麼 簡單 ， 如果 各位 大大 、 前輩 們 有 稍微 看過 我 寫 的 系列 文 ， 就 會 發現 我 JS 真的 很菜 ， 非常 依賴 在 網路上 查 各種 算是 \" 常識 \" 的 資料 ( 我 自己 認為 是 這樣 ) ， 查資料 的 時間 甚至 比 我 看 課程 影片 + 寫 學習心得 的 時間 還要 長 哈哈 。\n故事 途中\n前期 每天 就 在 準時 上來 發 心得 文 ( 確認 發表 前 我 都 會 再 確認 一次 內容 ， 盡量 讓 文章 不要 出現 錯字 ) 、 寫 之後 的 文章內容 、 觀看 教學 影片 以及 查 大量 的 資料 中 平靜 地 度過 。\n而 故事 的 轉折點 ， 發生 在 開學 之後 課業 ( 大學生 ing ~ ) 與 鐵人 賽 的 事情 剛好 重疊 在 一起 ， 我 開始 只能 用 相對 零碎 的 時間 來 寫 鐵人 賽 的 系列 文 。\n故事 轉折\n對 我 這個 大學生 而言 ， 開學 第一週 都 在 思考 整 學期 的 課程 安排 ， 要 怎麼 選到 可以 帶走 東西 的 課 是 每學期 都 有 的 挑戰 ， 我會 非常 仔細 地看 課程 大綱 還有 之前 的 課程 評價 等等 來 參考 ， 當然 有些 萬惡 的 必修課 仍 無法 避免 XD 。\n想當然 耳 ， 跟 前面 說 的 一樣 只能 用 零碎 的 時間 繼續 維持 每天 發文 ， 過程 中 也 曾經 想要 放棄 ， 但 畢竟 就 剩 幾天 就 可以 完賽 ， 心裡 浮現 的 那份 不 甘願 促使 我要 繼續 往 前進 。\n我 也 稍微 能夠 體會 為 什麼 有些 優質 系列 文會 無法 挑戰 成功 ， 因為 真的 會 有 很多 突發狀況 讓 人 沒有 時間 寫 完 ， 一篇 優質 的 文章 或許 只要 短短 不到 10 分鐘 就 能 快速 閱讀 完畢 ， 但 作者 卻 要 花 數倍 時間 來 寫 和 整理 相關 資料 。\n故事 尾聲\n在 Stack\nOverflow 、 前人 的 JS30 課程 筆記 、 MDN\nWeb\nDocs 的 大力 支援 下 ， \" JS30 學習 日記 \" 系列 文就 這樣 順利 地 完成 了 。 儘管 因為 開學 ， 比較 後面 的 文章 有 寫 得 比較 隨便 ， 但 完賽 的 那個 瞬間 ， 真的 帶給 我 滿滿的 感動 與 成就感 。 除此之外 ， 瀏覽 次數 、 Like 數 、 訂閱 數的 跳動 ， 都 讓 我 有 被 人 認同 的 感覺 。\n最後 真的 非常感謝 網路上 的 各位 前輩 們 ~\n( 更新 於 2022 / 02 / 28 )",
        "word_seg_processed_content_text": "某人 會 遲到 從不 缺席\n沒 x\n失蹤 很久\n故事 原點\n正式 參加 鐵人 賽 從不 活動 說 逛過 邦 幫忙 網站 第一次 意義 鐵人 賽 學校 unix 作業系統 時 瓶頸 著急 地到 網路上 尋找 其他人 學習 恐龍 書 所寫 心得 緣分 使然 無意間 黑馬 作業系統 教室 統整 鐵人 賽 系列 文 下架 qq 令 拾回 學習 信心 心中 浮現 下次 鐵人 賽 參賽 計畫 2021 13 屆\n恐龍 書\n圖源\n\n初次 參加 鐵人 賽 選擇 報名 自我 挑戰 組 或許 自由 關係\n想 30 天要 寫些 原始 想法 想 寫 接觸 網頁 心得 像是 網頁 三本 柱 前期 踩 坑 有人 分享\njs30\n課程 心得 剛好 30 天 課程 當下 寫 js30 學習 日記 系列 文\n故事 伊始\n鐵人 賽 正式 開賽 2021 09 01 思考 該不該 寫稿 放 鐵人 賽 開賽 沒 幾天 有人 文章 中說 寫 完 30 天 文章 自爆 xd 時間 安排 彈性 開賽 前屯 10 篇 稿子\n說 每天晚上 12 00 剛過 丟 篇文章 打卡 簡單 前輩 稍微 看過 寫 系列 文 會 發現 js 真的 很菜 依賴 網路上 查 算是 常識 資料 查資料 時間 課程 影片 寫 學習心得 時間 還要 長\n故事 途中\n前期 準時 發 心得 文 確認 發表 前 會 確認 內容 盡量 文章 錯字 寫 文章內容 觀看 教學 影片 查 資料 中 平靜 度過\n故事 轉折點 發生 開學 課業 大學生 ing 鐵人 賽 事情 剛好 重疊 只能 零碎 時間 寫 鐵人 賽 系列 文\n故事 轉折\n大學生 開學 第一週 思考 整 學期 課程 安排 選到 帶走 東西 課 每學期 挑戰 我會 仔細 地看 課程 大綱 課程 評價 參考 萬惡 必修課 xd\n想當然 耳 說 只能 零碎 時間 發文 過程 中 想要 放棄 畢竟 剩 幾天 完賽 浮現 那份 甘願 促使 我要\n稍微 體會 優質 系列 文會 挑戰 成功 真的 會 很多 突發狀況 時間 寫 完 一篇 優質 文章 或許 短短 不到 10 分鐘 快速 閱讀 完畢 作者 花 數倍 時間 寫 整理 相關 資料\n故事 尾聲\nstack\noverflow 前人 js30 課程 筆記 mdn\nweb\ndocs 支援 js30 學習 日記 系列 文就 順利 開學 文章 寫 隨便 完賽 瞬間 真的 帶給 滿滿的 感動 成就感 瀏覽 次數 like 數 訂閱 數的 跳動 認同 感覺\n真的 非常感謝 網路上 前輩\n更新 2022 02 28",
        "extracted_keywords": [
            "學習心得",
            "課業",
            "必修課",
            "無意間",
            "閱讀"
        ],
        "extracted_keywords_phrases": [
            "like 訂閱",
            "開學 文章",
            "心得 像是",
            "快速 閱讀",
            "學習心得 時間"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283984": {
        "href": "https://ithelp.ithome.com.tw/articles/10283984",
        "title": "STM32CubeMX專案配置詳細教學，點亮LED",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>想在這紀錄一下我使用STM32CubeMX的經驗適合完全沒用過的人，已經有開發經驗的就不用看了，我第一次使用STM32CubeMX來開發我<a href=\"https://ithelp.ithome.com.tw/articles/10263973\" target=\"_blank\" rel=\"noreferrer noopener\">自己做的開發版</a>，在一開始我都是使用STM32標準庫的方式做開發，有興趣的可以看到我第13屆鐵人賽：<a href=\"https://ithelp.ithome.com.tw/users/20141979/ironman/4820\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/users/20141979/ironman/4820</a></p>\n<p>很幸運得了 [Arm Platforms] 類組的優選，我在文章有提到標準庫開發和STM32CubeMX的HAL、LL庫開發的差異<a href=\"https://ithelp.ithome.com.tw/articles/10282547\" target=\"_blank\" rel=\"noreferrer noopener\">STM32的開發生態，Cube、HAL庫、LL庫</a>，這邊就不重複說這些的差別了，總之學標準庫會讓你對嵌入式單晶片這塊領域更有Sense，基本的學完後再來去深入探討進階功能，如何讓程式執行快更有效率。</p>\n<p>我從標準庫銜接到HAL庫使用上沒遇到甚麼問題，我必須說學過標準庫過後再去碰STM32CubeMX所產生出來的配置專案完全不覺得陌生，在我眼裡就只是標準庫刪掉一堆功能函示作精簡的版本。</p>\n<p>STM32CubeMX的安裝我就不描述了，直接從建立1個新的專案GPIO點亮LED開始，首先點開來 STM32CubeMX 軟體會出現以下畫面<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979mOe3xv5J4U.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979mOe3xv5J4U.png\"></p>\n<p>按了上圖 ACCESS TO MCU SELECTOR 的部分來創建個專案，開完後會出現下圖的選擇MCU/MPU型號的列表。<br>\n假設你身邊有ST官方出的開發板可以選擇第二項，以開發板型號做創建專案</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979nv36rlgFJb.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979nv36rlgFJb.png\"></p>\n<p>我這邊是選擇 STM32F030CC 的 MCU 型號，這邊的話就選擇自己身邊有的開發版 MCU 型號做選擇吧不會影響我這點亮LED的範例，左半邊是根據MCU/MPU的規格去做篩選，選擇好後後會反黑再點右上角的 Start Project 開始專案會出現下列配置函示的介面。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979fmV2B33uuO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979fmV2B33uuO.png\"></p>\n<p>首先要來配置能燒入程式的 IO 口 SWCLK 和 SWDIO<br>\n1.點選 SYS<br>\n2.點選 Debug Serial Wire 配置燒錄口<br>\n3.會顯示兩個角位框框變成綠色<br>\n至於下面兩個選項的作用是用來喚醒 MCU 或者讓 MCU 休眠的 IO 口，目前用不到先不選取</p>\n<p>再來是選取左邊的 GPIO 選項，對著右邊的 MCU 選擇你要配置 GPIO 的口如下<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979YHO4LzsCOx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979YHO4LzsCOx.png\"></p>\n<p>1.點選GPIO<br>\n2.點選你要的IO口就會跳出1個選單，再選你要的功能我這邊是選 PA1 GPIO_Output</p>\n<p>選完後中間的介面就會跳出進階的設定，如下圖<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419793AWn2qMAMS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419793AWn2qMAMS.png\"></p>\n<p>可以看到左上方的界面出現了1個 PA1 還有一排的規格，下方則是 PA1 的初始化<br>\n1.GPIO output level     (GPIO 口默認狀態，可配置為 High 和 Low)<br>\n2.GPIO mode             (GPIO 口的模式，可配置成 Output Push Pull 和 Output Open Drain)<br>\n(至於這模式的差別我在之前的文章有提到了：<a href=\"https://ithelp.ithome.com.tw/articles/10268550\" target=\"_blank\" rel=\"noreferrer noopener\">GPIO口的八種模式</a>)<br>\n3.GPIO Pull-up/Pull-down(GPIO 口內部上拉VDD或下拉GND還有不上拉和不下拉)<br>\n4.Maximum output speed  (GPIO 口的輸出速度可以配置為高速、中速、低速，實際的數值可以查看參考手冊的GPIO章節)<br>\n5.User Label            (這是定義這個IO口名稱的宏定義 #define，例如我打 LED_TEST 的話則會再 MCU 介面出現註解的感覺，程式碼部分則會在最後產生專案裡的 main.h 裡面如下圖)</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419798N65rjqTse.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419798N65rjqTse.png\"></p>\n<p>要得GPIO口配置好了再來就是開啟RCC，MCU需要震盪才會工作，點開左邊的RCC選項後會看到下圖介面</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979Y0ebLiEORe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979Y0ebLiEORe.png\"><br>\n1.點選RCC<br>\n2.可以選擇你想開起的外部時鐘，由於我<a href=\"https://ithelp.ithome.com.tw/articles/10263973\" target=\"_blank\" rel=\"noreferrer noopener\">自己做的開發版</a>我兩個外部時鐘都有焊上去但我這邊只選擇使用外部高速時因震盪<br>\n3.顯示這兩個角位配置成外部高速石英震盪</p>\n<h2>Clock Configuration</h2>\n<p>要用的IO口都開好了，再來是 Clock Configuration 也就是時鐘樹(RCC)詳細設置，點選上方的Clock Configuration 如下</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419791o7pMuALFB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/201419791o7pMuALFB.png\"></p>\n<p>1.點選上方的 Clock Configuration 進入配置時鐘樹<br>\n2.設定外部石英震盪速度這邊可以看到4-32代表說你只能掛這範圍的石英，這邊就根據各位的開發版的來決定。<br>\n3.經過PLL數據多工器來選擇要使用HSE還是HSI，這邊我選擇HSE<br>\n4.這邊我選擇6倍頻是因為我想讓這顆MCU達到最高工作頻率48MHz，每顆mcu能工作的頻率不一樣，還有很重要的一點再高階一點的MCU些IO口的最高工作頻率也會不同喔，要看 Datasheet 裡的說明，假如我這邊調7框框會變紅色提示你錯誤配置<br>\n5.系統的 Clock 來源這邊我選擇PLLCLK<br>\n6.看到最後 PCLK1 的 APB1 的總線速度為48MHz，看這裡的原因是APB1為GPIO口上的控制線</p>\n<h2>Project Manager</h2>\n<p>再來是要創造專案的設定，點選上方的 Project Manager</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979HZIBpWbZpD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979HZIBpWbZpD.png\"></p>\n<h3>1.Project Settings (專案設置)</h3>\n<p><strong>Project Name</strong>        ：專案名稱，這邊我設置h01_GPIO (不要設置中文)<br>\n<strong>Project Location</strong>    ：專案要放的路徑，這邊我選擇D槽創建1個STM32CubeMXLib的空資料夾<br>\n<strong>Application Struture</strong>：應用程式的結構，這裏包含兩個選項Basic：是基礎的結構，一般不包含中間件（RTOS、文件系統、USB設備等），Advanced：相反就是包含中間件，一般針對相對複雜一點的工程。這邊我們就設定基本(Basic)模式就好。<br>\n<strong>Toolchain Folder Location</strong>：這會在 Project Location 專案路徑上建立資料夾，名稱為 Project Name<br>\n<strong>Toolchain/IDE</strong>：這邊是選擇你要用的編譯軟體，這邊我選擇 MDK-ARM 是用Keil5，我比較習慣 Keil5 這邊就看個人喜好瞜，後面的版本部分就選最高的就好</p>\n<h3>2.Linker Settings (堆棧設置)</h3>\n<p>這部分預設就好，這牽扯到程式碼的運行速度入門這行先不要去玩這個，這地方是動到.s檔組合語言的部分，等基本都完過再來理解這設置的用意吧</p>\n<h3>3.Thread-safe Settings</h3>\n<p>去看官方使用手冊說明看完還是不確定，只看懂使用Keil5、STM32CubeIDE的話勾選 Enble multi-threaded support</p>\n<h3>4.Mcu and Firmware Package</h3>\n<p>這邊就不用動了就直接預設的就好，這邊是在選擇要用HAL庫版本</p>\n<h2>Code Generator</h2>\n<p>再來點選左半邊的 Code Generator (代碼生成器)，這地方主要是在設定產生代碼的樣子</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979afJEFzg4Gv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979afJEFzg4Gv.png\"></p>\n<h3>1.STM32Cube MCU packages and embedded software packs</h3>\n<ul>\n<li>\n<strong>Copy all used libraries into the project folder</strong> - 將所有使用過的庫複製到項目文件夾中<br>\n這地方可以勾起來，這樣工程才會包含所有基本的功能庫，方便查看各個功能有甚麼樣的函示</li>\n<li>\n<strong>Copy only the necessary library files</strong> - 只複製必要的庫文件<br>\n假如你沒有使用CAN、SPI、I2C等外設功能，就不會新增相關庫文件到你工程下。</li>\n<li>\n<strong>Add necessary library files as reference in the toolchain project configuration file</strong> - 在工具鏈項目配置文件中添加必要的庫文件作爲參考<br>\n這個勾選的話就不會HAL庫的驅動文件只會有最基本配置初始函示，例如我要點亮1個LED的話勾選了這個選項我就要自己寫操作暫存器來賦予值，有點像是暫存器開發，我覺得剛開始練習就勾1個就好，這樣能快速練習一些基本功能。</li>\n</ul>\n<h3>2.Generated files (生成文件)</h3>\n<p>這裡依個人需求選擇，我個人習慣每個功能函示都有對應的地方居住所以勾選了第1個選項，這有點像是我之前標準庫開發的方式，有興趣的可以再去看看我的鐵人文章，再來是，第2個我不想每次重新生成程式都備份舊的，第3個則是每次產生新文件時不取代掉我原本的打的程式</p>\n<ul>\n<li>\n<strong>Generate peripheral initialization as a pair of'.c/.h' files per peripheral</strong> - 每個外設生成獨立的'.c/.h'文件<br>\n不勾：所有初始化代碼都生成在main.c<br>\n勾選：初始化代碼生成在對應的外設文件。 如UART初始化代碼生成在uart.c中。</li>\n<li>\n<strong>Backup previously generated files when re-generating</strong> - 在重新生成時備份以前生成的文件<br>\n重新生成代碼時，會在相關目錄中生成一個Backup文件夾，將之前源文件拷貝到其中。</li>\n<li>\n<strong>Keep User Code when re-generating</strong> - 在重新生成時保留用戶代碼<br>\n在main.c中添加了一段代碼，重新生成時，會在main.c中保留你之前自己添加的這段代碼。<br>\n<code>!! 注意：前提是這段代碼寫在規定的位置。也就是BEGIN和END之間，否則會被刪除。 !!</code>\n</li>\n<li>\n<strong>Delete previously generated files when not re-generated</strong> - 刪除以前生成，但現在沒有生成的文件<br>\n假設之前生成了i2c.c，現在重新配置沒有i2c.c，則會刪除之前的i2c.c文件。</li>\n</ul>\n<h3>3.HAL Settings (HAL庫設置)</h3>\n<ul>\n<li>Set all free pins as analog (to optimize the power consumption)<br>\n將所有空閒引腳設置爲類比輸入，做低功耗產品時這個選項有必要勾選。</li>\n<li>nable Full Assert<br>\n使能所有斷言，作為參數檢查。</li>\n<li>Template Settings<br>\n模板設置這邊預設就好，有興趣的可以參考最新用戶手冊6節 Custom code generation 內容。</li>\n</ul>\n<h2>Advanced Settings</h2>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979rvbV8rxndT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979rvbV8rxndT.png\"></p>\n<ul>\n<li>\n<strong>Driver Selector</strong> - 主要是選擇要用什麼庫做驅動，HAL庫、LL庫這兩個差別我在之前的<a href=\"https://ithelp.ithome.com.tw/articles/10282547\" target=\"_blank\" rel=\"noreferrer noopener\">文章</a>有做解釋這邊就不在描述了。</li>\n<li>\n<strong>Generated Function Calls</strong> - 調用函數<br>\n主要後面兩個選項：Not Generate Function Call和Visibility (Static)<br>\n1.Do Not Generate Function Call不生成函數調用<br>\n也就是你代碼不調用對應初始化函數。<br>\n比如：你GPIO項勾選Do Not Generate Function Call，你main.c函數中就不會調用MX_GPIO_Init這個函數。<br>\n這邊我是選擇要調用。</li>\n</ul>\n<p>設定好後就可以按上面的 GENERATE CODE了，按完過一下子就會出現下列這視窗<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979w0RqKjPwr5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979w0RqKjPwr5.png\"><br>\n選擇左邊第1個，開啟專案資料夾</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979ROB0zOjJWH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979ROB0zOjJWH.png\"><br>\n點開MDK-ARM裡面就會看到下圖<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979DuRrzXmnWK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220214/20141979DuRrzXmnWK.png\"><br>\n點開h01_GPIO專案就可以開始寫程式啦，在main.c這裡打上這4行就可以插上LED於PA1就會閃爍了啦~<br>\n今天花了半天在打這篇文，會想這樣整理也有個好處，我之後想傳承給實驗室的學弟妹也比較好傳承，包跨我鐵人賽的文章也是。</p>\n<p>假如對上述操作有什麼疑問都歡迎提出來。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,stm32,stm32cubemx,stm32f030cc",
        "genre": "Arm Platforms",
        "published_at": "2022-02-14 21:35:53",
        "author_href": "https://ithelp.ithome.com.tw/users/20141979/ironman",
        "author_name": "Shortbread",
        "series_href": "https://ithelp.ithome.com.tw/users/20141979/ironman/4820",
        "series_name": "基於ARM-M0架構MCU之落摔檢測韌體開發",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>想在這紀錄一下我使用STM32CubeMX的經驗適合完全沒用過的人，已經有開發經驗的就不用看了，我第一次使用STM32CubeMX來開發我，在一開始我都是使用STM32標準庫的方式做開發，有興趣的可以看到我第13屆鐵人賽：</p>\n<p>很幸運得了 [Arm Platforms] 類組的優選，我在文章有提到標準庫開發和STM32CubeMX的HAL、LL庫開發的差異，這邊就不重複說這些的差別了，總之學標準庫會讓你對嵌入式單晶片這塊領域更有Sense，基本的學完後再來去深入探討進階功能，如何讓程式執行快更有效率。</p>\n<p>我從標準庫銜接到HAL庫使用上沒遇到甚麼問題，我必須說學過標準庫過後再去碰STM32CubeMX所產生出來的配置專案完全不覺得陌生，在我眼裡就只是標準庫刪掉一堆功能函示作精簡的版本。</p>\n<p>STM32CubeMX的安裝我就不描述了，直接從建立1個新的專案GPIO點亮LED開始，首先點開來 STM32CubeMX 軟體會出現以下畫面<br/>\n</p>\n<p>按了上圖 ACCESS TO MCU SELECTOR 的部分來創建個專案，開完後會出現下圖的選擇MCU/MPU型號的列表。<br/>\n假設你身邊有ST官方出的開發板可以選擇第二項，以開發板型號做創建專案</p>\n<p></p>\n<p>我這邊是選擇 STM32F030CC 的 MCU 型號，這邊的話就選擇自己身邊有的開發版 MCU 型號做選擇吧不會影響我這點亮LED的範例，左半邊是根據MCU/MPU的規格去做篩選，選擇好後後會反黑再點右上角的 Start Project 開始專案會出現下列配置函示的介面。</p>\n<p></p>\n<p>首先要來配置能燒入程式的 IO 口 SWCLK 和 SWDIO<br/>\n1.點選 SYS<br/>\n2.點選 Debug Serial Wire 配置燒錄口<br/>\n3.會顯示兩個角位框框變成綠色<br/>\n至於下面兩個選項的作用是用來喚醒 MCU 或者讓 MCU 休眠的 IO 口，目前用不到先不選取</p>\n<p>再來是選取左邊的 GPIO 選項，對著右邊的 MCU 選擇你要配置 GPIO 的口如下<br/>\n</p>\n<p>1.點選GPIO<br/>\n2.點選你要的IO口就會跳出1個選單，再選你要的功能我這邊是選 PA1 GPIO_Output</p>\n<p>選完後中間的介面就會跳出進階的設定，如下圖<br/>\n</p>\n<p>可以看到左上方的界面出現了1個 PA1 還有一排的規格，下方則是 PA1 的初始化<br/>\n1.GPIO output level     (GPIO 口默認狀態，可配置為 High 和 Low)<br/>\n2.GPIO mode             (GPIO 口的模式，可配置成 Output Push Pull 和 Output Open Drain)<br/>\n(至於這模式的差別我在之前的文章有提到了：)<br/>\n3.GPIO Pull-up/Pull-down(GPIO 口內部上拉VDD或下拉GND還有不上拉和不下拉)<br/>\n4.Maximum output speed  (GPIO 口的輸出速度可以配置為高速、中速、低速，實際的數值可以查看參考手冊的GPIO章節)<br/>\n5.User Label            (這是定義這個IO口名稱的宏定義 #define，例如我打 LED_TEST 的話則會再 MCU 介面出現註解的感覺，程式碼部分則會在最後產生專案裡的 main.h 裡面如下圖)</p>\n<p></p>\n<p>要得GPIO口配置好了再來就是開啟RCC，MCU需要震盪才會工作，點開左邊的RCC選項後會看到下圖介面</p>\n<p><br/>\n1.點選RCC<br/>\n2.可以選擇你想開起的外部時鐘，由於我我兩個外部時鐘都有焊上去但我這邊只選擇使用外部高速時因震盪<br/>\n3.顯示這兩個角位配置成外部高速石英震盪</p>\n<h2>Clock Configuration</h2>\n<p>要用的IO口都開好了，再來是 Clock Configuration 也就是時鐘樹(RCC)詳細設置，點選上方的Clock Configuration 如下</p>\n<p></p>\n<p>1.點選上方的 Clock Configuration 進入配置時鐘樹<br/>\n2.設定外部石英震盪速度這邊可以看到4-32代表說你只能掛這範圍的石英，這邊就根據各位的開發版的來決定。<br/>\n3.經過PLL數據多工器來選擇要使用HSE還是HSI，這邊我選擇HSE<br/>\n4.這邊我選擇6倍頻是因為我想讓這顆MCU達到最高工作頻率48MHz，每顆mcu能工作的頻率不一樣，還有很重要的一點再高階一點的MCU些IO口的最高工作頻率也會不同喔，要看 Datasheet 裡的說明，假如我這邊調7框框會變紅色提示你錯誤配置<br/>\n5.系統的 Clock 來源這邊我選擇PLLCLK<br/>\n6.看到最後 PCLK1 的 APB1 的總線速度為48MHz，看這裡的原因是APB1為GPIO口上的控制線</p>\n<h2>Project Manager</h2>\n<p>再來是要創造專案的設定，點選上方的 Project Manager</p>\n<p></p>\n<h3>1.Project Settings (專案設置)</h3>\n<p><strong>Project Name</strong>        ：專案名稱，這邊我設置h01_GPIO (不要設置中文)<br/>\n<strong>Project Location</strong>    ：專案要放的路徑，這邊我選擇D槽創建1個STM32CubeMXLib的空資料夾<br/>\n<strong>Application Struture</strong>：應用程式的結構，這裏包含兩個選項Basic：是基礎的結構，一般不包含中間件（RTOS、文件系統、USB設備等），Advanced：相反就是包含中間件，一般針對相對複雜一點的工程。這邊我們就設定基本(Basic)模式就好。<br/>\n<strong>Toolchain Folder Location</strong>：這會在 Project Location 專案路徑上建立資料夾，名稱為 Project Name<br/>\n<strong>Toolchain/IDE</strong>：這邊是選擇你要用的編譯軟體，這邊我選擇 MDK-ARM 是用Keil5，我比較習慣 Keil5 這邊就看個人喜好瞜，後面的版本部分就選最高的就好</p>\n<h3>2.Linker Settings (堆棧設置)</h3>\n<p>這部分預設就好，這牽扯到程式碼的運行速度入門這行先不要去玩這個，這地方是動到.s檔組合語言的部分，等基本都完過再來理解這設置的用意吧</p>\n<h3>3.Thread-safe Settings</h3>\n<p>去看官方使用手冊說明看完還是不確定，只看懂使用Keil5、STM32CubeIDE的話勾選 Enble multi-threaded support</p>\n<h3>4.Mcu and Firmware Package</h3>\n<p>這邊就不用動了就直接預設的就好，這邊是在選擇要用HAL庫版本</p>\n<h2>Code Generator</h2>\n<p>再來點選左半邊的 Code Generator (代碼生成器)，這地方主要是在設定產生代碼的樣子</p>\n<p></p>\n<h3>1.STM32Cube MCU packages and embedded software packs</h3>\n<ul>\n<li>\n<strong>Copy all used libraries into the project folder</strong> - 將所有使用過的庫複製到項目文件夾中<br/>\n這地方可以勾起來，這樣工程才會包含所有基本的功能庫，方便查看各個功能有甚麼樣的函示</li>\n<li>\n<strong>Copy only the necessary library files</strong> - 只複製必要的庫文件<br/>\n假如你沒有使用CAN、SPI、I2C等外設功能，就不會新增相關庫文件到你工程下。</li>\n<li>\n<strong>Add necessary library files as reference in the toolchain project configuration file</strong> - 在工具鏈項目配置文件中添加必要的庫文件作爲參考<br/>\n這個勾選的話就不會HAL庫的驅動文件只會有最基本配置初始函示，例如我要點亮1個LED的話勾選了這個選項我就要自己寫操作暫存器來賦予值，有點像是暫存器開發，我覺得剛開始練習就勾1個就好，這樣能快速練習一些基本功能。</li>\n</ul>\n<h3>2.Generated files (生成文件)</h3>\n<p>這裡依個人需求選擇，我個人習慣每個功能函示都有對應的地方居住所以勾選了第1個選項，這有點像是我之前標準庫開發的方式，有興趣的可以再去看看我的鐵人文章，再來是，第2個我不想每次重新生成程式都備份舊的，第3個則是每次產生新文件時不取代掉我原本的打的程式</p>\n<ul>\n<li>\n<strong>Generate peripheral initialization as a pair of'.c/.h' files per peripheral</strong> - 每個外設生成獨立的'.c/.h'文件<br/>\n不勾：所有初始化代碼都生成在main.c<br/>\n勾選：初始化代碼生成在對應的外設文件。 如UART初始化代碼生成在uart.c中。</li>\n<li>\n<strong>Backup previously generated files when re-generating</strong> - 在重新生成時備份以前生成的文件<br/>\n重新生成代碼時，會在相關目錄中生成一個Backup文件夾，將之前源文件拷貝到其中。</li>\n<li>\n<strong>Keep User Code when re-generating</strong> - 在重新生成時保留用戶代碼<br/>\n在main.c中添加了一段代碼，重新生成時，會在main.c中保留你之前自己添加的這段代碼。<br/>\n<code>!! 注意：前提是這段代碼寫在規定的位置。也就是BEGIN和END之間，否則會被刪除。 !!</code>\n</li>\n<li>\n<strong>Delete previously generated files when not re-generated</strong> - 刪除以前生成，但現在沒有生成的文件<br/>\n假設之前生成了i2c.c，現在重新配置沒有i2c.c，則會刪除之前的i2c.c文件。</li>\n</ul>\n<h3>3.HAL Settings (HAL庫設置)</h3>\n<ul>\n<li>Set all free pins as analog (to optimize the power consumption)<br/>\n將所有空閒引腳設置爲類比輸入，做低功耗產品時這個選項有必要勾選。</li>\n<li>nable Full Assert<br/>\n使能所有斷言，作為參數檢查。</li>\n<li>Template Settings<br/>\n模板設置這邊預設就好，有興趣的可以參考最新用戶手冊6節 Custom code generation 內容。</li>\n</ul>\n<h2>Advanced Settings</h2>\n<p></p>\n<ul>\n<li>\n<strong>Driver Selector</strong> - 主要是選擇要用什麼庫做驅動，HAL庫、LL庫這兩個差別我在之前的有做解釋這邊就不在描述了。</li>\n<li>\n<strong>Generated Function Calls</strong> - 調用函數<br/>\n主要後面兩個選項：Not Generate Function Call和Visibility (Static)<br/>\n1.Do Not Generate Function Call不生成函數調用<br/>\n也就是你代碼不調用對應初始化函數。<br/>\n比如：你GPIO項勾選Do Not Generate Function Call，你main.c函數中就不會調用MX_GPIO_Init這個函數。<br/>\n這邊我是選擇要調用。</li>\n</ul>\n<p>設定好後就可以按上面的 GENERATE CODE了，按完過一下子就會出現下列這視窗<br/>\n<br/>\n選擇左邊第1個，開啟專案資料夾</p>\n<p><br/>\n點開MDK-ARM裡面就會看到下圖<br/>\n<br/>\n點開h01_GPIO專案就可以開始寫程式啦，在main.c這裡打上這4行就可以插上LED於PA1就會閃爍了啦~<br/>\n今天花了半天在打這篇文，會想這樣整理也有個好處，我之後想傳承給實驗室的學弟妹也比較好傳承，包跨我鐵人賽的文章也是。</p>\n<p>假如對上述操作有什麼疑問都歡迎提出來。</p>\n<br/>\n</div>",
        "content_text": "想在這紀錄一下我使用STM32CubeMX的經驗適合完全沒用過的人，已經有開發經驗的就不用看了，我第一次使用STM32CubeMX來開發我，在一開始我都是使用STM32標準庫的方式做開發，有興趣的可以看到我第13屆鐵人賽：\n很幸運得了 [Arm Platforms] 類組的優選，我在文章有提到標準庫開發和STM32CubeMX的HAL、LL庫開發的差異，這邊就不重複說這些的差別了，總之學標準庫會讓你對嵌入式單晶片這塊領域更有Sense，基本的學完後再來去深入探討進階功能，如何讓程式執行快更有效率。\n我從標準庫銜接到HAL庫使用上沒遇到甚麼問題，我必須說學過標準庫過後再去碰STM32CubeMX所產生出來的配置專案完全不覺得陌生，在我眼裡就只是標準庫刪掉一堆功能函示作精簡的版本。\nSTM32CubeMX的安裝我就不描述了，直接從建立1個新的專案GPIO點亮LED開始，首先點開來 STM32CubeMX 軟體會出現以下畫面\n\n按了上圖 ACCESS TO MCU SELECTOR 的部分來創建個專案，開完後會出現下圖的選擇MCU/MPU型號的列表。\n假設你身邊有ST官方出的開發板可以選擇第二項，以開發板型號做創建專案\n\n我這邊是選擇 STM32F030CC 的 MCU 型號，這邊的話就選擇自己身邊有的開發版 MCU 型號做選擇吧不會影響我這點亮LED的範例，左半邊是根據MCU/MPU的規格去做篩選，選擇好後後會反黑再點右上角的 Start Project 開始專案會出現下列配置函示的介面。\n\n首先要來配置能燒入程式的 IO 口 SWCLK 和 SWDIO\n1.點選 SYS\n2.點選 Debug Serial Wire 配置燒錄口\n3.會顯示兩個角位框框變成綠色\n至於下面兩個選項的作用是用來喚醒 MCU 或者讓 MCU 休眠的 IO 口，目前用不到先不選取\n再來是選取左邊的 GPIO 選項，對著右邊的 MCU 選擇你要配置 GPIO 的口如下\n\n1.點選GPIO\n2.點選你要的IO口就會跳出1個選單，再選你要的功能我這邊是選 PA1 GPIO_Output\n選完後中間的介面就會跳出進階的設定，如下圖\n\n可以看到左上方的界面出現了1個 PA1 還有一排的規格，下方則是 PA1 的初始化\n1.GPIO output level     (GPIO 口默認狀態，可配置為 High 和 Low)\n2.GPIO mode             (GPIO 口的模式，可配置成 Output Push Pull 和 Output Open Drain)\n(至於這模式的差別我在之前的文章有提到了：)\n3.GPIO Pull-up/Pull-down(GPIO 口內部上拉VDD或下拉GND還有不上拉和不下拉)\n4.Maximum output speed  (GPIO 口的輸出速度可以配置為高速、中速、低速，實際的數值可以查看參考手冊的GPIO章節)\n5.User Label            (這是定義這個IO口名稱的宏定義 #define，例如我打 LED_TEST 的話則會再 MCU 介面出現註解的感覺，程式碼部分則會在最後產生專案裡的 main.h 裡面如下圖)\n\n要得GPIO口配置好了再來就是開啟RCC，MCU需要震盪才會工作，點開左邊的RCC選項後會看到下圖介面\n\n1.點選RCC\n2.可以選擇你想開起的外部時鐘，由於我我兩個外部時鐘都有焊上去但我這邊只選擇使用外部高速時因震盪\n3.顯示這兩個角位配置成外部高速石英震盪\nClock Configuration\n要用的IO口都開好了，再來是 Clock Configuration 也就是時鐘樹(RCC)詳細設置，點選上方的Clock Configuration 如下\n\n1.點選上方的 Clock Configuration 進入配置時鐘樹\n2.設定外部石英震盪速度這邊可以看到4-32代表說你只能掛這範圍的石英，這邊就根據各位的開發版的來決定。\n3.經過PLL數據多工器來選擇要使用HSE還是HSI，這邊我選擇HSE\n4.這邊我選擇6倍頻是因為我想讓這顆MCU達到最高工作頻率48MHz，每顆mcu能工作的頻率不一樣，還有很重要的一點再高階一點的MCU些IO口的最高工作頻率也會不同喔，要看 Datasheet 裡的說明，假如我這邊調7框框會變紅色提示你錯誤配置\n5.系統的 Clock 來源這邊我選擇PLLCLK\n6.看到最後 PCLK1 的 APB1 的總線速度為48MHz，看這裡的原因是APB1為GPIO口上的控制線\nProject Manager\n再來是要創造專案的設定，點選上方的 Project Manager\n\n1.Project Settings (專案設置)\nProject Name        ：專案名稱，這邊我設置h01_GPIO (不要設置中文)\nProject Location    ：專案要放的路徑，這邊我選擇D槽創建1個STM32CubeMXLib的空資料夾\nApplication Struture：應用程式的結構，這裏包含兩個選項Basic：是基礎的結構，一般不包含中間件（RTOS、文件系統、USB設備等），Advanced：相反就是包含中間件，一般針對相對複雜一點的工程。這邊我們就設定基本(Basic)模式就好。\nToolchain Folder Location：這會在 Project Location 專案路徑上建立資料夾，名稱為 Project Name\nToolchain/IDE：這邊是選擇你要用的編譯軟體，這邊我選擇 MDK-ARM 是用Keil5，我比較習慣 Keil5 這邊就看個人喜好瞜，後面的版本部分就選最高的就好\n2.Linker Settings (堆棧設置)\n這部分預設就好，這牽扯到程式碼的運行速度入門這行先不要去玩這個，這地方是動到.s檔組合語言的部分，等基本都完過再來理解這設置的用意吧\n3.Thread-safe Settings\n去看官方使用手冊說明看完還是不確定，只看懂使用Keil5、STM32CubeIDE的話勾選 Enble multi-threaded support\n4.Mcu and Firmware Package\n這邊就不用動了就直接預設的就好，這邊是在選擇要用HAL庫版本\nCode Generator\n再來點選左半邊的 Code Generator (代碼生成器)，這地方主要是在設定產生代碼的樣子\n\n1.STM32Cube MCU packages and embedded software packs\n\n\nCopy all used libraries into the project folder - 將所有使用過的庫複製到項目文件夾中\n這地方可以勾起來，這樣工程才會包含所有基本的功能庫，方便查看各個功能有甚麼樣的函示\n\nCopy only the necessary library files - 只複製必要的庫文件\n假如你沒有使用CAN、SPI、I2C等外設功能，就不會新增相關庫文件到你工程下。\n\nAdd necessary library files as reference in the toolchain project configuration file - 在工具鏈項目配置文件中添加必要的庫文件作爲參考\n這個勾選的話就不會HAL庫的驅動文件只會有最基本配置初始函示，例如我要點亮1個LED的話勾選了這個選項我就要自己寫操作暫存器來賦予值，有點像是暫存器開發，我覺得剛開始練習就勾1個就好，這樣能快速練習一些基本功能。\n\n2.Generated files (生成文件)\n這裡依個人需求選擇，我個人習慣每個功能函示都有對應的地方居住所以勾選了第1個選項，這有點像是我之前標準庫開發的方式，有興趣的可以再去看看我的鐵人文章，再來是，第2個我不想每次重新生成程式都備份舊的，第3個則是每次產生新文件時不取代掉我原本的打的程式\n\n\nGenerate peripheral initialization as a pair of'.c/.h' files per peripheral - 每個外設生成獨立的'.c/.h'文件\n不勾：所有初始化代碼都生成在main.c\n勾選：初始化代碼生成在對應的外設文件。 如UART初始化代碼生成在uart.c中。\n\nBackup previously generated files when re-generating - 在重新生成時備份以前生成的文件\n重新生成代碼時，會在相關目錄中生成一個Backup文件夾，將之前源文件拷貝到其中。\n\nKeep User Code when re-generating - 在重新生成時保留用戶代碼\n在main.c中添加了一段代碼，重新生成時，會在main.c中保留你之前自己添加的這段代碼。\n!! 注意：前提是這段代碼寫在規定的位置。也就是BEGIN和END之間，否則會被刪除。 !!\n\n\nDelete previously generated files when not re-generated - 刪除以前生成，但現在沒有生成的文件\n假設之前生成了i2c.c，現在重新配置沒有i2c.c，則會刪除之前的i2c.c文件。\n\n3.HAL Settings (HAL庫設置)\n\nSet all free pins as analog (to optimize the power consumption)\n將所有空閒引腳設置爲類比輸入，做低功耗產品時這個選項有必要勾選。\nnable Full Assert\n使能所有斷言，作為參數檢查。\nTemplate Settings\n模板設置這邊預設就好，有興趣的可以參考最新用戶手冊6節 Custom code generation 內容。\n\nAdvanced Settings\n\n\n\nDriver Selector - 主要是選擇要用什麼庫做驅動，HAL庫、LL庫這兩個差別我在之前的有做解釋這邊就不在描述了。\n\nGenerated Function Calls - 調用函數\n主要後面兩個選項：Not Generate Function Call和Visibility (Static)\n1.Do Not Generate Function Call不生成函數調用\n也就是你代碼不調用對應初始化函數。\n比如：你GPIO項勾選Do Not Generate Function Call，你main.c函數中就不會調用MX_GPIO_Init這個函數。\n這邊我是選擇要調用。\n\n設定好後就可以按上面的 GENERATE CODE了，按完過一下子就會出現下列這視窗\n\n選擇左邊第1個，開啟專案資料夾\n\n點開MDK-ARM裡面就會看到下圖\n\n點開h01_GPIO專案就可以開始寫程式啦，在main.c這裡打上這4行就可以插上LED於PA1就會閃爍了啦~\n今天花了半天在打這篇文，會想這樣整理也有個好處，我之後想傳承給實驗室的學弟妹也比較好傳承，包跨我鐵人賽的文章也是。\n假如對上述操作有什麼疑問都歡迎提出來。",
        "content_code_info": [],
        "programming_languages": [
            "c"
        ],
        "word_seg_content_text": "想 在 這 紀錄 一下 我 使用 STM32CubeMX 的 經驗 適合 完全 沒用過 的 人 ， 已經 有 開發 經驗 的 就 不用 看 了 ， 我 第一次 使用 STM32CubeMX 來 開發 我 ， 在 一 開始 我 都 是 使用 STM32 標準 庫 的 方式 做 開發 ， 有 興趣 的 可以 看到 我 第 13 屆 鐵人 賽 ：\n很 幸運 得 了\n[ Arm\nPlatforms ]\n類組 的 優選 ， 我 在 文章 有 提到 標準 庫 開發 和 STM32CubeMX 的 HAL 、 LL 庫 開發 的 差異 ， 這邊 就 不 重複 說 這些 的 差別 了 ， 總之 學 標準 庫會 讓 你 對 嵌入式 單晶 片 這塊 領域 更 有 Sense ， 基本 的 學完 後 再來 去 深入探討 進階 功能 ， 如何 讓 程式 執行 快 更 有效率 。\n我 從 標準 庫 銜接 到 HAL 庫 使用 上 沒 遇到 甚麼 問題 ， 我 必須 說學過 標準 庫 過後 再 去 碰 STM32CubeMX 所 產生 出來 的 配置 專案 完全 不 覺得 陌生 ， 在 我 眼裡 就 只是 標準 庫 刪掉 一堆 功能 函示 作 精簡 的 版本 。\nSTM32CubeMX 的 安裝 我 就 不 描述 了 ， 直接 從 建立 1 個 新 的 專案 GPIO 點亮 LED 開始 ， 首先 點 開來\nSTM32CubeMX\n軟 體會 出現 以下 畫面\n按 了 上圖\nACCESS\nTO\nMCU\nSELECTOR\n的 部分 來 創建 個 專案 ， 開 完後會 出現 下圖 的 選擇 MCU / MPU 型號 的 列表 。\n假設 你 身邊 有 ST 官方 出 的 開發板 可以 選擇 第二項 ， 以 開發板 型號 做 創建 專案\n我 這邊 是 選擇\nSTM32F030CC\n的\nMCU\n型號 ， 這邊 的話 就 選擇 自己 身邊 有 的 開發 版\nMCU\n型號 做 選擇 吧 不會 影響 我 這點 亮 LED 的 範例 ， 左 半邊 是 根據 MCU / MPU 的 規格 去 做 篩選 ， 選擇 好後後會 反黑 再點 右上角 的\nStart\nProject\n開始 專案 會 出現 下列 配置 函示 的 介面 。\n首先 要來 配置 能 燒入 程式 的\nIO\n口\nSWCLK\n和\nSWDIO\n1 . 點選\nSYS\n2 . 點選\nDebug\nSerial\nWire\n配置 燒錄 口\n3 . 會 顯示 兩個 角位 框框 變成 綠色\n至於 下面 兩個 選項 的 作用 是 用來 喚醒\nMCU\n或者 讓\nMCU\n休眠 的\nIO\n口 ， 目前 用 不到 先 不 選取\n再來 是 選取 左邊 的\nGPIO\n選項 ， 對著 右邊 的\nMCU\n選擇 你 要 配置\nGPIO\n的 口 如下\n1 . 點選 GPIO\n2 . 點選 你 要 的 IO 口 就 會 跳出 1 個 選單 ， 再選 你 要 的 功能 我 這邊 是 選\nPA1\nGPIO _ Output\n選完 後 中間 的 介面 就 會 跳出 進階 的 設定 ， 如 下圖\n可以 看到 左上方 的 界面 出現 了 1 個\nPA1\n還有 一排 的 規格 ， 下方 則是\nPA1\n的 初始化\n1 . GPIO\noutput\nlevel\n( GPIO\n口 默認 狀態 ， 可 配置 為\nHigh\n和\nLow )\n2 . GPIO\nmode\n( GPIO\n口 的 模式 ， 可 配置 成\nOutput\nPush\nPull\n和\nOutput\nOpen\nDrain )\n( 至於 這 模式 的 差別 我 在 之前 的 文章 有 提到 了 ： )\n3 . GPIO\nPull - up / Pull - down ( GPIO\n口 內部 上拉 VDD 或 下拉 GND 還有 不上 拉 和 不下 拉 )\n4 . Maximum\noutput\nspeed\n( GPIO\n口 的 輸出 速度 可以 配置 為 高速 、 中速 、 低速 ， 實際 的 數值 可以 查看 參考手冊 的 GPIO 章節 )\n5 . User\nLabel\n( 這是 定義 這個 IO 口 名稱 的 宏 定義\n# define ， 例如 我 打\nLED _ TEST\n的話 則會 再\nMCU\n介面 出現 註解 的 感覺 ， 程式碼 部 分則 會 在 最後 產生 專案 裡的\nmain . h\n裡面 如 下圖 )\n要 得 GPIO 口 配置 好 了 再來 就是 開啟 RCC ， MCU 需要 震盪 才 會 工作 ， 點開 左邊 的 RCC 選項 後 會 看到 下圖 介面\n1 . 點選 RCC\n2 . 可以 選擇 你 想 開起 的 外部 時鐘 ， 由於 我 我 兩個 外部 時鐘 都 有 焊上去 但 我 這邊 只 選擇 使用 外部 高速 時因 震盪\n3 . 顯示 這 兩個 角位 配置 成 外部 高速 石英 震盪\nClock\nConfiguration\n要用 的 IO 口 都 開好 了 ， 再來 是\nClock\nConfiguration\n也 就是 時鐘 樹 ( RCC ) 詳細 設置 ， 點選 上方 的 Clock\nConfiguration\n如下\n1 . 點選 上方 的\nClock\nConfiguration\n進入 配置 時鐘 樹\n2 . 設定 外部 石英 震盪 速度 這邊 可以 看到 4 - 32 代表 說 你 只能 掛 這 範圍 的 石英 ， 這邊 就 根據 各位 的 開發 版 的 來 決定 。\n3 . 經過 PLL 數據 多工器 來 選擇 要 使用 HSE 還是 HSI ， 這邊 我 選擇 HSE\n4 . 這邊 我 選擇 6 倍頻 是 因為 我 想 讓 這顆 MCU 達到 最高 工作頻率 48MHz ， 每顆 mcu 能 工作 的 頻率 不 一樣 ， 還有 很 重要 的 一點 再 高階 一點 的 MCU 些 IO 口 的 最高 工作頻率 也 會 不同 喔 ， 要 看\nDatasheet\n裡的 說明 ， 假如 我 這邊 調 7 框框 會變 紅色 提示 你 錯誤 配置\n5 . 系統 的\nClock\n來源 這邊 我 選擇 PLLCLK\n6 . 看到 最後\nPCLK1\n的\nAPB1\n的 總線 速度 為 48MHz ， 看 這裡 的 原因 是 APB1 為 GPIO 口上 的 控制線\nProject\nManager\n再來 是 要 創造 專案 的 設定 ， 點選 上方 的\nProject\nManager\n1 . Project\nSettings\n( 專案 設置 )\nProject\nName\n： 專案 名稱 ， 這邊 我 設置 h01 _ GPIO\n( 不要 設置 中文 )\nProject\nLocation\n： 專案 要放 的 路徑 ， 這邊 我 選擇 D 槽 創建 1 個 STM32CubeMXLib 的 空 資料夾\nApplication\nStruture ： 應用程式 的 結構 ， 這裏 包含 兩個 選項 Basic ： 是 基礎 的 結構 ， 一般 不 包含 中間件 （ RTOS 、 文件系統 、 USB 設備 等 ） ， Advanced ： 相反 就是 包含 中間件 ， 一般 針對 相對 複雜 一點 的 工程 。 這邊 我們 就 設定 基本 ( Basic ) 模式 就 好 。\nToolchain\nFolder\nLocation ： 這會 在\nProject\nLocation\n專案 路徑 上 建立 資料夾 ， 名稱 為\nProject\nName\nToolchain / IDE ： 這邊 是 選擇 你 要 用 的 編譯 軟體 ， 這邊 我 選擇\nMDK - ARM\n是 用 Keil5 ， 我 比較 習慣\nKeil5\n這邊 就 看 個人 喜好 瞜 ， 後面 的 版本 部分 就 選 最高 的 就 好\n2 . Linker\nSettings\n( 堆棧 設置 )\n這部分 預設 就 好 ， 這 牽扯 到 程式碼 的 運行 速度 入門 這行 先 不要 去 玩 這個 ， 這 地方 是 動到 . s 檔 組合 語言 的 部分 ， 等 基本 都 完過 再來 理解 這 設置 的 用意 吧\n3 . Thread - safe\nSettings\n去 看 官方 使用手冊 說明 看 完 還是 不 確定 ， 只 看 懂 使用 Keil5 、 STM32CubeIDE 的話 勾選\nEnble\nmulti - threaded\nsupport\n4 . Mcu\nand\nFirmware\nPackage\n這邊 就 不用 動 了 就 直接 預設 的 就 好 ， 這邊 是 在 選擇 要用 HAL 庫 版本\nCode\nGenerator\n再 來點 選 左 半邊 的\nCode\nGenerator\n( 代碼生成 器 ) ， 這 地方 主要 是 在 設定 產生 代碼 的 樣子\n1 . STM32Cube\nMCU\npackages\nand\nembedded\nsoftware\npacks\nCopy\nall\nused\nlibraries\ninto\nthe\nproject\nfolder\n-\n將 所有 使用 過的庫 複製到 項目 文件夾 中\n這 地方 可以 勾 起來 ， 這樣 工程 才 會 包含 所有 基本 的 功能 庫 ， 方便 查看 各個 功能 有 甚麼 樣 的 函示\nCopy\nonly\nthe\nnecessary\nlibrary\nfiles\n-\n只 複製 必要 的 庫 文件\n假如 你 沒有 使用 CAN 、 SPI 、 I2C 等 外設 功能 ， 就 不會 新增 相關 庫 文件 到 你 工程 下 。\nAdd\nnecessary\nlibrary\nfiles\nas\nreference\nin\nthe\ntoolchain\nproject\nconfiguration\nfile\n-\n在 工具 鏈 項目 配置文件 中 添加 必要 的 庫 文件 作爲 參考\n這個 勾選 的話 就 不會 HAL 庫 的 驅動 文件 只會 有 最 基本 配置 初始 函示 ， 例如 我要 點亮 1 個 LED 的話 勾選 了 這個 選項 我 就要 自己 寫 操作 暫存器 來 賦予 值 ， 有點 像是 暫存器 開發 ， 我 覺得 剛 開始 練習 就 勾 1 個 就 好 ， 這樣 能 快速 練習 一些 基本功能 。\n2 . Generated\nfiles\n( 生成 文件 )\n這裡 依 個人 需求 選擇 ， 我 個人 習慣 每個 功能 函示 都 有 對應 的 地方 居住 所以 勾選 了 第 1 個 選項 ， 這 有點 像是 我 之前 標準 庫 開發 的 方式 ， 有 興趣 的 可以 再 去 看看 我 的 鐵人 文章 ， 再來 是 ， 第 2 個 我 不想 每次 重新 生成 程式 都 備份 舊 的 ， 第 3 個則 是 每次 產生 新 文件 時 不 取代 掉 我 原本 的 打 的 程式\nGenerate\nperipheral\ninitialization\nas\na\npair\nof ' . c / . h '\nfiles\nper\nperipheral\n-\n每個 外設 生成 獨立 的 ' . c / . h ' 文件\n不 勾 ： 所有 初始化 代碼 都 生成 在 main . c\n勾選 ： 初始化 代碼生成 在 對應 的 外設 文件 。\n如 UART 初始化 代碼生成 在 uart . c 中 。\nBackup\npreviously\ngenerated\nfiles\nwhen\nre - generating\n-\n在 重新 生成 時 備份 以前 生成 的 文件\n重新 生成 代碼 時 ， 會 在 相關 目錄 中 生成 一個 Backup 文件夾 ， 將 之前 源文件 拷貝到 其中 。\nKeep\nUser\nCode\nwhen\nre - generating\n-\n在 重新 生成 時 保留 用戶 代碼\n在 main . c 中 添加 了 一段 代碼 ， 重新 生成 時 ， 會 在 main . c 中 保留 你 之前 自己 添加 的 這段 代碼 。\n! !\n注意 ： 前提 是 這段 代碼 寫 在 規定 的 位置 。 也 就是 BEGIN 和 END 之間 ， 否則 會 被 刪除 。\n! !\nDelete\npreviously\ngenerated\nfiles\nwhen\nnot\nre - generated\n-\n刪除 以前 生成 ， 但 現在 沒有 生成 的 文件\n假設 之前 生成 了 i2c . c ， 現在 重新配置 沒有 i2c . c ， 則會 刪除 之前 的 i2c . c 文件 。\n3 . HAL\nSettings\n( HAL 庫 設置 )\nSet\nall\nfree\npins\nas\nanalog\n( to\noptimize\nthe\npower\nconsumption )\n將 所有 空閒 引腳 設置 爲 類比 輸入 ， 做 低功耗 產品 時 這個 選項 有 必要 勾選 。\nnable\nFull\nAssert\n使能 所有 斷言 ， 作為 參數 檢查 。\nTemplate\nSettings\n模板 設置 這邊 預設 就 好 ， 有 興趣 的 可以 參考 最新 用戶手冊 6 節\nCustom\ncode\ngeneration\n內容 。\nAdvanced\nSettings\nDriver\nSelector\n-\n主要 是 選擇 要 用 什麼 庫 做 驅動 ， HAL 庫 、 LL 庫 這 兩個 差別 我 在 之前 的 有 做 解釋 這邊 就 不在 描述 了 。\nGenerated\nFunction\nCalls\n-\n調用函數\n主要 後面 兩個 選項 ： Not\nGenerate\nFunction\nCall 和 Visibility\n( Static )\n1 . Do\nNot\nGenerate\nFunction\nCall 不 生成 函數調用\n也 就是 你 代碼 不 調用 對應 初始化 函數 。\n比如 ： 你 GPIO 項勾選 Do\nNot\nGenerate\nFunction\nCall ， 你 main . c 函數 中 就 不會 調用 MX _ GPIO _ Init 這個 函數 。\n這邊 我 是 選擇 要 調用 。\n設定 好 後 就 可以 按 上面 的\nGENERATE\nCODE 了 ， 按 完過 一下子 就 會 出現 下列 這 視窗\n選擇 左邊 第 1 個 ， 開啟 專案 資料夾\n點開 MDK - ARM 裡面 就 會 看到 下圖\n點開 h01 _ GPIO 專案 就 可以 開始 寫 程式 啦 ， 在 main . c 這裡 打 上 這 4 行 就 可以 插上 LED 於 PA1 就 會 閃爍 了 啦 ~\n今天 花 了 半天 在 打 這篇文 ， 會想 這樣 整理 也 有 個 好處 ， 我 之後 想 傳承 給 實驗室 的 學弟 妹 也 比較 好 傳承 ， 包跨 我 鐵人 賽 的 文章 也 是 。\n假如 對 上述 操作 有 什麼 疑問 都 歡迎 提 出來 。",
        "word_seg_processed_content_text": "想 紀錄 stm32cubemx 經驗 適合 沒用過 開發 經驗 不用 第一次 stm32cubemx 開發 stm32 標準 庫 方式 做 開發 興趣 13 屆 鐵人 賽\n幸運\narm\nplatforms\n類組 優選 文章 提到 標準 庫 開發 stm32cubemx hal ll 庫 開發 差異 重複 說 差別 學 標準 庫會 嵌入式 單晶 片 這塊 領域 更 sense 學完 再來 深入探討 進階 功能 程式 執行 快 更 有效率\n標準 庫 銜接 hal 庫 沒 說學過 標準 庫 過後 碰 stm32cubemx 配置 專案 陌生 眼裡 標準 庫 刪掉 一堆 功能 函示 作 精簡 版本\nstm32cubemx 安裝 描述 建立 1 新 專案 gpio 點亮 led 點 開來\nstm32cubemx\n軟 體會 畫面\n上圖\naccess\n\nmcu\nselector\n創建 專案 開 完後會 下圖 選擇 mcu mpu 型號 列表\n假設 身邊 st 官方 出 開發板 選擇 第二項 開發板 型號 做 創建 專案\n選擇\nstm32f030cc\n\nmcu\n型號 選擇 身邊 開發 版\nmcu\n型號 做 選擇 影響 亮 led 範例 左 半邊 mcu mpu 規格 做 篩選 選擇 好後後會 反黑 再點 右上角\nstart\nproject\n專案 會 配置 函示 介面\n要來 配置 燒入 程式\nio\n口\nswclk\n\nswdio\n1 點選\nsys\n2 點選\ndebug\nserial\nwire\n配置 燒錄 口\n3 會 顯示 兩個 角位 框框 綠色\n兩個 選項 作用 用來 喚醒\nmcu\n\nmcu\n休眠\nio\n口 不到 先 選取\n再來 選取 左邊\ngpio\n選項 對著 右邊\nmcu\n選擇 配置\ngpio\n口\n1 點選 gpio\n2 點選 io 口 會 跳出 1 選單 再選 功能 選\npa1\ngpio output\n選完 介面 會 跳出 進階 設定 下圖\n左上方 界面 1\npa1\n一排 規格 下方 則是\npa1\n初始化\n1 gpio\noutput\nlevel\ngpio\n口 默認 狀態 配置\nhigh\n\nlow\n2 gpio\nmode\ngpio\n口 模式 配置 成\noutput\npush\npull\n\noutput\nopen\ndrain\n模式 差別 文章 提到\n3 gpio\npull up pull down gpio\n口 內部 上拉 vdd 下拉 gnd 不上 拉 不下 拉\n4 maximum\noutput\nspeed\ngpio\n口 輸出 速度 配置 高速 中速 低速 數值 查看 參考手冊 gpio 章節\n5 user\nlabel\n這是 定義 io 口 名稱 宏 定義\ndefine\nled test\n則會\nmcu\n介面 註解 感覺 程式碼 部 分則 會 專案 裡的\nmain h\n下圖\ngpio 口 配置 再來 開啟 rcc mcu 震盪 才 會 工作 點開 左邊 rcc 選項 會 下圖 介面\n1 點選 rcc\n2 選擇 想 開起 外部 時鐘 兩個 外部 時鐘 焊上去 選擇 外部 高速 時因 震盪\n3 顯示 兩個 角位 配置 成 外部 高速 石英 震盪\nclock\nconfiguration\n要用 io 口 開好 再來\nclock\nconfiguration\n時鐘 樹 rcc 詳細 設置 點選 上方 clock\nconfiguration\n\n1 點選 上方\nclock\nconfiguration\n配置 時鐘 樹\n2 設定 外部 石英 震盪 速度 4 32 代表 說 只能 掛 石英 開發 版\n3 pll 數據 多工器 選擇 hse hsi 選擇 hse\n4 選擇 6 倍頻 想 這顆 mcu 工作頻率 48mhz 每顆 mcu 工作 頻率 一點 高階 一點 mcu io 口 工作頻率 會 喔\ndatasheet\n裡的 調 7 框框 會變 紅色 提示 錯誤 配置\n5 系統\nclock\n來源 選擇 pllclk\n6\npclk1\n\napb1\n總線 速度 48mhz 原因 apb1 gpio 口上 控制線\nproject\nmanager\n再來 創造 專案 設定 點選 上方\nproject\nmanager\n1 project\nsettings\n專案 設置\nproject\nname\n專案 名稱 設置 h01 gpio\n設置 中文\nproject\nlocation\n專案 要放 路徑 選擇 d 槽 創建 1 stm32cubemxlib 空 資料夾\napplication\nstruture 應用程式 結構 這裏 包含 兩個 選項 basic 基礎 結構 包含 中間件 rtos 文件系統 usb 設備 advanced 包含 中間件 針對 一點 工程 設定 basic 模式\ntoolchain\nfolder\nlocation 這會\nproject\nlocation\n專案 路徑 建立 資料夾 名稱\nproject\nname\ntoolchain ide 選擇 編譯 軟體 選擇\nmdk arm\nkeil5 習慣\nkeil5\n喜好 瞜 版本 選\n2 linker\nsettings\n堆棧 設置\n這部分 預設 牽扯 程式碼 運行 速度 入門 這行 先 玩 地方 動到 s 檔 組合 語言 完過 再來 理解 設置 用意\n3 thread safe\nsettings\n官方 使用手冊 完 懂 keil5 stm32cubeide 勾選\nenble\nmulti threaded\nsupport\n4 mcu\n\nfirmware\npackage\n不用 動 預設 選擇 要用 hal 庫 版本\ncode\ngenerator\n來點 選 左 半邊\ncode\ngenerator\n代碼生成 器 地方 設定 代碼 樣子\n1 stm32cube\nmcu\npackages\n\nembedded\nsoftware\npacks\ncopy\n\nused\nlibraries\ninto\n\nproject\nfolder\n\n過的庫 複製到 項目 文件夾 中\n地方 勾 工程 才 會 包含 功能 庫 查看 功能 樣 函示\ncopy\nonly\n\nnecessary\nlibrary\nfiles\n\n複製 庫 文件\nspi i2c 外設 功能 新增 相關 庫 文件 工程\nadd\nnecessary\nlibrary\nfiles\n\nreference\n\n\ntoolchain\nproject\nconfiguration\nfile\n\n工具 鏈 項目 配置文件 中 添加 庫 文件 作爲 參考\n勾選 hal 庫 驅動 文件 只會 配置 初始 函示 我要 點亮 1 led 勾選 選項 就要 寫 操作 暫存器 賦予 值 像是 暫存器 開發 剛 勾 1 快速 基本功能\n2 generated\nfiles\n生成 文件\n需求 選擇 習慣 功能 函示 地方 居住 勾選 1 選項 像是 標準 庫 開發 方式 興趣 鐵人 文章 再來 2 不想 每次 生成 程式 備份 舊 3 個則 每次 新 文件 時 取代 掉 原本 程式\ngenerate\nperipheral\ninitialization\n\na\npair\n' c h '\nfiles\nper\nperipheral\n\n外設 生成 獨立 ' c h ' 文件\n勾 初始化 代碼 生成 main c\n勾選 初始化 代碼生成 外設 文件\nuart 初始化 代碼生成 uart c 中\nbackup\npreviously\ngenerated\nfiles\nwhen\nre generating\n\n生成 時 備份 生成 文件\n生成 代碼 時 會 相關 目錄 中 生成 backup 文件夾 源文件 拷貝到\nkeep\nuser\ncode\nwhen\nre generating\n\n生成 時 保留 用戶 代碼\nmain c 中 添加 一段 代碼 生成 時 會 main c 中 保留 添加 這段 代碼\n\n前提 這段 代碼 寫 位置 begin end 之間 會 刪除\n\ndelete\npreviously\ngenerated\nfiles\nwhen\n\nre generated\n\n刪除 生成 生成 文件\n假設 生成 i2c c 重新配置 i2c c 則會 刪除 i2c c 文件\n3 hal\nsettings\nhal 庫 設置\nset\n\nfree\npins\n\nanalog\n\noptimize\n\npower\nconsumption\n空閒 引腳 設置 爲 類比 輸入 做 低功耗 產品 時 選項 勾選\nnable\nfull\nassert\n使能 斷言 參數 檢查\ntemplate\nsettings\n模板 設置 預設 興趣 參考 最新 用戶手冊 6 節\ncustom\ncode\ngeneration\n內容\nadvanced\nsettings\ndriver\nselector\n\n選擇 庫 做 驅動 hal 庫 ll 庫 兩個 差別 做 解釋 不在 描述\ngenerated\nfunction\ncalls\n\n調用函數\n兩個 選項\ngenerate\nfunction\ncall visibility\nstatic\n1 do\n\ngenerate\nfunction\ncall 生成 函數調用\n代碼 調用 初始化 函數\ngpio 項勾選 do\n\ngenerate\nfunction\ncall main c 函數 中 調用 mx gpio init 函數\n選擇 調用\n設定\ngenerate\ncode 完過 一下子 會 視窗\n選擇 左邊 1 開啟 專案 資料夾\n點開 mdk arm 會 下圖\n點開 h01 gpio 專案 寫 程式 main c 4 行 插上 led pa1 會 閃爍\n花 半天 這篇文 會想 整理 好處 想 傳承 實驗室 學弟 妹 傳承 包跨 鐵人 賽 文章\n操作 疑問 提",
        "extracted_keywords": [
            "stm32cube",
            "stm32cubemxlib",
            "stm32",
            "stm32cubemx",
            "stm32cubeide"
        ],
        "extracted_keywords_phrases": [
            "stm32cubemx 經驗",
            "開發 stm32cubemx",
            "stm32cubemx 開發",
            "開發 stm32",
            "stm32cubemx 配置"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283983": {
        "href": "https://ithelp.ithome.com.tw/articles/10283983",
        "title": "撰寫http request 的複雜一點的測試(Day26)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>以下內容同步更新於<br>\n<a href=\"https://kevinyay945.com/smart-home-tutorial/026/\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/026/</a></p>\n<p>在接下來的內容，要將測試案例在變得更多</p>\n<h3>測試案例</h3>\n<p>在建立資料的部分，如果輸入正確資料，則回成功<br>\n如果資料不對，回傳400並跟使用者說明錯在哪裡</p>\n<p>如果未來需要針對每個屬性來進行說明，在這邊會需要一個使用到go-playground/validator的功能<br>\n<a href=\"https://raw.githubusercontent.com/go-playground/validator/master/_examples/translations/main.go\" target=\"_blank\" rel=\"noreferrer noopener\">https://raw.githubusercontent.com/go-playground/validator/master/_examples/translations/main.go</a><br>\n這段內容是可以將透過validator的錯誤透過這個validator來進行轉換，來讓使用者知道自己輸入的內容還缺了什麼</p>\n<p>在這邊是這次的code跟轉寫的影片<br>\n<a href=\"https://youtu.be/hmf_BzRe0Mw\" target=\"_blank\" rel=\"noreferrer noopener\">https://youtu.be/hmf_BzRe0Mw</a></p>\n<p><a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.5.3\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.5.3</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-14 20:27:14",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "26",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>以下內容同步更新於<br/>\n</p>\n<p>在接下來的內容，要將測試案例在變得更多</p>\n<h3>測試案例</h3>\n<p>在建立資料的部分，如果輸入正確資料，則回成功<br/>\n如果資料不對，回傳400並跟使用者說明錯在哪裡</p>\n<p>如果未來需要針對每個屬性來進行說明，在這邊會需要一個使用到go-playground/validator的功能<br/>\n<br/>\n這段內容是可以將透過validator的錯誤透過這個validator來進行轉換，來讓使用者知道自己輸入的內容還缺了什麼</p>\n<p>在這邊是這次的code跟轉寫的影片<br/>\n</p>\n<p></p>\n<br/>\n</div>",
        "content_text": "以下內容同步更新於\n\n在接下來的內容，要將測試案例在變得更多\n測試案例\n在建立資料的部分，如果輸入正確資料，則回成功\n如果資料不對，回傳400並跟使用者說明錯在哪裡\n如果未來需要針對每個屬性來進行說明，在這邊會需要一個使用到go-playground/validator的功能\n\n這段內容是可以將透過validator的錯誤透過這個validator來進行轉換，來讓使用者知道自己輸入的內容還缺了什麼\n在這邊是這次的code跟轉寫的影片",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "以下內容 同步 更新 於\n在 接下來 的 內容 ， 要將 測試 案例 在 變得 更 多\n測試 案例\n在 建立 資料 的 部分 ， 如果 輸入 正確 資料 ， 則回 成功\n如果 資料 不 對 ， 回傳 400 並跟 使用者 說明 錯 在 哪裡\n如果 未來 需要 針對 每個 屬性 來 進行 說明 ， 在 這邊 會 需要 一個 使用 到 go - playground / validator 的 功能\n這段 內容 是 可以 將 透過 validator 的 錯誤 透過 這個 validator 來 進行 轉換 ， 來 讓 使用者 知道 自己 輸入 的 內容 還缺 了 什麼\n在 這邊 是 這次 的 code 跟 轉寫 的 影片",
        "word_seg_processed_content_text": "以下內容 同步 更新\n接下來 內容 要將 測試 案例 變得 更\n測試 案例\n建立 資料 輸入 正確 資料 則回 成功\n資料 回傳 400 並跟 使用者 錯\n未來 針對 屬性 會 go playground validator 功能\n這段 內容 透過 validator 錯誤 透過 validator 轉換 使用者 輸入 內容 還缺\n這次 code 轉寫 影片",
        "extracted_keywords": [
            "validator",
            "同步",
            "測試",
            "更新",
            "資料"
        ],
        "extracted_keywords_phrases": [
            "透過 validator",
            "validator 轉換",
            "validator 功能",
            "validator",
            "playground validator"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283965": {
        "href": "https://ithelp.ithome.com.tw/articles/10283965",
        "title": "2022/02/12 更新",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>網格機器人改成一周開啟一次就好，到周五機器人會自動關閉</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2022-02-12 17:13:40",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "43",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>網格機器人改成一周開啟一次就好，到周五機器人會自動關閉</p>\n<br/>\n</div>",
        "content_text": "網格機器人改成一周開啟一次就好，到周五機器人會自動關閉",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "網格 機器人 改成 一周 開啟 一次 就 好 ， 到 周五 機器人 會 自動 關閉",
        "word_seg_processed_content_text": "網格 機器人 改成 一周 開啟 周五 機器人 會 自動 關閉",
        "extracted_keywords": [
            "一周",
            "機器人",
            "周五",
            "關閉",
            "自動"
        ],
        "extracted_keywords_phrases": [
            "周五 機器人",
            "一周 開啟",
            "開啟 周五",
            "機器人 改成",
            "改成 一周"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283927": {
        "href": "https://ithelp.ithome.com.tw/articles/10283927",
        "title": "[番外篇]Go Generate & Makefile(Day25)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>文章同步更新於<a href=\"https://kevinyay945.com/smart-home-tutorial/025\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/025</a></p>\n<p>因為接下來如果要進行測試，勢必得在建立每個interface的時候都要新增一次mock interface，而且未來如果這個interface要擴增的時候，又得再重新輸入一次指令，所以在gomock官網中有提到，如果想要批次建立mock file，可以透過</p>\n<pre><code class=\"language-=golang\">go generate\n</code></pre>\n<p>來進行批量產生<br>\ngo generate的原理是透過註解的方式，來執行後面的語法<br>\n所以可以搭配上mockgen一起使用<br>\n就可以如下</p>\n<pre><code class=\"language-=golang\">//go:generate mockgen -destination=mock/command.go -package=modelMock . ICommand  \ntype ICommand interface {  \n  Get() ([]schema.Command, error)  \n  Save(input *schema.Command) (schema.Command, error)  \n  UpdateOne(commandUuid string, command *schema.Command) (schema.Command, error)  \n  Delete(commandUuid string) error  \n}\n</code></pre>\n<p>然後到根目錄執行</p>\n<pre><code class=\"language-=bash\">go generate ./...\n</code></pre>\n<p>而這個./...的意思是<br>\n./ =&gt; 當前目錄<br>\n... =&gt;下面目錄的所有字串，以及所有路徑</p>\n<h4>參考</h4>\n<p><a href=\"https://stackoverflow.com/questions/28031603/what-do-three-dots-mean-in-go-command-line-invocations\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/28031603/what-do-three-dots-mean-in-go-command-line-invocations</a></p>\n<p>只要這樣做，就可以將所有資料夾中檔案有go generate的都跑一遍了<br>\n<img src=\"https://lh3.googleusercontent.com/WIdn5uKiZKmQ6sw6nXhUqzklPcA-zzzKBQItgP0yCqXXHpuPMz4KtPpBB9Jvo16TGEseVlNwzp0wtciBOmEG9Tanwbuxge2vexoQflhJYBCH6zEzvXAPSKO7rAhDyn6Nz8SJWn0lGuM=w2400\" alt=\"go generate\"></p>\n<p>那如果未來會忘記這段指令怎麼辦呢<br>\n這時候，就用到另一個小工具<br>\nMakefile<br>\n這個工具可以幫我們把很多系統上的使令統一放到一個檔案中，然後透過</p>\n<pre><code class=\"language-=bash\">make xxxxx\n</code></pre>\n<p>來執行<br>\n那這個檔案寫法如下</p>\n<pre><code>.PHONY: generate run  \n  \nrun:  \n  go run .  \n  \ngenerate:  \n  go generate ./...\n</code></pre>\n<p>然後在你存放Makefile的路徑下執行</p>\n<pre><code class=\"language-=bash\">make generate\n</code></pre>\n<p>他就會幫你執行</p>\n<pre><code class=\"language-=bash\">go generate ./...\n</code></pre>\n<p><img src=\"https://lh3.googleusercontent.com/OpOZp0ZQpbLPOSP2ukww4yDCTBqzkmf-hYlXhjC5wiepnvSow45QeUop69CzyB7u5u-giVvJYAUMWWH1PMWUaWIw97iPV1x8BcM-vdUSDjbkPG6VFWDENfT69Fm7KzgdVEeimvaSylc=w2400\" alt=\"Makefile\"></p>\n<p>至於.PHONY是什麼呢<br>\n因為這個Makefile除了執行指令，其實主要是拿來做compile用的，所以會建議，如果你在執行的指令，如果她就只是指令，而不是檔案的話，就把它放到.PHONY後面，因為放在.PHONY裡的內容，Makefile在執行的時候，才會去辨別他有沒有改變<br>\n舉個例子<br>\n如果剛好有個檔案叫做generate<br>\n然後你第一次執行</p>\n<pre><code>make generate\n</code></pre>\n<p>他會去正常實行 go generate ./...<br>\n但第二次執行時<br>\n因為generate沒有在.PHONY中，所以Makefile在判斷的時候，就會覺得你的generate沒有變動，就不會去執行go generate ./...了<br>\n詳細的內容可以到網路上查看更多資料，我這邊就僅用在執行指令</p>\n<p>附上這次的comment紀錄<br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.5.2\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.5.2</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-08 23:40:30",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "25",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>文章同步更新於</p>\n<p>因為接下來如果要進行測試，勢必得在建立每個interface的時候都要新增一次mock interface，而且未來如果這個interface要擴增的時候，又得再重新輸入一次指令，所以在gomock官網中有提到，如果想要批次建立mock file，可以透過</p>\n<pre></pre>\n<p>來進行批量產生<br/>\ngo generate的原理是透過註解的方式，來執行後面的語法<br/>\n所以可以搭配上mockgen一起使用<br/>\n就可以如下</p>\n<pre></pre>\n<p>然後到根目錄執行</p>\n<pre></pre>\n<p>而這個./...的意思是<br/>\n./ =&gt; 當前目錄<br/>\n... =&gt;下面目錄的所有字串，以及所有路徑</p>\n<h4>參考</h4>\n<p></p>\n<p>只要這樣做，就可以將所有資料夾中檔案有go generate的都跑一遍了<br/>\n</p>\n<p>那如果未來會忘記這段指令怎麼辦呢<br/>\n這時候，就用到另一個小工具<br/>\nMakefile<br/>\n這個工具可以幫我們把很多系統上的使令統一放到一個檔案中，然後透過</p>\n<pre></pre>\n<p>來執行<br/>\n那這個檔案寫法如下</p>\n<pre></pre>\n<p>然後在你存放Makefile的路徑下執行</p>\n<pre></pre>\n<p>他就會幫你執行</p>\n<pre></pre>\n<p></p>\n<p>至於.PHONY是什麼呢<br/>\n因為這個Makefile除了執行指令，其實主要是拿來做compile用的，所以會建議，如果你在執行的指令，如果她就只是指令，而不是檔案的話，就把它放到.PHONY後面，因為放在.PHONY裡的內容，Makefile在執行的時候，才會去辨別他有沒有改變<br/>\n舉個例子<br/>\n如果剛好有個檔案叫做generate<br/>\n然後你第一次執行</p>\n<pre></pre>\n<p>他會去正常實行 go generate ./...<br/>\n但第二次執行時<br/>\n因為generate沒有在.PHONY中，所以Makefile在判斷的時候，就會覺得你的generate沒有變動，就不會去執行go generate ./...了<br/>\n詳細的內容可以到網路上查看更多資料，我這邊就僅用在執行指令</p>\n<p>附上這次的comment紀錄<br/>\n</p>\n<br/>\n</div>",
        "content_text": "文章同步更新於\n因為接下來如果要進行測試，勢必得在建立每個interface的時候都要新增一次mock interface，而且未來如果這個interface要擴增的時候，又得再重新輸入一次指令，所以在gomock官網中有提到，如果想要批次建立mock file，可以透過\n\n來進行批量產生\ngo generate的原理是透過註解的方式，來執行後面的語法\n所以可以搭配上mockgen一起使用\n就可以如下\n\n然後到根目錄執行\n\n而這個./...的意思是\n./ => 當前目錄\n... =>下面目錄的所有字串，以及所有路徑\n參考\n\n只要這樣做，就可以將所有資料夾中檔案有go generate的都跑一遍了\n\n那如果未來會忘記這段指令怎麼辦呢\n這時候，就用到另一個小工具\nMakefile\n這個工具可以幫我們把很多系統上的使令統一放到一個檔案中，然後透過\n\n來執行\n那這個檔案寫法如下\n\n然後在你存放Makefile的路徑下執行\n\n他就會幫你執行\n\n\n至於.PHONY是什麼呢\n因為這個Makefile除了執行指令，其實主要是拿來做compile用的，所以會建議，如果你在執行的指令，如果她就只是指令，而不是檔案的話，就把它放到.PHONY後面，因為放在.PHONY裡的內容，Makefile在執行的時候，才會去辨別他有沒有改變\n舉個例子\n如果剛好有個檔案叫做generate\n然後你第一次執行\n\n他會去正常實行 go generate ./...\n但第二次執行時\n因為generate沒有在.PHONY中，所以Makefile在判斷的時候，就會覺得你的generate沒有變動，就不會去執行go generate ./...了\n詳細的內容可以到網路上查看更多資料，我這邊就僅用在執行指令\n附上這次的comment紀錄",
        "content_code_info": [
            {
                "language": "golang",
                "content": "go generate\n"
            },
            {
                "language": "golang",
                "content": "//go:generate mockgen -destination=mock/command.go -package=modelMock . ICommand  \ntype ICommand interface {  \n  Get() ([]schema.Command, error)  \n  Save(input *schema.Command) (schema.Command, error)  \n  UpdateOne(commandUuid string, command *schema.Command) (schema.Command, error)  \n  Delete(commandUuid string) error  \n}\n"
            },
            {
                "language": "bash",
                "content": "go generate ./...\n"
            },
            {
                "language": "bash",
                "content": "make xxxxx\n"
            },
            {
                "language": "unknown",
                "content": ".PHONY: generate run  \n  \nrun:  \n  go run .  \n  \ngenerate:  \n  go generate ./...\n"
            },
            {
                "language": "bash",
                "content": "make generate\n"
            },
            {
                "language": "bash",
                "content": "go generate ./...\n"
            },
            {
                "language": "unknown",
                "content": "make generate\n"
            }
        ],
        "programming_languages": [
            "golang",
            "bash"
        ],
        "word_seg_content_text": "文章 同步 更新 於\n因為 接下來 如果 要 進行 測試 ， 勢必 得 在 建立 每個 interface 的 時候 都 要 新增 一次 mock\ninterface ， 而且 未來 如果 這個 interface 要 擴增 的 時候 ， 又 得 再 重新 輸入 一次 指令 ， 所以 在 gomock 官網 中 有 提到 ， 如果 想要 批次 建立 mock\nfile ， 可以 透過\n來 進行 批量 產生\ngo\ngenerate 的 原理 是 透過 註解 的 方式 ， 來 執行 後面 的 語法\n所以 可以 搭配 上 mockgen 一起 使用\n就 可以 如下\n然後 到 根目錄 執行\n而 這個 . / ... 的 意思 是\n. /\n= >\n當前目錄\n...\n= > 下面 目錄 的 所有 字串 ， 以及 所有 路徑\n參考\n只要 這樣 做 ， 就 可以 將 所有 資料夾 中 檔案 有 go\ngenerate 的 都 跑 一遍 了\n那 如果 未來 會 忘記 這段 指令 怎麼辦 呢\n這時候 ， 就用到 另 一個 小 工具\nMakefile\n這個 工具 可以 幫 我們 把 很多 系統 上 的 使令 統一 放到 一個 檔案 中 ， 然後 透過\n來 執行\n那 這個 檔案 寫法 如下\n然後 在 你 存放 Makefile 的 路徑 下 執行\n他 就 會 幫 你 執行\n至於 . PHONY 是 什麼 呢\n因為 這個 Makefile 除了 執行 指令 ， 其實 主要 是 拿來 做 compile 用 的 ， 所以 會 建議 ， 如果 你 在 執行 的 指令 ， 如果 她 就 只是 指令 ， 而 不是 檔案 的話 ， 就 把 它 放到 . PHONY 後面 ， 因為 放在 . PHONY 裡的 內容 ， Makefile 在 執行 的 時候 ， 才 會 去 辨別 他 有沒有 改變\n舉 個例 子\n如果 剛好 有個 檔案 叫做 generate\n然後 你 第一次 執行\n他會 去 正常 實行\ngo\ngenerate\n. / ...\n但 第二次 執行 時\n因為 generate 沒有 在 . PHONY 中 ， 所以 Makefile 在 判斷 的 時候 ， 就 會 覺得 你 的 generate 沒有 變動 ， 就 不會 去 執行 go\ngenerate\n. / ... 了\n詳細 的 內容 可以 到 網路上 查看 更 多 資料 ， 我 這邊 就 僅用 在 執行 指令\n附上 這次 的 comment 紀錄",
        "word_seg_processed_content_text": "文章 同步 更新\n接下來 測試 勢必 建立 interface 新增 mock\ninterface 未來 interface 擴增 輸入 指令 gomock 官網 中 提到 想要 批次 建立 mock\nfile 透過\n批量\ngo\ngenerate 原理 透過 註解 方式 執行 語法\n搭配 mockgen\n\n根目錄 執行\n...\n\n\n當前目錄\n...\n目錄 字串 路徑\n參考\n做 資料夾 中 檔案 go\ngenerate 跑 一遍\n未來 會 忘記 這段 指令\n這時候 就用到 工具\nmakefile\n工具 幫 很多 系統 使令 統一 放到 檔案 中 透過\n執行\n檔案 寫法\n存放 makefile 路徑 執行\n會 幫 執行\nphony\nmakefile 執行 指令 拿來 做 compile 會 建議 執行 指令 指令 檔案 放到 phony 放在 phony 裡的 內容 makefile 執行 才 會 辨別 有沒有 改變\n舉 個例 子\n剛好 有個 檔案 generate\n第一次 執行\n他會 實行\ngo\ngenerate\n...\n第二次 執行 時\ngenerate phony 中 makefile 判斷 會 generate 變動 執行 go\ngenerate\n...\n詳細 內容 網路上 查看 更 資料 僅用 執行 指令\n附上 這次 comment 紀錄",
        "extracted_keywords": [
            "mockgen",
            "interface",
            "同步",
            "當前目錄",
            "gomock"
        ],
        "extracted_keywords_phrases": [
            "mock interface",
            "mockgen 根目錄",
            "interface 未來",
            "未來 interface",
            "搭配 mockgen"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283926": {
        "href": "https://ithelp.ithome.com.tw/articles/10283926",
        "title": "撰寫http request 的測試(golang)(Day24)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>文章同步更新於<a href=\"https://kevinyay945.com/smart-home-tutorial/024\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/024</a></p>\n<p>大致的api都開設完成了，在這次的專案中，目前預計會實作的測試為實際的request是否可以完整執行，因為這麼實作，就可以把測試案例寫在程式中頻繁地進行測試，來做到向下兼容的部分</p>\n<p>而這次進行測試，一樣要使用到<a href=\"https://onsi.github.io/ginkgo/#getting-ginkgo\" target=\"_blank\" rel=\"noreferrer noopener\">ginkgo</a>來產生測試的範本</p>\n<p>而這次要寫的測試案例，主要是http的request的input跟output<br>\n所以這個部分，我們參考echo 官網的測試案例撰寫</p>\n<p><a href=\"https://echo.labstack.com/guide/testing/\" target=\"_blank\" rel=\"noreferrer noopener\">https://echo.labstack.com/guide/testing/</a></p>\n<p>而這次還有使用到gomock<br>\n這個mock主要是要讓我們來將程式中有用到其他依賴的interface來做替換，讓我們可以在測試案例中自由選擇這些method預期的輸出</p>\n<p>在這次的測試案例中，我們就是將IRequest中的換成我們用gomock產生的struct，然後來讓程式中Get()變得可以自由控制他的預期輸入跟輸出<br>\n這個的詳細使用可以參考<br>\n<a href=\"https://github.com/golang/mock\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/golang/mock</a></p>\n<p>另外，在golang中，如果想要mock其他內容，還有其他種方式，也在這邊附上我找到的還不錯的參考<br>\n<a href=\"https://www.myhatchpad.com/insight/mocking-techniques-for-go/\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.myhatchpad.com/insight/mocking-techniques-for-go/</a></p>\n<p>以下是這次的code跟編輯的影片過程<br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.5.1\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.5.1</a><br>\n<a href=\"https://www.youtube.com/watch?v=kQm3ozOMkro\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=kQm3ozOMkro</a></p>\n<h3>參考</h3>\n<p><a href=\"https://yuanchieh.page/posts/2021/2021-03-18-golang-test/\" target=\"_blank\" rel=\"noreferrer noopener\">https://yuanchieh.page/posts/2021/2021-03-18-golang-test/</a></p>\n<h3>備註</h3>\n<p>又因為在撰寫程式的當下，他有釋出第二版，所以目前想使用v2的ginkgo<br>\n<a href=\"https://github.com/onsi/ginkgo/blob/ver2/docs/MIGRATING_TO_V2.md#using-the-beta\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/onsi/ginkgo/blob/ver2/docs/MIGRATING_TO_V2.md#using-the-beta</a><br>\n所以要先在專案下執行</p>\n<pre><code>go get github.com/onsi/ginkgo/v2@v2.0.0-rc3\n</code></pre>\n<p>來讓專案的go.mod裡面的ginkgo升級成v2<br>\n再來用</p>\n<pre><code>go install github.com/onsi/ginkgo/v2/ginkgo\n</code></pre>\n<p>來將系統的cli更新</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-02-08 23:36:36",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "24",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>文章同步更新於</p>\n<p>大致的api都開設完成了，在這次的專案中，目前預計會實作的測試為實際的request是否可以完整執行，因為這麼實作，就可以把測試案例寫在程式中頻繁地進行測試，來做到向下兼容的部分</p>\n<p>而這次進行測試，一樣要使用到來產生測試的範本</p>\n<p>而這次要寫的測試案例，主要是http的request的input跟output<br/>\n所以這個部分，我們參考echo 官網的測試案例撰寫</p>\n<p></p>\n<p>而這次還有使用到gomock<br/>\n這個mock主要是要讓我們來將程式中有用到其他依賴的interface來做替換，讓我們可以在測試案例中自由選擇這些method預期的輸出</p>\n<p>在這次的測試案例中，我們就是將IRequest中的換成我們用gomock產生的struct，然後來讓程式中Get()變得可以自由控制他的預期輸入跟輸出<br/>\n這個的詳細使用可以參考<br/>\n</p>\n<p>另外，在golang中，如果想要mock其他內容，還有其他種方式，也在這邊附上我找到的還不錯的參考<br/>\n</p>\n<p>以下是這次的code跟編輯的影片過程<br/>\n<br/>\n</p>\n<h3>參考</h3>\n<p></p>\n<h3>備註</h3>\n<p>又因為在撰寫程式的當下，他有釋出第二版，所以目前想使用v2的ginkgo<br/>\n<br/>\n所以要先在專案下執行</p>\n<pre></pre>\n<p>來讓專案的go.mod裡面的ginkgo升級成v2<br/>\n再來用</p>\n<pre></pre>\n<p>來將系統的cli更新</p>\n<br/>\n</div>",
        "content_text": "文章同步更新於\n大致的api都開設完成了，在這次的專案中，目前預計會實作的測試為實際的request是否可以完整執行，因為這麼實作，就可以把測試案例寫在程式中頻繁地進行測試，來做到向下兼容的部分\n而這次進行測試，一樣要使用到來產生測試的範本\n而這次要寫的測試案例，主要是http的request的input跟output\n所以這個部分，我們參考echo 官網的測試案例撰寫\n\n而這次還有使用到gomock\n這個mock主要是要讓我們來將程式中有用到其他依賴的interface來做替換，讓我們可以在測試案例中自由選擇這些method預期的輸出\n在這次的測試案例中，我們就是將IRequest中的換成我們用gomock產生的struct，然後來讓程式中Get()變得可以自由控制他的預期輸入跟輸出\n這個的詳細使用可以參考\n\n另外，在golang中，如果想要mock其他內容，還有其他種方式，也在這邊附上我找到的還不錯的參考\n\n以下是這次的code跟編輯的影片過程\n\n\n參考\n\n備註\n又因為在撰寫程式的當下，他有釋出第二版，所以目前想使用v2的ginkgo\n\n所以要先在專案下執行\n\n來讓專案的go.mod裡面的ginkgo升級成v2\n再來用\n\n來將系統的cli更新",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "go get github.com/onsi/ginkgo/v2@v2.0.0-rc3\n"
            },
            {
                "language": "unknown",
                "content": "go install github.com/onsi/ginkgo/v2/ginkgo\n"
            }
        ],
        "programming_languages": [
            "golang"
        ],
        "word_seg_content_text": "文章 同步 更新 於\n大致 的 api 都 開設 完成 了 ， 在 這次 的 專案 中 ， 目前 預計 會 實作 的 測試 為 實際 的 request 是否 可以 完整 執行 ， 因為 這麼 實作 ， 就 可以 把 測試 案例 寫 在 程式 中 頻繁 地 進行 測試 ， 來 做到 向下兼容 的 部分\n而 這次 進行 測試 ， 一樣 要 使用 到來 產生 測試 的 範本\n而 這次 要 寫 的 測試 案例 ， 主要 是 http 的 request 的 input 跟 output\n所以 這個 部分 ， 我們 參考 echo\n官網 的 測試 案例 撰寫\n而 這次 還有 使用 到 gomock\n這個 mock 主要 是 要 讓 我們 來將 程式 中 有用 到 其他 依賴 的 interface 來 做 替換 ， 讓 我們 可以 在 測試 案例 中 自由選擇 這些 method 預期 的 輸出\n在 這次 的 測試 案例 中 ， 我們 就是 將 IRequest 中 的 換成 我們 用 gomock 產生 的 struct ， 然 後來 讓 程式 中 Get ( ) 變得 可以 自由 控制 他 的 預期 輸入 跟 輸出\n這個 的 詳細 使用 可以 參考\n另外 ， 在 golang 中 ， 如果 想要 mock 其他 內容 ， 還有 其他 種 方式 ， 也 在 這邊 附上 我 找到 的還 不錯 的 參考\n以下 是 這次 的 code 跟 編輯 的 影片 過程\n參考\n備註\n又 因為 在 撰寫 程式 的 當下 ， 他 有 釋出 第二 版 ， 所以 目前 想 使用 v2 的 ginkgo\n所以 要 先 在 專案 下 執行\n來 讓 專案 的 go . mod 裡面 的 ginkgo 升級成 v2\n再來 用\n來將 系統 的 cli 更新",
        "word_seg_processed_content_text": "文章 同步 更新\n大致 api 開設 這次 專案 中 預計 會 實作 測試 request 完整 執行 實作 測試 案例 寫 程式 中 頻繁 測試 向下兼容\n這次 測試 到來 測試 範本\n這次 寫 測試 案例 http request input output\n參考 echo\n官網 測試 案例 撰寫\n這次 gomock\nmock 來將 程式 中 有用 依賴 interface 做 替換 測試 案例 中 自由選擇 method 預期 輸出\n這次 測試 案例 中 irequest 中 換成 gomock struct 然 程式 中 get 變得 自由 控制 預期 輸入 輸出\n詳細 參考\ngolang 中 想要 mock 內容 種 方式 附上 找到 的還 不錯 參考\n這次 code 編輯 影片 過程\n參考\n備註\n撰寫 程式 當下 釋出 第二 版 想 v2 ginkgo\n先 專案 執行\n專案 go mod ginkgo 升級成 v2\n再來\n來將 系統 cli 更新",
        "extracted_keywords": [
            "測試",
            "程式",
            "同步",
            "過程",
            "mock"
        ],
        "extracted_keywords_phrases": [
            "官網 測試",
            "測試 範本",
            "測試 request",
            "實作 測試",
            "頻繁 測試"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283679": {
        "href": "https://ithelp.ithome.com.tw/articles/10283679",
        "title": "第31天~上架",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>上架</p>\n<p>一.打包APK</p>\n<p>1.選Buile-Generate Signed Bundle/APK</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035C4OzroGTQv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035C4OzroGTQv.png\"></p>\n<p>2.選APK-&gt;下一步</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KCZrobLJ91.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KCZrobLJ91.png\"></p>\n<p>3.產生簽章檔</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035VuNe8bOl9q.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035VuNe8bOl9q.png\"></p>\n<p>4.存放位置</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035D6OdXnI3jl.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035D6OdXnI3jl.png\"></p>\n<p>5.輸入檔名只能英文.副檔名jks按OK<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035xjauZ3sLM1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035xjauZ3sLM1.png\"></p>\n<p>6.文件密碼都用一樣123456</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035vB5LcpdVrm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035vB5LcpdVrm.png\"></p>\n<p>7.Alias:key0 就是別名-用預設的就好<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035QrDL5e7nOS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035QrDL5e7nOS.png\"></p>\n<p>8.Validity(years):代表key可以用多久-這裡代表25年<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035NY5nW7YikG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035NY5nW7YikG.png\"></p>\n<p>9.下面只要填一個-&gt;按O痾產生金鑰</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035MJpmzkTy7M.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035MJpmzkTy7M.png\"></p>\n<p>10.後面就是下一步下一步</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/201190353pgEVPjb67.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/201190353pgEVPjb67.png\"></p>\n<p>11-<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035IIh8a18GTG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035IIh8a18GTG.png\"><br>\n12-選release才是上架用的</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KAu3FvdnK7.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KAu3FvdnK7.png\"></p>\n<p>13-產生apk的檔案-就是要上架的</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Fe08MdgwgM.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Fe08MdgwgM.png\"></p>\n<p>14-到google play網站<br>\n<a href=\"https://play.google.com/console/u/0/developers/8503248830277010787/create-new-app?fbclid=IwAR1BAxWZAbpiwh3M63frdaLt_PiBj3vi1WpNCrQb39tzkDJHaW4ex0A0_50\" target=\"_blank\" rel=\"noreferrer noopener\">https://play.google.com/console/u/0/developers/8503248830277010787/create-new-app?fbclid=IwAR1BAxWZAbpiwh3M63frdaLt_PiBj3vi1WpNCrQb39tzkDJHaW4ex0A0_50</a></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Fwpag8pZla.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Fwpag8pZla.png\"></p>\n<p>15-建立應用程式</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035X5mbhOrk5e.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035X5mbhOrk5e.png\"></p>\n<p>16-名稱可以用中文</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Le3mAOplwv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Le3mAOplwv.png\"></p>\n<p>17-下面都V<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035hnyDzNsftn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035hnyDzNsftn.png\"></p>\n<p>18-然後長這樣-按\"資訊主頁\"</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035z97v4MpTYx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035z97v4MpTYx.png\"><br>\n19-開始寫一連串的....</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Wn0wmvL7xi.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Wn0wmvL7xi.png\"></p>\n<p>20-存取權-開放</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KTetBpemLx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KTetBpemLx.png\"></p>\n<p>按儲存-已儲存</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035IWrjQ1hEU0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035IWrjQ1hEU0.png\"></p>\n<p>21-後面就...</p>\n<p>廣告-不含廣告<br>\n分級-開始填問卷<br>\n對象-</p>\n<p>剩下圖片<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035oNtI9AjdIP.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035oNtI9AjdIP.png\"></p>\n<p>22-</p>\n<p>如果-鎖住代表有沒有做完</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Dt1okvNkmJ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035Dt1okvNkmJ.png\"></p>\n<p>23-選取國家</p>\n<p>24-放上剛剛做出來的APK</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035cW0UXuinXV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035cW0UXuinXV.png\"><br>\n建立版本<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KQbyKWWchM.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220206/20119035KQbyKWWchM.png\"></p>\n<p>然後要等7天審核才知道有沒有上傳完成</p>\n<p>待完成...</p>\n<p><em>从 2021 年 11 月开始，新版应用必须以 API 级别 30 或更高版本为目标运行环境</em><br>\n<a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk?hl=zh-cn\" target=\"_blank\" rel=\"noreferrer noopener\">https://developer.android.com/distribute/best-practices/develop/target-sdk?hl=zh-cn</a></p>\n<p>這個的下一篇-</p>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10283889\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10283889</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Mobile Development",
        "published_at": "2022-02-06 11:18:25",
        "author_href": "https://ithelp.ithome.com.tw/users/20119035/ironman",
        "author_name": "Tzu",
        "series_href": "https://ithelp.ithome.com.tw/users/20119035/ironman/3876",
        "series_name": "就是從無到有寫app",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>上架</p>\n<p>一.打包APK</p>\n<p>1.選Buile-Generate Signed Bundle/APK</p>\n<p></p>\n<p>2.選APK-&gt;下一步</p>\n<p></p>\n<p>3.產生簽章檔</p>\n<p></p>\n<p>4.存放位置</p>\n<p></p>\n<p>5.輸入檔名只能英文.副檔名jks按OK<br/>\n</p>\n<p>6.文件密碼都用一樣123456</p>\n<p></p>\n<p>7.Alias:key0 就是別名-用預設的就好<br/>\n</p>\n<p>8.Validity(years):代表key可以用多久-這裡代表25年<br/>\n</p>\n<p>9.下面只要填一個-&gt;按O痾產生金鑰</p>\n<p></p>\n<p>10.後面就是下一步下一步</p>\n<p></p>\n<p>11-<br/>\n<br/>\n12-選release才是上架用的</p>\n<p></p>\n<p>13-產生apk的檔案-就是要上架的</p>\n<p></p>\n<p>14-到google play網站<br/>\n</p>\n<p></p>\n<p>15-建立應用程式</p>\n<p></p>\n<p>16-名稱可以用中文</p>\n<p></p>\n<p>17-下面都V<br/>\n</p>\n<p>18-然後長這樣-按\"資訊主頁\"</p>\n<p><br/>\n19-開始寫一連串的....</p>\n<p></p>\n<p>20-存取權-開放</p>\n<p></p>\n<p>按儲存-已儲存</p>\n<p></p>\n<p>21-後面就...</p>\n<p>廣告-不含廣告<br/>\n分級-開始填問卷<br/>\n對象-</p>\n<p>剩下圖片<br/>\n</p>\n<p>22-</p>\n<p>如果-鎖住代表有沒有做完</p>\n<p></p>\n<p>23-選取國家</p>\n<p>24-放上剛剛做出來的APK</p>\n<p><br/>\n建立版本<br/>\n</p>\n<p>然後要等7天審核才知道有沒有上傳完成</p>\n<p>待完成...</p>\n<p><em>从 2021 年 11 月开始，新版应用必须以 API 级别 30 或更高版本为目标运行环境</em><br/>\n</p>\n<p>這個的下一篇-</p>\n<p></p>\n<br/>\n</div>",
        "content_text": "上架\n一.打包APK\n1.選Buile-Generate Signed Bundle/APK\n\n2.選APK->下一步\n\n3.產生簽章檔\n\n4.存放位置\n\n5.輸入檔名只能英文.副檔名jks按OK\n\n6.文件密碼都用一樣123456\n\n7.Alias:key0 就是別名-用預設的就好\n\n8.Validity(years):代表key可以用多久-這裡代表25年\n\n9.下面只要填一個->按O痾產生金鑰\n\n10.後面就是下一步下一步\n\n11-\n\n12-選release才是上架用的\n\n13-產生apk的檔案-就是要上架的\n\n14-到google play網站\n\n\n15-建立應用程式\n\n16-名稱可以用中文\n\n17-下面都V\n\n18-然後長這樣-按\"資訊主頁\"\n\n19-開始寫一連串的....\n\n20-存取權-開放\n\n按儲存-已儲存\n\n21-後面就...\n廣告-不含廣告\n分級-開始填問卷\n對象-\n剩下圖片\n\n22-\n如果-鎖住代表有沒有做完\n\n23-選取國家\n24-放上剛剛做出來的APK\n\n建立版本\n\n然後要等7天審核才知道有沒有上傳完成\n待完成...\n从 2021 年 11 月开始，新版应用必须以 API 级别 30 或更高版本为目标运行环境\n\n這個的下一篇-",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "上架\n一 . 打包 APK\n1 . 選 Buile - Generate\nSigned\nBundle / APK\n2 . 選 APK - > 下 一步\n3 . 產生 簽章 檔\n4 . 存放 位置\n5 . 輸入 檔名 只能 英文 . 副 檔名 jks 按 OK\n6 . 文件 密碼 都 用 一樣 123456\n7 . Alias : key0\n就是 別名 - 用 預設 的 就 好\n8 . Validity ( years ) : 代表 key 可以 用 多久 - 這裡 代表 25 年\n9 . 下面 只要 填 一個 - > 按 O 痾 產生 金鑰\n10 . 後面 就是 下 一步 下 一步\n11 -\n12 - 選 release 才 是 上架 用 的\n13 - 產生 apk 的 檔案 - 就是 要 上架 的\n14 - 到 google\nplay 網站\n15 - 建立 應用程式\n16 - 名稱 可以 用 中文\n17 - 下面 都 V\n18 - 然後 長 這樣 - 按 \" 資訊 主頁 \"\n19 - 開始 寫 一連串 的 ....\n20 - 存取 權 - 開放\n按 儲存 - 已 儲存\n21 - 後面 就 ...\n廣告 - 不含 廣告\n分級 - 開始 填 問卷\n對象 -\n剩下 圖片\n22 -\n如果 - 鎖住 代表 有沒有 做 完\n23 - 選取 國家\n24 - 放上 剛剛 做 出來 的 APK\n建立 版本\n然後 要 等 7 天審 核才 知道 有沒有 上傳 完成\n待 完成 ...\n从\n2021\n年\n11\n月 开始 ， 新版 应用 必须 以\nAPI\n级别\n30\n或 更 高 版本 为 目标 运行 环境\n這個 的 下 一篇 -",
        "word_seg_processed_content_text": "上架\n打包 apk\n1 選 buile generate\nsigned\nbundle apk\n2 選 apk 一步\n3 簽章 檔\n4 存放 位置\n5 輸入 檔名 只能 英文 副 檔名 jks ok\n6 文件 密碼 123456\n7 alias key0\n別名 預設\n8 validity years 代表 key 多久 代表 25 年\n9 填 o 痾 金鑰\n10 一步 一步\n11\n12 選 release 才 上架\n13 apk 檔案 上架\n14 google\nplay 網站\n15 建立 應用程式\n16 名稱 中文\n17 v\n18 長 資訊 主頁\n19 寫 一連串 ....\n20 存取 權 開放\n儲存 儲存\n21 ...\n廣告 不含 廣告\n分級 填 問卷\n對象\n剩下 圖片\n22\n鎖住 代表 有沒有 做 完\n23 選取 國家\n24 放上 剛剛 做 apk\n建立 版本\n7 天審 核才 有沒有 上傳\n...\n从\n2021\n年\n11\n月 开始 新版 应用 必须\napi\n级别\n30\n更 高 版本 为 目标 运行 环境\n一篇",
        "extracted_keywords": [
            "apk",
            "signed",
            "應用程式",
            "密碼",
            "多久"
        ],
        "extracted_keywords_phrases": [
            "apk 建立",
            "apk 檔案",
            "key 多久",
            "apk 一步",
            "apk apk"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283853": {
        "href": "https://ithelp.ithome.com.tw/articles/10283853",
        "title": "實作系統呼叫與簡易的 Shell",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>在先前的文章中，我們已經探討過：</p>\n<ul>\n<li>中斷與異常的處理</li>\n<li>UNIX-Like Shell 的實作方式</li>\n</ul>\n<p>在本篇文章中，作者會嘗試實作基本的系統呼叫以及 Shell 在 mini-riscv-os 當中。</p>\n<h2>透過 Shell 學習 fork 與 exit 等系統呼叫</h2>\n<p>系統呼叫 (System Call) 由作業系統提供，若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space，待作業系統處理完該系統呼叫後才會切換回 User space。<br>\n<img src=\"http://www.it.uu.se/education/course/homepage/os/vt18/images/module-2/fork-exec-exit-wait.png\" alt=\"\"></p>\n<blockquote>\n<p>上圖取自 <a href=\"http://www.it.uu.se/education/course/homepage/os/vt18/module-2/process-management\" target=\"_blank\" rel=\"noreferrer noopener\">Uppsala University 的作業系統教材</a>。</p>\n</blockquote>\n<p>以上是一個最精簡的 UNIX Shell 的流程圖，Shell 會讀取來自使用者輸入的命令，並且呼叫 <code>fork()</code> 讓作業系統複製一個狀態與母程序一樣的子程序。</p>\n<pre><code class=\"language-c=\">#include &lt;unistd.h&gt;\npid_t fork(void);\n</code></pre>\n<blockquote>\n<p>On success, <strong>the PID of the child process is returned in the parent</strong>, and <strong>0 is returned in the child</strong>.<br>\n-- <a href=\"https://man7.org/linux/man-pages/man2/fork.2.html\" target=\"_blank\" rel=\"noreferrer noopener\">Linux manual page</a></p>\n</blockquote>\n<p>子程序被作業系統產生後，母與子程序會根據 <code>fork()</code> 的 return value 去判斷當前的程序是前者還是後者：</p>\n<ul>\n<li>若執行的為母程序，則呼叫 <code>wait()</code> 系統呼叫等待子程序結束執行。</li>\n<li>若執行的為子程序，則將剛剛所分析完的使用者命令帶入 <code>exec()</code> 系統呼叫，載入並執行指定的檔案。</li>\n<li>當子程序結束後，母程序會進入下一個循環等待使用者下達新的命令。</li>\n</ul>\n<h3>補充 Copy On Write</h3>\n<p>當作業系統接受到 <code>fork()</code> 系統呼叫後，會將母程序的內容複製並產生子程序。<br>\n由於母程序與子程序所持有的 Stack 並非同一塊，所以，若要在處理 <code>fork()</code> 時就完整的 Copy 一整份 Stack 的內容是非常浪費效能的。<br>\n針對此問題，許多作業系統都採用 Copy On Write 的技術，假設母程序在 Stack 上存放了一個 counter 變數，呼叫 <code>fork()</code> 產生子程序後，兩者其實都是參考到同一塊記憶體上的。這樣的狀況會一直持續到其中一方嘗試修改 counter 變數，修改方會將 counter 的內容放到新的記憶體位址後再修改它所持有的那一份。這麼做就可以節省記憶體空間以及 <code>fork()</code> 所帶來的額外開銷！</p>\n<h2>進入正題：來實作系統呼叫與簡易的 Shell 吧！</h2>\n<blockquote>\n<p><strong>注意！</strong><br>\n目前尚未實作 <code>fork()</code> 系統呼叫，下方若出現它的身影可以先略過。</p>\n</blockquote>\n<h3>實作系統呼叫</h3>\n<p>剛剛有提到：</p>\n<blockquote>\n<p>若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space。</p>\n</blockquote>\n<p>要滿足這樣的需求，我們可以使用系統中斷：<br>\n<img src=\"https://i.imgur.com/zmuknQr.png\" alt=\"\"></p>\n<p>看到 <code>Interrupt = 0</code> &amp; <code>Exception = 11</code> 所對應到的描述 <strong>Environment call from M-mode</strong>，要產生 Environment call 只要使用 <code>ecall</code> 即可。<br>\n因此，我們使用組合語言去實現幾個函式提供 C 語言呼叫：</p>\n<pre><code>.global gethid\ngethid:\n\tli a7, 1\n\tecall\n\tret\n.global fork\nfork:\n\tli a7, 2\n\tecall\n\tret\n.global exec\nexec:\n\tli a7, 3\n\tecall\n\tret\n.global exit\nexit:\n\tli a7, 4\n\tecall\n\tret\n</code></pre>\n<p>只要呼叫上面所列出的任一個函式，這些函式都會將其系統呼叫對應到的號碼放入 a7 暫存器後再執行 <code>ecall</code>。</p>\n<pre><code class=\"language-c=\">/* In trap_handler() */\n    case 11:\n        lib_puts(\"Environment call from M-mode!\\n\");\n        do_syscall(ctx, &amp;return_pc);\n        break;\n</code></pre>\n<p>從 Machin mode 產生的 Environment call 會交由 <code>do_syscall()</code> 處理：</p>\n<pre><code class=\"language-c=\">void do_syscall(struct context *ctx, uint32_t *pc)\n{\n\tuint32_t syscall_num = ctx-&gt;a7;\n\tint ppid = get_current_task();\n\tdebug_lib_puts(\"syscall_num: %d\\n\", syscall_num);\n\tswitch (syscall_num)\n\t{\n\tcase 1:\n\t\tctx-&gt;a0 = sys_gethid((unsigned int *)(ctx-&gt;a0));\n\t\tbreak;\n\tcase 2:\n\t\t/* fork\n\t\t * returned value:\n\t\t *\tchild process: 0\n\t\t *  parent process: pid of child process\n\t\t */\n\t\tctx-&gt;a0 = task_copy(ppid, pc);\n\t\tbreak;\n\tcase 3:\n\t\t// exec\n\t\tctx-&gt;a0 = sys_exec((char *)ctx-&gt;a0, pc);\n\t\tgoto ret;\n\t\tbreak;\n\tcase 4:\n\t\t// exit\n\t\tsys_exit();\n\t\t*pc = &amp;os_kernel;\n\t\tgoto ret;\n\t\tbreak;\n\tdefault:\n\t\tlib_printf(\"Unknown syscall no: %d\\n\", syscall_num);\n\t\tctx-&gt;a0 = -1;\n\t}\n\n\t*pc = *pc + 4;\nret:\n\treturn;\n}\n</code></pre>\n<p><code>do_syscall()</code> 會以 a7 暫存器所儲存的號碼判斷系統呼叫，並做出相對的處理，這邊以 <code>exec()</code> 與 <code>exit()</code> 為例：</p>\n<ul>\n<li>若 <code>exec()</code> 被呼叫，系統會將希望執行的程式位址作為參數傳入覆寫掉 pc 的位址。</li>\n<li>若 <code>exit()</code> 被呼叫，系統會把該 Task 移除並將 pc 複寫為 os_kernel 的位址。</li>\n</ul>\n<p>會將希望執行的程式位址作為參數傳入 <code>exec()</code> 函式是因為該作業系統並沒有完整的檔案系統實作，所以沒有所謂可執行檔案的概念。<br>\n為了彌補這個缺陷，我選擇事先構造 app table，讓作業系統在開機執行 <code>user_init()</code> 時可以先註冊基本的 User Program：</p>\n<pre><code class=\"language-c=\">void user_init()\n{\n\tuser_app_init();\n\tuser_app_register(\"info\", &amp;show_info);\n\tuser_app_register(\"clear\", &amp;clear);\n\ttask_create(&amp;sh);\n}\n</code></pre>\n<p>當然，這些 Program 也只是簡易的函式，然後透過函式指標的方式註冊到 OS。</p>\n<pre><code class=\"language-c=\">void show_info()\n{\n\tlib_puts(\"Wellcome to toothpasteOS\\n\");\n\tlib_puts(\"Version: 1.0\\n\");\n\tlib_puts(\"Note: Derived from mini-riscv-os\\n\");\n\tlib_puts(\"Author: Ian Chen\\n\");\n\texit();\n}\n</code></pre>\n<h3>實作 mini shell</h3>\n<p>在實作 mini shell 之前，筆者其實也發現了一些問題：</p>\n<ul>\n<li>若在 <code>lib_puts()</code> 執行時（也就是使用者還沒輸入命令給 Shell 之前）發生時間中斷，等到處理完中斷再回到該 Task 時就會無法正確執行。</li>\n<li>若不小心存取到不存在的記憶體空間，作業系統會不斷出現 <strong>Fault load</strong> 或是 <strong>Fault store</strong> 的狀況。</li>\n<li>因為系統還沒實作 fork 跟 file system，所以不可能把 unix shell 的那一套方法直接拿來用。</li>\n</ul>\n<p>這些問題筆者也花了一點時間得到了（可能不是非常好的）解答：</p>\n<ol>\n<li>在 <code>lib_puts()</code> 執行時前後需特別關閉/開啟 interrupt enable：</li>\n</ol>\n<pre><code>/* Disable timer interrupt*/\nw_mie(r_mie() &amp; ~(1 &lt;&lt; 7));\n/* Enable timer interrupt*/\nw_mie(r_mie() | MIE_MTIE);\n</code></pre>\n<blockquote>\n<p>BTW，請先將 exteral_handler() 中處理 UART 中斷的 handler 移除，不然在使用者輸入字元的當下系統會直接把 uart register 的內容印出來，等到 shell 要用的時候就已經讀不到內容了。</p>\n</blockquote>\n<ol start=\"2\">\n<li>讓 Program counter 執行下一條指令<br>\n如果中斷與異常處理完成後，Program counter 還是繼續執行發生異常的指令，就有可能會造成死循環，因此，只要稍微修改 <code>trap_handler()</code> 即可避免該問題：</li>\n</ol>\n<pre><code class=\"language-c=\">case 5:\n      // Fault load!\n      return_pc = return_pc + 4;\n      break;\ncase 7:\n      // Fault store!\n      return_pc = return_pc + 4;\n      break;\n</code></pre>\n<ol start=\"3\">\n<li>改用 <code>task_create()</code> 替代<br>\n剛剛有提到筆者構造了一個 user table 用來存放一些簡易的 user program。因此，我們只要在讀取命令以後找到命令所對應的函式，再丟給 <code>task_create()</code> 就可以當作 <code>fork()</code> 的替代方案啦！</li>\n</ol>\n<pre><code class=\"language-c=\">#include \"os.h\"\nvoid sh()\n{\n    char input[50];\n    int ready = 1;\n    while (ready)\n    {\n        lib_puts(\"$ \");\n        lib_gets(input);\n        ready = 0;\n        user_app_t *app_table = get_app_table();\n        int i = 0;\n        for (; i &lt; APP_NUM; i++)\n        {\n            if (strcmp(app_table[i].path, input) &gt;= 0)\n            {\n                break;\n            }\n        }\n        if (i == APP_NUM)\n        {\n            lib_printf(\"shell: %s: command not found.\\n\", input);\n        }\n        else if (task_create(app_table[i].task) &gt; 0)\n        {\n            lib_printf(\"shell: task[%s] is created! \\n\", app_table[i].path);\n        }\n        else\n        {\n            lib_printf(\"Only allow 30 tasks to run simultaneously.\\n\");\n        }\n        lib_delay(1000);\n        ready = 1;\n        w_mie(r_mie() | MIE_MTIE);\n    }\n}\n</code></pre>\n<p>此外，為了確保使用者在輸入命令後，系統可以立刻處理其需求，我縮短了作業系統排程切換的時間並加入 <code>lib_delay()</code>，以保證系統會馬上切換到 user program 進行處理。</p>\n<h2>總結</h2>\n<p>這次的實驗讓使用者能夠體驗與 mini-riscv-os 互動的快樂（？）<br>\n不過這些更動其實還沒 patch-back 回 mini-riscv-os 之中，而是修改在我的<a href=\"https://github.com/ianchen0119/toothpasteOS\" target=\"_blank\" rel=\"noreferrer noopener\">牙膏 OS</a> 專案底下，主要原因有幾點：</p>\n<ul>\n<li>改動的幅度有點大。</li>\n<li>已實現的系統呼叫並沒有被 shell 完整的運用。</li>\n<li>應改以其他方式實現任務的排程，而非使用 Timer Interrupt。</li>\n<li>在處理 UART 中斷的當下應該把 uart register 的內容 buffer 起來，等到 <code>lib_puts()</code> 要用時再存取 buffer 就好。</li>\n</ul>\n<p>即使該專案仍有諸多缺點，但作為一個學習作業系統的敲門磚，我相信它還是有其價值存在，也歡迎各位賞我的<a href=\"https://github.com/ianchen0119/toothpasteOS\" target=\"_blank\" rel=\"noreferrer noopener\">牙膏 OS</a> 一個 Star。<br>\n最後，也感謝 <a href=\"https://github.com/austin362667\" target=\"_blank\" rel=\"noreferrer noopener\">austin362667</a> 貢獻了 <code>gethid()</code> 的實作，構建了系統呼叫的雛形。</p>\n<h2>Reference</h2>\n<ul>\n<li>\n<a href=\"https://hackmd.io/@sysprog/unix-fork-exec\" target=\"_blank\" rel=\"noreferrer noopener\">UNIX 作業系統 fork/exec 系統呼叫的前世今生</a>\n</li>\n<li>\n<a href=\"https://github.com/cccriscv/mini-riscv-os\" target=\"_blank\" rel=\"noreferrer noopener\">mini-riscv-os</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,shell,作業系統,系統呼叫,risc-v",
        "genre": "Software Development",
        "published_at": "2022-01-30 23:52:38",
        "author_href": "https://ithelp.ithome.com.tw/users/20110850/ironman",
        "author_name": "EN",
        "series_href": "https://ithelp.ithome.com.tw/users/20110850/ironman/3859",
        "series_name": "微自幹的作業系統輕旅行",
        "series_num": "41",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>在先前的文章中，我們已經探討過：</p>\n<ul>\n<li>中斷與異常的處理</li>\n<li>UNIX-Like Shell 的實作方式</li>\n</ul>\n<p>在本篇文章中，作者會嘗試實作基本的系統呼叫以及 Shell 在 mini-riscv-os 當中。</p>\n<h2>透過 Shell 學習 fork 與 exit 等系統呼叫</h2>\n<p>系統呼叫 (System Call) 由作業系統提供，若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space，待作業系統處理完該系統呼叫後才會切換回 User space。<br/>\n</p>\n<blockquote>\n<p>上圖取自 。</p>\n</blockquote>\n<p>以上是一個最精簡的 UNIX Shell 的流程圖，Shell 會讀取來自使用者輸入的命令，並且呼叫 <code>fork()</code> 讓作業系統複製一個狀態與母程序一樣的子程序。</p>\n<pre></pre>\n<blockquote>\n<p>On success, <strong>the PID of the child process is returned in the parent</strong>, and <strong>0 is returned in the child</strong>.<br/>\n-- </p>\n</blockquote>\n<p>子程序被作業系統產生後，母與子程序會根據 <code>fork()</code> 的 return value 去判斷當前的程序是前者還是後者：</p>\n<ul>\n<li>若執行的為母程序，則呼叫 <code>wait()</code> 系統呼叫等待子程序結束執行。</li>\n<li>若執行的為子程序，則將剛剛所分析完的使用者命令帶入 <code>exec()</code> 系統呼叫，載入並執行指定的檔案。</li>\n<li>當子程序結束後，母程序會進入下一個循環等待使用者下達新的命令。</li>\n</ul>\n<h3>補充 Copy On Write</h3>\n<p>當作業系統接受到 <code>fork()</code> 系統呼叫後，會將母程序的內容複製並產生子程序。<br/>\n由於母程序與子程序所持有的 Stack 並非同一塊，所以，若要在處理 <code>fork()</code> 時就完整的 Copy 一整份 Stack 的內容是非常浪費效能的。<br/>\n針對此問題，許多作業系統都採用 Copy On Write 的技術，假設母程序在 Stack 上存放了一個 counter 變數，呼叫 <code>fork()</code> 產生子程序後，兩者其實都是參考到同一塊記憶體上的。這樣的狀況會一直持續到其中一方嘗試修改 counter 變數，修改方會將 counter 的內容放到新的記憶體位址後再修改它所持有的那一份。這麼做就可以節省記憶體空間以及 <code>fork()</code> 所帶來的額外開銷！</p>\n<h2>進入正題：來實作系統呼叫與簡易的 Shell 吧！</h2>\n<blockquote>\n<p><strong>注意！</strong><br/>\n目前尚未實作 <code>fork()</code> 系統呼叫，下方若出現它的身影可以先略過。</p>\n</blockquote>\n<h3>實作系統呼叫</h3>\n<p>剛剛有提到：</p>\n<blockquote>\n<p>若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space。</p>\n</blockquote>\n<p>要滿足這樣的需求，我們可以使用系統中斷：<br/>\n</p>\n<p>看到 <code>Interrupt = 0</code> &amp; <code>Exception = 11</code> 所對應到的描述 <strong>Environment call from M-mode</strong>，要產生 Environment call 只要使用 <code>ecall</code> 即可。<br/>\n因此，我們使用組合語言去實現幾個函式提供 C 語言呼叫：</p>\n<pre></pre>\n<p>只要呼叫上面所列出的任一個函式，這些函式都會將其系統呼叫對應到的號碼放入 a7 暫存器後再執行 <code>ecall</code>。</p>\n<pre></pre>\n<p>從 Machin mode 產生的 Environment call 會交由 <code>do_syscall()</code> 處理：</p>\n<pre></pre>\n<p><code>do_syscall()</code> 會以 a7 暫存器所儲存的號碼判斷系統呼叫，並做出相對的處理，這邊以 <code>exec()</code> 與 <code>exit()</code> 為例：</p>\n<ul>\n<li>若 <code>exec()</code> 被呼叫，系統會將希望執行的程式位址作為參數傳入覆寫掉 pc 的位址。</li>\n<li>若 <code>exit()</code> 被呼叫，系統會把該 Task 移除並將 pc 複寫為 os_kernel 的位址。</li>\n</ul>\n<p>會將希望執行的程式位址作為參數傳入 <code>exec()</code> 函式是因為該作業系統並沒有完整的檔案系統實作，所以沒有所謂可執行檔案的概念。<br/>\n為了彌補這個缺陷，我選擇事先構造 app table，讓作業系統在開機執行 <code>user_init()</code> 時可以先註冊基本的 User Program：</p>\n<pre></pre>\n<p>當然，這些 Program 也只是簡易的函式，然後透過函式指標的方式註冊到 OS。</p>\n<pre></pre>\n<h3>實作 mini shell</h3>\n<p>在實作 mini shell 之前，筆者其實也發現了一些問題：</p>\n<ul>\n<li>若在 <code>lib_puts()</code> 執行時（也就是使用者還沒輸入命令給 Shell 之前）發生時間中斷，等到處理完中斷再回到該 Task 時就會無法正確執行。</li>\n<li>若不小心存取到不存在的記憶體空間，作業系統會不斷出現 <strong>Fault load</strong> 或是 <strong>Fault store</strong> 的狀況。</li>\n<li>因為系統還沒實作 fork 跟 file system，所以不可能把 unix shell 的那一套方法直接拿來用。</li>\n</ul>\n<p>這些問題筆者也花了一點時間得到了（可能不是非常好的）解答：</p>\n<ol>\n<li>在 <code>lib_puts()</code> 執行時前後需特別關閉/開啟 interrupt enable：</li>\n</ol>\n<pre></pre>\n<blockquote>\n<p>BTW，請先將 exteral_handler() 中處理 UART 中斷的 handler 移除，不然在使用者輸入字元的當下系統會直接把 uart register 的內容印出來，等到 shell 要用的時候就已經讀不到內容了。</p>\n</blockquote>\n<ol start=\"2\">\n<li>讓 Program counter 執行下一條指令<br/>\n如果中斷與異常處理完成後，Program counter 還是繼續執行發生異常的指令，就有可能會造成死循環，因此，只要稍微修改 <code>trap_handler()</code> 即可避免該問題：</li>\n</ol>\n<pre></pre>\n<ol start=\"3\">\n<li>改用 <code>task_create()</code> 替代<br/>\n剛剛有提到筆者構造了一個 user table 用來存放一些簡易的 user program。因此，我們只要在讀取命令以後找到命令所對應的函式，再丟給 <code>task_create()</code> 就可以當作 <code>fork()</code> 的替代方案啦！</li>\n</ol>\n<pre></pre>\n<p>此外，為了確保使用者在輸入命令後，系統可以立刻處理其需求，我縮短了作業系統排程切換的時間並加入 <code>lib_delay()</code>，以保證系統會馬上切換到 user program 進行處理。</p>\n<h2>總結</h2>\n<p>這次的實驗讓使用者能夠體驗與 mini-riscv-os 互動的快樂（？）<br/>\n不過這些更動其實還沒 patch-back 回 mini-riscv-os 之中，而是修改在我的 專案底下，主要原因有幾點：</p>\n<ul>\n<li>改動的幅度有點大。</li>\n<li>已實現的系統呼叫並沒有被 shell 完整的運用。</li>\n<li>應改以其他方式實現任務的排程，而非使用 Timer Interrupt。</li>\n<li>在處理 UART 中斷的當下應該把 uart register 的內容 buffer 起來，等到 <code>lib_puts()</code> 要用時再存取 buffer 就好。</li>\n</ul>\n<p>即使該專案仍有諸多缺點，但作為一個學習作業系統的敲門磚，我相信它還是有其價值存在，也歡迎各位賞我的 一個 Star。<br/>\n最後，也感謝  貢獻了 <code>gethid()</code> 的實作，構建了系統呼叫的雛形。</p>\n<h2>Reference</h2>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "在先前的文章中，我們已經探討過：\n\n中斷與異常的處理\nUNIX-Like Shell 的實作方式\n\n在本篇文章中，作者會嘗試實作基本的系統呼叫以及 Shell 在 mini-riscv-os 當中。\n透過 Shell 學習 fork 與 exit 等系統呼叫\n系統呼叫 (System Call) 由作業系統提供，若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space，待作業系統處理完該系統呼叫後才會切換回 User space。\n\n\n上圖取自 。\n\n以上是一個最精簡的 UNIX Shell 的流程圖，Shell 會讀取來自使用者輸入的命令，並且呼叫 fork() 讓作業系統複製一個狀態與母程序一樣的子程序。\n\n\nOn success, the PID of the child process is returned in the parent, and 0 is returned in the child.\n-- \n\n子程序被作業系統產生後，母與子程序會根據 fork() 的 return value 去判斷當前的程序是前者還是後者：\n\n若執行的為母程序，則呼叫 wait() 系統呼叫等待子程序結束執行。\n若執行的為子程序，則將剛剛所分析完的使用者命令帶入 exec() 系統呼叫，載入並執行指定的檔案。\n當子程序結束後，母程序會進入下一個循環等待使用者下達新的命令。\n\n補充 Copy On Write\n當作業系統接受到 fork() 系統呼叫後，會將母程序的內容複製並產生子程序。\n由於母程序與子程序所持有的 Stack 並非同一塊，所以，若要在處理 fork() 時就完整的 Copy 一整份 Stack 的內容是非常浪費效能的。\n針對此問題，許多作業系統都採用 Copy On Write 的技術，假設母程序在 Stack 上存放了一個 counter 變數，呼叫 fork() 產生子程序後，兩者其實都是參考到同一塊記憶體上的。這樣的狀況會一直持續到其中一方嘗試修改 counter 變數，修改方會將 counter 的內容放到新的記憶體位址後再修改它所持有的那一份。這麼做就可以節省記憶體空間以及 fork() 所帶來的額外開銷！\n進入正題：來實作系統呼叫與簡易的 Shell 吧！\n\n注意！\n目前尚未實作 fork() 系統呼叫，下方若出現它的身影可以先略過。\n\n實作系統呼叫\n剛剛有提到：\n\n若 User space 的應用程式調用了系統呼叫，作業系統便會從 User space 切換至 Kernel space。\n\n要滿足這樣的需求，我們可以使用系統中斷：\n\n看到 Interrupt = 0 & Exception = 11 所對應到的描述 Environment call from M-mode，要產生 Environment call 只要使用 ecall 即可。\n因此，我們使用組合語言去實現幾個函式提供 C 語言呼叫：\n\n只要呼叫上面所列出的任一個函式，這些函式都會將其系統呼叫對應到的號碼放入 a7 暫存器後再執行 ecall。\n\n從 Machin mode 產生的 Environment call 會交由 do_syscall() 處理：\n\ndo_syscall() 會以 a7 暫存器所儲存的號碼判斷系統呼叫，並做出相對的處理，這邊以 exec() 與 exit() 為例：\n\n若 exec() 被呼叫，系統會將希望執行的程式位址作為參數傳入覆寫掉 pc 的位址。\n若 exit() 被呼叫，系統會把該 Task 移除並將 pc 複寫為 os_kernel 的位址。\n\n會將希望執行的程式位址作為參數傳入 exec() 函式是因為該作業系統並沒有完整的檔案系統實作，所以沒有所謂可執行檔案的概念。\n為了彌補這個缺陷，我選擇事先構造 app table，讓作業系統在開機執行 user_init() 時可以先註冊基本的 User Program：\n\n當然，這些 Program 也只是簡易的函式，然後透過函式指標的方式註冊到 OS。\n\n實作 mini shell\n在實作 mini shell 之前，筆者其實也發現了一些問題：\n\n若在 lib_puts() 執行時（也就是使用者還沒輸入命令給 Shell 之前）發生時間中斷，等到處理完中斷再回到該 Task 時就會無法正確執行。\n若不小心存取到不存在的記憶體空間，作業系統會不斷出現 Fault load 或是 Fault store 的狀況。\n因為系統還沒實作 fork 跟 file system，所以不可能把 unix shell 的那一套方法直接拿來用。\n\n這些問題筆者也花了一點時間得到了（可能不是非常好的）解答：\n\n在 lib_puts() 執行時前後需特別關閉/開啟 interrupt enable：\n\n\n\nBTW，請先將 exteral_handler() 中處理 UART 中斷的 handler 移除，不然在使用者輸入字元的當下系統會直接把 uart register 的內容印出來，等到 shell 要用的時候就已經讀不到內容了。\n\n\n讓 Program counter 執行下一條指令\n如果中斷與異常處理完成後，Program counter 還是繼續執行發生異常的指令，就有可能會造成死循環，因此，只要稍微修改 trap_handler() 即可避免該問題：\n\n\n\n改用 task_create() 替代\n剛剛有提到筆者構造了一個 user table 用來存放一些簡易的 user program。因此，我們只要在讀取命令以後找到命令所對應的函式，再丟給 task_create() 就可以當作 fork() 的替代方案啦！\n\n\n此外，為了確保使用者在輸入命令後，系統可以立刻處理其需求，我縮短了作業系統排程切換的時間並加入 lib_delay()，以保證系統會馬上切換到 user program 進行處理。\n總結\n這次的實驗讓使用者能夠體驗與 mini-riscv-os 互動的快樂（？）\n不過這些更動其實還沒 patch-back 回 mini-riscv-os 之中，而是修改在我的 專案底下，主要原因有幾點：\n\n改動的幅度有點大。\n已實現的系統呼叫並沒有被 shell 完整的運用。\n應改以其他方式實現任務的排程，而非使用 Timer Interrupt。\n在處理 UART 中斷的當下應該把 uart register 的內容 buffer 起來，等到 lib_puts() 要用時再存取 buffer 就好。\n\n即使該專案仍有諸多缺點，但作為一個學習作業系統的敲門磚，我相信它還是有其價值存在，也歡迎各位賞我的 一個 Star。\n最後，也感謝  貢獻了 gethid() 的實作，構建了系統呼叫的雛形。\nReference",
        "content_code_info": [
            {
                "language": "c",
                "content": "#include <unistd.h>\npid_t fork(void);\n"
            },
            {
                "language": "unknown",
                "content": ".global gethid\ngethid:\n\tli a7, 1\n\tecall\n\tret\n.global fork\nfork:\n\tli a7, 2\n\tecall\n\tret\n.global exec\nexec:\n\tli a7, 3\n\tecall\n\tret\n.global exit\nexit:\n\tli a7, 4\n\tecall\n\tret\n"
            },
            {
                "language": "c",
                "content": "/* In trap_handler() */\n    case 11:\n        lib_puts(\"Environment call from M-mode!\\n\");\n        do_syscall(ctx, &return_pc);\n        break;\n"
            },
            {
                "language": "c",
                "content": "void do_syscall(struct context *ctx, uint32_t *pc)\n{\n\tuint32_t syscall_num = ctx->a7;\n\tint ppid = get_current_task();\n\tdebug_lib_puts(\"syscall_num: %d\\n\", syscall_num);\n\tswitch (syscall_num)\n\t{\n\tcase 1:\n\t\tctx->a0 = sys_gethid((unsigned int *)(ctx->a0));\n\t\tbreak;\n\tcase 2:\n\t\t/* fork\n\t\t * returned value:\n\t\t *\tchild process: 0\n\t\t *  parent process: pid of child process\n\t\t */\n\t\tctx->a0 = task_copy(ppid, pc);\n\t\tbreak;\n\tcase 3:\n\t\t// exec\n\t\tctx->a0 = sys_exec((char *)ctx->a0, pc);\n\t\tgoto ret;\n\t\tbreak;\n\tcase 4:\n\t\t// exit\n\t\tsys_exit();\n\t\t*pc = &os_kernel;\n\t\tgoto ret;\n\t\tbreak;\n\tdefault:\n\t\tlib_printf(\"Unknown syscall no: %d\\n\", syscall_num);\n\t\tctx->a0 = -1;\n\t}\n\n\t*pc = *pc + 4;\nret:\n\treturn;\n}\n"
            },
            {
                "language": "c",
                "content": "void user_init()\n{\n\tuser_app_init();\n\tuser_app_register(\"info\", &show_info);\n\tuser_app_register(\"clear\", &clear);\n\ttask_create(&sh);\n}\n"
            },
            {
                "language": "c",
                "content": "void show_info()\n{\n\tlib_puts(\"Wellcome to toothpasteOS\\n\");\n\tlib_puts(\"Version: 1.0\\n\");\n\tlib_puts(\"Note: Derived from mini-riscv-os\\n\");\n\tlib_puts(\"Author: Ian Chen\\n\");\n\texit();\n}\n"
            },
            {
                "language": "unknown",
                "content": "/* Disable timer interrupt*/\nw_mie(r_mie() & ~(1 << 7));\n/* Enable timer interrupt*/\nw_mie(r_mie() | MIE_MTIE);\n"
            },
            {
                "language": "c",
                "content": "case 5:\n      // Fault load!\n      return_pc = return_pc + 4;\n      break;\ncase 7:\n      // Fault store!\n      return_pc = return_pc + 4;\n      break;\n"
            },
            {
                "language": "c",
                "content": "#include \"os.h\"\nvoid sh()\n{\n    char input[50];\n    int ready = 1;\n    while (ready)\n    {\n        lib_puts(\"$ \");\n        lib_gets(input);\n        ready = 0;\n        user_app_t *app_table = get_app_table();\n        int i = 0;\n        for (; i < APP_NUM; i++)\n        {\n            if (strcmp(app_table[i].path, input) >= 0)\n            {\n                break;\n            }\n        }\n        if (i == APP_NUM)\n        {\n            lib_printf(\"shell: %s: command not found.\\n\", input);\n        }\n        else if (task_create(app_table[i].task) > 0)\n        {\n            lib_printf(\"shell: task[%s] is created! \\n\", app_table[i].path);\n        }\n        else\n        {\n            lib_printf(\"Only allow 30 tasks to run simultaneously.\\n\");\n        }\n        lib_delay(1000);\n        ready = 1;\n        w_mie(r_mie() | MIE_MTIE);\n    }\n}\n"
            }
        ],
        "programming_languages": [
            "c"
        ],
        "word_seg_content_text": "在 先前 的 文章 中 ， 我們 已經 探討 過 ：\n中斷 與 異常 的 處理\nUNIX - Like\nShell\n的 實作 方式\n在 本篇 文章 中 ， 作者 會 嘗試 實作 基本 的 系統 呼叫 以及\nShell\n在\nmini - riscv - os\n當中 。\n透過\nShell\n學習\nfork\n與\nexit\n等 系統 呼叫\n系統 呼叫\n( System\nCall )\n由 作業系統 提供 ， 若\nUser\nspace\n的 應用程式 調用 了 系統 呼叫 ， 作業系統 便會 從\nUser\nspace\n切換 至\nKernel\nspace ， 待 作業系統 處理 完該 系統 呼叫 後 才 會 切換 回\nUser\nspace 。\n上圖 取自\n。\n以上 是 一個 最 精簡 的\nUNIX\nShell\n的 流程圖 ， Shell\n會 讀取 來自 使用者 輸入 的 命令 ， 並且 呼叫\nfork ( )\n讓 作業系統 複製 一個 狀態 與 母 程序 一樣 的 子程序 。\nOn\nsuccess ,\nthe\nPID\nof\nthe\nchild\nprocess\nis\nreturned\nin\nthe\nparent ,\nand\n0\nis\nreturned\nin\nthe\nchild .\n--\n子程序 被 作業系統 產生 後 ， 母與子 程序 會 根據\nfork ( )\n的\nreturn\nvalue\n去 判斷 當前 的 程序 是 前者 還是 後者 ：\n若 執行 的 為 母 程序 ， 則 呼叫\nwait ( )\n系統 呼叫 等待 子程序 結束 執行 。\n若 執行 的 為 子程序 ， 則將 剛剛 所 分析 完 的 使用者 命令 帶入\nexec ( )\n系統 呼叫 ， 載入 並 執行 指定 的 檔案 。\n當 子程序 結束 後 ， 母 程序 會 進入 下 一個 循環 等待 使用者 下達 新 的 命令 。\n補充\nCopy\nOn\nWrite\n當 作業系統 接受 到\nfork ( )\n系統 呼叫 後 ， 會 將母 程序 的 內容 複製 並 產生 子程序 。\n由於 母 程序 與 子程序 所 持有 的\nStack\n並非 同 一塊 ， 所以 ， 若要 在 處理\nfork ( )\n時 就 完整 的\nCopy\n一 整份\nStack\n的 內容 是 非常 浪費 效能 的 。\n針對 此 問題 ， 許多 作業系統 都 採用\nCopy\nOn\nWrite\n的 技術 ， 假設 母 程序 在\nStack\n上 存放 了 一個\ncounter\n變數 ， 呼叫\nfork ( )\n產生 子程序 後 ， 兩者 其實 都 是 參考 到 同 一塊 記憶體 上 的 。 這樣 的 狀況 會 一直 持續 到 其中 一方 嘗試 修改\ncounter\n變數 ， 修改 方會將\ncounter\n的 內容 放到 新 的 記憶體 位址 後 再 修改 它 所 持有 的 那 一份 。 這麼 做 就 可以 節省 記憶體 空間 以及\nfork ( )\n所 帶來 的 額外 開銷 ！\n進入 正題 ： 來 實作 系統 呼叫 與 簡易 的\nShell\n吧 ！\n注意 ！\n目前 尚未 實作\nfork ( )\n系統 呼叫 ， 下方 若 出現 它 的 身影 可以 先 略過 。\n實作 系統 呼叫\n剛剛 有 提到 ：\n若\nUser\nspace\n的 應用程式 調用 了 系統 呼叫 ， 作業系統 便會 從\nUser\nspace\n切換 至\nKernel\nspace 。\n要 滿足 這樣 的 需求 ， 我們 可以 使用 系統 中斷 ：\n看到\nInterrupt\n=\n0\n&\nException\n=\n11\n所 對應 到 的 描述\nEnvironment\ncall\nfrom\nM - mode ， 要 產生\nEnvironment\ncall\n只要 使用\necall\n即可 。\n因此 ， 我們 使用 組合 語言 去 實現 幾個 函式 提供\nC\n語言 呼叫 ：\n只要 呼叫 上面 所 列出 的 任 一個 函式 ， 這些 函式 都 會將 其 系統 呼叫 對應 到 的 號碼 放入\na7\n暫存器 後 再 執行\necall 。\n從\nMachin\nmode\n產生 的\nEnvironment\ncall\n會 交由\ndo _ syscall ( )\n處理 ：\ndo _ syscall ( )\n會以\na7\n暫存器 所 儲存 的 號碼 判斷 系統 呼叫 ， 並 做出 相對 的 處理 ， 這邊 以\nexec ( )\n與\nexit ( )\n為例 ：\n若\nexec ( )\n被 呼叫 ， 系統 會將 希望 執行 的 程式 位址 作為 參數 傳入 覆寫 掉\npc\n的 位址 。\n若\nexit ( )\n被 呼叫 ， 系統 會 把 該\nTask\n移除 並將\npc\n複寫 為\nos _ kernel\n的 位址 。\n會將 希望 執行 的 程式 位址 作為 參數 傳入\nexec ( )\n函式 是 因為 該 作業系統 並 沒有 完整 的 檔案 系統 實作 ， 所以 沒有 所謂 可 執行 檔案 的 概念 。\n為 了 彌補 這個 缺陷 ， 我 選擇 事先 構造\napp\ntable ， 讓 作業系統 在 開機 執行\nuser _ init ( )\n時 可以 先 註冊 基本 的\nUser\nProgram ：\n當然 ， 這些\nProgram\n也 只是 簡易 的 函式 ， 然後 透過 函式 指標 的 方式 註冊 到\nOS 。\n實作\nmini\nshell\n在 實作\nmini\nshell\n之前 ， 筆者 其實 也 發現 了 一些 問題 ：\n若 在\nlib _ puts ( )\n執行 時 （ 也 就是 使用者 還沒 輸入 命令 給\nShell\n之前 ） 發生 時間 中斷 ， 等到 處理 完 中斷 再 回到 該\nTask\n時 就 會 無法 正確 執行 。\n若 不 小心 存取 到 不 存在 的 記憶體 空間 ， 作業系統 會 不斷 出現\nFault\nload\n或是\nFault\nstore\n的 狀況 。\n因為 系統 還沒 實作\nfork\n跟\nfile\nsystem ， 所以 不 可能 把\nunix\nshell\n的 那 一套 方法 直接 拿來 用 。\n這些 問題 筆者 也 花 了 一點 時間 得到 了 （ 可能 不是 非常 好 的 ） 解答 ：\n在\nlib _ puts ( )\n執行 時 前後 需 特別 關閉 / 開啟\ninterrupt\nenable ：\nBTW ， 請 先將\nexteral _ handler ( )\n中 處理\nUART\n中斷 的\nhandler\n移除 ， 不然 在 使用者 輸入 字元 的 當下 系統 會 直接 把\nuart\nregister\n的 內容 印出來 ， 等到\nshell\n要用 的 時候 就 已經 讀 不到 內容 了 。\n讓\nProgram\ncounter\n執行 下 一條 指令\n如果 中斷 與 異常 處理 完成 後 ， Program\ncounter\n還是 繼續執行 發生 異常 的 指令 ， 就 有 可能 會 造成 死循環 ， 因此 ， 只要 稍微 修改\ntrap _ handler ( )\n即可 避免 該 問題 ：\n改用\ntask _ create ( )\n替代\n剛剛 有 提到 筆者 構造 了 一個\nuser\ntable\n用來 存放 一些 簡易 的\nuser\nprogram 。 因此 ， 我們 只要 在 讀取 命令 以後 找到 命令 所 對應 的 函式 ， 再 丟給\ntask _ create ( )\n就 可以 當作\nfork ( )\n的 替代 方案 啦 ！\n此外 ， 為 了 確保 使用者 在 輸入 命令 後 ， 系統 可以 立刻 處理 其 需求 ， 我 縮短 了 作業系統 排程 切換 的 時間 並 加入\nlib _ delay ( ) ， 以 保證系統 會 馬上 切換 到\nuser\nprogram\n進行 處理 。\n總結\n這次 的 實驗 讓 使用者 能夠 體驗 與\nmini - riscv - os\n互動 的 快樂 （ ？ ）\n不過 這些 更動 其實 還沒\npatch - back\n回\nmini - riscv - os\n之中 ， 而是 修改 在 我 的\n專案 底下 ， 主要 原因 有 幾點 ：\n改動 的 幅度 有點 大 。\n已 實現 的 系統 呼叫 並 沒有 被\nshell\n完整 的 運用 。\n應 改以 其他 方式 實現 任務 的 排程 ， 而 非 使用\nTimer\nInterrupt 。\n在 處理\nUART\n中斷 的 當下 應該 把\nuart\nregister\n的 內容\nbuffer\n起來 ， 等到\nlib _ puts ( )\n要用 時 再 存取\nbuffer\n就 好 。\n即使 該 專案 仍 有 諸多 缺點 ， 但作 為 一個 學習 作業系統 的 敲門磚 ， 我 相信 它 還是 有 其 價值 存在 ， 也 歡迎 各位 賞我 的\n一個\nStar 。\n最後 ， 也 感謝\n貢獻 了\ngethid ( )\n的 實作 ， 構建 了 系統 呼叫 的 雛形 。\nReference",
        "word_seg_processed_content_text": "先前 文章 中 探討\n中斷 異常\nunix like\nshell\n實作 方式\n本篇 文章 中 作者 會 嘗試 實作 系統 呼叫\nshell\n\nmini riscv os\n當中\n透過\nshell\n學習\nfork\n\nexit\n系統 呼叫\n系統 呼叫\nsystem\ncall\n作業系統 提供\nuser\nspace\n應用程式 調用 系統 呼叫 作業系統 便會\nuser\nspace\n切換\nkernel\nspace 作業系統 完該 系統 呼叫 才 會 切換 回\nuser\nspace\n上圖 取自\n\n精簡\nunix\nshell\n流程圖 shell\n會 讀取 來自 使用者 輸入 命令 呼叫\nfork\n作業系統 複製 狀態 母 程序 子程序\n\nsuccess\n\npid\n\n\nchild\nprocess\n\nreturned\n\n\nparent\n\n0\n\nreturned\n\n\nchild\n--\n子程序 作業系統 母與子 程序 會\nfork\n\nreturn\nvalue\n判斷 程序 後者\n執行 母 程序 呼叫\nwait\n系統 呼叫 等待 子程序 結束 執行\n執行 子程序 則將 剛剛 分析 完 使用者 命令 帶入\nexec\n系統 呼叫 載入 執行 指定 檔案\n子程序 結束 母 程序 會 循環 等待 使用者 下達 新 命令\n補充\ncopy\n\nwrite\n作業系統 接受\nfork\n系統 呼叫 會 將母 程序 內容 複製 子程序\n母 程序 子程序 持有\nstack\n並非 一塊 若要\nfork\n時 完整\ncopy\n整份\nstack\n內容 浪費 效能\n針對 作業系統 採用\ncopy\n\nwrite\n技術 假設 母 程序\nstack\n存放\ncounter\n變數 呼叫\nfork\n子程序 參考 一塊 記憶體 狀況 會 持續 一方 嘗試 修改\ncounter\n變數 修改 方會將\ncounter\n內容 放到 新 記憶體 位址 修改 持有 一份 做 節省 記憶體 空間\nfork\n帶來 額外 開銷\n正題 實作 系統 呼叫 簡易\nshell\n\n\n尚未 實作\nfork\n系統 呼叫 下方 身影 先 略過\n實作 系統 呼叫\n剛剛 提到\n\nuser\nspace\n應用程式 調用 系統 呼叫 作業系統 便會\nuser\nspace\n切換\nkernel\nspace\n需求 系統 中斷\n\ninterrupt\n\n0\n\nexception\n\n11\n描述\nenvironment\ncall\n\nm mode\nenvironment\ncall\n\necall\n即可\n組合 語言 幾個 函式 提供\nc\n語言 呼叫\n呼叫 列出 函式 函式 會將 系統 呼叫 號碼 放入\na7\n暫存器 執行\necall\n\nmachin\nmode\n\nenvironment\ncall\n會 交由\ndo syscall\n\ndo syscall\n會以\na7\n暫存器 儲存 號碼 判斷 系統 呼叫 做出\nexec\n\nexit\n為例\n\nexec\n呼叫 系統 會將 希望 執行 程式 位址 參數 傳入 覆寫 掉\npc\n位址\n\nexit\n呼叫 系統 會\ntask\n移除 並將\npc\n複寫\nos kernel\n位址\n會將 希望 執行 程式 位址 參數 傳入\nexec\n函式 作業系統 完整 檔案 系統 實作 執行 檔案 概念\n彌補 缺陷 選擇 事先 構造\napp\ntable 作業系統 開機 執行\nuser init\n時 先 註冊\nuser\nprogram\n\nprogram\n簡易 函式 透過 函式 指標 方式 註冊\nos\n實作\nmini\nshell\n實作\nmini\nshell\n筆者 發現\n\nlib puts\n執行 時 使用者 還沒 輸入 命令\nshell\n發生 時間 中斷 等到 完 中斷 回到\ntask\n時 會 正確 執行\n小心 存取 記憶體 空間 作業系統 會\nfault\nload\n\nfault\nstore\n狀況\n系統 還沒 實作\nfork\n\nfile\nsystem\nunix\nshell\n一套 方法 拿來\n筆者 花 一點 時間 解答\n\nlib puts\n執行 時 需 特別 關閉 開啟\ninterrupt\nenable\nbtw 請 先將\nexteral handler\n中\nuart\n中斷\nhandler\n移除 使用者 輸入 字元 當下 系統 會\nuart\nregister\n內容 印出來 等到\nshell\n要用 讀 不到 內容\n\nprogram\ncounter\n執行 一條 指令\n中斷 異常 program\ncounter\n繼續執行 發生 異常 指令 會 死循環 稍微 修改\ntrap handler\n即可\n改用\ntask create\n替代\n剛剛 提到 筆者 構造\nuser\ntable\n用來 存放 簡易\nuser\nprogram 讀取 命令 找到 命令 函式 丟給\ntask create\n當作\nfork\n替代 方案\n確保 使用者 輸入 命令 系統 立刻 需求 縮短 作業系統 排程 切換 時間\nlib delay 保證系統 會 馬上 切換\nuser\nprogram\n\n\n這次 實驗 使用者 體驗\nmini riscv os\n互動 快樂\n更動 還沒\npatch back\n回\nmini riscv os\n之中 修改\n專案 底下 原因 幾點\n改動 幅度 大\n系統 呼叫\nshell\n完整\n應 改以 方式 排程 非\ntimer\ninterrupt\n\nuart\n中斷 當下\nuart\nregister\n內容\nbuffer\n等到\nlib puts\n要用 時 存取\nbuffer\n\n專案 諸多 缺點 但作 學習 作業系統 敲門磚 價值 賞我\n\nstar\n感謝\n貢獻\ngethid\n實作 構建 系統 呼叫 雛形\nreference",
        "extracted_keywords": [
            "shell",
            "作業系統",
            "unix",
            "暫存器",
            "程式"
        ],
        "extracted_keywords_phrases": [
            "shell mini",
            "透過 shell",
            "shell 要用",
            "unix like",
            "mini shell"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10249378": {
        "href": "https://ithelp.ithome.com.tw/articles/10249378",
        "title": "Day31  使用reCAPTCHA過濾robot",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h2>前言</h2>\n<p>想不到以前的草稿還能拿出來寫。</p>\n<p>最近將代碼重構了，看情況回頭修以前文章的bug（機率不大</p>\n<p>reCAPTCHA是google推出的<strong>我不是機器人</strong>服務，可以幫忙過濾一些機器人的流量，這邊以V3版本為例，google會根據使用者的一些行為判斷使用者有多像機器人，而不需要讓使用者花時間去點圖形。</p>\n<h2>準備</h2>\n<p>先到reCAPTCHA官網申請帳號，在網域的地方輸入自己的網域，有趣的是，如果想在本地測試，輸入127.0.0.1也可以使用。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220126/20124291deIYJhAq0H.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220126/20124291deIYJhAq0H.png\"></p>\n<p>之後會得到兩組金鑰，一組是用於前端，另一組則是要放在自己server上不能隨意公開的</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220126/20124291uOUhaAz3U0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220126/20124291uOUhaAz3U0.png\"></p>\n<h2>使用</h2>\n<p>根據<a href=\"https://developers.google.com/recaptcha/docs/v3\" target=\"_blank\" rel=\"noreferrer noopener\">官方文件</a>的描述，可以直接將reCAPTCHA綁訂在一個按鈕上，但這方法較沒有彈性，所以使用下面一種方法。</p>\n<p>假設我們希望發出登陸請求的使用者不是機器人，打開sign.js，將登入的地方改寫</p>\n<pre><code class=\"language-js\">let reCAPTCHA_token = \"6LcCuJwdAAAAAI2ITaq_01Xobie7X2FK9hTLuEvP\";\n\n$(\"#SignForm\").submit(function(e) {\n\n    let url = $(this).attr('action');\n    let username = $(\"#InputUserName\").val();\n    let password = $(\"#InputPassword\").val();\n    let data = new FormData();\n    data.append('username', username);\n    data.append('password', password);\n\n    grecaptcha.ready(function() {\n        grecaptcha.execute(reCAPTCHA_token, {action: 'submit'}).then(function(token) {\n            // Add your logic to submit to your backend server here.\n            data.append('response', token);\n            $.ajax({\n                method: \"POST\",\n                url: url,\n                data: data,\n                processData: false,\n                contentType: false,\n                xhrFields: {\n                    withCredentials: true\n                },\n                success: function(data){\n                    console.log(data)\n                    SetUserCookie(data.user)\n                    window.location.reload();\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    console.log(jqXHR)\n                    console.log(textStatus)\n                    console.log(errorThrown)\n                    $(\"#AlertWrongParam\").show();\n                }\n            });\n        });\n    });\n\n    e.preventDefault(); // avoid to execute the actual submit of the form.\n});\n</code></pre>\n<p>解釋：<br>\n當按下送出表單後，會先把請求發給google檢查是否是機器人，google會回應一組token，接著將這組token跟使用者的資料送到後台處理</p>\n<p>後台要將這筆token送給google來確定這位使用者的分數，這過程還需要我們的另一組金鑰來認證</p>\n<p>在middleware/auth.go補上</p>\n<pre><code class=\"language-go\">func CheckRobot() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tserve.CheckRobot(c)\n\t\tif c.IsAborted() {\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n</code></pre>\n<p>之後可以在router package選擇想要檢查是否是機器人的路徑上接上這個middleware</p>\n<p>在serve/auth.go補上</p>\n<pre><code class=\"language-go\">// check request is by robot\nfunc CheckRobot(c *gin.Context) {\n\tresp, err := http.PostForm(\"https://www.google.com/recaptcha/api/siteverify\",\n\t\turl.Values{\n\t\t\t\"secret\":   {\"your key\"},\n\t\t\t\"response\": {c.PostForm(\"response\")},\n\t\t\t\"remoteip\": {c.ClientIP()},\n\t\t},\n\t)\n}\n</code></pre>\n<p>發送請求給google，接著處理google的回應，取得google判斷的分數，在CheckRobot內補上</p>\n<pre><code class=\"language-go\">\n\tif err != nil {\n\t\tlog.Warn(c, apperr.ErrPermissionDenied, err, \"Sorry, something error\", \"error in sent post request to reCAPTCHA\")\n\t\tc.Abort()\n\t\treturn\n\t}\n\tvar res map[string]interface{}\n\tjson.NewDecoder(resp.Body).Decode(&amp;res)\n\t// parse google response\n\tif val, ok := res[\"success\"].(bool); !ok {\n\t\terr := errors.New(\"wrong error type\")\n\t\tlog.Error(c, apperr.ErrSystemFail, err, 0, \"Sorry, something error\", \"assert wrong type\")\n\t\tc.Abort()\n\t\treturn\n\t} else if !val {\n\t\terr := errors.New(\"wrong argument\")\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, something error\", \"wrong response token\")\n\t\tc.Abort()\n\t\treturn\n\t}\n</code></pre>\n<p>有了分數就能以此來決定怎麼做了，這邊的處理邏輯是直接無視掉太像機器人(分數小於自訂的score值)的請求，在CheckRobot內補上。</p>\n<pre><code class=\"language-go\">\t// compare score\n\tscore, err := strconv.ParseFloat(setting.Servers[\"main\"].ReCAPTCHA[\"AcceptScore\"], 64)\n\tif err != nil {\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, something error\", \"parse config string to float fail\")\n\t\tc.Abort()\n\t\treturn\n\t}\n\tif val, ok := res[\"score\"].(float64); !ok {\n\t\terr = errors.New(\"wrong error type\")\n\t\tlog.Error(c, apperr.ErrSystemFail, err, 0, \"Sorry, something error\", \"assert wrong type\")\n\t\tc.Abort()\n\t\treturn\n\t} else if val &lt; score {\n\t\terr := errors.New(\"robot denied\")\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, we don't accept robot\", \"robot denied\")\n\t\tc.Abort()\n\t\treturn\n\t}\n</code></pre>\n <br>\n                                                    </div>",
        "raw_tags_string": "12th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2022-01-26 22:16:12",
        "author_href": "https://ithelp.ithome.com.tw/users/20124291/ironman",
        "author_name": "linyanbin",
        "series_href": "https://ithelp.ithome.com.tw/users/20124291/ironman/3465",
        "series_name": "從coding到上線-打造自己的blog系統",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<h2>前言</h2>\n<p>想不到以前的草稿還能拿出來寫。</p>\n<p>最近將代碼重構了，看情況回頭修以前文章的bug（機率不大</p>\n<p>reCAPTCHA是google推出的<strong>我不是機器人</strong>服務，可以幫忙過濾一些機器人的流量，這邊以V3版本為例，google會根據使用者的一些行為判斷使用者有多像機器人，而不需要讓使用者花時間去點圖形。</p>\n<h2>準備</h2>\n<p>先到reCAPTCHA官網申請帳號，在網域的地方輸入自己的網域，有趣的是，如果想在本地測試，輸入127.0.0.1也可以使用。</p>\n<p></p>\n<p>之後會得到兩組金鑰，一組是用於前端，另一組則是要放在自己server上不能隨意公開的</p>\n<p></p>\n<h2>使用</h2>\n<p>根據的描述，可以直接將reCAPTCHA綁訂在一個按鈕上，但這方法較沒有彈性，所以使用下面一種方法。</p>\n<p>假設我們希望發出登陸請求的使用者不是機器人，打開sign.js，將登入的地方改寫</p>\n<pre></pre>\n<p>解釋：<br/>\n當按下送出表單後，會先把請求發給google檢查是否是機器人，google會回應一組token，接著將這組token跟使用者的資料送到後台處理</p>\n<p>後台要將這筆token送給google來確定這位使用者的分數，這過程還需要我們的另一組金鑰來認證</p>\n<p>在middleware/auth.go補上</p>\n<pre></pre>\n<p>之後可以在router package選擇想要檢查是否是機器人的路徑上接上這個middleware</p>\n<p>在serve/auth.go補上</p>\n<pre></pre>\n<p>發送請求給google，接著處理google的回應，取得google判斷的分數，在CheckRobot內補上</p>\n<pre></pre>\n<p>有了分數就能以此來決定怎麼做了，這邊的處理邏輯是直接無視掉太像機器人(分數小於自訂的score值)的請求，在CheckRobot內補上。</p>\n<pre></pre>\n<br/>\n</div>",
        "content_text": "前言\n想不到以前的草稿還能拿出來寫。\n最近將代碼重構了，看情況回頭修以前文章的bug（機率不大\nreCAPTCHA是google推出的我不是機器人服務，可以幫忙過濾一些機器人的流量，這邊以V3版本為例，google會根據使用者的一些行為判斷使用者有多像機器人，而不需要讓使用者花時間去點圖形。\n準備\n先到reCAPTCHA官網申請帳號，在網域的地方輸入自己的網域，有趣的是，如果想在本地測試，輸入127.0.0.1也可以使用。\n\n之後會得到兩組金鑰，一組是用於前端，另一組則是要放在自己server上不能隨意公開的\n\n使用\n根據的描述，可以直接將reCAPTCHA綁訂在一個按鈕上，但這方法較沒有彈性，所以使用下面一種方法。\n假設我們希望發出登陸請求的使用者不是機器人，打開sign.js，將登入的地方改寫\n\n解釋：\n當按下送出表單後，會先把請求發給google檢查是否是機器人，google會回應一組token，接著將這組token跟使用者的資料送到後台處理\n後台要將這筆token送給google來確定這位使用者的分數，這過程還需要我們的另一組金鑰來認證\n在middleware/auth.go補上\n\n之後可以在router package選擇想要檢查是否是機器人的路徑上接上這個middleware\n在serve/auth.go補上\n\n發送請求給google，接著處理google的回應，取得google判斷的分數，在CheckRobot內補上\n\n有了分數就能以此來決定怎麼做了，這邊的處理邏輯是直接無視掉太像機器人(分數小於自訂的score值)的請求，在CheckRobot內補上。",
        "content_code_info": [
            {
                "language": "javascript",
                "content": "let reCAPTCHA_token = \"6LcCuJwdAAAAAI2ITaq_01Xobie7X2FK9hTLuEvP\";\n\n$(\"#SignForm\").submit(function(e) {\n\n    let url = $(this).attr('action');\n    let username = $(\"#InputUserName\").val();\n    let password = $(\"#InputPassword\").val();\n    let data = new FormData();\n    data.append('username', username);\n    data.append('password', password);\n\n    grecaptcha.ready(function() {\n        grecaptcha.execute(reCAPTCHA_token, {action: 'submit'}).then(function(token) {\n            // Add your logic to submit to your backend server here.\n            data.append('response', token);\n            $.ajax({\n                method: \"POST\",\n                url: url,\n                data: data,\n                processData: false,\n                contentType: false,\n                xhrFields: {\n                    withCredentials: true\n                },\n                success: function(data){\n                    console.log(data)\n                    SetUserCookie(data.user)\n                    window.location.reload();\n                },\n                error: function(jqXHR, textStatus, errorThrown){\n                    console.log(jqXHR)\n                    console.log(textStatus)\n                    console.log(errorThrown)\n                    $(\"#AlertWrongParam\").show();\n                }\n            });\n        });\n    });\n\n    e.preventDefault(); // avoid to execute the actual submit of the form.\n});\n"
            },
            {
                "language": "golang",
                "content": "func CheckRobot() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tserve.CheckRobot(c)\n\t\tif c.IsAborted() {\n\t\t\treturn\n\t\t}\n\n\t\tc.Next()\n\t}\n}\n"
            },
            {
                "language": "golang",
                "content": "// check request is by robot\nfunc CheckRobot(c *gin.Context) {\n\tresp, err := http.PostForm(\"https://www.google.com/recaptcha/api/siteverify\",\n\t\turl.Values{\n\t\t\t\"secret\":   {\"your key\"},\n\t\t\t\"response\": {c.PostForm(\"response\")},\n\t\t\t\"remoteip\": {c.ClientIP()},\n\t\t},\n\t)\n}\n"
            },
            {
                "language": "golang",
                "content": "\n\tif err != nil {\n\t\tlog.Warn(c, apperr.ErrPermissionDenied, err, \"Sorry, something error\", \"error in sent post request to reCAPTCHA\")\n\t\tc.Abort()\n\t\treturn\n\t}\n\tvar res map[string]interface{}\n\tjson.NewDecoder(resp.Body).Decode(&res)\n\t// parse google response\n\tif val, ok := res[\"success\"].(bool); !ok {\n\t\terr := errors.New(\"wrong error type\")\n\t\tlog.Error(c, apperr.ErrSystemFail, err, 0, \"Sorry, something error\", \"assert wrong type\")\n\t\tc.Abort()\n\t\treturn\n\t} else if !val {\n\t\terr := errors.New(\"wrong argument\")\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, something error\", \"wrong response token\")\n\t\tc.Abort()\n\t\treturn\n\t}\n"
            },
            {
                "language": "golang",
                "content": "\t// compare score\n\tscore, err := strconv.ParseFloat(setting.Servers[\"main\"].ReCAPTCHA[\"AcceptScore\"], 64)\n\tif err != nil {\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, something error\", \"parse config string to float fail\")\n\t\tc.Abort()\n\t\treturn\n\t}\n\tif val, ok := res[\"score\"].(float64); !ok {\n\t\terr = errors.New(\"wrong error type\")\n\t\tlog.Error(c, apperr.ErrSystemFail, err, 0, \"Sorry, something error\", \"assert wrong type\")\n\t\tc.Abort()\n\t\treturn\n\t} else if val < score {\n\t\terr := errors.New(\"robot denied\")\n\t\tlog.Warn(c, apperr.ErrWrongArgument, err, \"Sorry, we don't accept robot\", \"robot denied\")\n\t\tc.Abort()\n\t\treturn\n\t}\n"
            }
        ],
        "programming_languages": [
            "javascript",
            "golang"
        ],
        "word_seg_content_text": "前言\n想不到 以前 的 草稿 還能 拿 出來 寫 。\n最近 將 代碼 重構 了 ， 看 情況 回頭 修 以前 文章 的 bug （ 機率 不大\nreCAPTCHA 是 google 推出 的 我 不是 機器人 服務 ， 可以 幫忙 過濾 一些 機器人 的 流量 ， 這邊 以 V3 版本 為例 ， google 會 根據 使用者 的 一些 行為 判斷 使用者 有 多 像 機器人 ， 而 不 需要 讓 使用者 花 時間 去點 圖形 。\n準備\n先到 reCAPTCHA 官網 申請 帳號 ， 在 網域 的 地方 輸入 自己 的 網域 ， 有趣 的 是 ， 如果 想 在 本地 測試 ， 輸入 127.0 . 0.1 也 可以 使用 。\n之後 會 得到 兩組 金鑰 ， 一組 是 用於 前端 ， 另一組 則是 要 放在 自己 server 上 不能 隨意 公開 的\n使用\n根據 的 描述 ， 可以 直接 將 reCAPTCHA 綁訂 在 一個 按鈕 上 ， 但 這方 法較 沒有 彈性 ， 所以 使用 下面 一種 方法 。\n假設 我們 希望 發出 登陸 請求 的 使用者 不是 機器人 ， 打開 sign . js ， 將登入 的 地方 改寫\n解釋 ：\n當按 下 送 出 表單 後 ， 會先 把 請求 發給 google 檢查 是否是 機器人 ， google 會 回應 一組 token ， 接著將 這組 token 跟 使用者 的 資料 送到 後 台 處理\n後 台 要將 這筆 token 送給 google 來 確定 這位 使用者 的 分數 ， 這 過程 還 需要 我們 的 另一組 金鑰來 認證\n在 middleware / auth . go 補上\n之後 可以 在 router\npackage 選擇 想要 檢查 是否是 機器人 的 路徑 上 接上 這個 middleware\n在 serve / auth . go 補上\n發送 請求 給 google ， 接著 處理 google 的 回應 ， 取得 google 判斷 的 分數 ， 在 CheckRobot 內 補上\n有 了 分數 就 能 以此 來 決定 怎麼 做 了 ， 這邊 的 處理 邏輯 是 直接 無視 掉 太 像 機器人 ( 分數 小於 自訂 的 score 值 ) 的 請求 ， 在 CheckRobot 內 補上 。",
        "word_seg_processed_content_text": "前言\n想不到 草稿 還能 寫\n代碼 重構 情況 回頭 修 文章 bug 機率 不大\nrecaptcha google 推出 機器人 服務 幫忙 過濾 機器人 流量 v3 版本 為例 google 會 使用者 判斷 使用者 機器人 使用者 花 時間 去點 圖形\n\n先到 recaptcha 官網 申請 帳號 網域 地方 輸入 網域 有趣 想 本地 測試 輸入 127.0 0.1\n會 兩組 金鑰 一組 用於 前端 另一組 則是 放在 server 隨意 公開\n\n描述 recaptcha 綁訂 按鈕 這方 法較 彈性 一種 方法\n假設 希望 發出 登陸 請求 使用者 機器人 打開 sign js 將登入 地方 改寫\n解釋\n當按 送 出 表單 會先 請求 發給 google 檢查 是否是 機器人 google 會 回應 一組 token 接著將 這組 token 使用者 資料 送到 台\n台 要將 這筆 token 送給 google 這位 使用者 分數 過程 另一組 金鑰來 認證\nmiddleware auth go 補上\nrouter\npackage 選擇 想要 檢查 是否是 機器人 路徑 接上 middleware\nserve auth go 補上\n發送 請求 google google 回應 google 判斷 分數 checkrobot 內 補上\n分數 以此 做 邏輯 無視 掉 太 機器人 分數 小於 自訂 score 值 請求 checkrobot 內 補上",
        "extracted_keywords": [
            "google",
            "checkrobot",
            "機器人",
            "middleware",
            "使用者"
        ],
        "extracted_keywords_phrases": [
            "機器人 google",
            "為例 google",
            "google 回應",
            "google 使用者",
            "recaptcha google"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283704": {
        "href": "https://ithelp.ithome.com.tw/articles/10283704",
        "title": "STM32F746 畫圖",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220117/201198069rcueODA9L.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220117/201198069rcueODA9L.jpg\"></p>\n<p>光看上面的圖片可以發現,<br>\nST提供了各式的畫圖function<br>\n有方形的外框,與全填滿DrawRect, FillRect<br>\n有圓形的外框,全填滿DrawCircle,FillCircle<br>\n三角形外框,全填滿 DrawPolygon,FillPolygon<br>\n橢圓形外框,全填滿 DrawEllipse,FillEllipse</p>\n<p>還有基本的劃線  DrawLine<br>\n垂直  水平  DrawVLine  DrawHLine</p>\n<p>測試過後才知道<br>\n上面那個三角形是...<br>\n光看英文是多邊形才對<br>\n怎麼只能畫三角形<br>\n導致我畫出了一個啾啾<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220117/20119806PGLRscYsFS.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220117/20119806PGLRscYsFS.jpg\"></p>\n<p>各位知道<br>\nBSP_LCD_DrawPolygon(Points, 3);<br>\nBSP_LCD_FillPolygon(Points2, 3);<br>\n原本只有上面這兩行<br>\n畫出了最上面的那種三角形</p>\n<p>我依樣畫葫蘆才改成不是直角三角形</p>\n<p>Polygon不是多邊形嗎?<br>\n所以我改了參數<br>\nBSP_LCD_FillPolygon(Points4, 4);<br>\n可是怎麼我後面卻變成那樣<br>\nPoint Points4[] = {{260, 150}, {260, 170}, {290, 150}, {290, 170}};<br>\n這樣錯了嗎?</p>\n<p>不信邪的改了一下畫圖區塊<br>\nPoint Points4[] = {{260, 150}, {290, 150}, {260, 170}, {290, 170}};<br>\n結果變成了<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220117/20119806aZEEZ8EXeZ.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220117/20119806aZEEZ8EXeZ.jpg\"></p>\n<p>好吧!這個function只適合三角形<br>\n.....................................<br>\n想了一天<br>\n會不會是自己的錯誤呢?<br>\n於是思考了我的順序與圖案<br>\n這才發現<br>\n要依照給的x,y順序連起來<br>\n像是上面 調整一下順序<br>\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {260, 170}};<br>\n就變成了我認知的四邊形<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220119/20119806fkyOz2Axiv.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220119/20119806fkyOz2Axiv.jpg\"></p>\n<p>再多一邊試試看<br>\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {275, 185}, {260, 170}};<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220119/20119806C03zgCAOUF.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220119/20119806C03zgCAOUF.jpg\"></p>\n<p>嗯~  結論就是<br>\n給的X,Y座標要依照順序來下<br>\n圍起來的區塊才是它畫出來的</p>\n<p>這算是還他清白了</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Arm Platforms",
        "published_at": "2022-01-17 22:59:31",
        "author_href": "https://ithelp.ithome.com.tw/users/20119806/ironman",
        "author_name": "Arm的嫩菜",
        "series_href": "https://ithelp.ithome.com.tw/users/20119806/ironman/4549",
        "series_name": "Arm 的初體驗",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p></p>\n<p>光看上面的圖片可以發現,<br/>\nST提供了各式的畫圖function<br/>\n有方形的外框,與全填滿DrawRect, FillRect<br/>\n有圓形的外框,全填滿DrawCircle,FillCircle<br/>\n三角形外框,全填滿 DrawPolygon,FillPolygon<br/>\n橢圓形外框,全填滿 DrawEllipse,FillEllipse</p>\n<p>還有基本的劃線  DrawLine<br/>\n垂直  水平  DrawVLine  DrawHLine</p>\n<p>測試過後才知道<br/>\n上面那個三角形是...<br/>\n光看英文是多邊形才對<br/>\n怎麼只能畫三角形<br/>\n導致我畫出了一個啾啾<br/>\n</p>\n<p>各位知道<br/>\nBSP_LCD_DrawPolygon(Points, 3);<br/>\nBSP_LCD_FillPolygon(Points2, 3);<br/>\n原本只有上面這兩行<br/>\n畫出了最上面的那種三角形</p>\n<p>我依樣畫葫蘆才改成不是直角三角形</p>\n<p>Polygon不是多邊形嗎?<br/>\n所以我改了參數<br/>\nBSP_LCD_FillPolygon(Points4, 4);<br/>\n可是怎麼我後面卻變成那樣<br/>\nPoint Points4[] = {{260, 150}, {260, 170}, {290, 150}, {290, 170}};<br/>\n這樣錯了嗎?</p>\n<p>不信邪的改了一下畫圖區塊<br/>\nPoint Points4[] = {{260, 150}, {290, 150}, {260, 170}, {290, 170}};<br/>\n結果變成了<br/>\n</p>\n<p>好吧!這個function只適合三角形<br/>\n.....................................<br/>\n想了一天<br/>\n會不會是自己的錯誤呢?<br/>\n於是思考了我的順序與圖案<br/>\n這才發現<br/>\n要依照給的x,y順序連起來<br/>\n像是上面 調整一下順序<br/>\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {260, 170}};<br/>\n就變成了我認知的四邊形<br/>\n</p>\n<p>再多一邊試試看<br/>\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {275, 185}, {260, 170}};<br/>\n</p>\n<p>嗯~  結論就是<br/>\n給的X,Y座標要依照順序來下<br/>\n圍起來的區塊才是它畫出來的</p>\n<p>這算是還他清白了</p>\n<br/>\n</div>",
        "content_text": "光看上面的圖片可以發現,\nST提供了各式的畫圖function\n有方形的外框,與全填滿DrawRect, FillRect\n有圓形的外框,全填滿DrawCircle,FillCircle\n三角形外框,全填滿 DrawPolygon,FillPolygon\n橢圓形外框,全填滿 DrawEllipse,FillEllipse\n還有基本的劃線  DrawLine\n垂直  水平  DrawVLine  DrawHLine\n測試過後才知道\n上面那個三角形是...\n光看英文是多邊形才對\n怎麼只能畫三角形\n導致我畫出了一個啾啾\n\n各位知道\nBSP_LCD_DrawPolygon(Points, 3);\nBSP_LCD_FillPolygon(Points2, 3);\n原本只有上面這兩行\n畫出了最上面的那種三角形\n我依樣畫葫蘆才改成不是直角三角形\nPolygon不是多邊形嗎?\n所以我改了參數\nBSP_LCD_FillPolygon(Points4, 4);\n可是怎麼我後面卻變成那樣\nPoint Points4[] = {{260, 150}, {260, 170}, {290, 150}, {290, 170}};\n這樣錯了嗎?\n不信邪的改了一下畫圖區塊\nPoint Points4[] = {{260, 150}, {290, 150}, {260, 170}, {290, 170}};\n結果變成了\n\n好吧!這個function只適合三角形\n.....................................\n想了一天\n會不會是自己的錯誤呢?\n於是思考了我的順序與圖案\n這才發現\n要依照給的x,y順序連起來\n像是上面 調整一下順序\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {260, 170}};\n就變成了我認知的四邊形\n\n再多一邊試試看\nPoint Points4[] = {{260, 150}, {290, 150}, {290, 170}, {275, 185}, {260, 170}};\n\n嗯~  結論就是\n給的X,Y座標要依照順序來下\n圍起來的區塊才是它畫出來的\n這算是還他清白了",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "光看 上面 的 圖片 可以 發現 ,\nST 提供 了 各式 的 畫圖 function\n有 方形 的 外框 , 與 全 填滿 DrawRect ,\nFillRect\n有 圓形 的 外框 , 全 填滿 DrawCircle , FillCircle\n三角形 外框 , 全 填滿\nDrawPolygon , FillPolygon\n橢圓形 外框 , 全 填滿\nDrawEllipse , FillEllipse\n還有 基本 的 劃線\nDrawLine\n垂直\n水平\nDrawVLine\nDrawHLine\n測試 過後 才 知道\n上面 那個 三角形 是 ...\n光看 英文 是 多邊形 才 對\n怎麼 只能 畫 三角形\n導致 我畫 出 了 一個 啾 啾\n各位 知道\nBSP _ LCD _ DrawPolygon ( Points ,\n3 ) ;\nBSP _ LCD _ FillPolygon ( Points2 ,\n3 ) ;\n原本 只有 上面 這 兩行\n畫出 了 最 上面 的 那種 三角形\n我 依樣畫葫蘆 才 改成 不是 直角三角形\nPolygon 不是 多邊形 嗎 ?\n所以 我 改 了 參數\nBSP _ LCD _ FillPolygon ( Points4 ,\n4 ) ;\n可是 怎麼 我 後面 卻 變成 那樣\nPoint\nPoints4 [ ]\n=\n{ { 260 ,\n150 } ,\n{ 260 ,\n170 } ,\n{ 290 ,\n150 } ,\n{ 290 ,\n170 } } ;\n這樣 錯 了 嗎 ?\n不信邪 的 改 了 一下 畫圖 區塊\nPoint\nPoints4 [ ]\n=\n{ { 260 ,\n150 } ,\n{ 290 ,\n150 } ,\n{ 260 ,\n170 } ,\n{ 290 ,\n170 } } ;\n結果 變成 了\n好 吧 ! 這個 function 只 適合 三角形\n.....................................\n想 了 一天\n會 不會 是 自己 的 錯誤 呢 ?\n於是 思考 了 我 的 順序 與 圖案\n這才 發現\n要 依照 給的 x , y 順序 連 起來\n像是 上面\n調整 一下 順序\nPoint\nPoints4 [ ]\n=\n{ { 260 ,\n150 } ,\n{ 290 ,\n150 } ,\n{ 290 ,\n170 } ,\n{ 260 ,\n170 } } ;\n就 變成 了 我 認知 的 四邊形\n再 多 一邊 試試看\nPoint\nPoints4 [ ]\n=\n{ { 260 ,\n150 } ,\n{ 290 ,\n150 } ,\n{ 290 ,\n170 } ,\n{ 275 ,\n185 } ,\n{ 260 ,\n170 } } ;\n嗯 ~\n結論 就是\n給的 X , Y 座標 要 依照 順序 來 下\n圍起來 的 區塊 才 是 它畫 出來 的\n這 算是 還他 清白 了",
        "word_seg_processed_content_text": "光看 圖片 發現\nst 提供 各式 畫圖 function\n方形 外框 全 填滿 drawrect\nfillrect\n圓形 外框 全 填滿 drawcircle fillcircle\n三角形 外框 全 填滿\ndrawpolygon fillpolygon\n橢圓形 外框 全 填滿\ndrawellipse fillellipse\n劃線\ndrawline\n垂直\n水平\ndrawvline\ndrawhline\n測試 過後 才\n三角形 ...\n光看 英文 多邊形 才\n只能 畫 三角形\n導致 我畫 出 啾 啾\n\nbsp lcd drawpolygon points\n3\nbsp lcd fillpolygon points2\n3\n原本 兩行\n畫出 那種 三角形\n依樣畫葫蘆 才 改成 直角三角形\npolygon 多邊形\n改 參數\nbsp lcd fillpolygon points4\n4\n\npoint\npoints4\n\n260\n150\n260\n170\n290\n150\n290\n170\n錯\n不信邪 改 畫圖 區塊\npoint\npoints4\n\n260\n150\n290\n150\n260\n170\n290\n170\n\nfunction 適合 三角形\n.....................................\n想\n會 錯誤\n思考 順序 圖案\n這才 發現\n給的 x y 順序\n像是\n調整 順序\npoint\npoints4\n\n260\n150\n290\n150\n290\n170\n260\n170\n認知 四邊形\n試試看\npoint\npoints4\n\n260\n150\n290\n150\n290\n170\n275\n185\n260\n170\n\n結論\n給的 x y 座標 順序\n圍起來 區塊 才 它畫\n算是 還他 清白",
        "extracted_keywords": [
            "drawpolygon",
            "fillpolygon",
            "drawcircle",
            "橢圓形",
            "多邊形"
        ],
        "extracted_keywords_phrases": [
            "填滿 drawpolygon",
            "drawpolygon fillpolygon",
            "fillpolygon 橢圓形",
            "填滿 drawcircle",
            "填滿 drawellipse"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283681": {
        "href": "https://ithelp.ithome.com.tw/articles/10283681",
        "title": "STM32F746入手與初體驗",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>參加這鐵人賽的用意就是為了這個開發版STM32F746,<br>\n有開發版可以拿,這麼好康的事情,怎麼可以不參加呢?<br>\n開賽前統計報名人數,初期統計參加人數<br>\n到最後變成統計完賽人數</p>\n<p>好不容易撐完了30天<br>\n發現完賽的人沒那麼多,這塊板子鐵定到手了</p>\n<p>嗯~ 進入正題</p>\n<p>這塊板子<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806BDk930brL0.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806BDk930brL0.jpg\"><br>\n就這樣送到了</p>\n<p>光看這面就可以發現<br>\n上面有<br>\nSPDIF接頭<br>\nCAMERA<br>\nuSD<br>\n右邊兩個按鈕(一個user操作,一個reset)<br>\n右邊還有jump可以控制電源輸入(有四個可選擇)<br>\n分別是5v ext/ 5v link/ usb_fs/ usb_hs<br>\n除了在jump下方是 5v ext以外,其餘都是在下方<br>\n另外,下方還有一個ETHERNET與3.5的音源輸入與輸出<br>\n另一面則是一個塊觸控面板<img src=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806KNWOXpfLMm.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806KNWOXpfLMm.jpg\"><br>\n這是我直接上電  顯示的畫面<br>\n表示裡面已經燒CODE了<br>\n稍微玩了一下<br>\n感覺不錯<br>\n反應很快(原來M7的效能可以這麼順暢)<br>\n可以媲美我目前手機的順暢度了<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806dDjCizpHqZ.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806dDjCizpHqZ.jpg\"></p>\n<p>接下來就回到RD的部分<br>\n安裝了Driver (en.stsw-link009_v2.0.2)<br>\n也安裝了IDE(en.st-stm32cubeide_1.8.0_11526_20211126_0815_x86_64.exe_v1.8.0)<br>\n看起來IDE有在維護更新</p>\n<p>再來就開始亂搞了<br>\n他的IDE可以抓sample code來跑<br>\n那我就抓幾個來試試看<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806ZqaABXbjsF.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220115/20119806ZqaABXbjsF.jpg\"></p>\n<p>剩下的就是自己動手改寫了</p>\n<p>可是~我發現網路上面居然沒有一開始燒錄的那份demo code<br>\n我覺得那份超棒的<br>\n不知道誰可以提供那份source code讓我來學習學習<br>\n難道要直接找Arm的窗口索取?<br>\n還是私下找Odin問問呢?<br>\nJack會有嗎?<br>\n那份source code 有觸控,有音效,有檔案讀寫,還有效能的抓取<br>\n甚至有畫圖<br>\n能去解讀這些地方的話,對這塊板子的使用會更加順手<br>\n以上是我初接觸這塊板子的小小心得</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Arm Platforms",
        "published_at": "2022-01-15 15:16:35",
        "author_href": "https://ithelp.ithome.com.tw/users/20119806/ironman",
        "author_name": "Arm的嫩菜",
        "series_href": "https://ithelp.ithome.com.tw/users/20119806/ironman/4549",
        "series_name": "Arm 的初體驗",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>參加這鐵人賽的用意就是為了這個開發版STM32F746,<br/>\n有開發版可以拿,這麼好康的事情,怎麼可以不參加呢?<br/>\n開賽前統計報名人數,初期統計參加人數<br/>\n到最後變成統計完賽人數</p>\n<p>好不容易撐完了30天<br/>\n發現完賽的人沒那麼多,這塊板子鐵定到手了</p>\n<p>嗯~ 進入正題</p>\n<p>這塊板子<br/>\n<br/>\n就這樣送到了</p>\n<p>光看這面就可以發現<br/>\n上面有<br/>\nSPDIF接頭<br/>\nCAMERA<br/>\nuSD<br/>\n右邊兩個按鈕(一個user操作,一個reset)<br/>\n右邊還有jump可以控制電源輸入(有四個可選擇)<br/>\n分別是5v ext/ 5v link/ usb_fs/ usb_hs<br/>\n除了在jump下方是 5v ext以外,其餘都是在下方<br/>\n另外,下方還有一個ETHERNET與3.5的音源輸入與輸出<br/>\n另一面則是一個塊觸控面板<br/>\n這是我直接上電  顯示的畫面<br/>\n表示裡面已經燒CODE了<br/>\n稍微玩了一下<br/>\n感覺不錯<br/>\n反應很快(原來M7的效能可以這麼順暢)<br/>\n可以媲美我目前手機的順暢度了<br/>\n</p>\n<p>接下來就回到RD的部分<br/>\n安裝了Driver (en.stsw-link009_v2.0.2)<br/>\n也安裝了IDE(en.st-stm32cubeide_1.8.0_11526_20211126_0815_x86_64.exe_v1.8.0)<br/>\n看起來IDE有在維護更新</p>\n<p>再來就開始亂搞了<br/>\n他的IDE可以抓sample code來跑<br/>\n那我就抓幾個來試試看<br/>\n</p>\n<p>剩下的就是自己動手改寫了</p>\n<p>可是~我發現網路上面居然沒有一開始燒錄的那份demo code<br/>\n我覺得那份超棒的<br/>\n不知道誰可以提供那份source code讓我來學習學習<br/>\n難道要直接找Arm的窗口索取?<br/>\n還是私下找Odin問問呢?<br/>\nJack會有嗎?<br/>\n那份source code 有觸控,有音效,有檔案讀寫,還有效能的抓取<br/>\n甚至有畫圖<br/>\n能去解讀這些地方的話,對這塊板子的使用會更加順手<br/>\n以上是我初接觸這塊板子的小小心得</p>\n<br/>\n</div>",
        "content_text": "參加這鐵人賽的用意就是為了這個開發版STM32F746,\n有開發版可以拿,這麼好康的事情,怎麼可以不參加呢?\n開賽前統計報名人數,初期統計參加人數\n到最後變成統計完賽人數\n好不容易撐完了30天\n發現完賽的人沒那麼多,這塊板子鐵定到手了\n嗯~ 進入正題\n這塊板子\n\n就這樣送到了\n光看這面就可以發現\n上面有\nSPDIF接頭\nCAMERA\nuSD\n右邊兩個按鈕(一個user操作,一個reset)\n右邊還有jump可以控制電源輸入(有四個可選擇)\n分別是5v ext/ 5v link/ usb_fs/ usb_hs\n除了在jump下方是 5v ext以外,其餘都是在下方\n另外,下方還有一個ETHERNET與3.5的音源輸入與輸出\n另一面則是一個塊觸控面板\n這是我直接上電  顯示的畫面\n表示裡面已經燒CODE了\n稍微玩了一下\n感覺不錯\n反應很快(原來M7的效能可以這麼順暢)\n可以媲美我目前手機的順暢度了\n\n接下來就回到RD的部分\n安裝了Driver (en.stsw-link009_v2.0.2)\n也安裝了IDE(en.st-stm32cubeide_1.8.0_11526_20211126_0815_x86_64.exe_v1.8.0)\n看起來IDE有在維護更新\n再來就開始亂搞了\n他的IDE可以抓sample code來跑\n那我就抓幾個來試試看\n\n剩下的就是自己動手改寫了\n可是~我發現網路上面居然沒有一開始燒錄的那份demo code\n我覺得那份超棒的\n不知道誰可以提供那份source code讓我來學習學習\n難道要直接找Arm的窗口索取?\n還是私下找Odin問問呢?\nJack會有嗎?\n那份source code 有觸控,有音效,有檔案讀寫,還有效能的抓取\n甚至有畫圖\n能去解讀這些地方的話,對這塊板子的使用會更加順手\n以上是我初接觸這塊板子的小小心得",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "參加 這 鐵人 賽 的 用意 就是 為 了 這個 開發 版 STM32F746 ,\n有 開發 版 可以 拿 , 這麼 好康 的 事情 , 怎麼 可以 不 參加 呢 ?\n開賽 前 統計 報名 人數 , 初期 統計 參加 人數\n到 最後 變成 統計 完賽 人數\n好不容易 撐 完 了 30 天\n發現 完賽 的 人 沒 那麼 多 , 這塊 板子 鐵定 到手 了\n嗯 ~\n進入 正題\n這塊 板子\n就 這樣 送到 了\n光看 這面 就 可以 發現\n上面 有\nSPDIF 接頭\nCAMERA\nuSD\n右邊 兩個 按鈕 ( 一個 user 操作 , 一個 reset )\n右邊 還有 jump 可以 控制 電源 輸入 ( 有 四個 可 選擇 )\n分別 是 5v\next /\n5v\nlink /\nusb _ fs /\nusb _ hs\n除了 在 jump 下方 是\n5v\next 以外 , 其餘 都 是 在 下方\n另外 , 下方 還有 一個 ETHERNET 與 3.5 的 音源 輸入 與 輸出\n另一面 則是 一個 塊 觸控 面板\n這是 我 直接 上電\n顯示 的 畫面\n表示 裡面 已經 燒 CODE 了\n稍微 玩 了 一下\n感覺 不錯\n反應 很快 ( 原來 M7 的 效能 可以 這麼 順暢 )\n可以 媲美 我 目前 手機 的 順暢 度 了\n接下來 就 回到 RD 的 部分\n安裝 了 Driver\n( en . stsw - link009 _ v2.0 . 2 )\n也 安裝 了 IDE ( en . st - stm32cubeide _ 1.8 . 0 _ 11526 _ 20211126 _ 0815 _ x86 _ 64 . exe _ v1.8 . 0 )\n看起來 IDE 有 在 維護 更新\n再來 就 開始 亂搞 了\n他 的 IDE 可以 抓 sample\ncode 來 跑\n那 我 就 抓 幾個 來 試試看\n剩下 的 就是 自己 動手 改寫 了\n可是 ~ 我 發現 網路 上面 居然 沒有 一 開始 燒錄 的 那份 demo\ncode\n我 覺得 那份 超棒 的\n不 知道 誰 可以 提供 那份 source\ncode 讓 我 來 學習 學習\n難道 要 直接 找 Arm 的 窗口 索取 ?\n還是 私下 找 Odin 問問 呢 ?\nJack 會 有 嗎 ?\n那份 source\ncode\n有 觸控 , 有 音效 , 有 檔案 讀寫 , 還有 效能 的 抓取\n甚至 有 畫圖\n能 去 解讀 這些 地方 的話 , 對 這塊 板子 的 使用 會 更加 順手\n以上 是 我 初 接觸 這塊 板子 的 小小 心得",
        "word_seg_processed_content_text": "參加 鐵人 賽 用意 開發 版 stm32f746\n開發 版 好康 事情 參加\n開賽 前 統計 報名 人數 初期 統計 參加 人數\n統計 完賽 人數\n好不容易 撐 完 30 天\n發現 完賽 沒 這塊 板子 鐵定 到手\n\n正題\n這塊 板子\n送到\n光看 這面 發現\n\nspdif 接頭\ncamera\nusd\n右邊 兩個 按鈕 user 操作 reset\n右邊 jump 控制 電源 輸入 四個 選擇\n5v\next\n5v\nlink\nusb fs\nusb hs\njump 下方\n5v\next 下方\n下方 ethernet 3.5 音源 輸入 輸出\n另一面 則是 塊 觸控 面板\n這是 上電\n顯示 畫面\n燒 code\n稍微 玩\n感覺 不錯\n很快 m7 效能 順暢\n媲美 手機 順暢 度\n接下來 回到 rd\n安裝 driver\nen stsw link009 v2.0 2\n安裝 ide en st stm32cubeide 1.8 0 11526 20211126 0815 x86 64 exe v1.8 0\n看起來 ide 維護 更新\n再來 亂搞\nide 抓 sample\ncode 跑\n抓 幾個 試試看\n剩下 動手 改寫\n發現 網路 居然 燒錄 那份 demo\ncode\n那份 超棒\n提供 那份 source\ncode 學習 學習\n難道 找 arm 窗口 索取\n私下 找 odin 問問\njack 會\n那份 source\ncode\n觸控 音效 檔案 讀寫 效能 抓取\n畫圖\n解讀 地方 這塊 板子 會 順手\n初 接觸 這塊 板子 小小 心得",
        "extracted_keywords": [
            "開賽",
            "完賽",
            "板子",
            "報名",
            "效能"
        ],
        "extracted_keywords_phrases": [
            "完賽 人數",
            "開賽 統計",
            "參加 開賽",
            "統計 完賽",
            "發現 完賽"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283664": {
        "href": "https://ithelp.ithome.com.tw/articles/10283664",
        "title": "[CSS] Flex/Grid Layout Modules, part 15",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>燙傷了手停了幾天，不過差不多 15 天好像就交代完所有的東西了。剩下的大部分是比較冷門，甚至是 Grid Layout Module Level 2 的事情，雖然支援度還有待商榷，不過還是多少可以講一點。</p>\n<p>手是好了點，倒不用太擔心。</p>\n<hr>\n<h2>Grid 能與不能</h2>\n<p>如果很有耐心的看到這裡，我就假設大家都已經知道 Grid Layout Module 的基本操作方式。那麼，我們就可以來看看 Grid 到底在哪些情況下，能做到哪些事情，不能做到哪些事情。</p>\n<p>首先，可以做得到的地方很多，我們就單討論 <strong>做不到</strong> 的地方比較快，</p>\n<ul>\n<li>非矩型區塊</li>\n<li>非矩型區塊</li>\n<li>非矩型區塊</li>\n</ul>\n<p>是，基本上你想要用 Grid 來實作各種 Layout 不會有太大問題，就是除了 <em>非矩型區塊</em> 以外的設計，基本上都能用 Grid 來製作。但是，還是得強調一下，如同 <code>&lt;div&gt;</code> 盛行的年代，不是什麼東西都用 Grid 來排，這樣不會比較潮。</p>\n<p>另外一些 <em>比較不能做的</em> 部分也是有，但個人覺得那是屬於比較例外（或是說 <em>意外</em>）的部分，總結前面那些章節來說，那些例外且需要注意的地方有，</p>\n<ul>\n<li>無限寬度（高度）物件 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-6/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 6</a>, <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-11/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 11</a>\n</li>\n<li>隱性格線在瀏覽器的 Bug <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-10/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 10</a>\n</li>\n<li>間隔尺寸無法消滅 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-10/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 10</a>\n</li>\n<li>零尺寸網格軌道 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-12/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 12</a>\n</li>\n<li>\n<code>fr</code> 的演算規則 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-7/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 7</a>\n</li>\n<li>\n<code>fit-content()</code> 的演算規則 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-9/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 9</a>\n</li>\n<li>\n<code>minmax()</code> 的演算規則 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-9/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 9</a>\n</li>\n</ul>\n<p>基本上這些都是你在製作格線系統上必須留意的地方，大方向雖然是矩型區塊，但這些小地方還是有機會讓你的 Layout 發生奇怪的事情，然後會讓你覺得莫名其妙的地方。具體的例子我就不贅述了，前述的章節多少都有提到。</p>\n<p>其中最讓人覺得麻煩的是瀏覽器實作的部分，雖然說 Grid 已經這麼多年了，但瀏覽器對於網格實作與渲染方式還是略有差異（雖然目前主流瀏覽器對於 Grid 渲染已經不會有太多例外）。這也是為何 Microsoft Edge 在 Chromium 協助重寫了一個新的渲染引擎，</p>\n<blockquote>\n<p><a href=\"https://blogs.windows.com/msedgedev/2021/08/10/compat2021-css-grid-gridng/\" target=\"_blank\" rel=\"noreferrer noopener\">Compat2021: Improving CSS Grid compatibility with GridNG</a></p>\n</blockquote>\n<p>然後他說 Issue 要回報給 Chromium（笑），不知道哪一天會回到 Chrome 身上？目前看起來 Edge 93 之後應該會用上新的 GridNG，但實際上查詢 Microsoft 那邊的 <a href=\"https://docs.microsoft.com/en-us/deployedge/microsoft-edge-relnote-stable-channel\" target=\"_blank\" rel=\"noreferrer noopener\">Release Notes</a> 也沒有特別提到這件事情。但就是期待，<del>畢竟對於 Grid Layout Level 2 有相對好的支援的話，也是樂見其成。</del></p>\n<hr>\n<h2>謹慎設定你的網格軌道</h2>\n<p>其實你會發現我幾乎每一篇都會講到尺寸的事情，你應該會發現，無論你是否使用固定尺寸的網格容器，或是彈性尺寸的網格容器，只要我們在 <strong>網格軌道設定稍有不慎</strong>，那麼這個 <strong>網格容器的尺寸基本上形同虛設</strong>。</p>\n<p>換句話說，以下這些都會讓你的網格軌道爆掉，</p>\n<ul>\n<li>網格單元指定超出軌道數量（任何方向都是）。</li>\n<li>跨網格單元超出軌道數量（任何方向都是）。</li>\n<li>網格單元使用命名網格，但不存在。</li>\n<li>隱性軌道尺寸總和大於網格容器。</li>\n<li>\n<code>grid-template</code> 寫錯。</li>\n</ul>\n<p>嗯，不要懷疑，最後一點是認真的。</p>\n<pre><code>fieldset {\n    display: grid;\n    grid-temlate: \"foo boo .\" auto / 25% 1fr 50%;\n}\n</code></pre>\n<p>以上是 <strong>合法</strong> 的寫法，但還是得想清楚，明確的知道自己在做什麼再這樣寫。不然其實 <em>複製，貼上，不會改</em> 的狀況應該也是不少，俗語好像叫做知其然而不知起所以然？</p>\n<hr>\n<h2>隱性格線在瀏覽器渲染的設定雷</h2>\n<p>不知道你們有沒有發現我在 <a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-8/\" target=\"_blank\" rel=\"noreferrer noopener\">Part 8</a> 提及隱性格線時，並沒有特別著墨在軌道格線的數字上。</p>\n<blockquote>\n<p>因為有雷啊（燦笑。</p>\n</blockquote>\n<p>上面提到了讓網格系統爆掉的事情，除非你是故意的，或者你想善用隱性格線來幫你做些什麼事情，那麼，你就必須留意關於隱性格線軌道的數字問題。我舉個實際的例子，然後將渲染結果貼上來給你們看看，</p>\n<pre><code>.grid-container {\n  display: grid;\n  grid-template: auto / repeat(3, 1fr);\n  \n  grid-auto-rows: 150px;\n  grid-auto-columns: 50px;\n  \n  gap: 10px;\n}\n\n.grid-item:nth-of-child(1) {\n  grid-column: span 4;\n  grid-row: 2 / 3;\n}\n\n.grid-item:nth-of-child(2) {\n  grid-column: 3 / 9;\n  grid-row: 3 / 4;\n}\n\n.grid-item:nth-of-child(3) {\n  grid-column: -1 / -3;\n  grid-row: 4 / 5;\n}\n</code></pre>\n<p>先不管這個設定是否 <em>合理</em> ，我們來看看渲染結果，我測試的瀏覽器有：</p>\n<ol>\n<li>Google Chrome 97.0.4692.71</li>\n<li>Firefox 96.0</li>\n<li>Microsoft Edge 97.0.1072.55</li>\n<li>Safari 15.1 (17612.2.9.1.20)</li>\n</ol>\n<p>基本上上述結果畫面都相同，我就放 Chrome 跟 Safari 的上來讓你們看看結果，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433BqQ4SAubG4.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433BqQ4SAubG4.png\"></p>\n<p>雖然 Safari <del>有 ModernIE 的美名</del>，但這次還算是蠻合群的，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433nXLDzMRCJe.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433nXLDzMRCJe.png\"></p>\n<p>問題應該很顯而易見了，我為了將差異作的比較明顯，所以特意指定了 <code>grid-auto-column</code> 與 <code>grid-auto-row</code> 的數值，然後將 <code>gap</code> 設定為 <code>10px</code> 讓大家可以比較明顯的看出狀況。</p>\n<p>首先先列舉一下，</p>\n<ol>\n<li>\n<code>auto</code> 因為尺寸演算的關係，如果沒有被使用到，尺寸為 <code>0</code>。</li>\n<li>因為 1. 的關係，這邊產生一個 <code>gap</code> 是因為第二條線的關係。</li>\n<li>隱性網格並不列入 <strong>負數</strong> 的網格計算內。</li>\n<li>因為 3. 的關係，所以行方向只有 <code>-1</code>, <code>-2</code>，列方向只有 <code>-1</code> ~ <code>-4</code>。</li>\n</ol>\n<p>上述的狀況如果換個方向也會成立，所以不用太失望，該會怪怪的地方不會因為你把 <code>row</code> 轉向 <code>column</code> 他就會自動變好，不會。</p>\n<p>再者，由於 <code>gap</code> 不會消滅，也不會合併，所以，當我們取消了 <code>gap</code>，也把 <code>grid-auto-column</code> 與 <code>grid-auto-row</code> 的數值取消，那畫出來的畫面你可能不覺得哪裡有毛病。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433oYcJzt8Cur.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220114/20001433oYcJzt8Cur.png\"></p>\n<p>所以說，如果你沒有打算好好規劃 <code>grid-template</code> 或 <code>grid-template-area</code> 的話，請注意隱性格線所帶來的問題。</p>\n<hr>\n<h2>小結</h2>\n<p>以目前主流瀏覽器來看，對於 Grid 的支援度已經相當好，各家渲染出來的狀況也不會有什麼太奇怪的落差。在主流市場上，其實多數的 CSS Framework 都已經有在使用，只是真的在意那些 Framework 到底是用 Flexbox 還是 Grid 的人應該不多，吧？</p>\n<p>下一章節會聊一下 Media Query 跟 Grid 的演算機制，下回見～</p>\n<hr>\n<p>目錄與小節：<br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10260879/\" target=\"_blank\" rel=\"noreferrer noopener\">[CSS] Flex/Grid Layout Modules, part 1</a></p>\n<hr>\n<p>部落格同步放送：<br>\n<a href=\"https://blog.hinablue.me/css-flex-grid-layout-modules-part-15/\" target=\"_blank\" rel=\"noreferrer noopener\">[CSS] Flex/Grid Layout Modules, part 15</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,hina,css,grid",
        "genre": "Modern Web",
        "published_at": "2022-01-14 01:02:47",
        "author_href": "https://ithelp.ithome.com.tw/users/20001433/ironman",
        "author_name": "閃光洽",
        "series_href": "https://ithelp.ithome.com.tw/users/20001433/ironman/3944",
        "series_name": "CSS Flex/Grid Layout Modules",
        "series_num": "15",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>燙傷了手停了幾天，不過差不多 15 天好像就交代完所有的東西了。剩下的大部分是比較冷門，甚至是 Grid Layout Module Level 2 的事情，雖然支援度還有待商榷，不過還是多少可以講一點。</p>\n<p>手是好了點，倒不用太擔心。</p>\n<hr/>\n<h2>Grid 能與不能</h2>\n<p>如果很有耐心的看到這裡，我就假設大家都已經知道 Grid Layout Module 的基本操作方式。那麼，我們就可以來看看 Grid 到底在哪些情況下，能做到哪些事情，不能做到哪些事情。</p>\n<p>首先，可以做得到的地方很多，我們就單討論 <strong>做不到</strong> 的地方比較快，</p>\n<ul>\n<li>非矩型區塊</li>\n<li>非矩型區塊</li>\n<li>非矩型區塊</li>\n</ul>\n<p>是，基本上你想要用 Grid 來實作各種 Layout 不會有太大問題，就是除了 <em>非矩型區塊</em> 以外的設計，基本上都能用 Grid 來製作。但是，還是得強調一下，如同 <code>&lt;div&gt;</code> 盛行的年代，不是什麼東西都用 Grid 來排，這樣不會比較潮。</p>\n<p>另外一些 <em>比較不能做的</em> 部分也是有，但個人覺得那是屬於比較例外（或是說 <em>意外</em>）的部分，總結前面那些章節來說，那些例外且需要注意的地方有，</p>\n<ul>\n<li>無限寬度（高度）物件 , \n</li>\n<li>隱性格線在瀏覽器的 Bug \n</li>\n<li>間隔尺寸無法消滅 \n</li>\n<li>零尺寸網格軌道 \n</li>\n<li>\n<code>fr</code> 的演算規則 \n</li>\n<li>\n<code>fit-content()</code> 的演算規則 \n</li>\n<li>\n<code>minmax()</code> 的演算規則 \n</li>\n</ul>\n<p>基本上這些都是你在製作格線系統上必須留意的地方，大方向雖然是矩型區塊，但這些小地方還是有機會讓你的 Layout 發生奇怪的事情，然後會讓你覺得莫名其妙的地方。具體的例子我就不贅述了，前述的章節多少都有提到。</p>\n<p>其中最讓人覺得麻煩的是瀏覽器實作的部分，雖然說 Grid 已經這麼多年了，但瀏覽器對於網格實作與渲染方式還是略有差異（雖然目前主流瀏覽器對於 Grid 渲染已經不會有太多例外）。這也是為何 Microsoft Edge 在 Chromium 協助重寫了一個新的渲染引擎，</p>\n<blockquote>\n<p></p>\n</blockquote>\n<p>然後他說 Issue 要回報給 Chromium（笑），不知道哪一天會回到 Chrome 身上？目前看起來 Edge 93 之後應該會用上新的 GridNG，但實際上查詢 Microsoft 那邊的  也沒有特別提到這件事情。但就是期待，<del>畢竟對於 Grid Layout Level 2 有相對好的支援的話，也是樂見其成。</del></p>\n<hr/>\n<h2>謹慎設定你的網格軌道</h2>\n<p>其實你會發現我幾乎每一篇都會講到尺寸的事情，你應該會發現，無論你是否使用固定尺寸的網格容器，或是彈性尺寸的網格容器，只要我們在 <strong>網格軌道設定稍有不慎</strong>，那麼這個 <strong>網格容器的尺寸基本上形同虛設</strong>。</p>\n<p>換句話說，以下這些都會讓你的網格軌道爆掉，</p>\n<ul>\n<li>網格單元指定超出軌道數量（任何方向都是）。</li>\n<li>跨網格單元超出軌道數量（任何方向都是）。</li>\n<li>網格單元使用命名網格，但不存在。</li>\n<li>隱性軌道尺寸總和大於網格容器。</li>\n<li>\n<code>grid-template</code> 寫錯。</li>\n</ul>\n<p>嗯，不要懷疑，最後一點是認真的。</p>\n<pre></pre>\n<p>以上是 <strong>合法</strong> 的寫法，但還是得想清楚，明確的知道自己在做什麼再這樣寫。不然其實 <em>複製，貼上，不會改</em> 的狀況應該也是不少，俗語好像叫做知其然而不知起所以然？</p>\n<hr/>\n<h2>隱性格線在瀏覽器渲染的設定雷</h2>\n<p>不知道你們有沒有發現我在  提及隱性格線時，並沒有特別著墨在軌道格線的數字上。</p>\n<blockquote>\n<p>因為有雷啊（燦笑。</p>\n</blockquote>\n<p>上面提到了讓網格系統爆掉的事情，除非你是故意的，或者你想善用隱性格線來幫你做些什麼事情，那麼，你就必須留意關於隱性格線軌道的數字問題。我舉個實際的例子，然後將渲染結果貼上來給你們看看，</p>\n<pre></pre>\n<p>先不管這個設定是否 <em>合理</em> ，我們來看看渲染結果，我測試的瀏覽器有：</p>\n<ol>\n<li>Google Chrome 97.0.4692.71</li>\n<li>Firefox 96.0</li>\n<li>Microsoft Edge 97.0.1072.55</li>\n<li>Safari 15.1 (17612.2.9.1.20)</li>\n</ol>\n<p>基本上上述結果畫面都相同，我就放 Chrome 跟 Safari 的上來讓你們看看結果，</p>\n<p></p>\n<p>雖然 Safari <del>有 ModernIE 的美名</del>，但這次還算是蠻合群的，</p>\n<p></p>\n<p>問題應該很顯而易見了，我為了將差異作的比較明顯，所以特意指定了 <code>grid-auto-column</code> 與 <code>grid-auto-row</code> 的數值，然後將 <code>gap</code> 設定為 <code>10px</code> 讓大家可以比較明顯的看出狀況。</p>\n<p>首先先列舉一下，</p>\n<ol>\n<li>\n<code>auto</code> 因為尺寸演算的關係，如果沒有被使用到，尺寸為 <code>0</code>。</li>\n<li>因為 1. 的關係，這邊產生一個 <code>gap</code> 是因為第二條線的關係。</li>\n<li>隱性網格並不列入 <strong>負數</strong> 的網格計算內。</li>\n<li>因為 3. 的關係，所以行方向只有 <code>-1</code>, <code>-2</code>，列方向只有 <code>-1</code> ~ <code>-4</code>。</li>\n</ol>\n<p>上述的狀況如果換個方向也會成立，所以不用太失望，該會怪怪的地方不會因為你把 <code>row</code> 轉向 <code>column</code> 他就會自動變好，不會。</p>\n<p>再者，由於 <code>gap</code> 不會消滅，也不會合併，所以，當我們取消了 <code>gap</code>，也把 <code>grid-auto-column</code> 與 <code>grid-auto-row</code> 的數值取消，那畫出來的畫面你可能不覺得哪裡有毛病。</p>\n<p></p>\n<p>所以說，如果你沒有打算好好規劃 <code>grid-template</code> 或 <code>grid-template-area</code> 的話，請注意隱性格線所帶來的問題。</p>\n<hr/>\n<h2>小結</h2>\n<p>以目前主流瀏覽器來看，對於 Grid 的支援度已經相當好，各家渲染出來的狀況也不會有什麼太奇怪的落差。在主流市場上，其實多數的 CSS Framework 都已經有在使用，只是真的在意那些 Framework 到底是用 Flexbox 還是 Grid 的人應該不多，吧？</p>\n<p>下一章節會聊一下 Media Query 跟 Grid 的演算機制，下回見～</p>\n<hr/>\n<p>目錄與小節：<br/>\n</p>\n<hr/>\n<p>部落格同步放送：<br/>\n</p>\n<br/>\n</div>",
        "content_text": "燙傷了手停了幾天，不過差不多 15 天好像就交代完所有的東西了。剩下的大部分是比較冷門，甚至是 Grid Layout Module Level 2 的事情，雖然支援度還有待商榷，不過還是多少可以講一點。\n手是好了點，倒不用太擔心。\n\nGrid 能與不能\n如果很有耐心的看到這裡，我就假設大家都已經知道 Grid Layout Module 的基本操作方式。那麼，我們就可以來看看 Grid 到底在哪些情況下，能做到哪些事情，不能做到哪些事情。\n首先，可以做得到的地方很多，我們就單討論 做不到 的地方比較快，\n\n非矩型區塊\n非矩型區塊\n非矩型區塊\n\n是，基本上你想要用 Grid 來實作各種 Layout 不會有太大問題，就是除了 非矩型區塊 以外的設計，基本上都能用 Grid 來製作。但是，還是得強調一下，如同 <div> 盛行的年代，不是什麼東西都用 Grid 來排，這樣不會比較潮。\n另外一些 比較不能做的 部分也是有，但個人覺得那是屬於比較例外（或是說 意外）的部分，總結前面那些章節來說，那些例外且需要注意的地方有，\n\n無限寬度（高度）物件 , \n\n隱性格線在瀏覽器的 Bug \n\n間隔尺寸無法消滅 \n\n零尺寸網格軌道 \n\n\nfr 的演算規則 \n\n\nfit-content() 的演算規則 \n\n\nminmax() 的演算規則 \n\n\n基本上這些都是你在製作格線系統上必須留意的地方，大方向雖然是矩型區塊，但這些小地方還是有機會讓你的 Layout 發生奇怪的事情，然後會讓你覺得莫名其妙的地方。具體的例子我就不贅述了，前述的章節多少都有提到。\n其中最讓人覺得麻煩的是瀏覽器實作的部分，雖然說 Grid 已經這麼多年了，但瀏覽器對於網格實作與渲染方式還是略有差異（雖然目前主流瀏覽器對於 Grid 渲染已經不會有太多例外）。這也是為何 Microsoft Edge 在 Chromium 協助重寫了一個新的渲染引擎，\n\n\n\n然後他說 Issue 要回報給 Chromium（笑），不知道哪一天會回到 Chrome 身上？目前看起來 Edge 93 之後應該會用上新的 GridNG，但實際上查詢 Microsoft 那邊的  也沒有特別提到這件事情。但就是期待，畢竟對於 Grid Layout Level 2 有相對好的支援的話，也是樂見其成。\n\n謹慎設定你的網格軌道\n其實你會發現我幾乎每一篇都會講到尺寸的事情，你應該會發現，無論你是否使用固定尺寸的網格容器，或是彈性尺寸的網格容器，只要我們在 網格軌道設定稍有不慎，那麼這個 網格容器的尺寸基本上形同虛設。\n換句話說，以下這些都會讓你的網格軌道爆掉，\n\n網格單元指定超出軌道數量（任何方向都是）。\n跨網格單元超出軌道數量（任何方向都是）。\n網格單元使用命名網格，但不存在。\n隱性軌道尺寸總和大於網格容器。\n\ngrid-template 寫錯。\n\n嗯，不要懷疑，最後一點是認真的。\n\n以上是 合法 的寫法，但還是得想清楚，明確的知道自己在做什麼再這樣寫。不然其實 複製，貼上，不會改 的狀況應該也是不少，俗語好像叫做知其然而不知起所以然？\n\n隱性格線在瀏覽器渲染的設定雷\n不知道你們有沒有發現我在  提及隱性格線時，並沒有特別著墨在軌道格線的數字上。\n\n因為有雷啊（燦笑。\n\n上面提到了讓網格系統爆掉的事情，除非你是故意的，或者你想善用隱性格線來幫你做些什麼事情，那麼，你就必須留意關於隱性格線軌道的數字問題。我舉個實際的例子，然後將渲染結果貼上來給你們看看，\n\n先不管這個設定是否 合理 ，我們來看看渲染結果，我測試的瀏覽器有：\n\nGoogle Chrome 97.0.4692.71\nFirefox 96.0\nMicrosoft Edge 97.0.1072.55\nSafari 15.1 (17612.2.9.1.20)\n\n基本上上述結果畫面都相同，我就放 Chrome 跟 Safari 的上來讓你們看看結果，\n\n雖然 Safari 有 ModernIE 的美名，但這次還算是蠻合群的，\n\n問題應該很顯而易見了，我為了將差異作的比較明顯，所以特意指定了 grid-auto-column 與 grid-auto-row 的數值，然後將 gap 設定為 10px 讓大家可以比較明顯的看出狀況。\n首先先列舉一下，\n\n\nauto 因為尺寸演算的關係，如果沒有被使用到，尺寸為 0。\n因為 1. 的關係，這邊產生一個 gap 是因為第二條線的關係。\n隱性網格並不列入 負數 的網格計算內。\n因為 3. 的關係，所以行方向只有 -1, -2，列方向只有 -1 ~ -4。\n\n上述的狀況如果換個方向也會成立，所以不用太失望，該會怪怪的地方不會因為你把 row 轉向 column 他就會自動變好，不會。\n再者，由於 gap 不會消滅，也不會合併，所以，當我們取消了 gap，也把 grid-auto-column 與 grid-auto-row 的數值取消，那畫出來的畫面你可能不覺得哪裡有毛病。\n\n所以說，如果你沒有打算好好規劃 grid-template 或 grid-template-area 的話，請注意隱性格線所帶來的問題。\n\n小結\n以目前主流瀏覽器來看，對於 Grid 的支援度已經相當好，各家渲染出來的狀況也不會有什麼太奇怪的落差。在主流市場上，其實多數的 CSS Framework 都已經有在使用，只是真的在意那些 Framework 到底是用 Flexbox 還是 Grid 的人應該不多，吧？\n下一章節會聊一下 Media Query 跟 Grid 的演算機制，下回見～\n\n目錄與小節：\n\n\n部落格同步放送：",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "fieldset {\n    display: grid;\n    grid-temlate: \"foo boo .\" auto / 25% 1fr 50%;\n}\n"
            },
            {
                "language": "unknown",
                "content": ".grid-container {\n  display: grid;\n  grid-template: auto / repeat(3, 1fr);\n  \n  grid-auto-rows: 150px;\n  grid-auto-columns: 50px;\n  \n  gap: 10px;\n}\n\n.grid-item:nth-of-child(1) {\n  grid-column: span 4;\n  grid-row: 2 / 3;\n}\n\n.grid-item:nth-of-child(2) {\n  grid-column: 3 / 9;\n  grid-row: 3 / 4;\n}\n\n.grid-item:nth-of-child(3) {\n  grid-column: -1 / -3;\n  grid-row: 4 / 5;\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "燙傷 了 手 停 了 幾天 ， 不過 差不多\n15\n天 好像 就 交代 完 所有 的 東西 了 。 剩下 的 大部分 是 比較 冷門 ， 甚至 是\nGrid\nLayout\nModule\nLevel\n2\n的 事情 ， 雖然 支援 度 還有 待 商榷 ， 不過 還是 多少 可以 講 一點 。\n手是 好 了點 ， 倒 不用 太 擔心 。\nGrid\n能 與 不能\n如果 很 有 耐心 的 看到 這裡 ， 我 就 假設 大家 都 已經 知道\nGrid\nLayout\nModule\n的 基本操作 方式 。 那麼 ， 我們 就 可以 來看 看\nGrid\n到底 在 哪些 情況 下 ， 能 做到 哪些 事情 ， 不能 做到 哪些 事情 。\n首先 ， 可以 做 得到 的 地方 很多 ， 我們 就 單 討論\n做 不到\n的 地方 比較 快 ，\n非矩 型 區塊\n非矩 型 區塊\n非矩 型 區塊\n是 ， 基本上 你 想要 用\nGrid\n來 實作 各種\nLayout\n不會 有太大 問題 ， 就是 除了\n非矩 型 區塊\n以外 的 設計 ， 基本上 都 能 用\nGrid\n來 製作 。 但是 ， 還是 得 強調 一下 ， 如同\n< div >\n盛行 的 年代 ， 不是 什麼 東西 都 用\nGrid\n來排 ， 這樣 不會 比較 潮 。\n另外 一些\n比較 不能 做 的\n部分 也 是 有 ， 但 個人 覺得 那 是 屬於 比較 例外 （ 或是 說\n意外 ） 的 部分 ， 總結 前面 那些 章節 來說 ， 那些 例外 且 需要 注意 的 地方 有 ，\n無限 寬度 （ 高度 ） 物件\n,\n隱 性格 線 在 瀏覽器 的\nBug\n間隔 尺寸 無法 消滅\n零 尺寸 網格 軌道\nfr\n的 演算 規則\nfit - content ( )\n的 演算 規則\nminmax ( )\n的 演算 規則\n基本上 這些 都 是 你 在 製作 格線 系統 上 必須 留意 的 地方 ， 大方向 雖然 是 矩型 區塊 ， 但 這些 小 地方 還是 有 機會 讓 你 的\nLayout\n發生 奇怪 的 事情 ， 然後 會 讓 你 覺得 莫名其妙 的 地方 。 具體 的 例子 我 就 不 贅述 了 ， 前述 的 章節 多少 都 有 提到 。\n其中 最讓人 覺得 麻煩 的 是 瀏覽器 實作 的 部分 ， 雖然 說\nGrid\n已經 這麼 多年 了 ， 但 瀏覽器 對於 網格 實作 與 渲染 方式 還是 略有 差異 （ 雖然 目前 主流 瀏覽器 對於\nGrid\n渲染 已經 不會 有太多 例外 ） 。 這也 是 為何\nMicrosoft\nEdge\n在\nChromium\n協助 重寫 了 一個 新 的 渲染 引擎 ，\n然後 他 說\nIssue\n要 回報 給\nChromium （ 笑 ） ， 不 知道 哪一天 會 回到\nChrome\n身上 ？ 目前 看起來\nEdge\n93\n之後 應該 會用 上 新 的\nGridNG ， 但 實際上 查詢\nMicrosoft\n那邊 的\n也 沒有 特別 提到 這件 事情 。 但 就是 期待 ， 畢竟 對於\nGrid\nLayout\nLevel\n2\n有 相對 好 的 支援 的話 ， 也 是 樂見 其成 。\n謹慎 設定 你 的 網格 軌道\n其實 你 會 發現 我 幾乎 每 一篇 都 會 講到 尺寸 的 事情 ， 你 應該 會 發現 ， 無論 你 是否 使用 固定 尺寸 的 網格 容器 ， 或是 彈性 尺寸 的 網格 容器 ， 只要 我們 在\n網格 軌道 設定 稍有不慎 ， 那麼 這個\n網格 容器 的 尺寸 基本上 形同虛設 。\n換句話說 ， 以下 這些 都 會 讓 你 的 網格 軌道 爆掉 ，\n網格 單元 指定 超出 軌道 數量 （ 任何 方向 都 是 ） 。\n跨 網格 單元 超出 軌道 數量 （ 任何 方向 都 是 ） 。\n網格 單元 使用 命名 網格 ， 但 不 存在 。\n隱性 軌道 尺寸 總和 大於 網格 容器 。\ngrid - template\n寫錯 。\n嗯 ， 不要 懷疑 ， 最後 一點 是 認真 的 。\n以上 是\n合法\n的 寫法 ， 但 還是 得 想 清楚 ， 明確 的 知道 自己 在 做 什麼 再 這樣 寫 。 不然 其實\n複製 ， 貼 上 ， 不會 改\n的 狀況 應該 也 是 不少 ， 俗語 好像 叫做 知其然 而 不知 起 所以然 ？\n隱 性格 線 在 瀏覽器 渲染 的 設定 雷\n不 知道 你們 有沒有 發現 我 在\n提及 隱 性格 線時 ， 並 沒有 特別 著墨 在 軌道 格線 的 數字 上 。\n因為 有雷 啊 （ 燦笑 。\n上面 提到 了 讓 網格 系統 爆掉 的 事情 ， 除非 你 是 故意 的 ， 或者 你 想 善用 隱 性格 線來 幫 你 做些 什麼 事情 ， 那麼 ， 你 就 必須 留意 關於 隱 性格 線 軌道 的 數字 問題 。 我 舉個 實際 的 例子 ， 然後 將 渲染 結果 貼上來 給 你們 看看 ，\n先 不管 這個 設定 是否\n合理\n， 我們 來看 看 渲染 結果 ， 我 測試 的 瀏覽器 有 ：\nGoogle\nChrome\n97.0 . 4692.71\nFirefox\n96.0\nMicrosoft\nEdge\n97.0 . 1072.55\nSafari\n15.1\n( 17612.2 . 9.1 . 20 )\n基本上 上述 結果 畫面 都 相同 ， 我 就 放\nChrome\n跟\nSafari\n的 上來 讓 你們 看看 結果 ，\n雖然\nSafari\n有\nModernIE\n的 美名 ， 但 這次 還 算是 蠻 合群 的 ，\n問題 應該 很 顯而易見 了 ， 我為 了將 差異 作 的 比較 明顯 ， 所以 特意 指定 了\ngrid - auto - column\n與\ngrid - auto - row\n的 數值 ， 然後 將\ngap\n設定 為\n10px\n讓 大家 可以 比較 明顯 的 看出 狀況 。\n首先 先 列舉 一下 ，\nauto\n因為 尺寸 演算 的 關係 ， 如果 沒有 被 使用 到 ， 尺寸 為\n0 。\n因為\n1 .\n的 關係 ， 這邊 產生 一個\ngap\n是 因為 第二條 線 的 關係 。\n隱性 網格 並不 列入\n負數\n的 網格 計算 內 。\n因為\n3 .\n的 關係 ， 所以 行 方向 只有\n- 1 ,\n- 2 ， 列 方向 只有\n- 1\n~\n- 4 。\n上述 的 狀況 如果 換個 方向 也 會 成立 ， 所以 不用 太 失望 ， 該會 怪怪的 地方 不會 因為 你 把\nrow\n轉向\ncolumn\n他 就 會 自動 變好 ， 不會 。\n再者 ， 由於\ngap\n不會 消滅 ， 也 不會 合併 ， 所以 ， 當 我們 取消 了\ngap ， 也 把\ngrid - auto - column\n與\ngrid - auto - row\n的 數值 取消 ， 那畫 出來 的 畫面 你 可能 不 覺得 哪裡 有 毛病 。\n所以 說 ， 如果 你 沒有 打算 好好 規劃\ngrid - template\n或\ngrid - template - area\n的話 ， 請 注意 隱 性格 線 所 帶來 的 問題 。\n小結\n以 目前 主流 瀏覽器 來看 ， 對於\nGrid\n的 支援 度 已經 相當 好 ， 各家 渲染 出來 的 狀況 也 不會 有 什麼 太 奇怪 的 落差 。 在 主流 市場 上 ， 其實 多數 的\nCSS\nFramework\n都 已經 有 在 使用 ， 只是 真的 在意 那些\nFramework\n到底 是 用\nFlexbox\n還是\nGrid\n的 人 應該 不 多 ， 吧 ？\n下 一 章節 會聊 一下\nMedia\nQuery\n跟\nGrid\n的 演算 機制 ， 下 回見 ～\n目錄 與 小節 ：\n部落 格 同步 放送 ：",
        "word_seg_processed_content_text": "燙傷 手 停 幾天 差不多\n15\n天 好像 交代 完 東西 剩下 大部分 冷門\ngrid\nlayout\nmodule\nlevel\n2\n事情 支援 度 商榷 講 一點\n手是 了點 倒 不用 太 擔心\ngrid\n\n耐心 假設\ngrid\nlayout\nmodule\n基本操作 方式 來看\ngrid\n到底 情況 事情 事情\n做 地方 很多 單 討論\n做 不到\n地方 快\n非矩 型 區塊\n非矩 型 區塊\n非矩 型 區塊\n基本上 想要\ngrid\n實作\nlayout\n有太大\n非矩 型 區塊\n設計 基本上\ngrid\n製作 如同\ndiv\n盛行 年代 東西\ngrid\n來排 潮\n\n做\n例外 說\n意外 章節 來說 例外 地方\n無限 寬度 高度 物件\n\n隱 性格 線 瀏覽器\nbug\n間隔 尺寸 消滅\n零 尺寸 網格 軌道\nfr\n演算 規則\nfit content\n演算 規則\nminmax\n演算 規則\n基本上 製作 格線 系統 留意 地方 大方向 矩型 區塊 地方 機會\nlayout\n發生 奇怪 事情 會 莫名其妙 地方 例子 贅述 前述 章節 提到\n最讓人 麻煩 瀏覽器 實作 說\ngrid\n多年 瀏覽器 網格 實作 渲染 方式 略有 差異 主流 瀏覽器\ngrid\n渲染 有太多 例外 這也\nmicrosoft\nedge\n\nchromium\n協助 重寫 新 渲染 引擎\n說\nissue\n回報\nchromium 笑 哪一天 會 回到\nchrome\n身上 看起來\nedge\n93\n會用 新\ngridng 實際上 查詢\nmicrosoft\n\n特別 提到 這件 事情 期待 畢竟\ngrid\nlayout\nlevel\n2\n支援 樂見 其成\n謹慎 設定 網格 軌道\n會 發現 一篇 會 講到 尺寸 事情 會 發現 固定 尺寸 網格 容器 彈性 尺寸 網格 容器\n網格 軌道 設定 稍有不慎\n網格 容器 尺寸 基本上 形同虛設\n會 網格 軌道 爆掉\n網格 單元 指定 超出 軌道 數量 方向\n跨 網格 單元 超出 軌道 數量 方向\n網格 單元 命名 網格\n隱性 軌道 尺寸 總和 大於 網格 容器\ngrid template\n寫錯\n懷疑 一點\n\n合法\n寫法 想 做 寫\n複製 貼 改\n狀況 不少 俗語 好像 知其然 不知 所以然\n隱 性格 線 瀏覽器 渲染 設定 雷\n有沒有 發現\n提及 隱 性格 線時 特別 著墨 軌道 格線 數字\n有雷 燦笑\n提到 網格 系統 爆掉 事情 故意 想 善用 隱 性格 線來 幫 做些 事情 留意 隱 性格 線 軌道 數字 舉個 例子 渲染 貼上來\n先 設定\n\n來看 渲染 測試 瀏覽器\ngoogle\nchrome\n97.0 4692.71\nfirefox\n96.0\nmicrosoft\nedge\n97.0 1072.55\nsafari\n15.1\n17612.2 9.1 20\n基本上 畫面 放\nchrome\n\nsafari\n\n\nsafari\n\nmodernie\n美名 這次 算是 蠻 合群\n顯而易見 我為 了將 差異 作 特意 指定\ngrid auto column\n\ngrid auto row\n數值\ngap\n設定\n10px\n狀況\n先 列舉\nauto\n尺寸 演算 關係 尺寸\n0\n\n1\n關係\ngap\n第二條 線 關係\n隱性 網格 列入\n負數\n網格 計算 內\n\n3\n關係 行 方向\n1\n2 列 方向\n1\n\n4\n狀況 換個 方向 會 成立 不用 太 失望 該會 怪怪的 地方\nrow\n轉向\ncolumn\n會 自動 變好\n\ngap\n消滅 合併 取消\ngap\ngrid auto column\n\ngrid auto row\n數值 取消 那畫 畫面 毛病\n說 打算 好好 規劃\ngrid template\n\ngrid template area\n請 隱 性格 線 帶來\n小結\n主流 瀏覽器 來看\ngrid\n支援 度 各家 渲染 狀況 太 奇怪 落差 主流 市場\ncss\nframework\n真的 在意\nframework\n到底\nflexbox\n\ngrid\n\n章節 會聊\nmedia\nquery\n\ngrid\n演算 機制 回見\n目錄 小節\n部落 格 同步 放送",
        "extracted_keywords": [
            "grid",
            "gridng",
            "幾天",
            "間隔",
            "線時"
        ],
        "extracted_keywords_phrases": [
            "擔心 grid",
            "grid 多年",
            "grid 到底",
            "冷門 grid",
            "畢竟 grid"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283633": {
        "href": "https://ithelp.ithome.com.tw/articles/10283633",
        "title": ".Net Core Web Api_筆記25_api結合EFCore資料庫操作part3_產品分類資料的編輯與刪除(EF的更新寫法怎麼這麼多種!如何觀察EF產生的SQL)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>我們在<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api24apiefcorepart2api.html\" target=\"_blank\" rel=\"noreferrer noopener\">上一篇</a>的Show.html<br>\n已經完成了資料查詢呈現<br>\n這裡要多出操作(比方像是編輯、刪除...)<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Nk2k53yywS.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Nk2k53yywS.png\"></p>\n<p>在Show.html<br>\n加上對應client端 jQuery存取呼叫程式<br>\n以及擴充操作的相關連結</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body style=\"margin:20px;\"&gt;\n    &lt;table id=\"tbProductCategory\" class=\"table table-bordered\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td nowrap&gt;產品類別ID&lt;/td&gt;\n                &lt;td nowrap&gt;產品類別名稱&lt;/td&gt;\n                &lt;td nowrap&gt;操作&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            var tbody = $('#tbProductCategory tbody');\n            $.ajax({\n                type: 'get',\n                url: '/api/pcategory/show',\n                dataType: 'json',\n                success: function (result) {\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;&lt;td&gt;\" + value.cId + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.cTitle + \"&lt;/td&gt;\" +\n                            \"&lt;td nowrap&gt;\" +\n                            \"&lt;a href='Edit.html?id=\" + value.cId + \"'&gt;編輯&lt;/a&gt; \" +\n                            \"&lt;a href='javascript:Del(\\\"\" + value.cId + \"\\\")'&gt;刪除&lt;/a&gt;\" + //傳 GUID 當參數 要用雙引號包覆 跳脫字元(\\\")\n                            \"&lt;/td&gt;&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbProductCategory').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/pcategory/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>編輯部分傳入對應產品類別ID並進行頁面跳轉與後續資料回填<br>\n刪除則針對特定產品類別ID直接呼叫HTTP Delete即可</p>\n<p>擴充編輯用的 Action Method</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task&lt;ActionResult&lt;int&gt;&gt; AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task&lt;ActionResult&lt;List&lt;PCategory&gt;&gt;&gt; ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n        [HttpGet(\"GetById\")]\n        public async Task&lt;ActionResult&lt;PCategory&gt;&gt; GetSpecificCategoryById(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n\n            var category = await _dbContext.PCategories.AsNoTracking()\n                .FirstOrDefaultAsync(item=&gt;item.CId==new Guid(id));\n            return category;\n        }\n\n        [HttpPut(\"Update\")]\n        public async Task&lt;ActionResult&lt;int&gt;&gt; UpdateCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            _dbContext.Entry(pCategory).State = EntityState.Modified;\n            var count = await _dbContext.SaveChangesAsync();\n            return count;\n        }\n    }\n}\n</code></pre>\n<p>Edite.html對應client端 jQuery存取呼叫程式</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;&lt;/title&gt;    \n    &lt;link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #0094ff;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;產品分類編輯&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-4\"&gt;\n                &lt;label&gt;產品類別&lt;/label&gt;\n                &lt;input type=\"text\" class=\"form-control\" id=\"CTitle\"&gt;\n            &lt;/div&gt;            \n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-2 col-md-10\"&gt;\n                    &lt;button type=\"submit\" id=\"btnSubmit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"bg-danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        //var query = window.location.search;\n        //console.log(\"window.location.search:\" + query);\n        //window.location.search:?id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n        //var query0 = window.location.search.substring(0);\n        //console.log(\"window.location.search.substring(0):\" + query0);\n        //window.location.search.substring(0):?id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n        //var query1 = window.location.search.substring(1);\n        //console.log(\"window.location.search.substring(1):\" + query1);\n        //window.location.search.substring(1):id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&amp;\");\n            for (var idxVar = 0; idxVar &lt; vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: \"get\",\n                url: \"/api/PCategory/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#CTitle\").val(result.cTitle);\n                }\n            });\n        });\n\n        $('#btnSubmit').click(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: 'put',\n                url: \"/api/PCategory/update\",\n                dataType: \"text\",\n                data: JSON.stringify({\n                    CId: id,\n                    CTitle: $(\"#CTitle\").val()\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功更新');\n                    }\n                }\n            });\n        });\n\n\n    &lt;/script&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>分別為<br>\nGET類型的<br>\nGetSpecificCategoryById<br>\n用來幫我們把資料查詢用來後續回填至畫面上</p>\n<p>和PUT類型的<br>\nUpdateCategory<br>\n用來呼叫後端進行編輯的更新</p>\n<p>運行效果<br>\n畫面By CategoryID 回填<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452aaLDNOIk7z.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452aaLDNOIk7z.png\"></p>\n<p>更改之前<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074524ShEfJqdMx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074524ShEfJqdMx.png\"></p>\n<p>執行編輯更新後<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Wo6fWvngMU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Wo6fWvngMU.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452eS6rgQAeMa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452eS6rgQAeMa.png\"></p>\n<p>擴充刪除用的 Action Method</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task&lt;ActionResult&lt;int&gt;&gt; AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task&lt;ActionResult&lt;List&lt;PCategory&gt;&gt;&gt; ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n        [HttpGet(\"GetById\")]\n        public async Task&lt;ActionResult&lt;PCategory&gt;&gt; GetSpecificCategoryById(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n\n            var category = await _dbContext.PCategories.AsNoTracking()\n                .FirstOrDefaultAsync(item=&gt;item.CId==new Guid(id));\n            return category;\n        }\n\n        [HttpPut(\"Update\")]\n        public async Task&lt;ActionResult&lt;int&gt;&gt; UpdateCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            _dbContext.Entry(pCategory).State = EntityState.Modified;\n            var count = await _dbContext.SaveChangesAsync();\n            return count;\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult&lt;int&gt; DeleteCategory(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n            var category = _dbContext.PCategories.Find(new Guid(id));\n            if (category == null)\n                return NotFound();\n            _dbContext.PCategories.Remove(category);\n            return _dbContext.SaveChanges();\n        }\n    }\n}\n</code></pre>\n<p>運行效果<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452GU9Dg5SYT9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452GU9Dg5SYT9.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452ofmUqygJcA.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452ofmUqygJcA.png\"></p>\n<p>刪除這邊的API存取我們採用同步的方式確保不會因為entity取到null造成null例外錯誤</p>\n<p>在此會發現Entity Framework的更新寫法怎麼跟之前在<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/08/entityframework-core2codefirstmvc.html\" target=\"_blank\" rel=\"noreferrer noopener\">EntityFramework Core筆記(2)_CodeFirst配置_搭配MVC應用的開發_編輯、刪除</a><br>\n所寫的方式不一樣<br>\n事實上在EntityFramework中有很多種更新的寫法</p>\n<p>在之前文章的.net core MVC這邊的更新<br>\n我們採用的是直接</p>\n<p>context.Update(實體);<br>\ncontext.SaveChanges();//或 context.SaveChangesAsync();</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074522xPPkWWb2b.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074522xPPkWWb2b.png\"></p>\n<p>而在.net core WebAPI這邊<br>\n我們採用的是</p>\n<p>context.Entry(實體).State = EntityState.Modified;<br>\ncontext.SaveChanges();//或 context.SaveChangesAsync();<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452SyMqEL3bWY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452SyMqEL3bWY.png\"></p>\n<p>若想觀察 EF Core 產生的 SQL 指令<br>\n我們可以到Startup.cs<br>\n引入using Microsoft.Extensions.Logging;<br>\n並調整ConfigureServices</p>\n<pre><code>// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext&lt;MyTestDbContext&gt;(options =&gt;\n        options.UseSqlServer(Configuration.GetConnectionString(\"MyTestDbConn\"))\n               .UseLoggerFactory(LoggerFactory.Create(builder =&gt; builder.AddConsole()))                       \n    );\n    services.AddControllersWithViews();\n}\n</code></pre>\n<p>再次執行編輯就可以觀察的到當執行SaveChange時候EF 底層實際執行的 SQL script<br>\n在輸出視窗中記得調整為你的.net core應用才看的到<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452o4t51lU1fH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452o4t51lU1fH.png\"></p>\n<p>預設是沒有帶實際參數值的版本<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452FxugHfq0Xm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452FxugHfq0Xm.png\"></p>\n<p>這裡只要啟動敏感資料log機制即可</p>\n<pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext&lt;MyTestDbContext&gt;(options =&gt;\n        options.UseSqlServer(Configuration.GetConnectionString(\"MyTestDbConn\"))\n               .UseLoggerFactory(LoggerFactory.Create(builder =&gt; builder.AddConsole()))\n               .EnableSensitiveDataLogging()\n    );\n    services.AddControllersWithViews();\n}\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452wzAlLOfjVF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452wzAlLOfjVF.png\"></p>\n<p>在MVC這裡用的<br>\ncontext.Update(實體);<br>\n對應SQL語句</p>\n<pre><code>Executed DbCommand (4ms) [Parameters=[@p3='abffc939-0413-4e71-9565-7c48de43f8db', @p0='33', @p1='Ted' (Size = 4000), @p2='True'], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      UPDATE [Students] SET [Age] = @p0, [Name] = @p1, [Sex] = @p2\n      WHERE [Id] = @p3;\n      SELECT @@ROWCOUNT;\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452lknqt1ZHcY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452lknqt1ZHcY.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452z5ugcByExv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452z5ugcByExv.png\"></p>\n<p>在WebAPI這裡用的<br>\ncontext.Entry(實體).State = EntityState.Modified;<br>\n對應SQL語句</p>\n<pre><code>Executed DbCommand (11ms) [Parameters=[@p1='f46104c4-7672-4db6-9d75-a1f038a16216', @p0='平板電腦' (Size = 100)], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      UPDATE [PCategories] SET [CTitle] = @p0\n      WHERE [CId] = @p1;\n      SELECT @@ROWCOUNT;\n</code></pre>\n<p>在執行到state變更的該句之前事實上<br>\n都還是處於Detached的狀態<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452JeHSQ0GDSL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452JeHSQ0GDSL.png\"></p>\n<p>直到被標記為Modified後<br>\n才會被變更追蹤</p>\n<p>EF中EntityState共分為如下幾種</p>\n<pre><code>namespace Microsoft.EntityFrameworkCore\n{\n    //\n    // 摘要:\n    //     The state in which an entity is being tracked by a context.\n    public enum EntityState\n    {\n        //\n        // 摘要:\n        //     The entity is not being tracked by the context.\n        Detached = 0,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. Its property\n        //     values have not changed from the values in the database.\n        Unchanged = 1,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. It has\n        //     been marked for deletion from the database.\n        Deleted = 2,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. Some or\n        //     all of its property values have been modified.\n        Modified = 3,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context but does not yet exist in the database.\n        Added = 4\n    }\n}\n</code></pre>\n<p>直接改之前MVC裡面Update寫法<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Q1kTi1s3cO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Q1kTi1s3cO.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452P2qqXhpZ7p.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452P2qqXhpZ7p.png\"></p>\n<p>看起來還是一樣全部欄位更新(不管是否跟之前一樣)</p>\n<p>事實上由於目前這兩種寫法都是直接針對該資料物件所有欄位做更新的寫法<br>\n因此Update事實上也就是將所有都標記為Modified去做變更的追蹤更新</p>\n<p>我們這兩種寫法目前設計都是直接完全接收並覆寫的做法(預設Entity狀態都處於Detached)<br>\n若是改採用先查詢後更新則預設從既有DB取出的Entity狀態就是被追蹤中的</p>\n<p>則可以改為如下作法<br>\n這邊我們先從DB撈取出指定的entity後<br>\n目前有改的只有年齡欄位</p>\n<p>entity預設狀態就是已被追蹤中的<br>\n可以看到不用任何state標記或者呼叫Update都能完成更新<br>\n此外也會只更新有變動的欄位</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452HvlqMlhp8b.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452HvlqMlhp8b.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452fPqLFqdG9E.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452fPqLFqdG9E.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074520CBx7XRZNB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074520CBx7XRZNB.png\"></p>\n<p>因此在網上時常看到怎麼有人EF的例子是這樣寫<br>\n另一個又那樣子寫<br>\n事實上就是看你是否屬於對於update有潔癖的人(有要更新的欄位再更新)</p>\n<p>若是則可以先從DB撈取出來預設就會是attach</p>\n<p>Ref:<br>\nModifying data via the DbContext<br>\n<a href=\"https://www.learnentityframeworkcore.com/dbcontext/modifying-data\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.learnentityframeworkcore.com/dbcontext/modifying-data</a></p>\n<p>C# Entity Framework 更新数据的三种方法<br>\n<a href=\"https://blog.csdn.net/weixin_43602710/article/details/93638575\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.csdn.net/weixin_43602710/article/details/93638575</a></p>\n<p>[C#.NET][Entity Framework] Update Record<br>\n<a href=\"https://dotblogs.com.tw/yc421206/2015/05/02/151197\" target=\"_blank\" rel=\"noreferrer noopener\">https://dotblogs.com.tw/yc421206/2015/05/02/151197</a></p>\n<p>Q&amp;A：Entity Framework更新資料表部分欄位<br>\n<a href=\"http://vmiv.blogspot.com/2016/10/q-framework.html\" target=\"_blank\" rel=\"noreferrer noopener\">http://vmiv.blogspot.com/2016/10/q-framework.html</a></p>\n<p>觀察 EF Core 產生的 SQL 指令<br>\n<a href=\"https://blog.darkthread.net/blog/efcore-logging/\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.darkthread.net/blog/efcore-logging/</a></p>\n<p>.NET Core(C#) Entity Framework Core (EF Core) Update更新记录的方法及示例代码<br>\n<a href=\"https://www.cjavapy.com/article/1882/\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.cjavapy.com/article/1882/</a></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api25apiefcorepart3.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2022/01/net-core-web-api25apiefcorepart3.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2022-01-13 09:42:29",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "25",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>我們在的Show.html<br/>\n已經完成了資料查詢呈現<br/>\n這裡要多出操作(比方像是編輯、刪除...)<br/>\n</p>\n<p>在Show.html<br/>\n加上對應client端 jQuery存取呼叫程式<br/>\n以及擴充操作的相關連結</p>\n<pre></pre>\n<p>編輯部分傳入對應產品類別ID並進行頁面跳轉與後續資料回填<br/>\n刪除則針對特定產品類別ID直接呼叫HTTP Delete即可</p>\n<p>擴充編輯用的 Action Method</p>\n<pre></pre>\n<p>Edite.html對應client端 jQuery存取呼叫程式</p>\n<pre></pre>\n<p>分別為<br/>\nGET類型的<br/>\nGetSpecificCategoryById<br/>\n用來幫我們把資料查詢用來後續回填至畫面上</p>\n<p>和PUT類型的<br/>\nUpdateCategory<br/>\n用來呼叫後端進行編輯的更新</p>\n<p>運行效果<br/>\n畫面By CategoryID 回填<br/>\n</p>\n<p>更改之前<br/>\n</p>\n<p>執行編輯更新後<br/>\n</p>\n<p></p>\n<p>擴充刪除用的 Action Method</p>\n<pre></pre>\n<p>運行效果<br/>\n</p>\n<p></p>\n<p>刪除這邊的API存取我們採用同步的方式確保不會因為entity取到null造成null例外錯誤</p>\n<p>在此會發現Entity Framework的更新寫法怎麼跟之前在<br/>\n<br/>\n所寫的方式不一樣<br/>\n事實上在EntityFramework中有很多種更新的寫法</p>\n<p>在之前文章的.net core MVC這邊的更新<br/>\n我們採用的是直接</p>\n<p>context.Update(實體);<br/>\ncontext.SaveChanges();//或 context.SaveChangesAsync();</p>\n<p></p>\n<p>而在.net core WebAPI這邊<br/>\n我們採用的是</p>\n<p>context.Entry(實體).State = EntityState.Modified;<br/>\ncontext.SaveChanges();//或 context.SaveChangesAsync();<br/>\n</p>\n<p>若想觀察 EF Core 產生的 SQL 指令<br/>\n我們可以到Startup.cs<br/>\n引入using Microsoft.Extensions.Logging;<br/>\n並調整ConfigureServices</p>\n<pre></pre>\n<p>再次執行編輯就可以觀察的到當執行SaveChange時候EF 底層實際執行的 SQL script<br/>\n在輸出視窗中記得調整為你的.net core應用才看的到<br/>\n</p>\n<p>預設是沒有帶實際參數值的版本<br/>\n</p>\n<p>這裡只要啟動敏感資料log機制即可</p>\n<pre></pre>\n<p></p>\n<p>在MVC這裡用的<br/>\ncontext.Update(實體);<br/>\n對應SQL語句</p>\n<pre></pre>\n<p></p>\n<p></p>\n<p>在WebAPI這裡用的<br/>\ncontext.Entry(實體).State = EntityState.Modified;<br/>\n對應SQL語句</p>\n<pre></pre>\n<p>在執行到state變更的該句之前事實上<br/>\n都還是處於Detached的狀態<br/>\n</p>\n<p>直到被標記為Modified後<br/>\n才會被變更追蹤</p>\n<p>EF中EntityState共分為如下幾種</p>\n<pre></pre>\n<p>直接改之前MVC裡面Update寫法<br/>\n</p>\n<p></p>\n<p>看起來還是一樣全部欄位更新(不管是否跟之前一樣)</p>\n<p>事實上由於目前這兩種寫法都是直接針對該資料物件所有欄位做更新的寫法<br/>\n因此Update事實上也就是將所有都標記為Modified去做變更的追蹤更新</p>\n<p>我們這兩種寫法目前設計都是直接完全接收並覆寫的做法(預設Entity狀態都處於Detached)<br/>\n若是改採用先查詢後更新則預設從既有DB取出的Entity狀態就是被追蹤中的</p>\n<p>則可以改為如下作法<br/>\n這邊我們先從DB撈取出指定的entity後<br/>\n目前有改的只有年齡欄位</p>\n<p>entity預設狀態就是已被追蹤中的<br/>\n可以看到不用任何state標記或者呼叫Update都能完成更新<br/>\n此外也會只更新有變動的欄位</p>\n<p></p>\n<p></p>\n<p></p>\n<p>因此在網上時常看到怎麼有人EF的例子是這樣寫<br/>\n另一個又那樣子寫<br/>\n事實上就是看你是否屬於對於update有潔癖的人(有要更新的欄位再更新)</p>\n<p>若是則可以先從DB撈取出來預設就會是attach</p>\n<p>Ref:<br/>\nModifying data via the DbContext<br/>\n</p>\n<p>C# Entity Framework 更新数据的三种方法<br/>\n</p>\n<p>[C#.NET][Entity Framework] Update Record<br/>\n</p>\n<p>Q&amp;A：Entity Framework更新資料表部分欄位<br/>\n</p>\n<p>觀察 EF Core 產生的 SQL 指令<br/>\n</p>\n<p>.NET Core(C#) Entity Framework Core (EF Core) Update更新记录的方法及示例代码<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "我們在的Show.html\n已經完成了資料查詢呈現\n這裡要多出操作(比方像是編輯、刪除...)\n\n在Show.html\n加上對應client端 jQuery存取呼叫程式\n以及擴充操作的相關連結\n\n編輯部分傳入對應產品類別ID並進行頁面跳轉與後續資料回填\n刪除則針對特定產品類別ID直接呼叫HTTP Delete即可\n擴充編輯用的 Action Method\n\nEdite.html對應client端 jQuery存取呼叫程式\n\n分別為\nGET類型的\nGetSpecificCategoryById\n用來幫我們把資料查詢用來後續回填至畫面上\n和PUT類型的\nUpdateCategory\n用來呼叫後端進行編輯的更新\n運行效果\n畫面By CategoryID 回填\n\n更改之前\n\n執行編輯更新後\n\n\n擴充刪除用的 Action Method\n\n運行效果\n\n\n刪除這邊的API存取我們採用同步的方式確保不會因為entity取到null造成null例外錯誤\n在此會發現Entity Framework的更新寫法怎麼跟之前在\n\n所寫的方式不一樣\n事實上在EntityFramework中有很多種更新的寫法\n在之前文章的.net core MVC這邊的更新\n我們採用的是直接\ncontext.Update(實體);\ncontext.SaveChanges();//或 context.SaveChangesAsync();\n\n而在.net core WebAPI這邊\n我們採用的是\ncontext.Entry(實體).State = EntityState.Modified;\ncontext.SaveChanges();//或 context.SaveChangesAsync();\n\n若想觀察 EF Core 產生的 SQL 指令\n我們可以到Startup.cs\n引入using Microsoft.Extensions.Logging;\n並調整ConfigureServices\n\n再次執行編輯就可以觀察的到當執行SaveChange時候EF 底層實際執行的 SQL script\n在輸出視窗中記得調整為你的.net core應用才看的到\n\n預設是沒有帶實際參數值的版本\n\n這裡只要啟動敏感資料log機制即可\n\n\n在MVC這裡用的\ncontext.Update(實體);\n對應SQL語句\n\n\n\n在WebAPI這裡用的\ncontext.Entry(實體).State = EntityState.Modified;\n對應SQL語句\n\n在執行到state變更的該句之前事實上\n都還是處於Detached的狀態\n\n直到被標記為Modified後\n才會被變更追蹤\nEF中EntityState共分為如下幾種\n\n直接改之前MVC裡面Update寫法\n\n\n看起來還是一樣全部欄位更新(不管是否跟之前一樣)\n事實上由於目前這兩種寫法都是直接針對該資料物件所有欄位做更新的寫法\n因此Update事實上也就是將所有都標記為Modified去做變更的追蹤更新\n我們這兩種寫法目前設計都是直接完全接收並覆寫的做法(預設Entity狀態都處於Detached)\n若是改採用先查詢後更新則預設從既有DB取出的Entity狀態就是被追蹤中的\n則可以改為如下作法\n這邊我們先從DB撈取出指定的entity後\n目前有改的只有年齡欄位\nentity預設狀態就是已被追蹤中的\n可以看到不用任何state標記或者呼叫Update都能完成更新\n此外也會只更新有變動的欄位\n\n\n\n因此在網上時常看到怎麼有人EF的例子是這樣寫\n另一個又那樣子寫\n事實上就是看你是否屬於對於update有潔癖的人(有要更新的欄位再更新)\n若是則可以先從DB撈取出來預設就會是attach\nRef:\nModifying data via the DbContext\n\nC# Entity Framework 更新数据的三种方法\n\n[C#.NET][Entity Framework] Update Record\n\nQ&A：Entity Framework更新資料表部分欄位\n\n觀察 EF Core 產生的 SQL 指令\n\n.NET Core(C#) Entity Framework Core (EF Core) Update更新记录的方法及示例代码\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>\n    <link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body style=\"margin:20px;\">\n    <table id=\"tbProductCategory\" class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <td nowrap>產品類別ID</td>\n                <td nowrap>產品類別名稱</td>\n                <td nowrap>操作</td>\n            </tr>\n        </thead>\n        <tbody>\n        </tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            var tbody = $('#tbProductCategory tbody');\n            $.ajax({\n                type: 'get',\n                url: '/api/pcategory/show',\n                dataType: 'json',\n                success: function (result) {\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr><td>\" + value.cId + \"</td>\" +\n                            \"<td>\" + value.cTitle + \"</td>\" +\n                            \"<td nowrap>\" +\n                            \"<a href='Edit.html?id=\" + value.cId + \"'>編輯</a> \" +\n                            \"<a href='javascript:Del(\\\"\" + value.cId + \"\\\")'>刪除</a>\" + //傳 GUID 當參數 要用雙引號包覆 跳脫字元(\\\")\n                            \"</td></tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbProductCategory').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/pcategory/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n\n    </script>\n\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task<ActionResult<int>> AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task<ActionResult<List<PCategory>>> ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n        [HttpGet(\"GetById\")]\n        public async Task<ActionResult<PCategory>> GetSpecificCategoryById(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n\n            var category = await _dbContext.PCategories.AsNoTracking()\n                .FirstOrDefaultAsync(item=>item.CId==new Guid(id));\n            return category;\n        }\n\n        [HttpPut(\"Update\")]\n        public async Task<ActionResult<int>> UpdateCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            _dbContext.Entry(pCategory).State = EntityState.Modified;\n            var count = await _dbContext.SaveChangesAsync();\n            return count;\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>    \n    <link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #0094ff;width:600px;margin:30px;\">\n        <h3>產品分類編輯</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-4\">\n                <label>產品類別</label>\n                <input type=\"text\" class=\"form-control\" id=\"CTitle\">\n            </div>            \n            <div class=\"form-group\">\n                <div class=\"col-md-2 col-md-10\">\n                    <button type=\"submit\" id=\"btnSubmit\" class=\"btn btn-primary\">Submit</button>\n                </div>\n                <div>\n                    <span id=\"msg\" class=\"bg-danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        //var query = window.location.search;\n        //console.log(\"window.location.search:\" + query);\n        //window.location.search:?id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n        //var query0 = window.location.search.substring(0);\n        //console.log(\"window.location.search.substring(0):\" + query0);\n        //window.location.search.substring(0):?id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n        //var query1 = window.location.search.substring(1);\n        //console.log(\"window.location.search.substring(1):\" + query1);\n        //window.location.search.substring(1):id=ffd2823a-f739-4678-98b6-a4d7dfc482fa\n\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var idxVar = 0; idxVar < vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: \"get\",\n                url: \"/api/PCategory/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#CTitle\").val(result.cTitle);\n                }\n            });\n        });\n\n        $('#btnSubmit').click(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: 'put',\n                url: \"/api/PCategory/update\",\n                dataType: \"text\",\n                data: JSON.stringify({\n                    CId: id,\n                    CTitle: $(\"#CTitle\").val()\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功更新');\n                    }\n                }\n            });\n        });\n\n\n    </script>\n\n\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task<ActionResult<int>> AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task<ActionResult<List<PCategory>>> ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n        [HttpGet(\"GetById\")]\n        public async Task<ActionResult<PCategory>> GetSpecificCategoryById(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n\n            var category = await _dbContext.PCategories.AsNoTracking()\n                .FirstOrDefaultAsync(item=>item.CId==new Guid(id));\n            return category;\n        }\n\n        [HttpPut(\"Update\")]\n        public async Task<ActionResult<int>> UpdateCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            _dbContext.Entry(pCategory).State = EntityState.Modified;\n            var count = await _dbContext.SaveChangesAsync();\n            return count;\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult<int> DeleteCategory(string id)\n        {\n            if (string.IsNullOrWhiteSpace(id))\n                return NotFound();\n            var category = _dbContext.PCategories.Find(new Guid(id));\n            if (category == null)\n                return NotFound();\n            _dbContext.PCategories.Remove(category);\n            return _dbContext.SaveChanges();\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "// This method gets called by the runtime. Use this method to add services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<MyTestDbContext>(options =>\n        options.UseSqlServer(Configuration.GetConnectionString(\"MyTestDbConn\"))\n               .UseLoggerFactory(LoggerFactory.Create(builder => builder.AddConsole()))                       \n    );\n    services.AddControllersWithViews();\n}\n"
            },
            {
                "language": "unknown",
                "content": "public void ConfigureServices(IServiceCollection services)\n{\n    services.AddDbContext<MyTestDbContext>(options =>\n        options.UseSqlServer(Configuration.GetConnectionString(\"MyTestDbConn\"))\n               .UseLoggerFactory(LoggerFactory.Create(builder => builder.AddConsole()))\n               .EnableSensitiveDataLogging()\n    );\n    services.AddControllersWithViews();\n}\n"
            },
            {
                "language": "unknown",
                "content": "Executed DbCommand (4ms) [Parameters=[@p3='abffc939-0413-4e71-9565-7c48de43f8db', @p0='33', @p1='Ted' (Size = 4000), @p2='True'], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      UPDATE [Students] SET [Age] = @p0, [Name] = @p1, [Sex] = @p2\n      WHERE [Id] = @p3;\n      SELECT @@ROWCOUNT;\n"
            },
            {
                "language": "unknown",
                "content": "Executed DbCommand (11ms) [Parameters=[@p1='f46104c4-7672-4db6-9d75-a1f038a16216', @p0='平板電腦' (Size = 100)], CommandType='Text', CommandTimeout='30']\n      SET NOCOUNT ON;\n      UPDATE [PCategories] SET [CTitle] = @p0\n      WHERE [CId] = @p1;\n      SELECT @@ROWCOUNT;\n"
            },
            {
                "language": "unknown",
                "content": "namespace Microsoft.EntityFrameworkCore\n{\n    //\n    // 摘要:\n    //     The state in which an entity is being tracked by a context.\n    public enum EntityState\n    {\n        //\n        // 摘要:\n        //     The entity is not being tracked by the context.\n        Detached = 0,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. Its property\n        //     values have not changed from the values in the database.\n        Unchanged = 1,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. It has\n        //     been marked for deletion from the database.\n        Deleted = 2,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context and exists in the database. Some or\n        //     all of its property values have been modified.\n        Modified = 3,\n        //\n        // 摘要:\n        //     The entity is being tracked by the context but does not yet exist in the database.\n        Added = 4\n    }\n}\n"
            }
        ],
        "programming_languages": [
            "sql",
            "c#"
        ],
        "word_seg_content_text": "我們 在 的 Show . html\n已經 完成 了 資料 查詢 呈現\n這裡 要 多出 操作 ( 比方 像是 編輯 、 刪除 ... )\n在 Show . html\n加上 對應 client 端\njQuery 存取 呼叫 程式\n以及 擴充 操作 的 相關 連結\n編輯 部分 傳入 對應 產品類別 ID 並 進行 頁面 跳轉 與 後續 資料 回填\n刪除 則 針對 特定 產品類別 ID 直接 呼叫 HTTP\nDelete 即可\n擴充 編輯 用 的\nAction\nMethod\nEdite . html 對應 client 端\njQuery 存取 呼叫 程式\n分別 為\nGET 類型 的\nGetSpecificCategoryById\n用來 幫 我們 把 資料 查詢 用來 後續 回填 至 畫面 上\n和 PUT 類型 的\nUpdateCategory\n用來 呼叫 後 端 進行 編輯 的 更新\n運行 效果\n畫面 By\nCategoryID\n回填\n更改 之前\n執行 編輯 更新 後\n擴充 刪除 用 的\nAction\nMethod\n運行 效果\n刪除 這邊 的 API 存取 我們 採用 同步 的 方式 確保 不會 因為 entity 取到 null 造成 null 例外 錯誤\n在 此會 發現 Entity\nFramework 的 更新 寫法 怎麼 跟 之前 在\n所寫 的 方式 不 一樣\n事實上 在 EntityFramework 中有 很 多種 更新 的 寫法\n在 之前 文章 的 . net\ncore\nMVC 這邊 的 更新\n我們 採用 的 是 直接\ncontext . Update ( 實體 ) ;\ncontext . SaveChanges ( ) ; / / 或\ncontext . SaveChangesAsync ( ) ;\n而 在 . net\ncore\nWebAPI 這邊\n我們 採用 的 是\ncontext . Entry ( 實體 ) . State\n=\nEntityState . Modified ;\ncontext . SaveChanges ( ) ; / / 或\ncontext . SaveChangesAsync ( ) ;\n若想 觀察\nEF\nCore\n產生 的\nSQL\n指令\n我們 可以 到 Startup . cs\n引入 using\nMicrosoft . Extensions . Logging ;\n並 調整 ConfigureServices\n再次 執行 編輯 就 可以 觀察 的 到當 執行 SaveChange 時候 EF\n底層 實際 執行 的\nSQL\nscript\n在 輸出 視窗 中 記得 調整 為 你 的 . net\ncore 應用 才 看 的 到\n預設 是 沒有 帶 實際 參數值 的 版本\n這裡 只要 啟動 敏感 資料 log 機制 即可\n在 MVC 這裡 用 的\ncontext . Update ( 實體 ) ;\n對應 SQL 語句\n在 WebAPI 這裡 用 的\ncontext . Entry ( 實體 ) . State\n=\nEntityState . Modified ;\n對應 SQL 語句\n在 執行 到 state 變更 的 該 句 之前 事實上\n都 還是 處於 Detached 的 狀態\n直到 被 標記 為 Modified 後\n才 會 被 變更 追蹤\nEF 中 EntityState 共分 為 如下 幾種\n直接 改 之前 MVC 裡面 Update 寫法\n看起來 還是 一樣 全部 欄位 更新 ( 不管 是否 跟 之前 一樣 )\n事實上 由於 目前 這 兩種 寫法 都 是 直接 針對 該 資料 物件 所有 欄位 做 更新 的 寫法\n因此 Update 事實上 也 就是 將 所有 都 標記 為 Modified 去 做 變更 的 追蹤 更新\n我們 這 兩種 寫法 目前 設計 都 是 直接 完全 接收 並覆寫 的 做法 ( 預設 Entity 狀態 都 處於 Detached )\n若 是 改 採用 先 查詢 後 更新 則 預設 從 既有 DB 取出 的 Entity 狀態 就是 被 追蹤 中 的\n則 可以 改為 如下 作法\n這邊 我們 先 從 DB 撈取 出 指定 的 entity 後\n目前 有 改 的 只有 年齡 欄位\nentity 預設 狀態 就是 已 被 追蹤 中 的\n可以 看到 不用 任何 state 標記 或者 呼叫 Update 都 能 完成 更新\n此外 也 會 只 更新 有 變動 的 欄位\n因此 在 網上 時常 看到 怎麼 有人 EF 的 例子 是 這樣 寫\n另 一個 又 那 樣子 寫\n事實上 就是 看 你 是否 屬於 對於 update 有 潔癖 的 人 ( 有要 更新 的 欄位 再 更新 )\n若是則 可以 先 從 DB 撈取 出來 預設 就 會 是 attach\nRef :\nModifying\ndata\nvia\nthe\nDbContext\nC#\nEntity\nFramework\n更新 数据 的 三种 方法\n[ C# . NET ] [ Entity\nFramework ]\nUpdate\nRecord\nQ & A ： Entity\nFramework 更新 資料 表 部分 欄位\n觀察\nEF\nCore\n產生 的\nSQL\n指令\n. NET\nCore ( C# )\nEntity\nFramework\nCore\n( EF\nCore )\nUpdate 更新 记录 的 方法 及 示例 代码\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "show html\n資料 查詢 呈現\n多出 操作 像是 編輯 刪除 ...\nshow html\n加上 client 端\njquery 存取 呼叫 程式\n擴充 操作 相關 連結\n編輯 傳入 產品類別 id 頁面 跳轉 後續 資料 回填\n刪除 針對 特定 產品類別 id 呼叫 http\ndelete 即可\n擴充 編輯\naction\nmethod\nedite html client 端\njquery 存取 呼叫 程式\n\nget 類型\ngetspecificcategorybyid\n用來 幫 資料 查詢 用來 後續 回填 畫面\nput 類型\nupdatecategory\n用來 呼叫 端 編輯 更新\n運行 效果\n畫面\ncategoryid\n回填\n更改\n執行 編輯 更新\n擴充 刪除\naction\nmethod\n運行 效果\n刪除 api 存取 採用 同步 方式 確保 entity 取到 null null 例外 錯誤\n此會 發現 entity\nframework 更新 寫法\n所寫 方式\n事實上 entityframework 中有 多種 更新 寫法\n文章 net\ncore\nmvc 更新\n採用\ncontext update 實體\ncontext savechanges\ncontext savechangesasync\nnet\ncore\nwebapi\n採用\ncontext entry 實體 state\n\nentitystate modified\ncontext savechanges\ncontext savechangesasync\n若想 觀察\nef\ncore\n\nsql\n指令\nstartup cs\n引入 using\nmicrosoft extensions logging\n調整 configureservices\n再次 執行 編輯 觀察 到當 執行 savechange ef\n底層 執行\nsql\nscript\n輸出 視窗 中 記得 調整 net\ncore 才\n預設 帶 參數值 版本\n啟動 敏感 資料 log 機制 即可\nmvc\ncontext update 實體\nsql 語句\nwebapi\ncontext entry 實體 state\n\nentitystate modified\nsql 語句\n執行 state 變更 句 事實上\n處於 detached 狀態\n標記 modified\n才 會 變更 追蹤\nef 中 entitystate 共分 幾種\n改 mvc update 寫法\n看起來 欄位 更新\n事實上 兩種 寫法 針對 資料 物件 欄位 做 更新 寫法\nupdate 事實上 標記 modified 做 變更 追蹤 更新\n兩種 寫法 設計 接收 並覆寫 做法 預設 entity 狀態 處於 detached\n改 採用 先 查詢 更新 預設 既有 db 取出 entity 狀態 追蹤 中\n改為 作法\n先 db 撈取 出 指定 entity\n改 年齡 欄位\nentity 預設 狀態 追蹤 中\n不用 state 標記 呼叫 update 更新\n會 更新 變動 欄位\n網上 時常 有人 ef 例子 寫\n樣子 寫\n事實上 update 潔癖 有要 更新 欄位 更新\n若是則 先 db 撈取 預設 會 attach\nref\nmodifying\ndata\nvia\n\ndbcontext\nc#\nentity\nframework\n更新 数据 三种 方法\nc# net entity\nframework\nupdate\nrecord\nq a entity\nframework 更新 資料 表 欄位\n觀察\nef\ncore\n\nsql\n指令\nnet\ncore c#\nentity\nframework\ncore\nef\ncore\nupdate 更新 记录 方法 示例 代码\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "html",
            "jquery",
            "delete",
            "getspecificcategorybyid",
            "client"
        ],
        "extracted_keywords_phrases": [
            "刪除 html",
            "html client",
            "html 資料",
            "edite html",
            "http delete"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283632": {
        "href": "https://ithelp.ithome.com.tw/articles/10283632",
        "title": ".Net Core Web Api_筆記24_api結合EFCore資料庫操作part2_產品分類資料新增_資料查詢呈現(帶入非同步API修飾)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>接續<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api23apiefcorepart1.html\" target=\"_blank\" rel=\"noreferrer noopener\">上一篇</a></p>\n<p>在Startup.cs中啟用靜態資源<br>\n於專案新增目錄命名為wwwroot(會自動變成地球的圖示)</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074523oUhhs8Tpr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074523oUhhs8Tpr.png\"></p>\n<p>對wwwroot去進行<br>\n引入bs4跟jquery3.6<br>\n測試Client端有UI時的互動存取(透過jQuery)<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452aOFUgSB7Vd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452aOFUgSB7Vd.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Co4aVhcdOu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Co4aVhcdOu.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452M2YPgnWlfh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452M2YPgnWlfh.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452xu5aJz3LaE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452xu5aJz3LaE.png\"><br>\n接著要實作<br>\n產品分類資料查詢與增加<br>\n新增PCategoryController.cs和對應的新增Action及查詢Action<br>\n~\\Controllers\\PCategoryController.cs</p>\n<p>同步形式的API存取</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = _dbContext.SaveChanges();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult&lt;List&lt;PCategory&gt;&gt; ShowProductCategory()\n        {\n            var categories = _dbContext.PCategories.ToList();\n            return categories;\n        }\n\n    }\n}\n</code></pre>\n<p>透過.net core DI我們在建構子注入DbContext就能在整個Controller程式中進行存取異動</p>\n<p>新增對應靜態資源頁面</p>\n<p>~\\wwwroot\\PCategory\\Add.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Add ProductType&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #0094ff;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;產品類別&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-4\"&gt;\n                &lt;label&gt;產品類別&lt;/label&gt;\n                &lt;input type=\"text\" class=\"form-control\" id=\"CategoryTitle\"&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-2 col-md-10\"&gt;\n                    &lt;button type=\"submit\" id=\"btnSubmit\" class=\"btn btn-primary\"&gt;Submit&lt;/button&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $('#btnSubmit').click(function () {\n            $.ajax({\n                type: 'post',\n                url: \"/api/pcategory/add\",\n                dataType: \"text\",\n                data: JSON.stringify({                    \n                    CTitle: $('#CategoryTitle').val()\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功添加');\n                    }\n                }\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>~\\wwwroot\\PCategory\\Show.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body style=\"margin:20px;\"&gt;\n    &lt;table id=\"tbProductCategory\" class=\"table table-bordered\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td&gt;產品類別ID&lt;/td&gt;\n                &lt;td&gt;產品類別名稱&lt;/td&gt;                \n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            var tbody = $('#tbProductCategory tbody');\n            $.ajax({\n                type: 'get',\n                url: '/api/pcategory/show',\n                dataType: 'json',\n                success: function (result) {\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;&lt;td&gt;\" + value.cId\n                            + \"&lt;/td&gt;&lt;td&gt;\" + value.cTitle\n                            + \"&lt;/td&gt;&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbProductCategory').append(tbody);\n                }\n            });\n        });\n    &lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>運行效果</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452jpvUPK8EIT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452jpvUPK8EIT.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452IXPFtJGLjy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452IXPFtJGLjy.png\"></p>\n<p>而在過去用ado.net搭配寫法或者上述寫法<br>\n基本上都是採用同步的API存取方式<br>\n所以基本上單位時間內能處理消化的請求量或稱為「吞吐(流通)量Throughput」有限<br>\n因此會有阻塞問題</p>\n<p>由於EFCore有支援異步存取的相關API(方法名Async後綴)<br>\n這裡可以再改為非同步的API存取</p>\n<p>非同步(異步)形式的API存取</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task&lt;ActionResult&lt;int&gt;&gt; AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task&lt;ActionResult&lt;List&lt;PCategory&gt;&gt;&gt; ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n    }\n}\n</code></pre>\n<p>Ref:</p>\n<p>The Ultimate Guide to Async and Await in C# and ASP.NET<br>\n<a href=\"https://exceptionnotfound.net/async-await-in-asp-net-csharp-ultimate-guide/\" target=\"_blank\" rel=\"noreferrer noopener\">https://exceptionnotfound.net/async-await-in-asp-net-csharp-ultimate-guide/</a></p>\n<p>[效能調教] 使用 Async / Await 非同步機制加快 Web API 回應時間<br>\n<a href=\"https://dotblogs.com.tw/wasichris/2017/06/08/101137#%E7%B5%90%E8%AB%96\" target=\"_blank\" rel=\"noreferrer noopener\">https://dotblogs.com.tw/wasichris/2017/06/08/101137#%E7%B5%90%E8%AB%96</a></p>\n<p>網站測試工具-JMeter教學<br>\n<a href=\"https://www.astralweb.com.tw/website-test-tool-jmeter-teaching/\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.astralweb.com.tw/website-test-tool-jmeter-teaching/</a></p>\n<p>JMeter-網頁壓力測試教學<br>\n<a href=\"https://www.astralweb.com.tw/jmeter-website-stress-testing-tutorial/\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.astralweb.com.tw/jmeter-website-stress-testing-tutorial/</a></p>\n<p>.NET Web应用中为什么要使用async/await异步编程<br>\n<a href=\"https://www.cnblogs.com/xhznl/p/13064731.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.cnblogs.com/xhznl/p/13064731.html</a></p>\n<p>為什麼需要使用非同步程式設計，真的可以提升整體應用程式的執行效能嗎？<br>\n<a href=\"https://csharpkh.blogspot.com/2019/07/Asynchronous-ThreadPool-programming-synchronous-NET-Core-Framework-async-await.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://csharpkh.blogspot.com/2019/07/Asynchronous-ThreadPool-programming-synchronous-NET-Core-Framework-async-await.html</a></p>\n<p>ASP.NET async 基本心法<br>\n<a href=\"https://blog.darkthread.net/blog/async-aspnet/\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.darkthread.net/blog/async-aspnet/</a></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api24apiefcorepart2api.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2022/01/net-core-web-api24apiefcorepart2api.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2022-01-13 09:29:38",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "24",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>接續</p>\n<p>在Startup.cs中啟用靜態資源<br/>\n於專案新增目錄命名為wwwroot(會自動變成地球的圖示)</p>\n<p></p>\n<p>對wwwroot去進行<br/>\n引入bs4跟jquery3.6<br/>\n測試Client端有UI時的互動存取(透過jQuery)<br/>\n</p>\n<p></p>\n<p></p>\n<p><br/>\n接著要實作<br/>\n產品分類資料查詢與增加<br/>\n新增PCategoryController.cs和對應的新增Action及查詢Action<br/>\n~\\Controllers\\PCategoryController.cs</p>\n<p>同步形式的API存取</p>\n<pre></pre>\n<p>透過.net core DI我們在建構子注入DbContext就能在整個Controller程式中進行存取異動</p>\n<p>新增對應靜態資源頁面</p>\n<p>~\\wwwroot\\PCategory\\Add.html</p>\n<pre></pre>\n<p>~\\wwwroot\\PCategory\\Show.html</p>\n<pre></pre>\n<p>運行效果</p>\n<p></p>\n<p></p>\n<p>而在過去用ado.net搭配寫法或者上述寫法<br/>\n基本上都是採用同步的API存取方式<br/>\n所以基本上單位時間內能處理消化的請求量或稱為「吞吐(流通)量Throughput」有限<br/>\n因此會有阻塞問題</p>\n<p>由於EFCore有支援異步存取的相關API(方法名Async後綴)<br/>\n這裡可以再改為非同步的API存取</p>\n<p>非同步(異步)形式的API存取</p>\n<pre></pre>\n<p>Ref:</p>\n<p>The Ultimate Guide to Async and Await in C# and ASP.NET<br/>\n</p>\n<p>[效能調教] 使用 Async / Await 非同步機制加快 Web API 回應時間<br/>\n</p>\n<p>網站測試工具-JMeter教學<br/>\n</p>\n<p>JMeter-網頁壓力測試教學<br/>\n</p>\n<p>.NET Web应用中为什么要使用async/await异步编程<br/>\n</p>\n<p>為什麼需要使用非同步程式設計，真的可以提升整體應用程式的執行效能嗎？<br/>\n</p>\n<p>ASP.NET async 基本心法<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "接續\n在Startup.cs中啟用靜態資源\n於專案新增目錄命名為wwwroot(會自動變成地球的圖示)\n\n對wwwroot去進行\n引入bs4跟jquery3.6\n測試Client端有UI時的互動存取(透過jQuery)\n\n\n\n\n接著要實作\n產品分類資料查詢與增加\n新增PCategoryController.cs和對應的新增Action及查詢Action\n~\\Controllers\\PCategoryController.cs\n同步形式的API存取\n\n透過.net core DI我們在建構子注入DbContext就能在整個Controller程式中進行存取異動\n新增對應靜態資源頁面\n~\\wwwroot\\PCategory\\Add.html\n\n~\\wwwroot\\PCategory\\Show.html\n\n運行效果\n\n\n而在過去用ado.net搭配寫法或者上述寫法\n基本上都是採用同步的API存取方式\n所以基本上單位時間內能處理消化的請求量或稱為「吞吐(流通)量Throughput」有限\n因此會有阻塞問題\n由於EFCore有支援異步存取的相關API(方法名Async後綴)\n這裡可以再改為非同步的API存取\n非同步(異步)形式的API存取\n\nRef:\nThe Ultimate Guide to Async and Await in C# and ASP.NET\n\n[效能調教] 使用 Async / Await 非同步機制加快 Web API 回應時間\n\n網站測試工具-JMeter教學\n\nJMeter-網頁壓力測試教學\n\n.NET Web应用中为什么要使用async/await异步编程\n\n為什麼需要使用非同步程式設計，真的可以提升整體應用程式的執行效能嗎？\n\nASP.NET async 基本心法\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = _dbContext.SaveChanges();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult<List<PCategory>> ShowProductCategory()\n        {\n            var categories = _dbContext.PCategories.ToList();\n            return categories;\n        }\n\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Add ProductType</title>\n    <link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #0094ff;width:600px;margin:30px;\">\n        <h3>產品類別</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-4\">\n                <label>產品類別</label>\n                <input type=\"text\" class=\"form-control\" id=\"CategoryTitle\">\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-md-2 col-md-10\">\n                    <button type=\"submit\" id=\"btnSubmit\" class=\"btn btn-primary\">Submit</button>\n                </div>\n                <div>\n                    <span id=\"msg\" class=\"danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        $('#btnSubmit').click(function () {\n            $.ajax({\n                type: 'post',\n                url: \"/api/pcategory/add\",\n                dataType: \"text\",\n                data: JSON.stringify({                    \n                    CTitle: $('#CategoryTitle').val()\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功添加');\n                    }\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title></title>\n    <link href=\"../css/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body style=\"margin:20px;\">\n    <table id=\"tbProductCategory\" class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <td>產品類別ID</td>\n                <td>產品類別名稱</td>                \n            </tr>\n        </thead>\n        <tbody>\n        </tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            var tbody = $('#tbProductCategory tbody');\n            $.ajax({\n                type: 'get',\n                url: '/api/pcategory/show',\n                dataType: 'json',\n                success: function (result) {\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr><td>\" + value.cId\n                            + \"</td><td>\" + value.cTitle\n                            + \"</td></tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbProductCategory').append(tbody);\n                }\n            });\n        });\n    </script>\n\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\nusing Net5EFCoreWebApiApp.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class PCategoryController : ControllerBase\n    {        \n        //Startup.cs中註冊EF服務後，就可在特定控制器藉由.net core預設DI，透過建構子去實踐存取ProductDbContext。\n        private readonly ProductDbContext _dbContext;\n        public PCategoryController(ProductDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        [HttpPost(\"Add\")]\n        public async Task<ActionResult<int>> AddProductCategory(PCategory pCategory)\n        {\n            if (pCategory == null)\n                return NotFound();\n\n            if (string.IsNullOrEmpty(pCategory.CTitle))\n                return NotFound();\n\n            pCategory.CId = Guid.NewGuid();\n            _dbContext.PCategories.Add(pCategory);\n            int RowCount = await _dbContext.SaveChangesAsync();\n            return CreatedAtAction(nameof(AddProductCategory),RowCount);\n        }\n\n        [HttpGet(\"Show\")]\n        public async Task<ActionResult<List<PCategory>>> ShowProductCategory()\n        {\n            var categories = await _dbContext.PCategories.ToListAsync();\n            return categories;\n        }\n\n    }\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "接續\n在 Startup . cs 中 啟用 靜態 資源\n於 專案 新增 目錄 命名 為 wwwroot ( 會 自動 變成 地球 的 圖示 )\n對 wwwroot 去 進行\n引入 bs4 跟 jquery3.6\n測試 Client 端 有 UI 時 的 互動 存取 ( 透過 jQuery )\n接著要 實作\n產品 分類 資料 查詢 與 增加\n新增 PCategoryController . cs 和 對應 的 新增 Action 及 查詢 Action\n~ \\ Controllers \\ PCategoryController . cs\n同步 形式 的 API 存取\n透過 . net\ncore\nDI 我們 在 建構 子 注入 DbContext 就 能 在 整個 Controller 程式 中 進行 存取 異動\n新增 對應 靜態 資源 頁面\n~ \\ wwwroot \\ PCategory \\ Add . html\n~ \\ wwwroot \\ PCategory \\ Show . html\n運行 效果\n而 在 過去 用 ado . net 搭配 寫法 或者 上述 寫法\n基本上 都 是 採用 同步 的 API 存取 方式\n所以 基本上 單位 時間 內能 處理 消化 的 請求 量 或 稱 為 「 吞吐 ( 流通 ) 量 Throughput 」 有限\n因此 會 有 阻塞 問題\n由於 EFCore 有 支援 異步 存取 的 相關 API ( 方法 名 Async 後綴 )\n這裡 可以 再 改為 非 同步 的 API 存取\n非 同步 ( 異步 ) 形式 的 API 存取\nRef :\nThe\nUltimate\nGuide\nto\nAsync\nand\nAwait\nin\nC#\nand\nASP . NET\n[ 效能 調教 ]\n使用\nAsync\n/\nAwait\n非 同步 機制 加快\nWeb\nAPI\n回應 時間\n網站 測試工具 - JMeter 教學\nJMeter - 網頁 壓力 測試 教學\n. NET\nWeb 应用 中 为什么 要 使用 async / await 异步 编程\n為 什麼 需要 使用 非 同步 程式設計 ， 真的 可以 提升 整體 應用程式 的 執行 效能 嗎 ？\nASP . NET\nasync\n基本 心法\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "接續\nstartup cs 中 啟用 靜態 資源\n專案 新增 目錄 命名 wwwroot 會 自動 地球 圖示\nwwwroot\n引入 bs4 jquery3.6\n測試 client 端 ui 時 互動 存取 透過 jquery\n接著要 實作\n產品 分類 資料 查詢 增加\n新增 pcategorycontroller cs 新增 action 查詢 action\ncontrollers pcategorycontroller cs\n同步 形式 api 存取\n透過 net\ncore\ndi 建構 子 注入 dbcontext controller 程式 中 存取 異動\n新增 靜態 資源 頁面\nwwwroot pcategory add html\nwwwroot pcategory show html\n運行 效果\nado net 搭配 寫法 寫法\n基本上 採用 同步 api 存取 方式\n基本上 單位 時間 內能 消化 請求 量 稱 吞吐 流通 量 throughput 有限\n會 阻塞\nefcore 支援 異步 存取 相關 api 方法 名 async 後綴\n改為 非 同步 api 存取\n非 同步 異步 形式 api 存取\nref\n\nultimate\nguide\n\nasync\n\nawait\n\nc#\n\nasp net\n效能 調教\n\nasync\n\nawait\n非 同步 機制 加快\nweb\napi\n回應 時間\n網站 測試工具 jmeter 教學\njmeter 網頁 壓力 測試 教學\nnet\nweb 应用 中 为什么 async await 异步 编程\n非 同步 程式設計 真的 提升 整體 應用程式 執行 效能\nasp net\nasync\n心法\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "web",
            "wwwroot",
            "dbcontext",
            "網站",
            "網頁"
        ],
        "extracted_keywords_phrases": [
            "html wwwroot",
            "wwwroot 引入",
            "wwwroot 自動",
            "web 应用",
            "net web"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283591": {
        "href": "https://ithelp.ithome.com.tw/articles/10283591",
        "title": ".Net Core Web Api_筆記23_api結合EFCore資料庫操作part1_專案前置準備",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><strong>專案前置準備</strong></p>\n<p>建立並配置好visual studio .net core web api專案</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452NGaLrvZlZC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452NGaLrvZlZC.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Y3apWjr29i.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Y3apWjr29i.png\"></p>\n<p>.net5 專案中預設若我們將OpenAPI勾選起來會自動配置好Swagger文檔相關的dll與設定<br>\n預設用的為Swashbuckle.AspNetCore<br>\n<a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/domaindrivendev/Swashbuckle.AspNetCore</a></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452goWB8yt6KE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452goWB8yt6KE.png\"></p>\n<p>預設專案的Startup.cs</p>\n<pre><code>using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n            services.AddControllers();\n            services.AddSwaggerGen(c =&gt;\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Net5EFCoreWebApiApp\", Version = \"v1\" });\n            });\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Net5EFCoreWebApiApp v1\"));\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n</code></pre>\n<p>當運行專案預設就會直接跳轉至<a href=\"http://localhost:\" target=\"_blank\" rel=\"noreferrer noopener\">http://localhost:</a>/swagger<br>\n這個swagger UI的畫面</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074527cDmn39Lby.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/201074527cDmn39Lby.png\"></p>\n<p>主要是因為在~\\Properties\\launchSettings.json<br>\n\"launchUrl\": \"swagger\" 設定的關係</p>\n<pre><code>{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:12099\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"Net5EFCoreWebApiApp\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": \"true\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>EF Core的安裝<br>\nMicrosoft.EntityFrameworkCore.sqlserver</p>\n<p>在此要注意由於我目前還是用vs2019 .net5做開發<br>\n因此太高版別的EFCore會不支援(需要vs2022 .net6)<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452KPfF3kPcZn.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452KPfF3kPcZn.png\"></p>\n<p>這裡改為5.0.13版本(不要用6.x的)</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452m1fERHLFJa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452m1fERHLFJa.png\"><br>\nCodeFirst開發前置準備</p>\n<p>當我們經過一段時間的需求分析與資料朔模後<br>\n會產出一些ERD和表關聯</p>\n<p>這裡就用簡單的產品分類與產品項目資訊<br>\n設計資料庫中存在的兩張table關聯</p>\n<p>這裡資料字典如下</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452gseaF01vab.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452gseaF01vab.png\"></p>\n<p>Step1.準備好資料實體模型(各自都對應一張table)於Model Folder下</p>\n<p>~\\Models\\Product.cs</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Models\n{\n    public class Product\n    {\n        /// &lt;summary&gt;\n        /// 產品ID\n        /// &lt;/summary&gt;\n        [Key]\n        public Guid ProId { get; set; }\n\n        /// &lt;summary&gt;\n        /// 產品名稱\n        /// &lt;/summary&gt;\n        [MaxLength(200)]\n        public string ProTitle { get; set; }\n\n        /// &lt;summary&gt;\n        /// 產品總數\n        /// &lt;/summary&gt;\n        public int ProSum { get; set; }\n\n        /// &lt;summary&gt;\n        /// 產品價格\n        /// &lt;/summary&gt;\n        public Decimal ProPrice { get; set; }\n\n        /// &lt;summary&gt;\n        /// 產品類別ID\n        /// &lt;/summary&gt;\n        public Guid PCategoryId { get; set; }\n        [ForeignKey(\"PCategoryId\")]\n        public PCategory PCategory { get; set; }\n    }\n}\n</code></pre>\n<p>~\\Models\\PCategory.cs</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Models\n{\n    public class PCategory\n    {\n        /// &lt;summary&gt;\n        /// 產品分類ID\n        /// &lt;/summary&gt;\n        [Key]\n        public Guid CId { get; set; }\n\n        /// &lt;summary&gt;\n        /// 產品分類標題\n        /// &lt;/summary&gt;\n        [MaxLength(100)]\n        public string CTitle { get; set; }\n    }\n}\n</code></pre>\n<p>Step2.建立DbContext衍生類</p>\n<p>~\\Data\\ProductDbContext.cs</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Models;\n\nnamespace Net5EFCoreWebApiApp.Data\n{\n    public class ProductDbContext : DbContext\n    {\n        public ProductDbContext(DbContextOptions&lt;ProductDbContext&gt; options) : base(options)\n        {\n\n        }\n        public DbSet&lt;Product&gt; Products { get; set; }\n        public DbSet&lt;PCategory&gt; PCategories { get; set; }\n    }\n}\n</code></pre>\n<p>Step3.至appsettings.json配置DB connection string</p>\n<pre><code>{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"ProductDb\" : \"Server=.;Database=AspNetEFCoreDb;uid=sa;pwd=rootroot\"\n  }\n}\n</code></pre>\n<p>Step4.至Startup.cs的ConfigureServices進行DB服務的依賴注入</p>\n<p>Startup.cs多引入命名空間<br>\nusing Microsoft.EntityFrameworkCore;<br>\nusing Net5EFCoreWebApiApp.Data;</p>\n<p>~\\Startup.cs</p>\n<pre><code>using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext&lt;ProductDbContext&gt;(options =&gt; \n                options.UseSqlServer(Configuration.GetConnectionString(\"ProductDb\")));\n            services.AddControllers();\n            services.AddSwaggerGen(c =&gt;\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Net5EFCoreWebApiApp\", Version = \"v1\" });\n            });\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c =&gt; c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Net5EFCoreWebApiApp v1\"));\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n</code></pre>\n<p>Step5.至主程式Program.cs中的Main()去實踐第一次(只執行一次)的DB上下文建立<br>\n把原先的程式碼CreateHostBuilder(args).Build().Run();刪掉or註解掉<br>\n需引入命名空間Microsoft.Extensions.DependencyInjection<br>\nusing Microsoft.Extensions.DependencyInjection;</p>\n<p>~\\Program.cs</p>\n<pre><code>using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Net5EFCoreWebApiApp.Data;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            //CreateHostBuilder(args).Build().Run();\n            var host = CreateHostBuilder(args).Build();\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                try\n                {\n                    var dbContext = services.GetRequiredService&lt;ProductDbContext&gt;();\n                    dbContext.Database.EnsureCreated();\n                }\n                catch (Exception ex)\n                {\n                    var logger = services.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();\n                    logger.LogError(ex, \"Create DB structure error. \");\n                }\n            }\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =&gt;\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =&gt;\n                {\n                    webBuilder.UseStartup&lt;Startup&gt;();\n                });\n    }\n}\n</code></pre>\n<p>我們希望讓Web應用於一開始啟動時<br>\n就會在Startup class中註冊的DB上下文服務能獲得<br>\n我們自行建立的衍生DbContext物件 \"ProductDbContext\"</p>\n<p>這裡藉由dbContext.Database.EnsureCreated();此方法來創建DB<br>\nEnsureCreated() 回傳Boolean<br>\ntrue   代表新的資料庫結構已完成建立。<br>\nfalse  代表資料庫結構已經存在不需重新建立</p>\n<p>在啟動以前先觀察目前SSMS是還存在AspNetEFCoreDb這個資料庫的<br>\n(沿用之前示範ado.net的資料庫)<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Y3DkfdkuC7.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Y3DkfdkuC7.png\"></p>\n<p>會發現再啟動完並沒有產生額外新table<br>\n因為該DB已存在<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452XcCYfjsqAy.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452XcCYfjsqAy.png\"></p>\n<p>這裡有兩種方式(適應不同情境)</p>\n<p>情境1.這是全新的一項專案<br>\n就是更改DB名稱<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452dyRQs8YWhY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452dyRQs8YWhY.png\"></p>\n<p>再重執行一次應用程式<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452I5iyNAGVPM.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452I5iyNAGVPM.png\"></p>\n<p>或是你想要用同一個Db只是若存在既有的先做刪除後建立<br>\n// Drop the database if it exists<br>\ndbContext.Database.EnsureDeleted();</p>\n<p>情境2.這是針對既有已存在的DB要再搭配EF進行開發<br>\n沿用之前示範ado.net的資料庫 (AspNetEFCoreDb這個資料庫)</p>\n<p>我們首先要啟用專案的migration機制<br>\n需要透過nuget補安裝<br>\nMicrosoft.EntityFrameworkCore.Tools</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452AiImIzpdSx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452AiImIzpdSx.png\"></p>\n<p>第一步驟.一定要先啟用和產生初始化的DB Migration<br>\n這樣子才能讓EF Core得知有捨麼DB遷移變動跟額外要補增加哪幾張Table到既有的DB當中</p>\n<p>開啟PMC (Package Manager Console)<br>\n「Tools」 - 「NuGet Package Manager」 - 「Package Manager Console」，輸入以下指令：</p>\n<pre><code>add-migration  {自行命名migration名稱}\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452F28GvR3g0F.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452F28GvR3g0F.png\"></p>\n<p>在以前的EF還有要先輸入(<a href=\"https://coolmandiary.blogspot.com/2021/10/aspnet-mvc015identitydbdb.html\" target=\"_blank\" rel=\"noreferrer noopener\">參考</a>)<br>\nenable-migrations<br>\n啟用migration機制</p>\n<p>現在到了EF Core就不用了</p>\n<p>第二步驟.<br>\n接著程式中<br>\n應該改為<br>\ndbContext.Database.Migrate();<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452hMZydEwTzd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452hMZydEwTzd.png\"></p>\n<p>再重啟應用就會看到DB多產生目標資料表以前既有的table不會有影響資料都還在</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452x2oOdlc4Gc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452x2oOdlc4Gc.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452rq2W8Tv50L.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452rq2W8Tv50L.png\"></p>\n<p>當然如果不想用啟動專方式也可以透過指令<br>\nupdate-database</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Jj2IZC0awg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452Jj2IZC0awg.png\"></p>\n<p>當應用程式部屬後通常不太可能類似自己在專案中<br>\n人工判斷有無初始化或等待資料庫遷移的任務因此也可以在程式端去藉由<br>\nDbContext.Database.GetPendingMigrations().Any()直接在應用程式做判斷</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452mwo7ltjYUz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452mwo7ltjYUz.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452wM0VjRsXLR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220113/20107452wM0VjRsXLR.png\"></p>\n<p>最終Program.cs程式</p>\n<pre><code>using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Net5EFCoreWebApiApp.Data;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            //CreateHostBuilder(args).Build().Run();\n            var host = CreateHostBuilder(args).Build();\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                try\n                {\n                    var dbContext = services.GetRequiredService&lt;ProductDbContext&gt;();\n                    //dbContext.Database.Migrate();\n                    //dbContext.Database.EnsureCreated();\n                    var result = dbContext.Database.EnsureCreated();\n                    if (!result)\n                    {\n                        if (dbContext.Database.GetPendingMigrations().Any())\n                        {\n                            dbContext.Database.Migrate();\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    var logger = services.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();\n                    logger.LogError(ex, \"Create DB structure error. \");\n                }\n            }\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =&gt;\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =&gt;\n                {\n                    webBuilder.UseStartup&lt;Startup&gt;();\n                });\n    }\n}\n</code></pre>\n<p>Ref:<br>\nAutomatic migration of Entity Framework Core<br>\n<a href=\"https://developpaper.com/automatic-migration-of-entity-framework-core/\" target=\"_blank\" rel=\"noreferrer noopener\">https://developpaper.com/automatic-migration-of-entity-framework-core/</a></p>\n<p>Where should I put Database.EnsureCreated?<br>\n<a href=\"https://pretagteam.com/question/where-should-i-put-databaseensurecreated\" target=\"_blank\" rel=\"noreferrer noopener\">https://pretagteam.com/question/where-should-i-put-databaseensurecreated</a></p>\n<p>EF core not creating tables on migrate method<br>\n<a href=\"https://stackoverflow.com/questions/50436910/ef-core-not-creating-tables-on-migrate-method\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/50436910/ef-core-not-creating-tables-on-migrate-method</a></p>\n<p>Database.Migrate() creating database but not tables, EF &amp; .NET Core 2<br>\n<a href=\"https://stackoverflow.com/questions/50507668/database-migrate-creating-database-but-not-tables-ef-net-core-2\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/50507668/database-migrate-creating-database-but-not-tables-ef-net-core-2</a></p>\n<p>How and where to call Database.EnsureCreated and Database.Migrate?<br>\n<a href=\"https://stackoverflow.com/questions/38238043/how-and-where-to-call-database-ensurecreated-and-database-migrate\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/38238043/how-and-where-to-call-database-ensurecreated-and-database-migrate</a></p>\n<p>Can't enable migrations for Entity Framework on VS 2017 .NET Core<br>\n<a href=\"https://stackoverflow.com/questions/41403824/cant-enable-migrations-for-entity-framework-on-vs-2017-net-core/41403937\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/41403824/cant-enable-migrations-for-entity-framework-on-vs-2017-net-core/41403937</a></p>\n<p>[Entity Framework 6] Code Frist (3) - Migration commands<br>\n<a href=\"https://karatejb.blogspot.com/2015/08/entity-framework-code-frist-3-migration.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://karatejb.blogspot.com/2015/08/entity-framework-code-frist-3-migration.html</a></p>\n<ol start=\"3\">\n<li>Migrations<br>\n<a href=\"https://waynecheng.coderbridge.io/2021/03/30/Migrations/\" target=\"_blank\" rel=\"noreferrer noopener\">https://waynecheng.coderbridge.io/2021/03/30/Migrations/</a>\n</li>\n</ol>\n<p>Code First 大道番外-Migrations<br>\n<a href=\"https://www.ite2.com/News.aspx?BID=6126&amp;CID=3\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.ite2.com/News.aspx?BID=6126&amp;CID=3</a></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api23apiefcorepart1.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2022/01/net-core-web-api23apiefcorepart1.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2022-01-13 09:23:24",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "23",
        "processed_content_html": "<div class=\"markdown__style\">\n<p><strong>專案前置準備</strong></p>\n<p>建立並配置好visual studio .net core web api專案</p>\n<p></p>\n<p></p>\n<p>.net5 專案中預設若我們將OpenAPI勾選起來會自動配置好Swagger文檔相關的dll與設定<br/>\n預設用的為Swashbuckle.AspNetCore<br/>\n</p>\n<p></p>\n<p>預設專案的Startup.cs</p>\n<pre></pre>\n<p>當運行專案預設就會直接跳轉至/swagger<br/>\n這個swagger UI的畫面</p>\n<p></p>\n<p>主要是因為在~\\Properties\\launchSettings.json<br/>\n\"launchUrl\": \"swagger\" 設定的關係</p>\n<pre></pre>\n<p>EF Core的安裝<br/>\nMicrosoft.EntityFrameworkCore.sqlserver</p>\n<p>在此要注意由於我目前還是用vs2019 .net5做開發<br/>\n因此太高版別的EFCore會不支援(需要vs2022 .net6)<br/>\n</p>\n<p>這裡改為5.0.13版本(不要用6.x的)</p>\n<p><br/>\nCodeFirst開發前置準備</p>\n<p>當我們經過一段時間的需求分析與資料朔模後<br/>\n會產出一些ERD和表關聯</p>\n<p>這裡就用簡單的產品分類與產品項目資訊<br/>\n設計資料庫中存在的兩張table關聯</p>\n<p>這裡資料字典如下</p>\n<p></p>\n<p>Step1.準備好資料實體模型(各自都對應一張table)於Model Folder下</p>\n<p>~\\Models\\Product.cs</p>\n<pre></pre>\n<p>~\\Models\\PCategory.cs</p>\n<pre></pre>\n<p>Step2.建立DbContext衍生類</p>\n<p>~\\Data\\ProductDbContext.cs</p>\n<pre></pre>\n<p>Step3.至appsettings.json配置DB connection string</p>\n<pre></pre>\n<p>Step4.至Startup.cs的ConfigureServices進行DB服務的依賴注入</p>\n<p>Startup.cs多引入命名空間<br/>\nusing Microsoft.EntityFrameworkCore;<br/>\nusing Net5EFCoreWebApiApp.Data;</p>\n<p>~\\Startup.cs</p>\n<pre></pre>\n<p>Step5.至主程式Program.cs中的Main()去實踐第一次(只執行一次)的DB上下文建立<br/>\n把原先的程式碼CreateHostBuilder(args).Build().Run();刪掉or註解掉<br/>\n需引入命名空間Microsoft.Extensions.DependencyInjection<br/>\nusing Microsoft.Extensions.DependencyInjection;</p>\n<p>~\\Program.cs</p>\n<pre></pre>\n<p>我們希望讓Web應用於一開始啟動時<br/>\n就會在Startup class中註冊的DB上下文服務能獲得<br/>\n我們自行建立的衍生DbContext物件 \"ProductDbContext\"</p>\n<p>這裡藉由dbContext.Database.EnsureCreated();此方法來創建DB<br/>\nEnsureCreated() 回傳Boolean<br/>\ntrue   代表新的資料庫結構已完成建立。<br/>\nfalse  代表資料庫結構已經存在不需重新建立</p>\n<p>在啟動以前先觀察目前SSMS是還存在AspNetEFCoreDb這個資料庫的<br/>\n(沿用之前示範ado.net的資料庫)<br/>\n</p>\n<p>會發現再啟動完並沒有產生額外新table<br/>\n因為該DB已存在<br/>\n</p>\n<p>這裡有兩種方式(適應不同情境)</p>\n<p>情境1.這是全新的一項專案<br/>\n就是更改DB名稱<br/>\n</p>\n<p>再重執行一次應用程式<br/>\n</p>\n<p>或是你想要用同一個Db只是若存在既有的先做刪除後建立<br/>\n// Drop the database if it exists<br/>\ndbContext.Database.EnsureDeleted();</p>\n<p>情境2.這是針對既有已存在的DB要再搭配EF進行開發<br/>\n沿用之前示範ado.net的資料庫 (AspNetEFCoreDb這個資料庫)</p>\n<p>我們首先要啟用專案的migration機制<br/>\n需要透過nuget補安裝<br/>\nMicrosoft.EntityFrameworkCore.Tools</p>\n<p></p>\n<p>第一步驟.一定要先啟用和產生初始化的DB Migration<br/>\n這樣子才能讓EF Core得知有捨麼DB遷移變動跟額外要補增加哪幾張Table到既有的DB當中</p>\n<p>開啟PMC (Package Manager Console)<br/>\n「Tools」 - 「NuGet Package Manager」 - 「Package Manager Console」，輸入以下指令：</p>\n<pre></pre>\n<p></p>\n<p>在以前的EF還有要先輸入()<br/>\nenable-migrations<br/>\n啟用migration機制</p>\n<p>現在到了EF Core就不用了</p>\n<p>第二步驟.<br/>\n接著程式中<br/>\n應該改為<br/>\ndbContext.Database.Migrate();<br/>\n</p>\n<p>再重啟應用就會看到DB多產生目標資料表以前既有的table不會有影響資料都還在</p>\n<p></p>\n<p></p>\n<p>當然如果不想用啟動專方式也可以透過指令<br/>\nupdate-database</p>\n<p></p>\n<p>當應用程式部屬後通常不太可能類似自己在專案中<br/>\n人工判斷有無初始化或等待資料庫遷移的任務因此也可以在程式端去藉由<br/>\nDbContext.Database.GetPendingMigrations().Any()直接在應用程式做判斷</p>\n<p></p>\n<p></p>\n<p>最終Program.cs程式</p>\n<pre></pre>\n<p>Ref:<br/>\nAutomatic migration of Entity Framework Core<br/>\n</p>\n<p>Where should I put Database.EnsureCreated?<br/>\n</p>\n<p>EF core not creating tables on migrate method<br/>\n</p>\n<p>Database.Migrate() creating database but not tables, EF &amp; .NET Core 2<br/>\n</p>\n<p>How and where to call Database.EnsureCreated and Database.Migrate?<br/>\n</p>\n<p>Can't enable migrations for Entity Framework on VS 2017 .NET Core<br/>\n</p>\n<p>[Entity Framework 6] Code Frist (3) - Migration commands<br/>\n</p>\n<ol start=\"3\">\n<li>Migrations<br/>\n\n</li>\n</ol>\n<p>Code First 大道番外-Migrations<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "專案前置準備\n建立並配置好visual studio .net core web api專案\n\n\n.net5 專案中預設若我們將OpenAPI勾選起來會自動配置好Swagger文檔相關的dll與設定\n預設用的為Swashbuckle.AspNetCore\n\n\n預設專案的Startup.cs\n\n當運行專案預設就會直接跳轉至/swagger\n這個swagger UI的畫面\n\n主要是因為在~\\Properties\\launchSettings.json\n\"launchUrl\": \"swagger\" 設定的關係\n\nEF Core的安裝\nMicrosoft.EntityFrameworkCore.sqlserver\n在此要注意由於我目前還是用vs2019 .net5做開發\n因此太高版別的EFCore會不支援(需要vs2022 .net6)\n\n這裡改為5.0.13版本(不要用6.x的)\n\nCodeFirst開發前置準備\n當我們經過一段時間的需求分析與資料朔模後\n會產出一些ERD和表關聯\n這裡就用簡單的產品分類與產品項目資訊\n設計資料庫中存在的兩張table關聯\n這裡資料字典如下\n\nStep1.準備好資料實體模型(各自都對應一張table)於Model Folder下\n~\\Models\\Product.cs\n\n~\\Models\\PCategory.cs\n\nStep2.建立DbContext衍生類\n~\\Data\\ProductDbContext.cs\n\nStep3.至appsettings.json配置DB connection string\n\nStep4.至Startup.cs的ConfigureServices進行DB服務的依賴注入\nStartup.cs多引入命名空間\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\n~\\Startup.cs\n\nStep5.至主程式Program.cs中的Main()去實踐第一次(只執行一次)的DB上下文建立\n把原先的程式碼CreateHostBuilder(args).Build().Run();刪掉or註解掉\n需引入命名空間Microsoft.Extensions.DependencyInjection\nusing Microsoft.Extensions.DependencyInjection;\n~\\Program.cs\n\n我們希望讓Web應用於一開始啟動時\n就會在Startup class中註冊的DB上下文服務能獲得\n我們自行建立的衍生DbContext物件 \"ProductDbContext\"\n這裡藉由dbContext.Database.EnsureCreated();此方法來創建DB\nEnsureCreated() 回傳Boolean\ntrue   代表新的資料庫結構已完成建立。\nfalse  代表資料庫結構已經存在不需重新建立\n在啟動以前先觀察目前SSMS是還存在AspNetEFCoreDb這個資料庫的\n(沿用之前示範ado.net的資料庫)\n\n會發現再啟動完並沒有產生額外新table\n因為該DB已存在\n\n這裡有兩種方式(適應不同情境)\n情境1.這是全新的一項專案\n就是更改DB名稱\n\n再重執行一次應用程式\n\n或是你想要用同一個Db只是若存在既有的先做刪除後建立\n// Drop the database if it exists\ndbContext.Database.EnsureDeleted();\n情境2.這是針對既有已存在的DB要再搭配EF進行開發\n沿用之前示範ado.net的資料庫 (AspNetEFCoreDb這個資料庫)\n我們首先要啟用專案的migration機制\n需要透過nuget補安裝\nMicrosoft.EntityFrameworkCore.Tools\n\n第一步驟.一定要先啟用和產生初始化的DB Migration\n這樣子才能讓EF Core得知有捨麼DB遷移變動跟額外要補增加哪幾張Table到既有的DB當中\n開啟PMC (Package Manager Console)\n「Tools」 - 「NuGet Package Manager」 - 「Package Manager Console」，輸入以下指令：\n\n\n在以前的EF還有要先輸入()\nenable-migrations\n啟用migration機制\n現在到了EF Core就不用了\n第二步驟.\n接著程式中\n應該改為\ndbContext.Database.Migrate();\n\n再重啟應用就會看到DB多產生目標資料表以前既有的table不會有影響資料都還在\n\n\n當然如果不想用啟動專方式也可以透過指令\nupdate-database\n\n當應用程式部屬後通常不太可能類似自己在專案中\n人工判斷有無初始化或等待資料庫遷移的任務因此也可以在程式端去藉由\nDbContext.Database.GetPendingMigrations().Any()直接在應用程式做判斷\n\n\n最終Program.cs程式\n\nRef:\nAutomatic migration of Entity Framework Core\n\nWhere should I put Database.EnsureCreated?\n\nEF core not creating tables on migrate method\n\nDatabase.Migrate() creating database but not tables, EF & .NET Core 2\n\nHow and where to call Database.EnsureCreated and Database.Migrate?\n\nCan't enable migrations for Entity Framework on VS 2017 .NET Core\n\n[Entity Framework 6] Code Frist (3) - Migration commands\n\n\nMigrations\n\n\n\nCode First 大道番外-Migrations\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n            services.AddControllers();\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Net5EFCoreWebApiApp\", Version = \"v1\" });\n            });\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Net5EFCoreWebApiApp v1\"));\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:12099\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"Net5EFCoreWebApiApp\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": \"true\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5000\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Models\n{\n    public class Product\n    {\n        /// <summary>\n        /// 產品ID\n        /// </summary>\n        [Key]\n        public Guid ProId { get; set; }\n\n        /// <summary>\n        /// 產品名稱\n        /// </summary>\n        [MaxLength(200)]\n        public string ProTitle { get; set; }\n\n        /// <summary>\n        /// 產品總數\n        /// </summary>\n        public int ProSum { get; set; }\n\n        /// <summary>\n        /// 產品價格\n        /// </summary>\n        public Decimal ProPrice { get; set; }\n\n        /// <summary>\n        /// 產品類別ID\n        /// </summary>\n        public Guid PCategoryId { get; set; }\n        [ForeignKey(\"PCategoryId\")]\n        public PCategory PCategory { get; set; }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace Net5EFCoreWebApiApp.Models\n{\n    public class PCategory\n    {\n        /// <summary>\n        /// 產品分類ID\n        /// </summary>\n        [Key]\n        public Guid CId { get; set; }\n\n        /// <summary>\n        /// 產品分類標題\n        /// </summary>\n        [MaxLength(100)]\n        public string CTitle { get; set; }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Models;\n\nnamespace Net5EFCoreWebApiApp.Data\n{\n    public class ProductDbContext : DbContext\n    {\n        public ProductDbContext(DbContextOptions<ProductDbContext> options) : base(options)\n        {\n\n        }\n        public DbSet<Product> Products { get; set; }\n        public DbSet<PCategory> PCategories { get; set; }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"ConnectionStrings\": {\n    \"ProductDb\" : \"Server=.;Database=AspNetEFCoreDb;uid=sa;pwd=rootroot\"\n  }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Net5EFCoreWebApiApp.Data;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddDbContext<ProductDbContext>(options => \n                options.UseSqlServer(Configuration.GetConnectionString(\"ProductDb\")));\n            services.AddControllers();\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Net5EFCoreWebApiApp\", Version = \"v1\" });\n            });\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Net5EFCoreWebApiApp v1\"));\n            }\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Net5EFCoreWebApiApp.Data;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            //CreateHostBuilder(args).Build().Run();\n            var host = CreateHostBuilder(args).Build();\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                try\n                {\n                    var dbContext = services.GetRequiredService<ProductDbContext>();\n                    dbContext.Database.EnsureCreated();\n                }\n                catch (Exception ex)\n                {\n                    var logger = services.GetRequiredService<ILogger<Program>>();\n                    logger.LogError(ex, \"Create DB structure error. \");\n                }\n            }\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "add-migration  {自行命名migration名稱}\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Net5EFCoreWebApiApp.Data;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Net5EFCoreWebApiApp\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            //CreateHostBuilder(args).Build().Run();\n            var host = CreateHostBuilder(args).Build();\n            using (var scope = host.Services.CreateScope())\n            {\n                var services = scope.ServiceProvider;\n                try\n                {\n                    var dbContext = services.GetRequiredService<ProductDbContext>();\n                    //dbContext.Database.Migrate();\n                    //dbContext.Database.EnsureCreated();\n                    var result = dbContext.Database.EnsureCreated();\n                    if (!result)\n                    {\n                        if (dbContext.Database.GetPendingMigrations().Any())\n                        {\n                            dbContext.Database.Migrate();\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    var logger = services.GetRequiredService<ILogger<Program>>();\n                    logger.LogError(ex, \"Create DB structure error. \");\n                }\n            }\n            host.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "專案 前置 準備\n建立 並 配置 好 visual\nstudio\n. net\ncore\nweb\napi 專案\n. net5\n專案 中 預設 若 我們 將 OpenAPI 勾選 起來 會 自動 配置 好 Swagger 文檔 相關 的 dll 與 設定\n預設 用 的 為 Swashbuckle . AspNetCore\n預設 專案 的 Startup . cs\n當 運行 專案 預設 就 會 直接 跳轉 至 / swagger\n這個 swagger\nUI 的 畫面\n主要 是 因為 在 ~ \\ Properties \\ launchSettings . json\n\" launchUrl \" :\n\" swagger \"\n設定 的 關係\nEF\nCore 的 安裝\nMicrosoft . EntityFrameworkCore . sqlserver\n在 此要 注意 由於 我 目前 還是 用 vs2019\n. net5 做 開發\n因此 太高版 別的 EFCore 會 不 支援 ( 需要 vs2022\n. net6 )\n這裡 改為 5.0 . 13 版本 ( 不要 用 6 . x 的 )\nCodeFirst 開發 前置 準備\n當 我們 經過 一段時間 的 需求 分析 與 資料 朔模 後\n會 產出 一些 ERD 和表 關聯\n這裡 就 用 簡單 的 產品 分類 與 產品 項目 資訊\n設計 資料庫 中 存在 的 兩張 table 關聯\n這裡 資料 字典 如下\nStep1 . 準備 好 資料 實體模型 ( 各自 都 對應 一張 table ) 於 Model\nFolder 下\n~ \\ Models \\ Product . cs\n~ \\ Models \\ PCategory . cs\nStep2 . 建立 DbContext 衍生 類\n~ \\ Data \\ ProductDbContext . cs\nStep3 . 至 appsettings . json 配置 DB\nconnection\nstring\nStep4 . 至 Startup . cs 的 ConfigureServices 進行 DB 服務 的 依賴 注入\nStartup . cs 多 引入 命名 空間\nusing\nMicrosoft . EntityFrameworkCore ;\nusing\nNet5EFCoreWebApiApp . Data ;\n~ \\ Startup . cs\nStep5 . 至主 程式 Program . cs 中 的 Main ( ) 去 實踐 第一次 ( 只 執行 一次 ) 的 DB 上下文 建立\n把 原先 的 程式碼 CreateHostBuilder ( args ) . Build ( ) . Run ( ) ; 刪掉 or 註解 掉\n需 引入 命名 空間 Microsoft . Extensions . DependencyInjection\nusing\nMicrosoft . Extensions . DependencyInjection ;\n~ \\ Program . cs\n我們 希望 讓 Web 應 用於 一 開始 啟動時\n就 會 在 Startup\nclass 中 註冊 的 DB 上下文 服務 能 獲得\n我們 自行 建立 的 衍生 DbContext 物件\n\" ProductDbContext \"\n這裡 藉由 dbContext . Database . EnsureCreated ( ) ; 此 方法 來 創建 DB\nEnsureCreated ( )\n回傳 Boolean\ntrue\n代表 新 的 資料庫 結構 已 完成 建立 。\nfalse\n代表 資料庫 結構 已經 存在 不需 重新 建立\n在 啟動 以前 先 觀察 目前 SSMS 是還 存在 AspNetEFCoreDb 這個 資料庫 的\n( 沿用 之前 示範 ado . net 的 資料庫 )\n會 發現 再 啟動 完並 沒有 產生 額外 新 table\n因為 該 DB 已 存在\n這裡 有 兩種 方式 ( 適應 不同 情境 )\n情境 1 . 這是 全新 的 一項 專案\n就是 更改 DB 名稱\n再重 執行 一次 應用程式\n或是 你 想要 用 同一個 Db 只是 若 存在 既有 的 先 做 刪除 後 建立\n/ /\nDrop\nthe\ndatabase\nif\nit\nexists\ndbContext . Database . EnsureDeleted ( ) ;\n情境 2 . 這是 針對 既有 已 存在 的 DB 要 再 搭配 EF 進行 開發\n沿用 之前 示範 ado . net 的 資料庫\n( AspNetEFCoreDb 這個 資料庫 )\n我們 首先 要 啟用 專案 的 migration 機制\n需要 透過 nuget 補 安裝\nMicrosoft . EntityFrameworkCore . Tools\n第一 步驟 . 一定 要 先 啟用 和 產生 初始化 的 DB\nMigration\n這樣 子 才能 讓 EF\nCore 得知 有 捨 麼 DB 遷移 變動 跟 額外 要 補 增加 哪 幾張 Table 到 既有 的 DB 當中\n開啟 PMC\n( Package\nManager\nConsole )\n「 Tools 」\n-\n「 NuGet\nPackage\nManager 」\n-\n「 Package\nManager\nConsole 」 ， 輸入 以下 指令 ：\n在 以前 的 EF 還有 要 先 輸入 ( )\nenable - migrations\n啟用 migration 機制\n現在 到 了 EF\nCore 就 不用 了\n第二 步驟 .\n接著 程式 中\n應該 改為\ndbContext . Database . Migrate ( ) ;\n再 重啟 應用 就 會 看到 DB 多 產生 目標 資料 表 以前 既有 的 table 不會 有 影響 資料 都 還在\n當然 如果 不想 用 啟動專 方式 也 可以 透過 指令\nupdate - database\n當 應用程式 部屬 後 通常 不太可能 類似 自己 在 專案 中\n人工 判斷 有無 初始化 或 等待 資料庫 遷移 的 任務 因此 也 可以 在 程式 端 去 藉由\nDbContext . Database . GetPendingMigrations ( ) . Any ( ) 直接 在 應用程式 做 判斷\n最終 Program . cs 程式\nRef :\nAutomatic\nmigration\nof\nEntity\nFramework\nCore\nWhere\nshould\nI\nput\nDatabase . EnsureCreated ?\nEF\ncore\nnot\ncreating\ntables\non\nmigrate\nmethod\nDatabase . Migrate ( )\ncreating\ndatabase\nbut\nnot\ntables ,\nEF\n&\n. NET\nCore\n2\nHow\nand\nwhere\nto\ncall\nDatabase . EnsureCreated\nand\nDatabase . Migrate ?\nCan ' t\nenable\nmigrations\nfor\nEntity\nFramework\non\nVS\n2017\n. NET\nCore\n[ Entity\nFramework\n6 ]\nCode\nFrist\n( 3 )\n-\nMigration\ncommands\nMigrations\nCode\nFirst\n大道 番外 - Migrations\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "專案 前置\n建立 配置 visual\nstudio\nnet\ncore\nweb\napi 專案\nnet5\n專案 中 預設 openapi 勾選 會 自動 配置 swagger 文檔 相關 dll 設定\n預設 swashbuckle aspnetcore\n預設 專案 startup cs\n運行 專案 預設 會 跳轉 swagger\nswagger\nui 畫面\nproperties launchsettings json\nlaunchurl\nswagger\n設定 關係\nef\ncore 安裝\nmicrosoft entityframeworkcore sqlserver\n此要 vs2019\nnet5 做 開發\n太高版 efcore 會 支援 vs2022\nnet6\n改為 5.0 13 版本 6 x\ncodefirst 開發 前置\n一段時間 需求 分析 資料 朔模\n會 產出 erd 和表 關聯\n簡單 產品 分類 產品 項目 資訊\n設計 資料庫 中 兩張 table 關聯\n資料 字典\nstep1 資料 實體模型 一張 table model\nfolder\nmodels product cs\nmodels pcategory cs\nstep2 建立 dbcontext 衍生 類\ndata productdbcontext cs\nstep3 appsettings json 配置 db\nconnection\nstring\nstep4 startup cs configureservices db 服務 依賴 注入\nstartup cs 引入 命名 空間\nusing\nmicrosoft entityframeworkcore\nusing\nnet5efcorewebapiapp data\nstartup cs\nstep5 至主 程式 program cs 中 main 實踐 第一次 執行 db 上下文 建立\n原先 程式碼 createhostbuilder args build run 刪掉 註解 掉\n需 引入 命名 空間 microsoft extensions dependencyinjection\nusing\nmicrosoft extensions dependencyinjection\nprogram cs\n希望 web 應 用於 啟動時\n會 startup\nclass 中 註冊 db 上下文 服務\n自行 建立 衍生 dbcontext 物件\nproductdbcontext\n藉由 dbcontext database ensurecreated 方法 創建 db\nensurecreated\n回傳 boolean\ntrue\n代表 新 資料庫 結構 建立\nfalse\n代表 資料庫 結構 不需 建立\n啟動 先 觀察 ssms 是還 aspnetefcoredb 資料庫\n沿用 示範 ado net 資料庫\n會 發現 啟動 完並 額外 新 table\ndb\n兩種 方式 情境\n情境 1 這是 全新 一項 專案\n更改 db 名稱\n再重 執行 應用程式\n想要 同一個 db 既有 先 做 刪除 建立\n\ndrop\n\ndatabase\n\n\nexists\ndbcontext database ensuredeleted\n情境 2 這是 針對 既有 db 搭配 ef 開發\n沿用 示範 ado net 資料庫\naspnetefcoredb 資料庫\n啟用 專案 migration 機制\n透過 nuget 補 安裝\nmicrosoft entityframeworkcore tools\n第一 步驟 先 啟用 初始化 db\nmigration\n子 才能 ef\ncore 得知 捨 db 遷移 變動 額外 補 增加 幾張 table 既有 db 當中\n開啟 pmc\npackage\nmanager\nconsole\ntools\n\nnuget\npackage\nmanager\n\npackage\nmanager\nconsole 輸入 指令\nef 先 輸入\nenable migrations\n啟用 migration 機制\nef\ncore 不用\n第二 步驟\n程式 中\n改為\ndbcontext database migrate\n重啟 會 db 目標 資料 表 既有 table 影響 資料 還在\n不想 啟動專 方式 透過 指令\nupdate database\n應用程式 部屬 不太可能 類似 專案 中\n人工 判斷 有無 初始化 等待 資料庫 遷移 程式 端 藉由\ndbcontext database getpendingmigrations any 應用程式 做 判斷\n最終 program cs 程式\nref\nautomatic\nmigration\n\nentity\nframework\ncore\nwhere\nshould\ni\nput\ndatabase ensurecreated\nef\ncore\n\ncreating\ntables\n\nmigrate\nmethod\ndatabase migrate\ncreating\ndatabase\nbut\n\ntables\nef\n\nnet\ncore\n2\nhow\n\nwhere\n\ncall\ndatabase ensurecreated\n\ndatabase migrate\n' t\nenable\nmigrations\n\nentity\nframework\n\nvs\n2017\nnet\ncore\nentity\nframework\n6\ncode\nfrist\n3\n\nmigration\ncommands\nmigrations\ncode\nfirst\n大道 番外 migrations\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "net5efcorewebapiapp",
            "aspnetefcoredb",
            "aspnetcore",
            "entityframeworkcore",
            "net5"
        ],
        "extracted_keywords_phrases": [
            "using net5efcorewebapiapp",
            "net5efcorewebapiapp",
            "net5 專案",
            "aspnetcore 預設",
            "專案 net5"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283595": {
        "href": "https://ithelp.ithome.com.tw/articles/10283595",
        "title": "資料驗證(golang)(Day23)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>文章同步更新於個人官網<br>\n<a href=\"https://kevinyay945.com/smart-home-tutorial/023\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/023</a></p>\n<p>在網頁的後端，除了要能正常地給存取資料，另一個重要的功能就是要有驗證資料是不是正確的功能，當使用者提供了一個不符合我們需求的資料時，就需要我們主動體醒使用者你哪邊有問題，應該往什麼方向去改</p>\n<p>因此，現在就是要進行資料驗證的功能</p>\n<p>這次要使用的也是echo官方推薦的驗證的套件<br>\n<a href=\"https://github.com/go-playground/validator\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/go-playground/validator</a></p>\n<p>而這是官網介紹的，將validator透過一開始宣告的時候直接注入，讓整個echo中都可以使用同一個validator<br>\n<a href=\"https://echo.labstack.com/guide/request/#validate-data\" target=\"_blank\" rel=\"noreferrer noopener\">https://echo.labstack.com/guide/request/#validate-data</a><br>\n只要透過此方法，就可以在echo的router中使用一開始放入的validator來驗證資料</p>\n<p>以下為這次的code跟編輯的過程<br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.5.0\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.5.0</a><br>\n<a href=\"https://www.youtube.com/watch?v=ZlHrnL8Wk94\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=ZlHrnL8Wk94</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-01-10 20:32:43",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "23",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>文章同步更新於個人官網<br/>\n</p>\n<p>在網頁的後端，除了要能正常地給存取資料，另一個重要的功能就是要有驗證資料是不是正確的功能，當使用者提供了一個不符合我們需求的資料時，就需要我們主動體醒使用者你哪邊有問題，應該往什麼方向去改</p>\n<p>因此，現在就是要進行資料驗證的功能</p>\n<p>這次要使用的也是echo官方推薦的驗證的套件<br/>\n</p>\n<p>而這是官網介紹的，將validator透過一開始宣告的時候直接注入，讓整個echo中都可以使用同一個validator<br/>\n<br/>\n只要透過此方法，就可以在echo的router中使用一開始放入的validator來驗證資料</p>\n<p>以下為這次的code跟編輯的過程<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "文章同步更新於個人官網\n\n在網頁的後端，除了要能正常地給存取資料，另一個重要的功能就是要有驗證資料是不是正確的功能，當使用者提供了一個不符合我們需求的資料時，就需要我們主動體醒使用者你哪邊有問題，應該往什麼方向去改\n因此，現在就是要進行資料驗證的功能\n這次要使用的也是echo官方推薦的驗證的套件\n\n而這是官網介紹的，將validator透過一開始宣告的時候直接注入，讓整個echo中都可以使用同一個validator\n\n只要透過此方法，就可以在echo的router中使用一開始放入的validator來驗證資料\n以下為這次的code跟編輯的過程",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "文章 同步 更新 於 個人 官網\n在 網頁 的 後 端 ， 除了 要 能 正常 地給 存取 資料 ， 另 一個 重要 的 功能 就是 要 有 驗證 資料 是不是 正確 的 功能 ， 當 使用者 提供 了 一個 不 符合 我們 需求 的 資料 時 ， 就 需要 我們 主動 體醒 使用者 你 哪邊 有 問題 ， 應該 往 什麼 方向 去 改\n因此 ， 現在 就是 要 進行 資料 驗證 的 功能\n這次 要 使用 的 也 是 echo 官方 推薦 的 驗證 的 套件\n而 這是 官網 介紹 的 ， 將 validator 透過 一 開始 宣告 的 時候 直接 注入 ， 讓 整個 echo 中 都 可以 使用 同一個 validator\n只要 透過 此 方法 ， 就 可以 在 echo 的 router 中 使用 一 開始 放入 的 validator 來 驗證 資料\n以下 為 這次 的 code 跟 編輯 的 過程",
        "word_seg_processed_content_text": "文章 同步 更新 官網\n網頁 端 地給 存取 資料 功能 驗證 資料 正確 功能 使用者 提供 符合 需求 資料 時 主動 體醒 使用者 方向 改\n資料 驗證 功能\n這次 echo 官方 推薦 驗證 套件\n這是 官網 介紹 validator 透過 宣告 注入 echo 中 同一個 validator\n透過 方法 echo router 中 放入 validator 驗證 資料\n這次 code 編輯 過程",
        "extracted_keywords": [
            "validator",
            "驗證",
            "同步",
            "echo",
            "使用者"
        ],
        "extracted_keywords_phrases": [
            "validator 透過",
            "放入 validator",
            "validator 驗證",
            "介紹 validator",
            "同一個 validator"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283590": {
        "href": "https://ithelp.ithome.com.tw/articles/10283590",
        "title": ".Net Core Web Api_筆記22_Swagger自訂文件並讀取API註解描述",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>Swagger剛開始可以將其理解成網頁版本的postman</p>\n<p>我們可以對其測試發送資料看回傳結果</p>\n<p>在預設webapi專案產生的WeatherForecastController<br>\n新增一個post action</p>\n<pre><code>using Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        private readonly ILogger&lt;WeatherForecastController&gt; _logger;\n\n        public WeatherForecastController(ILogger&lt;WeatherForecastController&gt; logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public IEnumerable&lt;WeatherForecast&gt; Get()\n        {\n            var rng = new Random();\n            return Enumerable.Range(1, 5).Select(index =&gt; new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n\n        [HttpPost(\"Add\")]\n        public string AddWeatherForecast(WeatherForecast weather)\n        {\n            if(weather != null)\n            {\n                DateTime dt = weather.Date;\n                string summary = weather.Summary;\n                int TemperatureC = weather.TemperatureC;\n                int TemperatureF = weather.TemperatureF;\n                return \"1\";\n            }\n            return \"0\";\n        }\n\n\n\n    }\n}\n</code></pre>\n<p>在此準備一份json 測試資料嘗試post</p>\n<pre><code>{\n   \"date\":\"2022-06-09T09:49:03.3956842+08:00\",\n   \"temperatureC\":9,\n   \"temperatureF\":47,\n   \"summary\":\"Hot\"\n}\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074526SjpUrv974.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074526SjpUrv974.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452A5ZPtJgctr.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452A5ZPtJgctr.png\"></p>\n<p>在專案中下中斷點</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452yh47oAOH3e.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452yh47oAOH3e.png\"></p>\n<p>下方則會呈現回應結果與curl對應呼叫語法轉譯<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452hs6vUg9i58.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452hs6vUg9i58.png\"></p>\n<p>而在Swagger中若我們想自訂API文檔給其他外部開發者或廠商去做使用<br>\n移至我們的Startup.cs的ConfigureServices方法</p>\n<pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllers();\n    services.AddSwaggerDocument(config =&gt; {\n        config.PostProcess = document =&gt;\n        {\n            //API版號\n            document.Info.Version = \"v1.0.1\";\n            //API名稱\n            document.Info.Title = \"廠房MES API 測試\";\n            //API描述介紹\n            document.Info.Description = \"提供原物料資料查詢存取\";\n            //API聯絡人資訊\n            document.Info.Contact = new NSwag.OpenApiContact\n            {\n                Name = \"XXX科技\",\n                Email = \"ppap@outlook.com\",\n                Url = \"https://#\"\n            };\n            //API授權許可資訊\n            document.Info.License = new NSwag.OpenApiLicense\n            {\n                Name = \"XXX科技 版權所有\",\n                Url = \"https://#\"\n            };\n        };\n    });//註冊NSwag提供的服務\n}\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452M7DqTYrHXc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452M7DqTYrHXc.png\"></p>\n<p>而一般API官方文件也會習慣寫中英文的註解描述各隻API功能<br>\n在C#專案我們都知道可透過XML在每個函數、method上方添加功能描述註解</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074524O5xKw6c97.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074524O5xKw6c97.png\"></p>\n<p>若寫好的API這樣子呈現別人會不曉得功能與目的</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452EQ6OlnMzCG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20107452EQ6OlnMzCG.png\"></p>\n<p>由於預設專案是不會開啟產生XML註解並讀取機制的<br>\n因此要自己去開啟</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074529GL3xi2JNO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074529GL3xi2JNO.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074529N4JzBb1gu.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/201074529N4JzBb1gu.png\"></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2022/01/net-core-web-api22swagger.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2022/01/net-core-web-api22swagger.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2022-01-10 17:24:19",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "22",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>Swagger剛開始可以將其理解成網頁版本的postman</p>\n<p>我們可以對其測試發送資料看回傳結果</p>\n<p>在預設webapi專案產生的WeatherForecastController<br/>\n新增一個post action</p>\n<pre></pre>\n<p>在此準備一份json 測試資料嘗試post</p>\n<pre></pre>\n<p></p>\n<p></p>\n<p>在專案中下中斷點</p>\n<p></p>\n<p>下方則會呈現回應結果與curl對應呼叫語法轉譯<br/>\n</p>\n<p>而在Swagger中若我們想自訂API文檔給其他外部開發者或廠商去做使用<br/>\n移至我們的Startup.cs的ConfigureServices方法</p>\n<pre></pre>\n<p></p>\n<p>而一般API官方文件也會習慣寫中英文的註解描述各隻API功能<br/>\n在C#專案我們都知道可透過XML在每個函數、method上方添加功能描述註解</p>\n<p></p>\n<p>若寫好的API這樣子呈現別人會不曉得功能與目的</p>\n<p></p>\n<p>由於預設專案是不會開啟產生XML註解並讀取機制的<br/>\n因此要自己去開啟</p>\n<p></p>\n<p></p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "Swagger剛開始可以將其理解成網頁版本的postman\n我們可以對其測試發送資料看回傳結果\n在預設webapi專案產生的WeatherForecastController\n新增一個post action\n\n在此準備一份json 測試資料嘗試post\n\n\n\n在專案中下中斷點\n\n下方則會呈現回應結果與curl對應呼叫語法轉譯\n\n而在Swagger中若我們想自訂API文檔給其他外部開發者或廠商去做使用\n移至我們的Startup.cs的ConfigureServices方法\n\n\n而一般API官方文件也會習慣寫中英文的註解描述各隻API功能\n在C#專案我們都知道可透過XML在每個函數、method上方添加功能描述註解\n\n若寫好的API這樣子呈現別人會不曉得功能與目的\n\n由於預設專案是不會開啟產生XML註解並讀取機制的\n因此要自己去開啟\n\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            var rng = new Random();\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = rng.Next(-20, 55),\n                Summary = Summaries[rng.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n\n        [HttpPost(\"Add\")]\n        public string AddWeatherForecast(WeatherForecast weather)\n        {\n            if(weather != null)\n            {\n                DateTime dt = weather.Date;\n                string summary = weather.Summary;\n                int TemperatureC = weather.TemperatureC;\n                int TemperatureF = weather.TemperatureF;\n                return \"1\";\n            }\n            return \"0\";\n        }\n\n\n\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "{\n   \"date\":\"2022-06-09T09:49:03.3956842+08:00\",\n   \"temperatureC\":9,\n   \"temperatureF\":47,\n   \"summary\":\"Hot\"\n}\n"
            },
            {
                "language": "unknown",
                "content": "public void ConfigureServices(IServiceCollection services)\n{\n    services.AddControllers();\n    services.AddSwaggerDocument(config => {\n        config.PostProcess = document =>\n        {\n            //API版號\n            document.Info.Version = \"v1.0.1\";\n            //API名稱\n            document.Info.Title = \"廠房MES API 測試\";\n            //API描述介紹\n            document.Info.Description = \"提供原物料資料查詢存取\";\n            //API聯絡人資訊\n            document.Info.Contact = new NSwag.OpenApiContact\n            {\n                Name = \"XXX科技\",\n                Email = \"ppap@outlook.com\",\n                Url = \"https://#\"\n            };\n            //API授權許可資訊\n            document.Info.License = new NSwag.OpenApiLicense\n            {\n                Name = \"XXX科技 版權所有\",\n                Url = \"https://#\"\n            };\n        };\n    });//註冊NSwag提供的服務\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "Swagger 剛 開始 可以 將其 理解 成 網頁 版本 的 postman\n我們 可以 對 其 測試 發送 資料 看 回傳 結果\n在 預設 webapi 專案 產生 的 WeatherForecastController\n新增 一個 post\naction\n在 此 準備 一份 json\n測試 資料 嘗試 post\n在 專案 中 下 中斷點\n下方 則會 呈現 回應 結果 與 curl 對應 呼叫 語法 轉譯\n而 在 Swagger 中若 我們 想 自訂 API 文檔 給 其他 外部 開發者 或 廠商 去 做 使用\n移至 我們 的 Startup . cs 的 ConfigureServices 方法\n而 一般 API 官方 文件 也 會 習慣 寫 中英文 的 註解 描述 各 隻 API 功能\n在 C# 專案 我們 都 知道 可 透過 XML 在 每個 函數 、 method 上方 添加 功能 描述 註解\n若 寫 好 的 API 這樣 子 呈現 別人 會 不 曉得 功能 與 目的\n由於 預設 專案 是 不會 開啟 產生 XML 註解 並 讀取 機制 的\n因此 要 自己 去 開啟\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "swagger 剛 將其 理解 成 網頁 版本 postman\n測試 發送 資料 回傳\n預設 webapi 專案 weatherforecastcontroller\n新增 post\naction\n一份 json\n測試 資料 嘗試 post\n專案 中 中斷點\n下方 則會 呈現 回應 curl 呼叫 語法 轉譯\nswagger 中若 想 自訂 api 文檔 外部 開發者 廠商 做\n移至 startup cs configureservices 方法\napi 官方 文件 會 習慣 寫 中英文 註解 描述 隻 api 功能\nc# 專案 透過 xml 函數 method 上方 添加 功能 描述 註解\n寫 api 子 呈現 別人 會 曉得 功能 目的\n預設 專案 開啟 xml 註解 讀取 機制\n開啟\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "webapi",
            "json",
            "post",
            "swagger",
            "網頁"
        ],
        "extracted_keywords_phrases": [
            "webapi 專案",
            "預設 webapi",
            "post 專案",
            "postman 測試",
            "json 測試"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283582": {
        "href": "https://ithelp.ithome.com.tw/articles/10283582",
        "title": "[Day??] 2021 iThome 鐵人賽 - 頒獎典禮 @ 2022.01.08‧輔仁大學",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h2>前言</h2>\n<p>抱歉打擾了XD 但是我真的太想來分享，所以還是厚著臉皮(?)來po文了XD<br>\n我這次有參加鐵人賽的頒獎典禮XD<br>\n雖然我根本不是得獎者XD<br>\n(因為我有別的私心，繼續往下看就會知道XD)</p>\n<h2>本日正文</h2>\n<p>去年是我第二次參加，<br>\n今年的獎狀有壓參賽題目是我覺得很驚喜的地方!!!!!!!!!!<br>\n而且不是得獎者也有專屬 badge 耶，怎麼這麼好!!!!!!!!<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873jAzO938VRp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873jAzO938VRp.png\"></p>\n<h3>醉翁之意不在酒</h3>\n<p>今年我不是得獎者也要千里迢迢&amp;&amp;千方百計的參加頒獎典禮，<br>\n就是因為我看到今年頒獎典禮辦在輔仁大學!!!!!!!!!!!<br>\n那你可能會問，輔仁大學有什麼嗎？<br>\n這次東京奧運好幾個優秀的選手在輔仁大學唸書啊!!!!!!!!!!!!<br>\n尤其是我的三次元偶像怡靜跟昀儒就是輔大的學生XD<br>\n所以我想輔大一定有什麼相關佈景可以拍吧XD</p>\n<p>其實一開始剛進輔大一直到頒獎典禮地點，一路上都沒有看到怡靜跟昀儒的身影，<br>\n正覺得有點小小失望..... (重點錯了吧XD</p>\n<h3>天無絕人之路</h3>\n<p>不過天無絕人之路(?)<br>\n就在頒獎典禮後，在路上詢問了一個輔大的學生，<br>\n她很清楚的告訴我，中美堂那邊會有運動選手的佈景，<br>\n還有親切的指導我從聖言樓要怎麼走到中美堂，<br>\n還補充說明從捷運站出來也會有佈景！</p>\n<p>然後循著她的指示，<br>\n我終於找到了啊!!!!!!!!!!!!!!!!!!<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/201298731XuXGqYJBv.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/201298731XuXGqYJBv.jpg\"></p>\n<p>太感謝這位輔大學生T^TTTTTTT 雖然在這裡講她應該看不到，但我還是要對她說：<br>\n<strong>「妳是好人妳一定會一生平安!!!!!!!! 課業全部嗨趴!!!!!!!!!!!!!!!!」</strong></p>\n<p>這邊補充說明一下，2020年的鐵人賽，個人&amp;團體完賽禮都會有一個\"銅牌\"XD<br>\n(不過這個真的太傷成本XD 所以可以理解今年完賽禮不是每個人都會拿到獎牌XD<br>\n但是拿得到獎狀，而且有多壓參賽題目真的已經很棒了!!!!!!!!!!)<br>\n所以我計劃性的把去年拿到的這兩個銅牌也一起帶去輔大了XD<br>\n於是我<strong>終於完成了拿兩個銅牌跟怡靜昀儒的兩個銅牌一起合照的夢想</strong>!!!!!!!!!!!!!!!<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873qt3RvyyKAK.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873qt3RvyyKAK.jpg\"></p>\n<p>後來我回到捷運站也發現真的還有佈景！<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873SO6scm8j9P.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873SO6scm8j9P.jpg\"></p>\n<p>在這裡真的要<strong>非常感謝 iThome 鐵人賽 主辦單位</strong>，<br>\n主辦了這次比賽還有頒獎典禮!!!!!!!!!!!!!!!!<br>\n讓我可以完成夢想真是我始料未及的事XD (重點再錯<br>\n<del>我現在真的有種原來我去年參加鐵人賽是為了可以在今年完成去輔大跟偶像\"合照\"夢想的錯覺XD</del></p>\n<h2>後記：補充</h2>\n<p>自己回過頭看這篇文章，<br>\n發現頒獎典禮本身的描述太少XD<br>\n這樣很像我當天拿了獎狀就走了XD<br>\n所以補一張當天的照片集錦證明我還是有好好參與頒獎典禮的事XD<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873suadvJKZnD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20220110/20129873suadvJKZnD.png\"></p>\n<h2>致謝</h2>\n<p>首先我要先感謝參加 iThome 鐵人賽的每位參賽者！<br>\n沒有大家如此積極參與，<br>\n就不會有如此精采的鐵人賽，<br>\n也就不會有頒獎典禮了(X)！<br>\n(PS. 還朝聖到一些大大也是很有趣的事情XD)</p>\n<p>然後再次感謝那位親切的輔大學生，<br>\n沒有妳我就沒辦法完成這個夢想！</p>\n<p><strong>最後再次感謝iThome 鐵人賽的主辦單位，</strong><br>\n<strong>所有幕前幕後工作人員，您們辛苦了!!!!!!!!!!!!!m(_ _)m</strong></p>\n<p>還讓參加頒獎典禮的每個人都可以拿到餐盒跟飲料，<br>\n這也太好了吧~~~~~~~QAQ<br>\n(PS1. 回家後我有吃，餐盒很好吃！很澎派！)<br>\n(PS2. 拍謝那天工作人員還被我問了奇怪的問題XD)</p>\n<p>然後，希望這次的鐵人賽大家會再見哦XD<br>\n<strong>期待大家可以繼續「自虐」XDDDDDDDDDDDDDDDD</strong></p>\n<p>Ado Lin @2022.01.10</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2022-01-10 00:59:47",
        "author_href": "https://ithelp.ithome.com.tw/users/20129873/ironman",
        "author_name": "Ado Lin",
        "series_href": "https://ithelp.ithome.com.tw/users/20129873/ironman/4202",
        "series_name": "Re: 從 Next.js 開始的 React 生活",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<h2>前言</h2>\n<p>抱歉打擾了XD 但是我真的太想來分享，所以還是厚著臉皮(?)來po文了XD<br/>\n我這次有參加鐵人賽的頒獎典禮XD<br/>\n雖然我根本不是得獎者XD<br/>\n(因為我有別的私心，繼續往下看就會知道XD)</p>\n<h2>本日正文</h2>\n<p>去年是我第二次參加，<br/>\n今年的獎狀有壓參賽題目是我覺得很驚喜的地方!!!!!!!!!!<br/>\n而且不是得獎者也有專屬 badge 耶，怎麼這麼好!!!!!!!!<br/>\n</p>\n<h3>醉翁之意不在酒</h3>\n<p>今年我不是得獎者也要千里迢迢&amp;&amp;千方百計的參加頒獎典禮，<br/>\n就是因為我看到今年頒獎典禮辦在輔仁大學!!!!!!!!!!!<br/>\n那你可能會問，輔仁大學有什麼嗎？<br/>\n這次東京奧運好幾個優秀的選手在輔仁大學唸書啊!!!!!!!!!!!!<br/>\n尤其是我的三次元偶像怡靜跟昀儒就是輔大的學生XD<br/>\n所以我想輔大一定有什麼相關佈景可以拍吧XD</p>\n<p>其實一開始剛進輔大一直到頒獎典禮地點，一路上都沒有看到怡靜跟昀儒的身影，<br/>\n正覺得有點小小失望..... (重點錯了吧XD</p>\n<h3>天無絕人之路</h3>\n<p>不過天無絕人之路(?)<br/>\n就在頒獎典禮後，在路上詢問了一個輔大的學生，<br/>\n她很清楚的告訴我，中美堂那邊會有運動選手的佈景，<br/>\n還有親切的指導我從聖言樓要怎麼走到中美堂，<br/>\n還補充說明從捷運站出來也會有佈景！</p>\n<p>然後循著她的指示，<br/>\n我終於找到了啊!!!!!!!!!!!!!!!!!!<br/>\n</p>\n<p>太感謝這位輔大學生T^TTTTTTT 雖然在這裡講她應該看不到，但我還是要對她說：<br/>\n<strong>「妳是好人妳一定會一生平安!!!!!!!! 課業全部嗨趴!!!!!!!!!!!!!!!!」</strong></p>\n<p>這邊補充說明一下，2020年的鐵人賽，個人&amp;團體完賽禮都會有一個\"銅牌\"XD<br/>\n(不過這個真的太傷成本XD 所以可以理解今年完賽禮不是每個人都會拿到獎牌XD<br/>\n但是拿得到獎狀，而且有多壓參賽題目真的已經很棒了!!!!!!!!!!)<br/>\n所以我計劃性的把去年拿到的這兩個銅牌也一起帶去輔大了XD<br/>\n於是我<strong>終於完成了拿兩個銅牌跟怡靜昀儒的兩個銅牌一起合照的夢想</strong>!!!!!!!!!!!!!!!<br/>\n</p>\n<p>後來我回到捷運站也發現真的還有佈景！<br/>\n</p>\n<p>在這裡真的要<strong>非常感謝 iThome 鐵人賽 主辦單位</strong>，<br/>\n主辦了這次比賽還有頒獎典禮!!!!!!!!!!!!!!!!<br/>\n讓我可以完成夢想真是我始料未及的事XD (重點再錯<br/>\n<del>我現在真的有種原來我去年參加鐵人賽是為了可以在今年完成去輔大跟偶像\"合照\"夢想的錯覺XD</del></p>\n<h2>後記：補充</h2>\n<p>自己回過頭看這篇文章，<br/>\n發現頒獎典禮本身的描述太少XD<br/>\n這樣很像我當天拿了獎狀就走了XD<br/>\n所以補一張當天的照片集錦證明我還是有好好參與頒獎典禮的事XD<br/>\n</p>\n<h2>致謝</h2>\n<p>首先我要先感謝參加 iThome 鐵人賽的每位參賽者！<br/>\n沒有大家如此積極參與，<br/>\n就不會有如此精采的鐵人賽，<br/>\n也就不會有頒獎典禮了(X)！<br/>\n(PS. 還朝聖到一些大大也是很有趣的事情XD)</p>\n<p>然後再次感謝那位親切的輔大學生，<br/>\n沒有妳我就沒辦法完成這個夢想！</p>\n<p><strong>最後再次感謝iThome 鐵人賽的主辦單位，</strong><br/>\n<strong>所有幕前幕後工作人員，您們辛苦了!!!!!!!!!!!!!m(_ _)m</strong></p>\n<p>還讓參加頒獎典禮的每個人都可以拿到餐盒跟飲料，<br/>\n這也太好了吧~~~~~~~QAQ<br/>\n(PS1. 回家後我有吃，餐盒很好吃！很澎派！)<br/>\n(PS2. 拍謝那天工作人員還被我問了奇怪的問題XD)</p>\n<p>然後，希望這次的鐵人賽大家會再見哦XD<br/>\n<strong>期待大家可以繼續「自虐」XDDDDDDDDDDDDDDDD</strong></p>\n<p>Ado Lin @2022.01.10</p>\n<br/>\n</div>",
        "content_text": "前言\n抱歉打擾了XD 但是我真的太想來分享，所以還是厚著臉皮(?)來po文了XD\n我這次有參加鐵人賽的頒獎典禮XD\n雖然我根本不是得獎者XD\n(因為我有別的私心，繼續往下看就會知道XD)\n本日正文\n去年是我第二次參加，\n今年的獎狀有壓參賽題目是我覺得很驚喜的地方!!!!!!!!!!\n而且不是得獎者也有專屬 badge 耶，怎麼這麼好!!!!!!!!\n\n醉翁之意不在酒\n今年我不是得獎者也要千里迢迢&&千方百計的參加頒獎典禮，\n就是因為我看到今年頒獎典禮辦在輔仁大學!!!!!!!!!!!\n那你可能會問，輔仁大學有什麼嗎？\n這次東京奧運好幾個優秀的選手在輔仁大學唸書啊!!!!!!!!!!!!\n尤其是我的三次元偶像怡靜跟昀儒就是輔大的學生XD\n所以我想輔大一定有什麼相關佈景可以拍吧XD\n其實一開始剛進輔大一直到頒獎典禮地點，一路上都沒有看到怡靜跟昀儒的身影，\n正覺得有點小小失望..... (重點錯了吧XD\n天無絕人之路\n不過天無絕人之路(?)\n就在頒獎典禮後，在路上詢問了一個輔大的學生，\n她很清楚的告訴我，中美堂那邊會有運動選手的佈景，\n還有親切的指導我從聖言樓要怎麼走到中美堂，\n還補充說明從捷運站出來也會有佈景！\n然後循著她的指示，\n我終於找到了啊!!!!!!!!!!!!!!!!!!\n\n太感謝這位輔大學生T^TTTTTTT 雖然在這裡講她應該看不到，但我還是要對她說：\n「妳是好人妳一定會一生平安!!!!!!!! 課業全部嗨趴!!!!!!!!!!!!!!!!」\n這邊補充說明一下，2020年的鐵人賽，個人&團體完賽禮都會有一個\"銅牌\"XD\n(不過這個真的太傷成本XD 所以可以理解今年完賽禮不是每個人都會拿到獎牌XD\n但是拿得到獎狀，而且有多壓參賽題目真的已經很棒了!!!!!!!!!!)\n所以我計劃性的把去年拿到的這兩個銅牌也一起帶去輔大了XD\n於是我終於完成了拿兩個銅牌跟怡靜昀儒的兩個銅牌一起合照的夢想!!!!!!!!!!!!!!!\n\n後來我回到捷運站也發現真的還有佈景！\n\n在這裡真的要非常感謝 iThome 鐵人賽 主辦單位，\n主辦了這次比賽還有頒獎典禮!!!!!!!!!!!!!!!!\n讓我可以完成夢想真是我始料未及的事XD (重點再錯\n我現在真的有種原來我去年參加鐵人賽是為了可以在今年完成去輔大跟偶像\"合照\"夢想的錯覺XD\n後記：補充\n自己回過頭看這篇文章，\n發現頒獎典禮本身的描述太少XD\n這樣很像我當天拿了獎狀就走了XD\n所以補一張當天的照片集錦證明我還是有好好參與頒獎典禮的事XD\n\n致謝\n首先我要先感謝參加 iThome 鐵人賽的每位參賽者！\n沒有大家如此積極參與，\n就不會有如此精采的鐵人賽，\n也就不會有頒獎典禮了(X)！\n(PS. 還朝聖到一些大大也是很有趣的事情XD)\n然後再次感謝那位親切的輔大學生，\n沒有妳我就沒辦法完成這個夢想！\n最後再次感謝iThome 鐵人賽的主辦單位，\n所有幕前幕後工作人員，您們辛苦了!!!!!!!!!!!!!m(_ _)m\n還讓參加頒獎典禮的每個人都可以拿到餐盒跟飲料，\n這也太好了吧~~~~~~~QAQ\n(PS1. 回家後我有吃，餐盒很好吃！很澎派！)\n(PS2. 拍謝那天工作人員還被我問了奇怪的問題XD)\n然後，希望這次的鐵人賽大家會再見哦XD\n期待大家可以繼續「自虐」XDDDDDDDDDDDDDDDD\nAdo Lin @2022.01.10",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "前言\n抱歉 打擾 了 XD\n但是 我 真的 太 想來 分享 ， 所以 還是 厚著 臉皮 ( ? ) 來 po 文了 XD\n我 這次 有 參加 鐵人 賽 的 頒獎典禮 XD\n雖然 我 根本 不是 得獎者 XD\n( 因為 我 有 別的 私心 ， 繼續 往下 看 就 會 知道 XD )\n本日 正文\n去年 是 我 第二次 參加 ，\n今年 的 獎狀 有壓 參賽 題目 是 我 覺得 很 驚喜 的 地方 ! ! ! ! ! ! ! ! ! !\n而且 不是 得獎者 也 有 專屬\nbadge\n耶 ， 怎麼 這麼 好 ! ! ! ! ! ! ! !\n醉翁之意不在酒\n今年 我 不是 得獎者 也 要 千里迢迢 && 千方百計 的 參加 頒獎典禮 ，\n就是 因為 我 看到 今年 頒獎典禮 辦 在 輔仁大學 ! ! ! ! ! ! ! ! ! ! !\n那 你 可能 會問 ， 輔仁大學 有 什麼 嗎 ？\n這次 東京 奧運 好幾個 優秀 的 選手 在 輔仁大學 唸書 啊 ! ! ! ! ! ! ! ! ! ! ! !\n尤其 是 我 的 三次 元 偶像 怡靜 跟 昀 儒 就是 輔大 的 學生 XD\n所以 我 想 輔大 一定 有 什麼 相關 佈景 可以 拍 吧 XD\n其實 一 開始 剛進 輔大 一直 到 頒獎典禮 地點 ， 一路上 都 沒有 看到 怡靜 跟 昀 儒 的 身影 ，\n正 覺得 有點 小小 失望 .....\n( 重點 錯 了 吧 XD\n天無絕人之路\n不過 天無絕人之路 ( ? )\n就 在 頒獎典禮 後 ， 在 路上 詢問 了 一個 輔大 的 學生 ，\n她 很 清楚 的 告訴 我 ， 中美堂 那邊 會 有 運動選手 的 佈景 ，\n還有 親切 的 指導 我 從 聖言 樓要 怎麼 走到 中美堂 ，\n還 補充 說明 從 捷運 站 出來 也 會 有 佈景 ！\n然後 循著 她 的 指示 ，\n我 終於 找到 了 啊 ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\n太 感謝 這位 輔 大學生 T ^ TTTTTTT\n雖然 在 這裡講 她 應該 看不到 ， 但 我 還是 要 對 她 說 ：\n「 妳是 好人 妳 一定 會 一生 平安 ! ! ! ! ! ! ! !\n課業 全部 嗨 趴 ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! 」\n這邊 補充 說明 一下 ， 2020 年 的 鐵人 賽 ， 個人 & 團體 完賽禮 都 會 有 一個 \" 銅牌 \" XD\n( 不過 這個 真的 太傷 成本 XD\n所以 可以 理解 今年 完賽禮 不是 每個 人 都 會 拿到 獎牌 XD\n但是 拿 得到 獎狀 ， 而且 有多壓 參賽 題目 真的 已經 很棒 了 ! ! ! ! ! ! ! ! ! ! )\n所以 我 計劃性 的 把 去年 拿到 的 這 兩個 銅牌 也 一起 帶 去 輔大 了 XD\n於是 我 終於 完成 了 拿 兩個 銅牌 跟 怡靜昀 儒 的 兩個 銅牌 一起 合照 的 夢想 ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\n後來 我 回到 捷運 站 也 發現 真的 還有 佈景 ！\n在 這裡 真的 要 非常感謝\niThome\n鐵人 賽\n主辦單位 ，\n主辦 了 這次 比賽 還有 頒獎典禮 ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !\n讓 我 可以 完成 夢想 真是 我 始料未及 的 事 XD\n( 重點 再錯\n我 現在 真的 有種 原來 我 去年 參加 鐵人 賽是 為 了 可以 在 今年 完成 去 輔大 跟 偶像 \" 合照 \" 夢想 的 錯覺 XD\n後記 ： 補充\n自己 回過 頭看 這 篇文章 ，\n發現 頒獎典禮 本身 的 描述 太少 XD\n這樣 很 像 我 當天 拿 了 獎狀 就 走 了 XD\n所以 補 一張 當天 的 照片 集錦 證明 我 還是 有 好好 參與 頒獎典禮 的 事 XD\n致謝\n首先 我要 先 感謝 參加\niThome\n鐵人 賽 的 每位 參賽者 ！\n沒有 大家 如此 積極 參與 ，\n就 不會 有 如此 精采 的 鐵人 賽 ，\n也 就 不會 有 頒獎典禮 了 ( X ) ！\n( PS .\n還 朝聖 到 一些 大大 也 是 很 有趣 的 事情 XD )\n然後 再次 感謝 那位 親切 的 輔 大學生 ，\n沒有 妳 我 就 沒 辦法 完成 這個 夢想 ！\n最後 再次 感謝 iThome\n鐵人 賽 的 主辦單位 ，\n所有 幕前幕後 工作人員 ， 您們 辛苦 了 ! ! ! ! ! ! ! ! ! ! ! ! ! m ( _\n_ ) m\n還讓 參加 頒獎典禮 的 每個 人 都 可以 拿到 餐盒 跟 飲料 ，\n這也 太好了 吧 ~ ~ ~ ~ ~ ~ ~ QAQ\n( PS1 .\n回家 後 我 有 吃 ， 餐盒 很 好吃 ！ 很澎派 ！ )\n( PS2 .\n拍謝 那天 工作人員 還被 我問 了 奇怪 的 問題 XD )\n然後 ， 希望 這次 的 鐵人 賽 大家 會 再見 哦 XD\n期待 大家 可以 繼續 「 自虐 」 XDDDDDDDDDDDDDDDD\nAdo\nLin\n@ 2022.01 . 10",
        "word_seg_processed_content_text": "前言\n抱歉 打擾 xd\n真的 太 想來 分享 厚著 臉皮 po 文了 xd\n這次 參加 鐵人 賽 頒獎典禮 xd\n得獎者 xd\n私心 往下 會 xd\n本日 正文\n去年 第二次 參加\n獎狀 有壓 參賽 題目 驚喜 地方\n得獎者 專屬\nbadge\n耶\n醉翁之意不在酒\n得獎者 千里迢迢 && 千方百計 參加 頒獎典禮\n頒獎典禮 辦 輔仁大學\n會問 輔仁大學\n這次 東京 奧運 好幾個 優秀 選手 輔仁大學 唸書\n三次 元 偶像 怡靜 昀 儒 輔大 學生 xd\n想 輔大 相關 佈景 拍 xd\n剛進 輔大 頒獎典禮 地點 一路上 怡靜 昀 儒 身影\n正 小小 失望 .....\n重點 錯 xd\n天無絕人之路\n天無絕人之路\n頒獎典禮 路上 詢問 輔大 學生\n告訴 中美堂 會 運動選手 佈景\n親切 指導 聖言 樓要 走到 中美堂\n補充 捷運 站 會 佈景\n循著 指示\n終於 找到\n太 感謝 這位 輔 大學生 t ttttttt\n這裡講 看不到 說\n妳是 好人 妳 會 一生 平安\n課業 嗨 趴\n補充 2020 年 鐵人 賽 團體 完賽禮 會 銅牌 xd\n真的 太傷 成本 xd\n理解 完賽禮 會 拿到 獎牌 xd\n獎狀 有多壓 參賽 題目 真的 很棒\n計劃性 去年 拿到 兩個 銅牌 帶 輔大 xd\n終於 兩個 銅牌 怡靜昀 儒 兩個 銅牌 合照 夢想\n回到 捷運 站 發現 真的 佈景\n真的 非常感謝\nithome\n鐵人 賽\n主辦單位\n主辦 這次 比賽 頒獎典禮\n夢想 始料未及 事 xd\n重點 再錯\n真的 有種 去年 參加 鐵人 賽是 輔大 偶像 合照 夢想 錯覺 xd\n後記 補充\n回過 頭看 篇文章\n發現 頒獎典禮 本身 描述 太少 xd\n當天 獎狀 走 xd\n補 一張 當天 照片 集錦 證明 好好 參與 頒獎典禮 事 xd\n致謝\n我要 先 感謝 參加\nithome\n鐵人 賽 每位 參賽者\n參與\n精采 鐵人 賽\n頒獎典禮 x\nps\n朝聖 有趣 事情 xd\n再次 感謝 那位 親切 輔 大學生\n妳 沒 辦法 夢想\n再次 感謝 ithome\n鐵人 賽 主辦單位\n幕前幕後 工作人員 您們 辛苦 m\nm\n還讓 參加 頒獎典禮 拿到 餐盒 飲料\n這也 太好了 qaq\nps1\n回家 吃 餐盒 好吃 很澎派\nps2\n拍謝 那天 工作人員 還被 我問 奇怪 xd\n希望 這次 鐵人 賽 會 再見 xd\n期待 自虐 xdddddddddddddddd\nado\nlin\n2022.01 10",
        "extracted_keywords": [
            "頒獎典禮",
            "得獎者",
            "獎狀",
            "獎牌",
            "主辦單位"
        ],
        "extracted_keywords_phrases": [
            "得獎者 xd",
            "xd 得獎者",
            "頒獎典禮 xd",
            "xd 獎狀",
            "獎牌 xd"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283488": {
        "href": "https://ithelp.ithome.com.tw/articles/10283488",
        "title": "[Day33] Hexo x NexT - 顯示最新文章、導入Google Analytics 的坑",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>先前使用 Hueman 的主題，但是有些 plugin 還需要花時間研究才能加進去，後來決定用許多人推薦的 NexT，因為已經整合許多 plugin，只要修改設定檔就可以使用，但想像很美好，實際做起來也是不少問題...</p>\n<hr>\n<h2>Themes 架構變更</h2>\n<p>過去 NexT 主題和其他多數主題一樣會安裝在 themes 的資料夾底下，現在則是放到 node_modules 裡面，如果需要修改樣式設定，直接在網站的根目錄建立 <code>_config.主題名稱.yml</code> 檔案，再去調整設定值。</p>\n<p>設定檔內容可以到 <code>node_modules/hexo-theme-next</code> 資料夾底下找他的 config.yml ，複製回網站根目錄來改（記得要改檔名，不然會跟原本 hexo 的 config 衝突），這種作法主要是讓主題的原始碼不要被更動，後續更新主題版本的時候比較不會出問題吧！</p>\n<p>本篇文章使用版本<br>\nHexo: 5.4.0<br>\nNexT: 8.8.2</p>\n<hr>\n<h2>左側選單顯示最新文章</h2>\n<p>NexT 已經有 hexo-related-popular-posts 套件來顯示最新文章列表的功能，但是這個套件似乎沒辦法正常運作，網路上有不少教學文章，但是 NexT 的架構檔案格式從 swig 改成 njk，照著舊的文章貼上不會成功，設定步驟如下：</p>\n<ol>\n<li>\n<p>修改 <code>_config.next.js</code>，設定自定樣式檔案和近期文章的設定</p>\n<pre><code>// 套用自定樣式檔案\ncustom_file_path:\n  sidebar: source/_data/sidebar.njk\n\n...\n\n// 加入近期文章設定\nrecent_posts_title: 近期文章\nrecent_posts_layout: block\nrecent_posts: true\n</code></pre>\n</li>\n<li>\n<p>在網站根目錄的 source 資料夾新增 <code>_data</code> 資料夾，再建立 <code>sidebar.njk</code> 檔案。</p>\n</li>\n<li>\n<p>在 <code>sidebar.njk</code> 檔案裡面加入下段程式碼（跟 swig 版本就只差了一個 .toArray() ）</p>\n<pre><code>{%- if theme.recent_posts %}\n  &lt;div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.recent_posts_layout  }}\"&gt;\n  &lt;div class=\"links-of-blogroll-title\"&gt;\n      &lt;!-- 設定你要的fa fa icon--&gt;\n      &lt;i class=\"fa fa-history fa-{{ theme.recent_posts_icon | lower }}\" aria-hidden=\"true\" style=\"margin: 1rem 0.25rem 0.5rem 0\"&gt;&lt;/i&gt;\n      {{ theme.recent_posts_title }}\n  &lt;/div&gt;\n  &lt;ul class=\"links-of-blogroll-list\"&gt;\n      {%- set posts = site.posts.sort('-date') %}\n      {%- for post in posts.slice('0', '5').toArray() %}\n      &lt;li&gt;\n          &lt;a href=\"{{ url_for(post.path) }}\" title=\"{{ post.title }}\" target=\"_blank\"&gt;{{ post.title }}&lt;/a&gt;\n      &lt;/li&gt;\n      {%- endfor %}\n  &lt;/ul&gt;\n  &lt;/div&gt;\n  {%- endif %}\n</code></pre>\n</li>\n<li>\n<p>重新生成頁面，完成。</p>\n</li>\n</ol>\n<blockquote>\n<p>參考文章：<a href=\"https://magic-panda-engineer.github.io/Hexo/hexo-next-recent-article-area\" target=\"_blank\" rel=\"noreferrer noopener\">大魔術熊貓工程師</a></p>\n</blockquote>\n<hr>\n<h2>導入Google Analytics</h2>\n<ol>\n<li>\n<p>NexT 已經有做好相關配置，只要在 <code>_config.next.js</code> 設定就好：</p>\n<pre><code>google_analytics:\n  tracking_id: 自己的id\n</code></pre>\n</li>\n<li>\n<p>有關這個追蹤 ID 在 NexT 的文件中有說明需要 UA 開頭，但是許多網路教學照著做只會拿到 G 開頭的追蹤碼，參考下個步驟的連結，乖乖申請 UA 開頭追蹤碼就沒問題了。</p>\n</li>\n<li>\n<p><a href=\"https://support.google.com/analytics/answer/10269537\" target=\"_blank\" rel=\"noreferrer noopener\">Google Analytics 取得『UA-』追蹤ID 官方文件</a></p>\n</li>\n</ol>\n<hr>\n<p>最後也分享一下<a href=\"https://stark920.github.io/\" target=\"_blank\" rel=\"noreferrer noopener\">成果網站</a>，歡迎大家不吝指教，謝謝！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2022-01-06 14:39:38",
        "author_href": "https://ithelp.ithome.com.tw/users/20129729/ironman",
        "author_name": "Genos",
        "series_href": "https://ithelp.ithome.com.tw/users/20129729/ironman/3905",
        "series_name": "MacOS新手操作指令學習紀錄，成為裝B前端工程師之路",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>先前使用 Hueman 的主題，但是有些 plugin 還需要花時間研究才能加進去，後來決定用許多人推薦的 NexT，因為已經整合許多 plugin，只要修改設定檔就可以使用，但想像很美好，實際做起來也是不少問題...</p>\n<hr/>\n<h2>Themes 架構變更</h2>\n<p>過去 NexT 主題和其他多數主題一樣會安裝在 themes 的資料夾底下，現在則是放到 node_modules 裡面，如果需要修改樣式設定，直接在網站的根目錄建立 <code>_config.主題名稱.yml</code> 檔案，再去調整設定值。</p>\n<p>設定檔內容可以到 <code>node_modules/hexo-theme-next</code> 資料夾底下找他的 config.yml ，複製回網站根目錄來改（記得要改檔名，不然會跟原本 hexo 的 config 衝突），這種作法主要是讓主題的原始碼不要被更動，後續更新主題版本的時候比較不會出問題吧！</p>\n<p>本篇文章使用版本<br/>\nHexo: 5.4.0<br/>\nNexT: 8.8.2</p>\n<hr/>\n<h2>左側選單顯示最新文章</h2>\n<p>NexT 已經有 hexo-related-popular-posts 套件來顯示最新文章列表的功能，但是這個套件似乎沒辦法正常運作，網路上有不少教學文章，但是 NexT 的架構檔案格式從 swig 改成 njk，照著舊的文章貼上不會成功，設定步驟如下：</p>\n<ol>\n<li>\n<p>修改 <code>_config.next.js</code>，設定自定樣式檔案和近期文章的設定</p>\n<pre></pre>\n</li>\n<li>\n<p>在網站根目錄的 source 資料夾新增 <code>_data</code> 資料夾，再建立 <code>sidebar.njk</code> 檔案。</p>\n</li>\n<li>\n<p>在 <code>sidebar.njk</code> 檔案裡面加入下段程式碼（跟 swig 版本就只差了一個 .toArray() ）</p>\n<pre></pre>\n</li>\n<li>\n<p>重新生成頁面，完成。</p>\n</li>\n</ol>\n<blockquote>\n<p>參考文章：</p>\n</blockquote>\n<hr/>\n<h2>導入Google Analytics</h2>\n<ol>\n<li>\n<p>NexT 已經有做好相關配置，只要在 <code>_config.next.js</code> 設定就好：</p>\n<pre></pre>\n</li>\n<li>\n<p>有關這個追蹤 ID 在 NexT 的文件中有說明需要 UA 開頭，但是許多網路教學照著做只會拿到 G 開頭的追蹤碼，參考下個步驟的連結，乖乖申請 UA 開頭追蹤碼就沒問題了。</p>\n</li>\n<li>\n<p></p>\n</li>\n</ol>\n<hr/>\n<p>最後也分享一下，歡迎大家不吝指教，謝謝！</p>\n<br/>\n</div>",
        "content_text": "先前使用 Hueman 的主題，但是有些 plugin 還需要花時間研究才能加進去，後來決定用許多人推薦的 NexT，因為已經整合許多 plugin，只要修改設定檔就可以使用，但想像很美好，實際做起來也是不少問題...\n\nThemes 架構變更\n過去 NexT 主題和其他多數主題一樣會安裝在 themes 的資料夾底下，現在則是放到 node_modules 裡面，如果需要修改樣式設定，直接在網站的根目錄建立 _config.主題名稱.yml 檔案，再去調整設定值。\n設定檔內容可以到 node_modules/hexo-theme-next 資料夾底下找他的 config.yml ，複製回網站根目錄來改（記得要改檔名，不然會跟原本 hexo 的 config 衝突），這種作法主要是讓主題的原始碼不要被更動，後續更新主題版本的時候比較不會出問題吧！\n本篇文章使用版本\nHexo: 5.4.0\nNexT: 8.8.2\n\n左側選單顯示最新文章\nNexT 已經有 hexo-related-popular-posts 套件來顯示最新文章列表的功能，但是這個套件似乎沒辦法正常運作，網路上有不少教學文章，但是 NexT 的架構檔案格式從 swig 改成 njk，照著舊的文章貼上不會成功，設定步驟如下：\n\n\n修改 _config.next.js，設定自定樣式檔案和近期文章的設定\n\n\n\n在網站根目錄的 source 資料夾新增 _data 資料夾，再建立 sidebar.njk 檔案。\n\n\n在 sidebar.njk 檔案裡面加入下段程式碼（跟 swig 版本就只差了一個 .toArray() ）\n\n\n\n重新生成頁面，完成。\n\n\n\n參考文章：\n\n\n導入Google Analytics\n\n\nNexT 已經有做好相關配置，只要在 _config.next.js 設定就好：\n\n\n\n有關這個追蹤 ID 在 NexT 的文件中有說明需要 UA 開頭，但是許多網路教學照著做只會拿到 G 開頭的追蹤碼，參考下個步驟的連結，乖乖申請 UA 開頭追蹤碼就沒問題了。\n\n\n\n\n\n\n最後也分享一下，歡迎大家不吝指教，謝謝！",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "// 套用自定樣式檔案\ncustom_file_path:\n  sidebar: source/_data/sidebar.njk\n\n...\n\n// 加入近期文章設定\nrecent_posts_title: 近期文章\nrecent_posts_layout: block\nrecent_posts: true\n"
            },
            {
                "language": "unknown",
                "content": "{%- if theme.recent_posts %}\n  <div class=\"links-of-blogroll motion-element {{ \"links-of-blogroll-\" + theme.recent_posts_layout  }}\">\n  <div class=\"links-of-blogroll-title\">\n      <!-- 設定你要的fa fa icon-->\n      <i class=\"fa fa-history fa-{{ theme.recent_posts_icon | lower }}\" aria-hidden=\"true\" style=\"margin: 1rem 0.25rem 0.5rem 0\"></i>\n      {{ theme.recent_posts_title }}\n  </div>\n  <ul class=\"links-of-blogroll-list\">\n      {%- set posts = site.posts.sort('-date') %}\n      {%- for post in posts.slice('0', '5').toArray() %}\n      <li>\n          <a href=\"{{ url_for(post.path) }}\" title=\"{{ post.title }}\" target=\"_blank\">{{ post.title }}</a>\n      </li>\n      {%- endfor %}\n  </ul>\n  </div>\n  {%- endif %}\n"
            },
            {
                "language": "unknown",
                "content": "google_analytics:\n  tracking_id: 自己的id\n"
            }
        ],
        "programming_languages": [
            "javascript"
        ],
        "word_seg_content_text": "先前 使用\nHueman\n的 主題 ， 但是 有些\nplugin\n還 需要 花 時間 研究 才能 加進去 ， 後來 決定 用 許多 人 推薦 的\nNexT ， 因為 已經 整合 許多\nplugin ， 只要 修改 設定 檔 就 可以 使用 ， 但 想像 很 美好 ， 實際 做 起來 也 是 不少 問題 ...\nThemes\n架構 變更\n過去\nNexT\n主題 和 其他 多數 主題 一樣 會 安裝 在\nthemes\n的 資料夾 底下 ， 現在 則是 放到\nnode _ modules\n裡面 ， 如果 需要 修改 樣式 設定 ， 直接 在 網站 的 根目錄 建立\n_ config . 主題 名稱 . yml\n檔案 ， 再 去 調整 設定值 。\n設定 檔 內容 可以 到\nnode _ modules / hexo - theme - next\n資料夾 底下 找 他 的\nconfig . yml\n， 複製 回 網站 根目錄 來 改 （ 記得 要 改 檔名 ， 不然 會 跟 原本\nhexo\n的\nconfig\n衝突 ） ， 這種 作法 主要 是 讓 主題 的 原始 碼 不要 被 更動 ， 後續 更新 主題 版本 的 時候 比較 不會 出 問題 吧 ！\n本篇 文章 使用 版本\nHexo :\n5.4 . 0\nNexT :\n8.8 . 2\n左側 選單 顯示 最新 文章\nNexT\n已經 有\nhexo - related - popular - posts\n套件 來 顯示 最新 文章 列表 的 功能 ， 但是 這個 套件 似乎 沒 辦法 正常 運作 ， 網路上 有 不少 教學 文章 ， 但是\nNexT\n的 架構 檔案 格式 從\nswig\n改成\nnjk ， 照著 舊 的 文章 貼 上 不會 成功 ， 設定 步驟 如下 ：\n修改\n_ config . next . js ， 設定 自 定 樣式 檔案 和 近期 文章 的 設定\n在 網站 根目錄 的\nsource\n資料夾 新增\n_ data\n資料夾 ， 再 建立\nsidebar . njk\n檔案 。\n在\nsidebar . njk\n檔案 裡面 加入 下 段 程式碼 （ 跟\nswig\n版本 就 只 差 了 一個\n. toArray ( )\n）\n重新 生成 頁面 ， 完成 。\n參考 文章 ：\n導入 Google\nAnalytics\nNexT\n已經 有 做好 相關 配置 ， 只要 在\n_ config . next . js\n設定 就 好 ：\n有關 這個 追蹤\nID\n在\nNexT\n的 文件 中有 說明 需要\nUA\n開頭 ， 但是 許多 網路 教學 照著 做 只會 拿到\nG\n開頭 的 追蹤 碼 ， 參考 下個 步驟 的 連結 ， 乖乖 申請\nUA\n開頭 追蹤 碼 就 沒 問題 了 。\n最後 也 分享 一下 ， 歡迎 大家 不吝指教 ， 謝謝 ！",
        "word_seg_processed_content_text": "先前\nhueman\n主題\nplugin\n花 時間 研究 才能 加進去 推薦\nnext 整合\nplugin 修改 設定 檔 想像 美好 做 不少 ...\nthemes\n架構 變更\n\nnext\n主題 主題 會 安裝\nthemes\n資料夾 底下 則是 放到\nnode modules\n修改 樣式 設定 網站 根目錄 建立\nconfig 主題 名稱 yml\n檔案 調整 設定值\n設定 檔 內容\nnode modules hexo theme next\n資料夾 底下 找\nconfig yml\n複製 回 網站 根目錄 改 記得 改 檔名 會 原本\nhexo\n\nconfig\n衝突 作法 主題 原始 碼 更動 後續 更新 主題 版本 出\n本篇 文章 版本\nhexo\n5.4 0\nnext\n8.8 2\n左側 選單 顯示 最新 文章\nnext\n\nhexo related popular posts\n套件 顯示 最新 文章 列表 功能 套件 沒 辦法 運作 網路上 不少 教學 文章\nnext\n架構 檔案 格式\nswig\n改成\nnjk 舊 文章 貼 成功 設定 步驟\n修改\nconfig next js 設定 定 樣式 檔案 近期 文章 設定\n網站 根目錄\nsource\n資料夾 新增\ndata\n資料夾 建立\nsidebar njk\n檔案\n\nsidebar njk\n檔案 段 程式碼\nswig\n版本 差\ntoarray\n\n生成 頁面\n參考 文章\n導入 google\nanalytics\nnext\n做好 相關 配置\nconfig next js\n設定\n追蹤\nid\n\nnext\n文件 中有\nua\n開頭 網路 教學 做 只會 拿到\ng\n開頭 追蹤 碼 參考 下個 步驟 連結 乖乖 申請\nua\n開頭 追蹤 碼 沒\n分享 不吝指教 謝謝",
        "extracted_keywords": [
            "themes",
            "theme",
            "plugin",
            "config",
            "modules"
        ],
        "extracted_keywords_phrases": [
            "主題 plugin",
            "config 主題",
            "安裝 themes",
            "theme 資料夾",
            "主題 安裝"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283494": {
        "href": "https://ithelp.ithome.com.tw/articles/10283494",
        "title": "【Day31】新加坡工作後續的時程",
        "content_html": "<div class=\"markdown__style\">\n                                                            <blockquote>\n<p>Update(01/10)：EP approved!</p>\n</blockquote>\n<p>在這邊紀錄一下這份 offer 的各個時程。<br>\n因為是大公司的關係，<br>\n很多 relocation 的事務是交給專業公司處理，<br>\n目前處理下來都十分有效率、溝通順暢。</p>\n<h2>新加坡簽證有哪些</h2>\n<h3>EP (Employment Pass)</h3>\n<ul>\n<li>新加坡最高級的工作簽證，薪資至少要 5000 新幣。</li>\n<li>影響申請通過的因素包含國籍、學校、公司產業規模、職業等，沒有硬性標準，由 MOM（新加坡人力部）判定。</li>\n<li>通常申請 EP 前會被雇主那邊要求做 <a href=\"https://www.mom.gov.sg/eservices/services/employment-s-pass-self-assessment-tool\" target=\"_blank\" rel=\"noreferrer noopener\">SAT</a>（Self-Assessment Tool），如果這個都過不了，送去機會也渺茫。</li>\n</ul>\n<h3>SP / WP</h3>\n<p>也是工作簽，因為用不到所以不研究。<br>\nWP 限制非常多，真的就是過去做工的。</p>\n<h3>LTVP(Long Term Visit Pass)/ DP(Dependent's Pass)</h3>\n<p>如果想帶爸媽的話需要 LTVP，但若拿 EP 想申請這個，薪水要達一個門檻。<br>\n配偶和子女則適用 DP，持有 EP/SP 且薪水超過 6k 就可以申請。<br>\n但拿以上簽證的話，想要工作都還需要另外申請。</p>\n<h2>我的 offer 後續時程</h2>\n<ul>\n<li>【11/30】 HIRE RIGHT 背景調查開跑<br>\n背景調查就是填一下個資，<br>\n有可能打電話給學校確認是否真有此人，<br>\nHIRE RIGHT 有會說中文的人所以稍微知會校方就好。</li>\n<li>【12/9】 Offer letter 簽完送回</li>\n<li>【12/14】 背調完成，FRAGOMEN 接棒處理 VISA<br>\n這裡我因為護照快到期（新加坡規定從入境那天要有 6 個月效期），<br>\n辦理新護照延遲一個禮拜多（加錢是可以辦速件啦...但我窮）</li>\n<li>【12/29】 EP application filed</li>\n<li>【01/10】 EP approved<br>\n得到 IPA letter</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,新加坡,ep",
        "genre": "自我挑戰組",
        "published_at": "2022-01-05 14:55:17",
        "author_href": "https://ithelp.ithome.com.tw/users/20131394/ironman",
        "author_name": "yichin",
        "series_href": "https://ithelp.ithome.com.tw/users/20131394/ironman/4547",
        "series_name": "快樂社畜路：畢業後的後端開發求職準備",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<blockquote>\n<p>Update(01/10)：EP approved!</p>\n</blockquote>\n<p>在這邊紀錄一下這份 offer 的各個時程。<br/>\n因為是大公司的關係，<br/>\n很多 relocation 的事務是交給專業公司處理，<br/>\n目前處理下來都十分有效率、溝通順暢。</p>\n<h2>新加坡簽證有哪些</h2>\n<h3>EP (Employment Pass)</h3>\n<ul>\n<li>新加坡最高級的工作簽證，薪資至少要 5000 新幣。</li>\n<li>影響申請通過的因素包含國籍、學校、公司產業規模、職業等，沒有硬性標準，由 MOM（新加坡人力部）判定。</li>\n<li>通常申請 EP 前會被雇主那邊要求做 （Self-Assessment Tool），如果這個都過不了，送去機會也渺茫。</li>\n</ul>\n<h3>SP / WP</h3>\n<p>也是工作簽，因為用不到所以不研究。<br/>\nWP 限制非常多，真的就是過去做工的。</p>\n<h3>LTVP(Long Term Visit Pass)/ DP(Dependent's Pass)</h3>\n<p>如果想帶爸媽的話需要 LTVP，但若拿 EP 想申請這個，薪水要達一個門檻。<br/>\n配偶和子女則適用 DP，持有 EP/SP 且薪水超過 6k 就可以申請。<br/>\n但拿以上簽證的話，想要工作都還需要另外申請。</p>\n<h2>我的 offer 後續時程</h2>\n<ul>\n<li>【11/30】 HIRE RIGHT 背景調查開跑<br/>\n背景調查就是填一下個資，<br/>\n有可能打電話給學校確認是否真有此人，<br/>\nHIRE RIGHT 有會說中文的人所以稍微知會校方就好。</li>\n<li>【12/9】 Offer letter 簽完送回</li>\n<li>【12/14】 背調完成，FRAGOMEN 接棒處理 VISA<br/>\n這裡我因為護照快到期（新加坡規定從入境那天要有 6 個月效期），<br/>\n辦理新護照延遲一個禮拜多（加錢是可以辦速件啦...但我窮）</li>\n<li>【12/29】 EP application filed</li>\n<li>【01/10】 EP approved<br/>\n得到 IPA letter</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Update(01/10)：EP approved!\n\n在這邊紀錄一下這份 offer 的各個時程。\n因為是大公司的關係，\n很多 relocation 的事務是交給專業公司處理，\n目前處理下來都十分有效率、溝通順暢。\n新加坡簽證有哪些\nEP (Employment Pass)\n\n新加坡最高級的工作簽證，薪資至少要 5000 新幣。\n影響申請通過的因素包含國籍、學校、公司產業規模、職業等，沒有硬性標準，由 MOM（新加坡人力部）判定。\n通常申請 EP 前會被雇主那邊要求做 （Self-Assessment Tool），如果這個都過不了，送去機會也渺茫。\n\nSP / WP\n也是工作簽，因為用不到所以不研究。\nWP 限制非常多，真的就是過去做工的。\nLTVP(Long Term Visit Pass)/ DP(Dependent's Pass)\n如果想帶爸媽的話需要 LTVP，但若拿 EP 想申請這個，薪水要達一個門檻。\n配偶和子女則適用 DP，持有 EP/SP 且薪水超過 6k 就可以申請。\n但拿以上簽證的話，想要工作都還需要另外申請。\n我的 offer 後續時程\n\n【11/30】 HIRE RIGHT 背景調查開跑\n背景調查就是填一下個資，\n有可能打電話給學校確認是否真有此人，\nHIRE RIGHT 有會說中文的人所以稍微知會校方就好。\n【12/9】 Offer letter 簽完送回\n【12/14】 背調完成，FRAGOMEN 接棒處理 VISA\n這裡我因為護照快到期（新加坡規定從入境那天要有 6 個月效期），\n辦理新護照延遲一個禮拜多（加錢是可以辦速件啦...但我窮）\n【12/29】 EP application filed\n【01/10】 EP approved\n得到 IPA letter",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "Update ( 01 / 10 ) ： EP\napproved !\n在 這邊 紀錄 一下 這份\noffer\n的 各個 時程 。\n因為 是 大 公司 的 關係 ，\n很多\nrelocation\n的 事務 是 交給 專業 公司 處理 ，\n目前 處理 下來 都 十分 有效率 、 溝通 順暢 。\n新加坡 簽證 有 哪些\nEP\n( Employment\nPass )\n新加坡 最高級 的 工作 簽證 ， 薪資 至少 要\n5000\n新幣 。\n影響 申請 通過 的 因素 包含 國籍 、 學校 、 公司 產業 規模 、 職業 等 ， 沒有 硬性 標準 ， 由\nMOM （ 新加坡 人力 部 ） 判定 。\n通常 申請\nEP\n前會 被 雇主 那邊 要求 做\n（ Self - Assessment\nTool ） ， 如果 這個 都過 不了 ， 送 去 機會 也 渺茫 。\nSP\n/\nWP\n也 是 工作 簽 ， 因為 用 不到 所以 不 研究 。\nWP\n限制 非常 多 ， 真的 就是 過去 做工 的 。\nLTVP ( Long\nTerm\nVisit\nPass ) /\nDP ( Dependent ' s\nPass )\n如果 想帶 爸媽 的話 需要\nLTVP ， 但 若 拿\nEP\n想 申請 這個 ， 薪水 要 達 一個 門檻 。\n配偶 和 子女 則 適用\nDP ， 持有\nEP / SP\n且 薪水 超過\n6k\n就 可以 申請 。\n但 拿 以上 簽證 的話 ， 想要 工作 都還 需要 另外 申請 。\n我 的\noffer\n後續 時程\n【 11 / 30 】\nHIRE\nRIGHT\n背景 調查 開 跑\n背景 調查 就是 填 一下 個資 ，\n有 可能 打電話 給 學校 確認 是否 真有 此人 ，\nHIRE\nRIGHT\n有會 說 中文 的 人 所以 稍微 知會 校方 就 好 。\n【 12 / 9 】\nOffer\nletter\n簽完 送回\n【 12 / 14 】\n背調 完成 ， FRAGOMEN\n接棒 處理\nVISA\n這裡 我 因為 護照 快 到期 （ 新加坡 規定 從 入境 那天 要 有\n6\n個 月 效期 ） ，\n辦理 新 護照 延遲 一個 禮拜 多 （ 加錢 是 可以 辦速件 啦 ... 但 我 窮 ）\n【 12 / 29 】\nEP\napplication\nfiled\n【 01 / 10 】\nEP\napproved\n得到\nIPA\nletter",
        "word_seg_processed_content_text": "update 01 10 ep\napproved\n紀錄 這份\noffer\n時程\n大 公司 關係\n很多\nrelocation\n事務 交給 專業 公司\n有效率 溝通 順暢\n新加坡 簽證\nep\nemployment\npass\n新加坡 最高級 工作 簽證 薪資 至少\n5000\n新幣\n影響 申請 因素 包含 國籍 學校 公司 產業 規模 職業 硬性 標準\nmom 新加坡 人力 部 判定\n申請\nep\n前會 雇主 做\nself assessment\ntool 都過 不了 送 機會 渺茫\nsp\n\nwp\n工作 簽 不到 研究\nwp\n真的 做工\nltvp long\nterm\nvisit\npass\ndp dependent ' s\npass\n想帶 爸媽\nltvp\nep\n想 申請 薪水 達 門檻\n配偶 子女\ndp 持有\nep sp\n薪水 超過\n6k\n申請\n簽證 想要 工作 都還 申請\n\noffer\n後續 時程\n【 11 30 】\nhire\nright\n背景 調查 開 跑\n背景 調查 填 個資\n打電話 學校 確認 真有 此人\nhire\nright\n有會 說 中文 稍微 知會 校方\n【 12 9 】\noffer\nletter\n簽完 送回\n【 12 14 】\n背調 fragomen\n接棒\nvisa\n護照 快 到期 新加坡 入境 那天\n6\n月 效期\n辦理 新 護照 延遲 禮拜 加錢 辦速件 ... 窮\n【 12 29 】\nep\napplication\nfiled\n【 01 10 】\nep\napproved\n\nipa\nletter",
        "extracted_keywords": [
            "新加坡",
            "雇主",
            "簽證",
            "公司",
            "employment"
        ],
        "extracted_keywords_phrases": [
            "新加坡 簽證",
            "新加坡 入境",
            "到期 新加坡",
            "新加坡",
            "新加坡 人力"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283477": {
        "href": "https://ithelp.ithome.com.tw/articles/10283477",
        "title": "重構原本的內容(golang)(Day22)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>此次主要修正內容是將在定義資料庫的內容移動到pq的schema中，以及將兩個model都套用之前的設計概念，以及將error放入middleware中，以統一error message</p>\n<p>因為這次改動比較多，就沒有錄影了，github的連結附在此處，請自行取用</p>\n<p><a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.4.0\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.4.0</a></p>\n<p>測試的部分因為此次更新內容較多，此部分留置下篇文章再進行說明了</p>\n<p>文章同步發表於<br>\n<a href=\"https://kevinyay945.com/smart-home-tutorial/022-golang-refactor/\" target=\"_blank\" rel=\"noreferrer noopener\">https://kevinyay945.com/smart-home-tutorial/022-golang-refactor/</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2022-01-04 21:39:50",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "22",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>此次主要修正內容是將在定義資料庫的內容移動到pq的schema中，以及將兩個model都套用之前的設計概念，以及將error放入middleware中，以統一error message</p>\n<p>因為這次改動比較多，就沒有錄影了，github的連結附在此處，請自行取用</p>\n<p></p>\n<p>測試的部分因為此次更新內容較多，此部分留置下篇文章再進行說明了</p>\n<p>文章同步發表於<br/>\n</p>\n<br/>\n</div>",
        "content_text": "此次主要修正內容是將在定義資料庫的內容移動到pq的schema中，以及將兩個model都套用之前的設計概念，以及將error放入middleware中，以統一error message\n因為這次改動比較多，就沒有錄影了，github的連結附在此處，請自行取用\n\n測試的部分因為此次更新內容較多，此部分留置下篇文章再進行說明了\n文章同步發表於",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "此次 主要 修正 內容 是 將在 定義 資料庫 的 內容 移動 到 pq 的 schema 中 ， 以及 將 兩個 model 都 套用 之前 的 設計 概念 ， 以及 將 error 放入 middleware 中 ， 以 統一 error\nmessage\n因為 這次 改動 比較 多 ， 就 沒有 錄影 了 ， github 的 連結 附在 此處 ， 請 自行 取用\n測試 的 部分 因為 此次 更新 內容 較 多 ， 此 部分 留置 下 篇文章 再 進行 說明 了\n文章 同步 發表 於",
        "word_seg_processed_content_text": "此次 修正 內容 將在 定義 資料庫 內容 pq schema 中 兩個 model 套用 設計 概念 error 放入 middleware 中 統一 error\nmessage\n這次 改動 錄影 github 連結 附在 此處 請 自行 取用\n測試 此次 更新 內容 留置 篇文章\n文章 同步 發表",
        "extracted_keywords": [
            "資料庫",
            "schema",
            "middleware",
            "更新",
            "error"
        ],
        "extracted_keywords_phrases": [
            "pq schema",
            "資料庫 內容",
            "資料庫",
            "schema",
            "error 放入"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283466": {
        "href": "https://ithelp.ithome.com.tw/articles/10283466",
        "title": "Laravel - jQuery AJAX 範例",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>最近滿常要把一般 form-submit 改成 AJAX 非同步去送表單，所以分享個 template。<br>\n非 Laravel 做的後端也適用</p>\n<pre><code class=\"language-HTML\">&lt;form id=\"form\"&gt;\n    &lt;!-- inputs --&gt;\n    &lt;button type=\"submit\" id=\"submit\"&gt;\n        submit\n    &lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n<pre><code class=\"language-HTML\">&lt;script&gt;\n    $('#submit').click(function(e){\n        e.preventDefault();\n        var form = new FormData(document.getElementById('form'))\n        $.ajax({ \n            url: \"/api/endpoint\",\n            data: form,\n            type: 'post',\n            processData: false, // important\n            contentType: false, // important\n            cache: false,\n            success: function(data)\n            {\n                console.log(data)\n                // redirect\n                window.location.replace(data.redirect);\n            },\n            error: function(data)\n            {\n                // intergrate Swal to display error\n                Swal.close();\n                if (data.status == 419) {\n                    window.location.reload();\n                } else {\n                    Swal.fire({\n                        icon: 'info',\n                        title: 'Error',\n                        html: data.responseJSON.message,\n                    });\n                }\n            }\n        });\n    })\n&lt;/script&gt;\n</code></pre>\n<p>Laravel Response 範例</p>\n<ul>\n<li>json 看前端需要什麼，沒有一定規定</li>\n<li>status code 可參考 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Status\" target=\"_blank\" rel=\"noreferrer noopener\">HTTP 狀態碼</a>，建議不要無腦 200</li>\n</ul>\n<pre><code class=\"language-php\">return response()-&gt;json([\n    'message' =&gt; 'message ...',\n    'redirect' =&gt; 'https://example.com/path'\n], 200);\n</code></pre>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2022-01-04 13:36:48",
        "author_href": "https://ithelp.ithome.com.tw/users/20129556/ironman",
        "author_name": "moblinfish",
        "series_href": "https://ithelp.ithome.com.tw/users/20129556/ironman/4028",
        "series_name": "工作後才知道的後端 30 件小事",
        "series_num": "20",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>最近滿常要把一般 form-submit 改成 AJAX 非同步去送表單，所以分享個 template。<br/>\n非 Laravel 做的後端也適用</p>\n<pre></pre>\n<pre></pre>\n<p>Laravel Response 範例</p>\n<ul>\n<li>json 看前端需要什麼，沒有一定規定</li>\n<li>status code 可參考 ，建議不要無腦 200</li>\n</ul>\n<pre></pre>\n<br/>\n</div>",
        "content_text": "最近滿常要把一般 form-submit 改成 AJAX 非同步去送表單，所以分享個 template。\n非 Laravel 做的後端也適用\n\n\nLaravel Response 範例\n\njson 看前端需要什麼，沒有一定規定\nstatus code 可參考 ，建議不要無腦 200",
        "content_code_info": [
            {
                "language": "html",
                "content": "<form id=\"form\">\n    <!-- inputs -->\n    <button type=\"submit\" id=\"submit\">\n        submit\n    </button>\n</form>\n"
            },
            {
                "language": "html",
                "content": "<script>\n    $('#submit').click(function(e){\n        e.preventDefault();\n        var form = new FormData(document.getElementById('form'))\n        $.ajax({ \n            url: \"/api/endpoint\",\n            data: form,\n            type: 'post',\n            processData: false, // important\n            contentType: false, // important\n            cache: false,\n            success: function(data)\n            {\n                console.log(data)\n                // redirect\n                window.location.replace(data.redirect);\n            },\n            error: function(data)\n            {\n                // intergrate Swal to display error\n                Swal.close();\n                if (data.status == 419) {\n                    window.location.reload();\n                } else {\n                    Swal.fire({\n                        icon: 'info',\n                        title: 'Error',\n                        html: data.responseJSON.message,\n                    });\n                }\n            }\n        });\n    })\n</script>\n"
            },
            {
                "language": "php",
                "content": "return response()->json([\n    'message' => 'message ...',\n    'redirect' => 'https://example.com/path'\n], 200);\n"
            }
        ],
        "programming_languages": [
            "html",
            "php"
        ],
        "word_seg_content_text": "最近 滿常要 把 一般\nform - submit\n改成\nAJAX\n非 同步 去 送 表單 ， 所以 分享 個\ntemplate 。\n非\nLaravel\n做 的 後 端 也 適用\nLaravel\nResponse\n範例\njson\n看 前端 需要 什麼 ， 沒有 一定 規定\nstatus\ncode\n可 參考\n， 建議 不要 無腦\n200",
        "word_seg_processed_content_text": "滿常要\nform submit\n改成\najax\n非 同步 送 表單 分享\ntemplate\n非\nlaravel\n做 端\nlaravel\nresponse\n範例\njson\n前端\nstatus\ncode\n參考\n建議 無腦\n200",
        "extracted_keywords": [
            "submit",
            "form",
            "template",
            "ajax",
            "json"
        ],
        "extracted_keywords_phrases": [
            "submit 改成",
            "form submit",
            "submit",
            "分享 template",
            "form"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283439": {
        "href": "https://ithelp.ithome.com.tw/articles/10283439",
        "title": "2022/1/2 更新",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>1.Grid_Optimizer: 原本使用4年資料回測，改成5年，00646改00662。<br>\n2.Gridbot:移除一些用不到的除錯程式碼，避免過度交易的threshold改成max(2000,總資產*0.5%)<br>\n3.Gridbot:更新網格策略的參數</p>\n<p>祝 新年快樂</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2022-01-02 21:18:35",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "42",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>1.Grid_Optimizer: 原本使用4年資料回測，改成5年，00646改00662。<br/>\n2.Gridbot:移除一些用不到的除錯程式碼，避免過度交易的threshold改成max(2000,總資產*0.5%)<br/>\n3.Gridbot:更新網格策略的參數</p>\n<p>祝 新年快樂</p>\n<br/>\n</div>",
        "content_text": "1.Grid_Optimizer: 原本使用4年資料回測，改成5年，00646改00662。\n2.Gridbot:移除一些用不到的除錯程式碼，避免過度交易的threshold改成max(2000,總資產*0.5%)\n3.Gridbot:更新網格策略的參數\n祝 新年快樂",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "1 . Grid _ Optimizer :\n原本 使用 4 年 資料 回測 ， 改成 5 年 ， 00646 改 00662 。\n2 . Gridbot : 移除 一些 用 不到 的 除錯 程式碼 ， 避免 過度 交易 的 threshold 改成 max ( 2000 , 總資產 * 0.5% )\n3 . Gridbot : 更新 網格 策略 的 參數\n祝\n新年快樂",
        "word_seg_processed_content_text": "1 grid optimizer\n原本 4 年 資料 回測 改成 5 年 00646 改 00662\n2 gridbot 移除 不到 除錯 程式碼 過度 交易 threshold 改成 max 2000 總資產 0.5%\n3 gridbot 更新 網格 策略 參數\n祝\n新年快樂",
        "extracted_keywords": [
            "gridbot",
            "grid",
            "optimizer",
            "更新",
            "新年快樂"
        ],
        "extracted_keywords_phrases": [
            "grid optimizer",
            "gridbot 更新",
            "總資產 gridbot",
            "optimizer 原本",
            "00662 gridbot"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283291": {
        "href": "https://ithelp.ithome.com.tw/articles/10283291",
        "title": ".Net Core Web Api_筆記21_Swagger及OpenAPI介紹與配置使用方式_API管理與測試探討",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><a href=\"https://swagger.io/\" target=\"_blank\" rel=\"noreferrer noopener\">Swagger</a> 是一套web api管理於測試的工具<br>\n甚至可協助提供自訂API規格文件與呼叫回應方式的描述</p>\n<p>以下是台中交通API的實際案例<br>\n<a href=\"https://datacenter.taichung.gov.tw/swagger/api-docs/\" target=\"_blank\" rel=\"noreferrer noopener\">https://datacenter.taichung.gov.tw/swagger/api-docs/</a></p>\n<p>於2015年Swagger就捐贈給OpenAPI計畫<br>\n也因此有OpenAPI的別稱</p>\n<p>不過通常習慣將OpenAPI視為一種規範而Swagger則是實踐該規範的工具。<br>\nOpenAPI  注重開發者寫出來的API可跟調用呼叫者很直接的合作而不用透過程式碼存取</p>\n<p>我們可從OpenAPI規範看出訪問的URL與HTTP Method採用何種(GET,PUT,POST...)<br>\n跟參數與資料型別</p>\n<p>因此用戶端可以很清楚如何去呼叫使用更能讓二次開發者能夠無縫接軌</p>\n<p>Swagger其實相當於一個根據OpenAPI規範發展出來一系列產品的品牌。<br>\n旗下也有諸多不同的工具比方OpenAPIGenerator , <a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-6.0&amp;tabs=visual-studio\" target=\"_blank\" rel=\"noreferrer noopener\">NSwag</a> , <a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;tabs=visual-studio\" target=\"_blank\" rel=\"noreferrer noopener\">Swashbuckle</a> ....</p>\n<p>Swagger UI 則是提供了Web 介面 使用OpenAPI規範提供資訊。</p>\n<p>而我們於.NET Core開發框架則可透過middleware方式註冊NSwag , Swashbuckle</p>\n<p>Swagger 3 Web UI<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452M8ywFA8G1m.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452M8ywFA8G1m.png\"></p>\n<p>Swagger 2 Web UI<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452J5tlNHkVFv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452J5tlNHkVFv.png\"></p>\n<p>.net core web api應用Swagger配置使用</p>\n<p>在此我拿之前跑的這幾篇最終產出的專案去配置</p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/09/net-core-web-api13apiadonetpart1.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記13_api結合ADO.NET資料庫操作part1_專案前置準備到資料新增</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/09/net-core-web-api14apiadonetpart2.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記14_api結合ADO.NET資料庫操作part2_資料查詢呈現</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/09/net-core-web-api15apiadonetpart3.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記15_api結合ADO.NET資料庫操作part3_資料刪除</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/09/net-core-web-api16apiadonetpart4.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記16_api結合ADO.NET資料庫操作part4_資料編輯提交更新</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api17apiadonetpart5.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記17_api結合ADO.NET資料庫操作part5_新聞文章新增_新聞類別元素透過API綁定方式</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api18apiadonetpart6.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記18_api結合ADO.NET資料庫操作part6_新聞文章表格陳列查詢</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api19apiadonetpart7.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記19_api結合ADO.NET資料庫操作part7_新聞文章的編輯更新與刪除</a></p>\n<p><a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api20apiadonetpart8.html\" target=\"_blank\" rel=\"noreferrer noopener\">.Net Core Web Api_筆記20_api結合ADO.NET資料庫操作part8_新聞文章查詢</a></p>\n<p>到Nuget套件去下載安裝NSwag.AspNetCore<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452fipB6aJXs1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452fipB6aJXs1.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452bG2SpPUIEp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452bG2SpPUIEp.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452zxRWSlu0QC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452zxRWSlu0QC.png\"></p>\n<p>緊接著我們到Starup的ConfigureServices方法去註冊服務</p>\n<p>再到Configure去啟用OpenAPI跟SwaggerUI的中間件</p>\n<pre><code>using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSwaggerDocument();//註冊NSwag提供的服務\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }            \n\n            app.UseStaticFiles();\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseOpenApi();//啟用OpenAPI,預設路由/swagger/v1/swagger.json\n\n            app.UseSwaggerUi3();//啟用SwaggerUi version 3\n\n            app.UseEndpoints(endpoints =&gt;\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n</code></pre>\n<p>最後就是見證奇蹟的時刻(對於懶得寫API文件的開發者來說真的是一大福音)<br>\n要查看Swagger API 自動幫我們掃描所有API 方法後產生出來的WEB API Document<br>\n預設路由/swagger<br>\n會自動跳轉至/swagger/index.html<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452OcbWt8pFT5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452OcbWt8pFT5.png\"></p>\n<p>而且還真的能執行存取異動<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452vTFirFFmjt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452vTFirFFmjt.png\"></p>\n<p>Ref:</p>\n<p>OpenAPI Specification<br>\n<a href=\"https://swagger.io/resources/open-api/\" target=\"_blank\" rel=\"noreferrer noopener\">https://swagger.io/resources/open-api/</a></p>\n<p>使用 Swagger/OpenAPI ASP.NET Core web API 檔<br>\n<a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-6.0\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-6.0</a></p>\n<p>NSwag 與 ASP.NET Core 使用者入門<br>\n<a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-6.0&amp;tabs=visual-studio\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-nswag?view=aspnetcore-6.0&amp;tabs=visual-studio</a></p>\n<p>Swashbuckle 與 ASP.NET Core 使用者入門<br>\n<a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;tabs=visual-studio\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.microsoft.com/zh-tw/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;tabs=visual-studio</a></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api21swaggeropenapiapi.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2021/12/net-core-web-api21swaggeropenapiapi.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-23 15:09:00",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "21",
        "processed_content_html": "<div class=\"markdown__style\">\n<p> 是一套web api管理於測試的工具<br/>\n甚至可協助提供自訂API規格文件與呼叫回應方式的描述</p>\n<p>以下是台中交通API的實際案例<br/>\n</p>\n<p>於2015年Swagger就捐贈給OpenAPI計畫<br/>\n也因此有OpenAPI的別稱</p>\n<p>不過通常習慣將OpenAPI視為一種規範而Swagger則是實踐該規範的工具。<br/>\nOpenAPI  注重開發者寫出來的API可跟調用呼叫者很直接的合作而不用透過程式碼存取</p>\n<p>我們可從OpenAPI規範看出訪問的URL與HTTP Method採用何種(GET,PUT,POST...)<br/>\n跟參數與資料型別</p>\n<p>因此用戶端可以很清楚如何去呼叫使用更能讓二次開發者能夠無縫接軌</p>\n<p>Swagger其實相當於一個根據OpenAPI規範發展出來一系列產品的品牌。<br/>\n旗下也有諸多不同的工具比方OpenAPIGenerator ,  ,  ....</p>\n<p>Swagger UI 則是提供了Web 介面 使用OpenAPI規範提供資訊。</p>\n<p>而我們於.NET Core開發框架則可透過middleware方式註冊NSwag , Swashbuckle</p>\n<p>Swagger 3 Web UI<br/>\n</p>\n<p>Swagger 2 Web UI<br/>\n</p>\n<p>.net core web api應用Swagger配置使用</p>\n<p>在此我拿之前跑的這幾篇最終產出的專案去配置</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p>到Nuget套件去下載安裝NSwag.AspNetCore<br/>\n</p>\n<p></p>\n<p></p>\n<p>緊接著我們到Starup的ConfigureServices方法去註冊服務</p>\n<p>再到Configure去啟用OpenAPI跟SwaggerUI的中間件</p>\n<pre></pre>\n<p>最後就是見證奇蹟的時刻(對於懶得寫API文件的開發者來說真的是一大福音)<br/>\n要查看Swagger API 自動幫我們掃描所有API 方法後產生出來的WEB API Document<br/>\n預設路由/swagger<br/>\n會自動跳轉至/swagger/index.html<br/>\n</p>\n<p>而且還真的能執行存取異動<br/>\n</p>\n<p>Ref:</p>\n<p>OpenAPI Specification<br/>\n</p>\n<p>使用 Swagger/OpenAPI ASP.NET Core web API 檔<br/>\n</p>\n<p>NSwag 與 ASP.NET Core 使用者入門<br/>\n</p>\n<p>Swashbuckle 與 ASP.NET Core 使用者入門<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "是一套web api管理於測試的工具\n甚至可協助提供自訂API規格文件與呼叫回應方式的描述\n以下是台中交通API的實際案例\n\n於2015年Swagger就捐贈給OpenAPI計畫\n也因此有OpenAPI的別稱\n不過通常習慣將OpenAPI視為一種規範而Swagger則是實踐該規範的工具。\nOpenAPI  注重開發者寫出來的API可跟調用呼叫者很直接的合作而不用透過程式碼存取\n我們可從OpenAPI規範看出訪問的URL與HTTP Method採用何種(GET,PUT,POST...)\n跟參數與資料型別\n因此用戶端可以很清楚如何去呼叫使用更能讓二次開發者能夠無縫接軌\nSwagger其實相當於一個根據OpenAPI規範發展出來一系列產品的品牌。\n旗下也有諸多不同的工具比方OpenAPIGenerator ,  ,  ....\nSwagger UI 則是提供了Web 介面 使用OpenAPI規範提供資訊。\n而我們於.NET Core開發框架則可透過middleware方式註冊NSwag , Swashbuckle\nSwagger 3 Web UI\n\nSwagger 2 Web UI\n\n.net core web api應用Swagger配置使用\n在此我拿之前跑的這幾篇最終產出的專案去配置\n\n\n\n\n\n\n\n\n到Nuget套件去下載安裝NSwag.AspNetCore\n\n\n\n緊接著我們到Starup的ConfigureServices方法去註冊服務\n再到Configure去啟用OpenAPI跟SwaggerUI的中間件\n\n最後就是見證奇蹟的時刻(對於懶得寫API文件的開發者來說真的是一大福音)\n要查看Swagger API 自動幫我們掃描所有API 方法後產生出來的WEB API Document\n預設路由/swagger\n會自動跳轉至/swagger/index.html\n\n而且還真的能執行存取異動\n\nRef:\nOpenAPI Specification\n\n使用 Swagger/OpenAPI ASP.NET Core web API 檔\n\nNSwag 與 ASP.NET Core 使用者入門\n\nSwashbuckle 與 ASP.NET Core 使用者入門\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddSwaggerDocument();//註冊NSwag提供的服務\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }            \n\n            app.UseStaticFiles();\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseOpenApi();//啟用OpenAPI,預設路由/swagger/v1/swagger.json\n\n            app.UseSwaggerUi3();//啟用SwaggerUi version 3\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "是 一套 web\napi 管理 於 測試 的 工具\n甚至 可 協助 提供 自訂 API 規格 文件 與 呼叫 回應 方式 的 描述\n以下 是 台 中 交通 API 的 實際 案例\n於 2015 年 Swagger 就 捐贈 給 OpenAPI 計畫\n也 因此 有 OpenAPI 的 別稱\n不過 通常 習慣 將 OpenAPI 視為 一種 規範 而 Swagger 則是 實踐 該 規範 的 工具 。\nOpenAPI\n注重 開發者 寫 出來 的 API 可 跟 調用 呼叫者 很 直接 的 合作 而 不用 透過 程式碼 存取\n我們 可 從 OpenAPI 規範 看出 訪問 的 URL 與 HTTP\nMethod 採用 何種 ( GET , PUT , POST ... )\n跟 參數 與 資料 型別\n因此 用戶端 可以 很 清楚 如何 去 呼叫 使用 更能 讓 二次開發 者 能夠 無縫 接軌\nSwagger 其實 相當於 一個 根據 OpenAPI 規範 發展 出來 一系列 產品 的 品牌 。\n旗下 也 有 諸多 不同 的 工具 比方 OpenAPIGenerator\n,\n,\n....\nSwagger\nUI\n則是 提供 了 Web\n介面\n使用 OpenAPI 規範 提供 資訊 。\n而 我們 於 . NET\nCore 開發 框架 則可 透過 middleware 方式 註冊 NSwag\n,\nSwashbuckle\nSwagger\n3\nWeb\nUI\nSwagger\n2\nWeb\nUI\n. net\ncore\nweb\napi 應用 Swagger 配置 使用\n在 此 我 拿 之前 跑 的 這 幾篇 最終 產出 的 專案 去 配置\n到 Nuget 套件 去 下載安裝 NSwag . AspNetCore\n緊接著 我們 到 Starup 的 ConfigureServices 方法 去 註冊 服務\n再 到 Configure 去 啟用 OpenAPI 跟 SwaggerUI 的 中間件\n最後 就是 見證 奇蹟 的 時刻 ( 對於 懶得 寫 API 文件 的 開發者 來說 真的 是 一大 福音 )\n要 查看 Swagger\nAPI\n自動 幫 我們 掃描 所有 API\n方法 後 產生 出來 的 WEB\nAPI\nDocument\n預設 路由 / swagger\n會 自動 跳轉 至 / swagger / index . html\n而且 還 真的 能 執行 存取 異動\nRef :\nOpenAPI\nSpecification\n使用\nSwagger / OpenAPI\nASP . NET\nCore\nweb\nAPI\n檔\nNSwag\n與\nASP . NET\nCore\n使用者 入門\nSwashbuckle\n與\nASP . NET\nCore\n使用者 入門\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "一套 web\napi 管理 測試 工具\n協助 提供 自訂 api 規格 文件 呼叫 回應 方式 描述\n台 中 交通 api 案例\n2015 年 swagger 捐贈 openapi 計畫\nopenapi 別稱\n習慣 openapi 視為 一種 規範 swagger 則是 實踐 規範 工具\nopenapi\n注重 開發者 寫 api 調用 呼叫者 合作 不用 透過 程式碼 存取\nopenapi 規範 訪問 url http\nmethod 採用 何種 get put post ...\n參數 資料 型別\n用戶端 呼叫 更能 二次開發 無縫 接軌\nswagger 相當於 openapi 規範 發展 一系列 產品 品牌\n旗下 諸多 工具 openapigenerator\n\n\n....\nswagger\nui\n則是 提供 web\n介面\nopenapi 規範 提供 資訊\nnet\ncore 開發 框架 則可 透過 middleware 方式 註冊 nswag\n\nswashbuckle\nswagger\n3\nweb\nui\nswagger\n2\nweb\nui\nnet\ncore\nweb\napi swagger 配置\n跑 幾篇 最終 產出 專案 配置\nnuget 套件 下載安裝 nswag aspnetcore\nstarup configureservices 方法 註冊 服務\nconfigure 啟用 openapi swaggerui 中間件\n見證 奇蹟 時刻 懶得 寫 api 文件 開發者 來說 真的 一大 福音\n查看 swagger\napi\n自動 幫 掃描 api\n方法 web\napi\ndocument\n預設 路由 swagger\n會 自動 跳轉 swagger index html\n真的 執行 存取 異動\nref\nopenapi\nspecification\n\nswagger openapi\nasp net\ncore\nweb\napi\n檔\nnswag\n\nasp net\ncore\n使用者 入門\nswashbuckle\n\nasp net\ncore\n使用者 入門\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "web",
            "net",
            "用戶端",
            "使用者",
            "url"
        ],
        "extracted_keywords_phrases": [
            "方法 web",
            "http method",
            "swagger web",
            "web api",
            "web 介面"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283290": {
        "href": "https://ithelp.ithome.com.tw/articles/10283290",
        "title": ".Net Core Web Api_筆記20_api結合ADO.NET資料庫操作part8_新聞文章查詢",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>在大量數據同時表格陳列於畫面上時通常<br>\n都會需要有一些關鍵字查詢的機制</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452ZOqxcZZMAN.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452ZOqxcZZMAN.png\"></p>\n<p>新增Search的Action<br>\n這邊我們By 文章內容和標題的模糊查詢</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult&lt;List&lt;NewsInfo&gt;&gt; ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List&lt;NewsInfo&gt; lsNewsInfo = new List&lt;NewsInfo&gt;();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        [HttpGet(\"Search\")]\n        public ActionResult&lt;List&lt;NewsInfo&gt;&gt; SearchNews(string keyword)\n        {\n            string strSQL = @\"select * from NewsInfo where NewsTitle like @keyword1 or NewsContent like @keyword2 \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@keyword1\", $\"%{keyword}%\");\n            htParams.Add(\"@keyword2\", $\"%{keyword}%\");\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List&lt;NewsInfo&gt; lsNewsInfo = new List&lt;NewsInfo&gt;();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult&lt;int&gt; DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult&lt;NewsInfo&gt; GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n        [HttpPut(\"Update\")]\n        public ActionResult&lt;int&gt; UpdateNewsInfo(NewsInfo newsInfo)\n        {\n            if (newsInfo == null)\n                return NotFound();\n            int RowCount = 0;\n\n            string strSQL = @\" UPDATE NewsInfo \n                               SET NewsTitle = @NewsTitle,\n                                   NewsContent = @NewsContent,\n                                   CreateDate = @CreateDate,\n                                   NewsTypeId = @NewsTypeId \n                               WHERE NewsId = @NewsId \";\n\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            htParams.Add(\"@NewsId\", newsInfo.NewsId);\n\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n    }\n}\n</code></pre>\n<p>前端畫面jQuery Ajax呼叫查詢回來結果處理<br>\n每次呼叫前都把table的tbody清除避免資料重疊</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Show News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body style=\"margin:20px;\"&gt;\n    &lt;div&gt;\n        &lt;input type=\"text\" id=\"keyword\" style=\"height:30px;\" /&gt;\n        &lt;input type=\"button\" id=\"search\" class=\"btn btn-primary btn-sm\" onclick=\"javascript:search()\" value=\"查詢\" /&gt;\n    &lt;/div&gt;\n    &lt;table id=\"tbNews\" class=\"table table-bordered\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td nowrap&gt;文章ID&lt;/td&gt;\n                &lt;td nowrap&gt;文章標題&lt;/td&gt;\n                &lt;td nowrap&gt;文章內文&lt;/td&gt;\n                &lt;td nowrap&gt;文章分類&lt;/td&gt;\n                &lt;td nowrap&gt;操作&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;&lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    //console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;\" +\n                            \"&lt;td&gt;\" + value.newsId + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsTitle + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsContent + \"&lt;/td&gt;\" +\n                            /*\"&lt;td&gt;\" + value.newsTypeId + \"&lt;/td&gt;\" +*/\n                            \"&lt;td&gt;\" + value.newsTypeName + \"&lt;/td&gt;\" +\n                            \"&lt;td nowrap&gt;\" +\n                            \"&lt;a href='Edit.html?id=\" + value.newsId + \"&amp;tid=\" + value.newsTypeId + \"'&gt;編輯&lt;/a&gt; \" +\n                            \"&lt;a href='javascript:Del(\" + value.newsId + \")'&gt;刪除&lt;/a&gt;\" +\n                            \"&lt;/td&gt;\" +\n                            \"&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/news/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n        function search() {\n            var key_word = $(\"#keyword\").val();\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/search?keyword=\" + key_word,\n                dataType: \"json\",\n                success: function (result) {\n                    tbody.empty();\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;\" +\n                            \"&lt;td&gt;\" + value.newsId + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsTitle + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsContent + \"&lt;/td&gt;\" +\n                            /*\"&lt;td&gt;\" + value.newsTypeId + \"&lt;/td&gt;\" +*/\n                            \"&lt;td&gt;\" + value.newsTypeName + \"&lt;/td&gt;\" +\n                            \"&lt;td nowrap&gt;\" +\n                            \"&lt;a href='Edit.html?id=\" + value.newsId + \"&amp;tid=\" + value.newsTypeId + \"'&gt;編輯&lt;/a&gt; \" +\n                            \"&lt;a href='javascript:Del(\" + value.newsId + \")'&gt;刪除&lt;/a&gt;\" +\n                            \"&lt;/td&gt;\" +\n                            \"&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            })\n        }\n\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api20apiadonetpart8.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2021/12/net-core-web-api20apiadonetpart8.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-23 15:01:52",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "20",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>在大量數據同時表格陳列於畫面上時通常<br/>\n都會需要有一些關鍵字查詢的機制</p>\n<p></p>\n<p>新增Search的Action<br/>\n這邊我們By 文章內容和標題的模糊查詢</p>\n<pre></pre>\n<p>前端畫面jQuery Ajax呼叫查詢回來結果處理<br/>\n每次呼叫前都把table的tbody清除避免資料重疊</p>\n<pre></pre>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "在大量數據同時表格陳列於畫面上時通常\n都會需要有一些關鍵字查詢的機制\n\n新增Search的Action\n這邊我們By 文章內容和標題的模糊查詢\n\n前端畫面jQuery Ajax呼叫查詢回來結果處理\n每次呼叫前都把table的tbody清除避免資料重疊\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult<List<NewsInfo>> ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List<NewsInfo> lsNewsInfo = new List<NewsInfo>();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        [HttpGet(\"Search\")]\n        public ActionResult<List<NewsInfo>> SearchNews(string keyword)\n        {\n            string strSQL = @\"select * from NewsInfo where NewsTitle like @keyword1 or NewsContent like @keyword2 \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@keyword1\", $\"%{keyword}%\");\n            htParams.Add(\"@keyword2\", $\"%{keyword}%\");\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List<NewsInfo> lsNewsInfo = new List<NewsInfo>();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult<int> DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult<NewsInfo> GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n        [HttpPut(\"Update\")]\n        public ActionResult<int> UpdateNewsInfo(NewsInfo newsInfo)\n        {\n            if (newsInfo == null)\n                return NotFound();\n            int RowCount = 0;\n\n            string strSQL = @\" UPDATE NewsInfo \n                               SET NewsTitle = @NewsTitle,\n                                   NewsContent = @NewsContent,\n                                   CreateDate = @CreateDate,\n                                   NewsTypeId = @NewsTypeId \n                               WHERE NewsId = @NewsId \";\n\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            htParams.Add(\"@NewsId\", newsInfo.NewsId);\n\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Show News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body style=\"margin:20px;\">\n    <div>\n        <input type=\"text\" id=\"keyword\" style=\"height:30px;\" />\n        <input type=\"button\" id=\"search\" class=\"btn btn-primary btn-sm\" onclick=\"javascript:search()\" value=\"查詢\" />\n    </div>\n    <table id=\"tbNews\" class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <td nowrap>文章ID</td>\n                <td nowrap>文章標題</td>\n                <td nowrap>文章內文</td>\n                <td nowrap>文章分類</td>\n                <td nowrap>操作</td>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    //console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr>\" +\n                            \"<td>\" + value.newsId + \"</td>\" +\n                            \"<td>\" + value.newsTitle + \"</td>\" +\n                            \"<td>\" + value.newsContent + \"</td>\" +\n                            /*\"<td>\" + value.newsTypeId + \"</td>\" +*/\n                            \"<td>\" + value.newsTypeName + \"</td>\" +\n                            \"<td nowrap>\" +\n                            \"<a href='Edit.html?id=\" + value.newsId + \"&tid=\" + value.newsTypeId + \"'>編輯</a> \" +\n                            \"<a href='javascript:Del(\" + value.newsId + \")'>刪除</a>\" +\n                            \"</td>\" +\n                            \"</tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/news/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n        function search() {\n            var key_word = $(\"#keyword\").val();\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/search?keyword=\" + key_word,\n                dataType: \"json\",\n                success: function (result) {\n                    tbody.empty();\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr>\" +\n                            \"<td>\" + value.newsId + \"</td>\" +\n                            \"<td>\" + value.newsTitle + \"</td>\" +\n                            \"<td>\" + value.newsContent + \"</td>\" +\n                            /*\"<td>\" + value.newsTypeId + \"</td>\" +*/\n                            \"<td>\" + value.newsTypeName + \"</td>\" +\n                            \"<td nowrap>\" +\n                            \"<a href='Edit.html?id=\" + value.newsId + \"&tid=\" + value.newsTypeId + \"'>編輯</a> \" +\n                            \"<a href='javascript:Del(\" + value.newsId + \")'>刪除</a>\" +\n                            \"</td>\" +\n                            \"</tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            })\n        }\n\n\n    </script>\n</body>\n</html>\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "在 大量 數據 同時 表格 陳列 於 畫面 上時 通常\n都 會 需要 有 一些 關鍵字 查詢 的 機制\n新增 Search 的 Action\n這邊 我們 By\n文章內容 和 標題 的 模糊 查詢\n前端 畫面 jQuery\nAjax 呼叫 查詢 回來 結果 處理\n每次 呼叫 前 都 把 table 的 tbody 清除 避免 資料 重疊\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "數據 表格 陳列 畫面 上時\n會 關鍵字 查詢 機制\n新增 search action\n\n文章內容 標題 模糊 查詢\n前端 畫面 jquery\najax 呼叫 查詢 回來\n每次 呼叫 前 table tbody 清除 資料 重疊\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "數據",
            "資料",
            "ajax",
            "表格",
            "search"
        ],
        "extracted_keywords_phrases": [
            "資料 重疊",
            "數據 表格",
            "查詢 機制",
            "search action",
            "表格 陳列"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283289": {
        "href": "https://ithelp.ithome.com.tw/articles/10283289",
        "title": ".Net Core Web Api_筆記19_api結合ADO.NET資料庫操作part7_新聞文章的編輯更新與刪除",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452s51dravWJT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452s51dravWJT.png\"></p>\n<p>首先操作部分</p>\n<p>刪除及編輯頁面回填By NewsId查詢的Action 擴充</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        //.......之前的略\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult&lt;int&gt; DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult&lt;NewsInfo&gt; GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n\n    }\n}\n</code></pre>\n<p>Show.html中 jQuery Ajax 呼叫程式 及畫面調整<br>\n新增操作Column 並附上跳轉Edit頁面跟刪除的功能<br>\n主要差別在於刪除直接呼叫js後端觸發刪除就只是一段js的執行<br>\n而編輯則是跳轉到特定一頁</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Show News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body style=\"margin:20px;\"&gt;\n    &lt;table id=\"tbNews\" class=\"table table-bordered\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td nowrap&gt;文章ID&lt;/td&gt;\n                &lt;td nowrap&gt;文章標題&lt;/td&gt;\n                &lt;td nowrap&gt;文章內文&lt;/td&gt;\n                &lt;td nowrap&gt;文章分類&lt;/td&gt;\n                &lt;td nowrap&gt;操作&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;&lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;\" +\n                            \"&lt;td&gt;\" + value.newsId + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsTitle + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsContent + \"&lt;/td&gt;\" +\n                            /*\"&lt;td&gt;\" + value.newsTypeId + \"&lt;/td&gt;\" +*/\n                            \"&lt;td&gt;\" + value.newsTypeName + \"&lt;/td&gt;\" +\n                            \"&lt;td nowrap&gt;\" +\n                            \"&lt;a href='Edit.html?id=\" + value.newsId + \"&amp;tid=\" + value.newsTypeId + \"'&gt;編輯&lt;/a&gt; \" +\n                            \"&lt;a href='javascript:Del(\" + value.newsId + \")'&gt;刪除&lt;/a&gt;\" +\n                            \"&lt;/td&gt;\" +\n                            \"&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/news/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>News Edit.html 畫面<br>\n則是By特定NewsId去查詢回填至畫面中<br>\n在文章分類下拉選單則是額外一個ajax存取查詢回填<br>\n當type_id吻合則設置為預設被選取的狀態</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Edit News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;新增新聞文章&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞標題:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"NewsTitle\" class=\"form-control\" /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞內容:&lt;/label&gt;\n                &lt;textarea id=\"NewsContent\" class=\"form-control\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞分類:&lt;/label&gt;\n                &lt;select id=\"NewsTypeId\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-offset-2 col-md-10\"&gt;\n                    &lt;input type=\"submit\" id=\"savebtn\" value=\"更新\" class=\"btn btn-primary\" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"bg-danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&amp;\");\n            for (var idxVar = 0; idxVar &lt; vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            var type_id = getQueryGetParams(\"tid\");\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/news/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#NewsTitle\").val(result.newsTitle);\n                    $(\"#NewsContent\").val(result.newsContent);\n                }\n            });\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        if (value.newsTypeId == type_id) {\n                            opt += \"&lt;option selected='selected' id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                        } else {\n                            opt += \"&lt;option id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                        }\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452sN2Dqr7zb2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452sN2Dqr7zb2.png\"></p>\n<p>剩下編輯的表單更新提交</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult&lt;List&lt;NewsInfo&gt;&gt; ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List&lt;NewsInfo&gt; lsNewsInfo = new List&lt;NewsInfo&gt;();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult&lt;int&gt; DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult&lt;NewsInfo&gt; GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n        [HttpPut(\"Update\")]\n        public ActionResult&lt;int&gt; UpdateNewsInfo(NewsInfo newsInfo)\n        {\n            if (newsInfo == null)\n                return NotFound();\n            int RowCount = 0;\n\n            string strSQL = @\" UPDATE NewsInfo \n                               SET NewsTitle = @NewsTitle,\n                                   NewsContent = @NewsContent,\n                                   CreateDate = @CreateDate,\n                                   NewsTypeId = @NewsTypeId \n                               WHERE NewsId = @NewsId \";\n\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            htParams.Add(\"@NewsId\", newsInfo.NewsId);\n\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL,htParams);\n            return RowCount;\n        }\n    }\n}\n</code></pre>\n<p>前端部分jQuery觸發呼叫</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Edit News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;編輯新聞文章&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞標題:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"NewsTitle\" class=\"form-control\" /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞內容:&lt;/label&gt;\n                &lt;textarea id=\"NewsContent\" class=\"form-control\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞分類:&lt;/label&gt;\n                &lt;select id=\"NewsTypeId\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-offset-2 col-md-10\"&gt;\n                    &lt;input type=\"submit\" id=\"savebtn\" value=\"更新\" class=\"btn btn-primary\" /&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"bg-danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&amp;\");\n            for (var idxVar = 0; idxVar &lt; vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            var type_id = getQueryGetParams(\"tid\");\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/news/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#NewsTitle\").val(result.newsTitle);\n                    $(\"#NewsContent\").val(result.newsContent);\n                }\n            });\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        if (value.newsTypeId == type_id) {\n                            opt += \"&lt;option selected='selected' id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                        } else {\n                            opt += \"&lt;option id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                        }\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n        });\n\n        $('#savebtn').click(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: 'put',\n                url: '/api/news/update',\n                dataType: 'text',\n                data: JSON.stringify({\n                    NewsTitle: $('#NewsTitle').val(),\n                    NewsContent: $('#NewsContent').val(),\n                    NewsTypeId: Number.parseInt($(\"#NewsTypeId\").find(\"option:selected\").attr(\"id\")),\n                    NewsId: Number.parseInt(id)\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功更新');\n                    }\n                }\n            });\n        });\n\n\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>效果<br>\nbefore<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452hsjC7jmxvH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452hsjC7jmxvH.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452k11AWNQPG6.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452k11AWNQPG6.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452yXJcissNn0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452yXJcissNn0.png\"></p>\n<p>after<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452N723vao92o.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452N723vao92o.png\"></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api19apiadonetpart7.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2021/12/net-core-web-api19apiadonetpart7.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-23 14:59:03",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "19",
        "processed_content_html": "<div class=\"markdown__style\">\n<p></p>\n<p>首先操作部分</p>\n<p>刪除及編輯頁面回填By NewsId查詢的Action 擴充</p>\n<pre></pre>\n<p>Show.html中 jQuery Ajax 呼叫程式 及畫面調整<br/>\n新增操作Column 並附上跳轉Edit頁面跟刪除的功能<br/>\n主要差別在於刪除直接呼叫js後端觸發刪除就只是一段js的執行<br/>\n而編輯則是跳轉到特定一頁</p>\n<pre></pre>\n<p>News Edit.html 畫面<br/>\n則是By特定NewsId去查詢回填至畫面中<br/>\n在文章分類下拉選單則是額外一個ajax存取查詢回填<br/>\n當type_id吻合則設置為預設被選取的狀態</p>\n<pre></pre>\n<p></p>\n<p>剩下編輯的表單更新提交</p>\n<pre></pre>\n<p>前端部分jQuery觸發呼叫</p>\n<pre></pre>\n<p>效果<br/>\nbefore<br/>\n</p>\n<p></p>\n<p></p>\n<p>after<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "首先操作部分\n刪除及編輯頁面回填By NewsId查詢的Action 擴充\n\nShow.html中 jQuery Ajax 呼叫程式 及畫面調整\n新增操作Column 並附上跳轉Edit頁面跟刪除的功能\n主要差別在於刪除直接呼叫js後端觸發刪除就只是一段js的執行\n而編輯則是跳轉到特定一頁\n\nNews Edit.html 畫面\n則是By特定NewsId去查詢回填至畫面中\n在文章分類下拉選單則是額外一個ajax存取查詢回填\n當type_id吻合則設置為預設被選取的狀態\n\n\n剩下編輯的表單更新提交\n\n前端部分jQuery觸發呼叫\n\n效果\nbefore\n\n\n\nafter\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        //.......之前的略\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult<int> DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult<NewsInfo> GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Show News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body style=\"margin:20px;\">\n    <table id=\"tbNews\" class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <td nowrap>文章ID</td>\n                <td nowrap>文章標題</td>\n                <td nowrap>文章內文</td>\n                <td nowrap>文章分類</td>\n                <td nowrap>操作</td>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr>\" +\n                            \"<td>\" + value.newsId + \"</td>\" +\n                            \"<td>\" + value.newsTitle + \"</td>\" +\n                            \"<td>\" + value.newsContent + \"</td>\" +\n                            /*\"<td>\" + value.newsTypeId + \"</td>\" +*/\n                            \"<td>\" + value.newsTypeName + \"</td>\" +\n                            \"<td nowrap>\" +\n                            \"<a href='Edit.html?id=\" + value.newsId + \"&tid=\" + value.newsTypeId + \"'>編輯</a> \" +\n                            \"<a href='javascript:Del(\" + value.newsId + \")'>刪除</a>\" +\n                            \"</td>\" +\n                            \"</tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n\n        function Del(id) {\n            $.ajax({\n                type: \"delete\",\n                url: \"/api/news/delete?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    if (result != \"0\") {\n                        location.href = \"Show.html\";\n                    }\n                }\n            });\n        }\n\n\n    </script>\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Edit News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\">\n        <h3>新增新聞文章</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-8\">\n                <label>新聞標題:</label>\n                <input type=\"text\" id=\"NewsTitle\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞內容:</label>\n                <textarea id=\"NewsContent\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞分類:</label>\n                <select id=\"NewsTypeId\"></select>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-md-offset-2 col-md-10\">\n                    <input type=\"submit\" id=\"savebtn\" value=\"更新\" class=\"btn btn-primary\" />\n                </div>\n                <div>\n                    <span id=\"msg\" class=\"bg-danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var idxVar = 0; idxVar < vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            var type_id = getQueryGetParams(\"tid\");\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/news/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#NewsTitle\").val(result.newsTitle);\n                    $(\"#NewsContent\").val(result.newsContent);\n                }\n            });\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        if (value.newsTypeId == type_id) {\n                            opt += \"<option selected='selected' id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                        } else {\n                            opt += \"<option id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                        }\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n        });\n    </script>\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult<List<NewsInfo>> ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List<NewsInfo> lsNewsInfo = new List<NewsInfo>();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n        [HttpDelete(\"Delete\")]\n        public ActionResult<int> DeleteNewsInfo(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"delete from NewsInfo where NewsId=@Id\";\n            Hashtable htParms = new Hashtable();\n            htParms.Add(\"@Id\", id);\n            int RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParms);\n            return RowCount;\n        }\n\n        [HttpGet(\"GetById\")]\n        public ActionResult<NewsInfo> GetNewsInfoById(int? id)\n        {\n            if (id == null)\n                return NotFound();\n\n            string strSQL = @\"select * from NewsInfo where NewsId=@Id\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@Id\", id);\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL, htParams);\n            NewsInfo newsInfo = new NewsInfo();\n            while (dataReader.Read())\n            {\n                newsInfo.NewsId = dataReader.GetInt32(0);\n                newsInfo.NewsTitle = dataReader.GetString(1);\n                newsInfo.NewsContent = dataReader.GetString(2);\n                newsInfo.NewsTypeId = dataReader.GetInt32(4);\n            }\n            dataReader.Close();\n            return newsInfo;\n        }\n\n        [HttpPut(\"Update\")]\n        public ActionResult<int> UpdateNewsInfo(NewsInfo newsInfo)\n        {\n            if (newsInfo == null)\n                return NotFound();\n            int RowCount = 0;\n\n            string strSQL = @\" UPDATE NewsInfo \n                               SET NewsTitle = @NewsTitle,\n                                   NewsContent = @NewsContent,\n                                   CreateDate = @CreateDate,\n                                   NewsTypeId = @NewsTypeId \n                               WHERE NewsId = @NewsId \";\n\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            htParams.Add(\"@NewsId\", newsInfo.NewsId);\n\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL,htParams);\n            return RowCount;\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Edit News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\">\n        <h3>編輯新聞文章</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-8\">\n                <label>新聞標題:</label>\n                <input type=\"text\" id=\"NewsTitle\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞內容:</label>\n                <textarea id=\"NewsContent\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞分類:</label>\n                <select id=\"NewsTypeId\"></select>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-md-offset-2 col-md-10\">\n                    <input type=\"submit\" id=\"savebtn\" value=\"更新\" class=\"btn btn-primary\" />\n                </div>\n                <div>\n                    <span id=\"msg\" class=\"bg-danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        function getQueryGetParams(variable) {\n            var query = window.location.search.substring(1);\n            var vars = query.split(\"&\");\n            for (var idxVar = 0; idxVar < vars.length; idxVar++) {\n                var pair = vars[idxVar].split(\"=\");\n                if (pair[0] == variable)\n                    return pair[1];\n            }\n            return \"\";\n        }\n\n        $(function () {\n            var id = getQueryGetParams(\"id\");\n            var type_id = getQueryGetParams(\"tid\");\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/news/getbyid?id=\" + id,\n                dataType: \"json\",\n                success: function (result) {\n                    $(\"#NewsTitle\").val(result.newsTitle);\n                    $(\"#NewsContent\").val(result.newsContent);\n                }\n            });\n\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        if (value.newsTypeId == type_id) {\n                            opt += \"<option selected='selected' id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                        } else {\n                            opt += \"<option id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                        }\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n        });\n\n        $('#savebtn').click(function () {\n            var id = getQueryGetParams(\"id\");\n            $.ajax({\n                type: 'put',\n                url: '/api/news/update',\n                dataType: 'text',\n                data: JSON.stringify({\n                    NewsTitle: $('#NewsTitle').val(),\n                    NewsContent: $('#NewsContent').val(),\n                    NewsTypeId: Number.parseInt($(\"#NewsTypeId\").find(\"option:selected\").attr(\"id\")),\n                    NewsId: Number.parseInt(id)\n                }),\n                contentType: 'application/json',\n                success: function (result) {\n                    if (result == \"1\") {\n                        $('#msg').text('成功更新');\n                    }\n                }\n            });\n        });\n\n\n    </script>\n</body>\n</html>\n"
            }
        ],
        "programming_languages": [
            "javascript"
        ],
        "word_seg_content_text": "首先 操作 部分\n刪除 及 編輯 頁面 回填 By\nNewsId 查詢 的 Action\n擴充\nShow . html 中\njQuery\nAjax\n呼叫 程式\n及 畫面 調整\n新增 操作 Column\n並 附上 跳轉 Edit 頁面 跟 刪除 的 功能\n主要 差別 在於 刪除 直接 呼叫 js 後 端 觸發 刪除 就 只是 一段 js 的 執行\n而 編輯 則是 跳轉 到 特定 一頁\nNews\nEdit . html\n畫面\n則是 By 特定 NewsId 去 查詢 回填 至 畫面 中\n在 文章 分類 下拉 選單 則是 額外 一個 ajax 存取 查詢 回填\n當 type _ id 吻合 則 設置 為 預設 被 選取 的 狀態\n剩下 編輯 的 表單 更新 提交\n前端 部分 jQuery 觸發 呼叫\n效果\nbefore\nafter\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "操作\n刪除 編輯 頁面 回填\nnewsid 查詢 action\n擴充\nshow html 中\njquery\najax\n呼叫 程式\n畫面 調整\n新增 操作 column\n附上 跳轉 edit 頁面 刪除 功能\n差別 在於 刪除 呼叫 js 端 觸發 刪除 一段 js 執行\n編輯 則是 跳轉 特定 一頁\nnews\nedit html\n畫面\n則是 特定 newsid 查詢 回填 畫面 中\n文章 分類 下拉 選單 則是 額外 ajax 存取 查詢 回填\ntype id 吻合 設置 預設 選取 狀態\n剩下 編輯 表單 更新 提交\n前端 jquery 觸發 呼叫\n效果\nbefore\nafter\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "html",
            "newsid",
            "jquery",
            "刪除",
            "編輯"
        ],
        "extracted_keywords_phrases": [
            "news edit",
            "刪除 編輯",
            "頁面 刪除",
            "edit html",
            "編輯 頁面"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283288": {
        "href": "https://ithelp.ithome.com.tw/articles/10283288",
        "title": ".Net Core Web Api_筆記18_api結合ADO.NET資料庫操作part6_新聞文章表格陳列查詢",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>由前面幾個開發方式可以漸漸了解到前後端分離的開發方式</p>\n<p>接著我們要進行新聞文章表格陳列<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452vnLGxVNd3u.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452vnLGxVNd3u.png\"></p>\n<p>在Controller新增Show的查詢動作方法</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult&lt;List&lt;NewsInfo&gt;&gt; ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List&lt;NewsInfo&gt; lsNewsInfo = new List&lt;NewsInfo&gt;();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4)\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n    }\n}\n</code></pre>\n<p>wwwroot/News/Show.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Show News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body style=\"margin:20px;\"&gt;\n    &lt;table id=\"tbNews\" class=\"table table-bordered\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;td&gt;文章ID&lt;/td&gt;\n                &lt;td&gt;文章標題&lt;/td&gt;\n                &lt;td&gt;文章內文&lt;/td&gt;\n                &lt;td&gt;文章分類&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;&lt;/tbody&gt;\n    &lt;/table&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"&lt;tr&gt;\" +\n                            \"&lt;td&gt;\" + value.newsId + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsTitle + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsContent + \"&lt;/td&gt;\" +\n                            \"&lt;td&gt;\" + value.newsTypeId + \"&lt;/td&gt;\" +\n                            \"&lt;/tr&gt;\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>那其實目前有個問題在於文章類別顯示ID流水號其實看不懂<br>\n應該要改為中文定義顯示</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452Bm1gJsPnPa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452Bm1gJsPnPa.png\"></p>\n<p>於NewsInfo Model中擴充TypeName</p>\n<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Models\n{\n    public class NewsInfo\n    {\n        public int NewsId { get; set; }\n\n        public string NewsTitle { get; set; }\n\n        public string NewsContent { get; set; }\n\n        public DateTime? CreateDate { get; set; }\n\n        public int? NewsTypeId { get; set; }\n\n        public string NewsTypeName { get; set; }\n    }\n}\n</code></pre>\n<p>並在NewsController擴充方法GetNewsTypeNameById</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult&lt;List&lt;NewsInfo&gt;&gt; ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List&lt;NewsInfo&gt; lsNewsInfo = new List&lt;NewsInfo&gt;();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n    }\n}\n</code></pre>\n<p>至於在Show.html就簡單把ID替換成newsTypeName<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/201074528sXh4rOWfU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/201074528sXh4rOWfU.png\"></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api18apiadonetpart6.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2021/12/net-core-web-api18apiadonetpart6.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-23 14:54:38",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "18",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>由前面幾個開發方式可以漸漸了解到前後端分離的開發方式</p>\n<p>接著我們要進行新聞文章表格陳列<br/>\n</p>\n<p>在Controller新增Show的查詢動作方法</p>\n<pre></pre>\n<p>wwwroot/News/Show.html</p>\n<pre></pre>\n<p>那其實目前有個問題在於文章類別顯示ID流水號其實看不懂<br/>\n應該要改為中文定義顯示</p>\n<p></p>\n<p>於NewsInfo Model中擴充TypeName</p>\n<pre></pre>\n<p>並在NewsController擴充方法GetNewsTypeNameById</p>\n<pre></pre>\n<p>至於在Show.html就簡單把ID替換成newsTypeName<br/>\n</p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "由前面幾個開發方式可以漸漸了解到前後端分離的開發方式\n接著我們要進行新聞文章表格陳列\n\n在Controller新增Show的查詢動作方法\n\nwwwroot/News/Show.html\n\n那其實目前有個問題在於文章類別顯示ID流水號其實看不懂\n應該要改為中文定義顯示\n\n於NewsInfo Model中擴充TypeName\n\n並在NewsController擴充方法GetNewsTypeNameById\n\n至於在Show.html就簡單把ID替換成newsTypeName\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult<List<NewsInfo>> ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List<NewsInfo> lsNewsInfo = new List<NewsInfo>();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4)\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Show News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body style=\"margin:20px;\">\n    <table id=\"tbNews\" class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <td>文章ID</td>\n                <td>文章標題</td>\n                <td>文章內文</td>\n                <td>文章分類</td>\n            </tr>\n        </thead>\n        <tbody></tbody>\n    </table>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            var tbody = $('#tbNews tbody')\n            $.ajax({\n                type: \"get\",\n                url: \"/api/News/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    console.log(result);\n                    $.each(result, function (n, value) {\n                        var tr_val = \"\";\n                        tr_val += \"<tr>\" +\n                            \"<td>\" + value.newsId + \"</td>\" +\n                            \"<td>\" + value.newsTitle + \"</td>\" +\n                            \"<td>\" + value.newsContent + \"</td>\" +\n                            \"<td>\" + value.newsTypeId + \"</td>\" +\n                            \"</tr>\";\n                        tbody += tr_val;\n                    });\n                    $('#tbNews').append(tbody);\n                }\n            });\n        });\n    </script>\n</body>\n</html>\n"
            },
            {
                "language": "unknown",
                "content": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Models\n{\n    public class NewsInfo\n    {\n        public int NewsId { get; set; }\n\n        public string NewsTitle { get; set; }\n\n        public string NewsContent { get; set; }\n\n        public DateTime? CreateDate { get; set; }\n\n        public int? NewsTypeId { get; set; }\n\n        public string NewsTypeName { get; set; }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Data.SqlClient;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n        [HttpGet(\"Show\")]\n        public ActionResult<List<NewsInfo>> ShowNewsInfo()\n        {\n            string strSQL = @\" select * from NewsInfo \";\n            SqlDataReader dataReader = MSSQLHelper.GetSqlDataReader(strSQL);\n            if (!dataReader.HasRows)\n                return NotFound();\n            List<NewsInfo> lsNewsInfo = new List<NewsInfo>();\n            while (dataReader.Read())\n            {\n                lsNewsInfo.Add(new NewsInfo()\n                {\n                    NewsId = dataReader.GetInt32(0),\n                    NewsTitle = dataReader.GetString(1),\n                    NewsContent = dataReader.GetString(2),\n                    NewsTypeId = dataReader.GetInt32(4),\n                    NewsTypeName = GetNewsTypeNameById(dataReader.GetInt32(4))\n                });\n            }\n            dataReader.Close();\n            return lsNewsInfo;\n        }\n\n        private string GetNewsTypeNameById(int newsTypeId)\n        {\n            string strSQL = @\"select NewsTypeName from NewsType where NewsTypeId=@NewsTypeId\";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTypeId\", newsTypeId);\n            var newsTypeName = MSSQLHelper.ExecuteScalar(strSQL, htParams);\n            return newsTypeName.ToString();\n        }\n\n    }\n}\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "由 前面 幾個 開發方式 可以 漸漸 了解 到 前後 端 分離 的 開發方式\n接著 我們 要 進行 新聞 文章 表格 陳列\n在 Controller 新增 Show 的 查詢 動作 方法\nwwwroot / News / Show . html\n那 其實 目前 有個 問題 在於 文章 類別 顯示 ID 流水號 其實 看不懂\n應該 要 改為 中文 定義 顯示\n於 NewsInfo\nModel 中 擴充 TypeName\n並在 NewsController 擴充 方法 GetNewsTypeNameById\n至於 在 Show . html 就 簡單 把 ID 替換成 newsTypeName\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "幾個 開發方式 漸漸 了解 端 分離 開發方式\n新聞 文章 表格 陳列\ncontroller 新增 show 查詢 動作 方法\nwwwroot news show html\n有個 在於 文章 類別 顯示 id 流水號 看不懂\n改為 中文 定義 顯示\nnewsinfo\nmodel 中 擴充 typename\n並在 newscontroller 擴充 方法 getnewstypenamebyid\nshow html 簡單 id 替換成 newstypename\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "newstypename",
            "newsinfo",
            "newscontroller",
            "新聞",
            "getnewstypenamebyid"
        ],
        "extracted_keywords_phrases": [
            "newstypename",
            "替換成 newstypename",
            "newsinfo model",
            "newstypename 本篇",
            "newscontroller 擴充"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283287": {
        "href": "https://ithelp.ithome.com.tw/articles/10283287",
        "title": ".Net Core Web Api_筆記17_api結合ADO.NET資料庫操作part5_新聞文章新增_新聞類別元素透過API綁定方式",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/201074521MCjNNwR8U.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/201074521MCjNNwR8U.png\"></p>\n<p>有了新聞類別相關的增刪改查後<br>\n就要來進行新聞文章的增刪改查功能導入</p>\n<p>新建好NewsController</p>\n<p>wwwroot下額外建立News目錄<br>\n並新增添加新聞文章的頁面表單<br>\nAdd.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Add News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;新增新聞文章&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞標題:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"NewsTitle\" class=\"form-control\" /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞內容:&lt;/label&gt;\n                &lt;textarea id=\"NewsContent\" class=\"form-control\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞分類:&lt;/label&gt;\n                &lt;select id=\"NewsTypeId\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-offset-2 col-md-10\"&gt;\n                    &lt;input type=\"submit\" id=\"savebtn\" value=\"保存\" class=\"btn btn-primary\" /&gt;                    \n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"bg-danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        opt += \"&lt;option id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n\n        });\n    &lt;/script&gt;\n&lt;/body &gt;\n&lt;/html &gt;\n</code></pre>\n<p>在網頁UI元素中時常會需要透過跟DB動態撈取出來的資料作綁定</p>\n<p>以這邊微粒就是要綁定下拉選單的新聞類別<br>\n藉由jQuery呼叫後端API方式GET查出並綁定</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452w15IdXKMi5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452w15IdXKMi5.png\"></p>\n<p>在此完善我們的NewsController<br>\n新增insert新聞文章的Action</p>\n<pre><code>using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult&lt;int&gt; AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n    }\n}\n</code></pre>\n<p>Add.html前端部分也增加Ajax呼叫</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Add News&lt;/title&gt;\n    &lt;link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" /&gt;\n    &lt;script src=\"../js/jquery/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\"&gt;\n        &lt;h3&gt;新增新聞文章&lt;/h3&gt;\n        &lt;hr /&gt;\n        &lt;div class=\"form-horizontal\"&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞標題:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"NewsTitle\" class=\"form-control\" /&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞內容:&lt;/label&gt;\n                &lt;textarea id=\"NewsContent\" class=\"form-control\"&gt;&lt;/textarea&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group col-8\"&gt;\n                &lt;label&gt;新聞分類:&lt;/label&gt;\n                &lt;select id=\"NewsTypeId\"&gt;&lt;/select&gt;\n            &lt;/div&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;div class=\"col-md-offset-2 col-md-10\"&gt;\n                    &lt;input type=\"submit\" id=\"savebtn\" value=\"保存\" class=\"btn btn-primary\" /&gt;                    \n                &lt;/div&gt;\n                &lt;div&gt;\n                    &lt;span id=\"msg\" class=\"bg-danger\"&gt;&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        opt += \"&lt;option id='\" + value.newsTypeId + \"'&gt;\" + value.newsTypeName + \"&lt;/option&gt;\";\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n            $(\"#savebtn\").click(function () {\n                $.ajax({\n                    type: \"post\",\n                    url: \"/api/news/add\",\n                    dataType: \"text\",\n                    data: JSON.stringify({\n                        Id: 1,\n                        NewsTitle: $(\"#NewsTitle\").val(),\n                        NewsContent: $(\"#NewsContent\").val(),\n                        newsTypeId:  Number.parseInt($(\"#NewsTypeId\").find(\"option:selected\").attr(\"id\"))\n                    }),\n                    contentType: \"application/json\",\n                    success: function (result) {\n                        if (result == '1') {\n                            $(\"#msg\").text(\"新增成功!\");\n                        }\n                    }\n                });\n            });\n        });\n    &lt;/script&gt;\n&lt;/body &gt;\n&lt;/html &gt;\n</code></pre>\n<p>這裡我們就隨意挑一篇新聞文章來嘗試新增<br>\n<a href=\"https://www.economic-news.tw/2020/11/investment.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.economic-news.tw/2020/11/investment.html</a></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452EH7OVOj3Pb.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452EH7OVOj3Pb.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452Z36Zp7lhja.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452Z36Zp7lhja.png\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452dSVGM4f8pa.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211223/20107452dSVGM4f8pa.png\"></p>\n<p>本篇已同步發表至個人部落格<br>\n<a href=\"https://coolmandiary.blogspot.com/2021/12/net-core-web-api17apiadonetpart5.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://coolmandiary.blogspot.com/2021/12/net-core-web-api17apiadonetpart5.html</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-23 14:51:21",
        "author_href": "https://ithelp.ithome.com.tw/users/20107452/ironman",
        "author_name": "Samuel",
        "series_href": "https://ithelp.ithome.com.tw/users/20107452/ironman/4560",
        "series_name": ".NET Core WebApi網頁應用開發",
        "series_num": "17",
        "processed_content_html": "<div class=\"markdown__style\">\n<p></p>\n<p>有了新聞類別相關的增刪改查後<br/>\n就要來進行新聞文章的增刪改查功能導入</p>\n<p>新建好NewsController</p>\n<p>wwwroot下額外建立News目錄<br/>\n並新增添加新聞文章的頁面表單<br/>\nAdd.html</p>\n<pre></pre>\n<p>在網頁UI元素中時常會需要透過跟DB動態撈取出來的資料作綁定</p>\n<p>以這邊微粒就是要綁定下拉選單的新聞類別<br/>\n藉由jQuery呼叫後端API方式GET查出並綁定</p>\n<p></p>\n<p>在此完善我們的NewsController<br/>\n新增insert新聞文章的Action</p>\n<pre></pre>\n<p>Add.html前端部分也增加Ajax呼叫</p>\n<pre></pre>\n<p>這裡我們就隨意挑一篇新聞文章來嘗試新增<br/>\n</p>\n<p></p>\n<p></p>\n<p></p>\n<p>本篇已同步發表至個人部落格<br/>\n</p>\n<br/>\n</div>",
        "content_text": "有了新聞類別相關的增刪改查後\n就要來進行新聞文章的增刪改查功能導入\n新建好NewsController\nwwwroot下額外建立News目錄\n並新增添加新聞文章的頁面表單\nAdd.html\n\n在網頁UI元素中時常會需要透過跟DB動態撈取出來的資料作綁定\n以這邊微粒就是要綁定下拉選單的新聞類別\n藉由jQuery呼叫後端API方式GET查出並綁定\n\n在此完善我們的NewsController\n新增insert新聞文章的Action\n\nAdd.html前端部分也增加Ajax呼叫\n\n這裡我們就隨意挑一篇新聞文章來嘗試新增\n\n\n\n\n本篇已同步發表至個人部落格",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Add News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\">\n        <h3>新增新聞文章</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-8\">\n                <label>新聞標題:</label>\n                <input type=\"text\" id=\"NewsTitle\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞內容:</label>\n                <textarea id=\"NewsContent\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞分類:</label>\n                <select id=\"NewsTypeId\"></select>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-md-offset-2 col-md-10\">\n                    <input type=\"submit\" id=\"savebtn\" value=\"保存\" class=\"btn btn-primary\" />                    \n                </div>\n                <div>\n                    <span id=\"msg\" class=\"bg-danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        opt += \"<option id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n\n        });\n    </script>\n</body >\n</html >\n"
            },
            {
                "language": "unknown",
                "content": "using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing MyNet5ApiAdoTest.Models;\nusing MyNet5ApiAdoTest.Utility;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace MyNet5ApiAdoTest.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class NewsController : ControllerBase\n    {\n\n        [HttpPost(\"Add\")]\n        public ActionResult<int> AddNewsInfo(NewsInfo newsInfo)\n        {\n            int RowCount = 0;\n            if (newsInfo == null)\n                return NotFound();\n\n            string strSQL = @\"INSERT INTO NewsInfo (NewsTitle,NewsContent,CreateDate,NewsTypeId) \n                                  VALUES (@NewsTitle,@NewsContent,@CreateDate,@NewsTypeId) \";\n            Hashtable htParams = new Hashtable();\n            htParams.Add(\"@NewsTitle\", newsInfo.NewsTitle);\n            htParams.Add(\"@NewsContent\", newsInfo.NewsContent);\n            //htParams.Add(\"@CreateDate\", newsInfo.CreateDate);\n            htParams.Add(\"@CreateDate\", DateTime.Now);\n            htParams.Add(\"@NewsTypeId\", newsInfo.NewsTypeId);\n            RowCount = MSSQLHelper.ExecuteNonQuery(strSQL, htParams);\n            return RowCount;\n        }\n\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Add News</title>\n    <link href=\"../css/bootstrap.min.css\" rel=\"stylesheet\" />\n    <script src=\"../js/jquery/jquery.min.js\"></script>\n</head>\n<body>\n    <div style=\"padding:20px;border:1px solid #ccc;width:600px;margin:30px;\">\n        <h3>新增新聞文章</h3>\n        <hr />\n        <div class=\"form-horizontal\">\n            <div class=\"form-group col-8\">\n                <label>新聞標題:</label>\n                <input type=\"text\" id=\"NewsTitle\" class=\"form-control\" />\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞內容:</label>\n                <textarea id=\"NewsContent\" class=\"form-control\"></textarea>\n            </div>\n            <div class=\"form-group col-8\">\n                <label>新聞分類:</label>\n                <select id=\"NewsTypeId\"></select>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"col-md-offset-2 col-md-10\">\n                    <input type=\"submit\" id=\"savebtn\" value=\"保存\" class=\"btn btn-primary\" />                    \n                </div>\n                <div>\n                    <span id=\"msg\" class=\"bg-danger\"></span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"text/javascript\">\n        $(function () {\n            $.ajax({\n                type: \"get\",\n                url: \"/api/newstype/show\",\n                dataType: \"json\",\n                success: function (result) {\n                    var opt = \"\";\n                    $.each(result, function (n, value) {\n                        opt += \"<option id='\" + value.newsTypeId + \"'>\" + value.newsTypeName + \"</option>\";\n                    });\n                    $(\"#NewsTypeId\").append(opt);\n                }\n            });\n\n            $(\"#savebtn\").click(function () {\n                $.ajax({\n                    type: \"post\",\n                    url: \"/api/news/add\",\n                    dataType: \"text\",\n                    data: JSON.stringify({\n                        Id: 1,\n                        NewsTitle: $(\"#NewsTitle\").val(),\n                        NewsContent: $(\"#NewsContent\").val(),\n                        newsTypeId:  Number.parseInt($(\"#NewsTypeId\").find(\"option:selected\").attr(\"id\"))\n                    }),\n                    contentType: \"application/json\",\n                    success: function (result) {\n                        if (result == '1') {\n                            $(\"#msg\").text(\"新增成功!\");\n                        }\n                    }\n                });\n            });\n        });\n    </script>\n</body >\n</html >\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "有 了 新聞 類別 相關 的 增刪 改查 後\n就 要來 進行 新聞 文章 的 增刪 改查 功能 導入\n新建 好 NewsController\nwwwroot 下 額外 建立 News 目錄\n並 新增 添加 新聞 文章 的 頁面 表單\nAdd . html\n在 網頁 UI 元素 中 時常 會 需要 透過 跟 DB 動態 撈取 出來 的 資料 作 綁定\n以 這邊 微粒 就是 要 綁定 下拉 選單 的 新聞 類別\n藉由 jQuery 呼叫 後 端 API 方式 GET 查出 並 綁定\n在 此 完善 我們 的 NewsController\n新增 insert 新聞 文章 的 Action\nAdd . html 前端 部分 也 增加 Ajax 呼叫\n這裡 我們 就 隨意 挑 一篇 新聞 文章 來 嘗試 新增\n本篇 已 同步 發表 至 個人 部落 格",
        "word_seg_processed_content_text": "新聞 類別 相關 增刪 改查\n要來 新聞 文章 增刪 改查 功能 導入\n新建 newscontroller\nwwwroot 額外 建立 news 目錄\n新增 添加 新聞 文章 頁面 表單\nadd html\n網頁 ui 元素 中 時常 會 透過 db 動態 撈取 資料 作 綁定\n微粒 綁定 下拉 選單 新聞 類別\n藉由 jquery 呼叫 端 api 方式 get 查出 綁定\n完善 newscontroller\n新增 insert 新聞 文章 action\nadd html 前端 增加 ajax 呼叫\n隨意 挑 一篇 新聞 文章 嘗試 新增\n本篇 同步 發表 部落 格",
        "extracted_keywords": [
            "newscontroller",
            "新聞",
            "news",
            "網頁",
            "html"
        ],
        "extracted_keywords_phrases": [
            "完善 newscontroller",
            "newscontroller",
            "newscontroller 新增",
            "新建 newscontroller",
            "newscontroller wwwroot"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283194": {
        "href": "https://ithelp.ithome.com.tw/articles/10283194",
        "title": "[Bonus 系列] - 使用 useCallback & useMemo 的正確時機是什麼?",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h2>前言</h2>\n<p>雖然說之前已經認識了 useCallback、useMemo，但有時還是對於什麼時候要用它們的時機有些模糊，所以就透過這篇文章釐清觀念。</p>\n<p>首先要知道一點是如果沒有必要可以不用去用它們，盲目的使用反而更耗效能，因為它們在 React 底層記憶值也是需要消耗效能的。</p>\n<h2>Referential Equality</h2>\n<p>在此先複習一下 Referential Equality，對於理解後面的內容會有所幫助。</p>\n<p>我們知道陣列、物件、函式等物件型別擁有 call by reference 的特性，所以即使有兩個物件它們裡面的元素、屬性、函式內容都一樣，在做 <code>===</code> 比較時仍然會是 false。</p>\n<pre><code class=\"language-javascript\">const hero1 = {\n  name: 'Batman'\n};\n\nconst hero2 = {\n  name: 'Batman'\n};\n\nconsole.log(hero1 === hero1); // =&gt; true\nconsole.log(hero1 === hero2); // =&gt; false\n</code></pre>\n<blockquote>\n<p>這樣跟 React 又有什麼關係?讓我們繼續看下去!</p>\n</blockquote>\n<h2>useCallback 使用時機</h2>\n<h3>Referential Equality 案例 1</h3>\n<p>在下面的範例可以看到一個被 React.memo() 包覆的元件 Child，而且接收到一個函式 onClick 當作 props。</p>\n<p>父元件重新渲染時，雖然都還是同一個函式，但函式被重新產生了，所以 React.memo() 會以為傳入的 props 改變而重新渲染 Child 元件，所以加上了 useCallback。</p>\n<pre><code class=\"language-jsx\">function Parent() {\n  const [count, setCount] = useState(0);\n\n  const onClick = useCallback(() =&gt; {\n    console.log('click');\n  }, []);\n\n  return (\n    &lt;&gt;\n      &lt;Foo onClick={onClick} /&gt;\n      &lt;p&gt;{count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;count increment&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<pre><code class=\"language-jsx\">const Child = memo({ onClick }) =&gt; {\n  // ...略\n\n  return (\n    &lt;&gt;\n     // ...\n     &lt;button onClick={onClick}&gt;可點擊&lt;/button&gt;\n    &lt;/&gt;\n  )\n});\n</code></pre>\n<h3>Referential Equality 案例 2</h3>\n<p>useEffect 的 dependency array 的其中一個元素為物件型別時，若物件重新產生就會被 useEffect 當作 dependency array 改變，像以下的例子就造成了 useEffect 無限 render，所以也需要加上 useCallback。</p>\n<p>跟此範例類似的例子在 pjchender 大大的 <a href=\"https://ithelp.ithome.com.tw/articles/10225504\" target=\"_blank\" rel=\"noreferrer noopener\">從 Hooks 開始，讓你的網頁 React 起來 Day20 篇</a> 也有提到，有興趣的讀者可以跳到\"在 useEffect 的 dependencies 中放入函式 - useCallback 的使用\"的段落去閱讀。</p>\n<pre><code class=\"language-jsx\">const App = () =&gt; {\n  const [id, setId] = useState(1);\n  const [detail, setDetail] = useState(\"\");\n\n  const getDetail = useCallback(() =&gt; {\n    fetch(`https://jsonplaceholder.typicode.com/users/${id}`)\n    .then(res =&gt; res.json())\n    .then(json =&gt; {\n      setDetail(json); // state updated\n    }));\n  }, [id]);\n\n  useEffect(() =&gt; {\n    getDetail();\n  }, [getDetail]);\n\n  return (\n    &lt;&gt;\n      &lt;p&gt;{detail.name}&lt;/p&gt;\n      &lt;p&gt;Current id: {id}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setId(id + 1)}&gt;id increment&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<h2>useMemo 使用時機</h2>\n<h3>1. Referential Equality</h3>\n<p>Referential Equality 的概念也可以套用在 useMemo，所以也可以留意一下 useEffect 的 dependency array。</p>\n<pre><code class=\"language-jsx\">const App = ({ param1, param2 }) =&gt; {\n  const params = useMemo(() =&gt; {\n    return { param1, param2, param3: 1 };\n  }, [param1, param2]);\n\n  useEffect(() =&gt; {\n    callApi(params);\n  }, [params]);\n}\n</code></pre>\n<h3>2. 計算開銷較大的值</h3>\n<p>例如 filter 很多元素的陣列、複雜數學運算</p>\n<h2>參考資料 &amp; 推薦閱讀</h2>\n<p><a href=\"https://blog.webdevsimplified.com/2020-05/memoization-in-react/\" target=\"_blank\" rel=\"noreferrer noopener\">How To Use Memoization To Drastically Increase React Performance</a></p>\n<p><a href=\"https://kentcdodds.com/blog/usememo-and-usecallback\" target=\"_blank\" rel=\"noreferrer noopener\">When to useMemo and useCallback</a></p>\n<p><a href=\"https://jason-memo.dev/posts/how-to-use-react-hooks-useCallback-wrongly-for-keeping-same-function-instance/\" target=\"_blank\" rel=\"noreferrer noopener\">如何錯誤地使用 React hooks useCallback 來保存相同的 function instance</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,react.js,usememo,usecalback",
        "genre": "Modern Web",
        "published_at": "2021-12-18 23:19:30",
        "author_href": "https://ithelp.ithome.com.tw/users/20116883/ironman",
        "author_name": "harry xie",
        "series_href": "https://ithelp.ithome.com.tw/users/20116883/ironman/4069",
        "series_name": "用30天更加認識 React.js 這個好朋友",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<h2>前言</h2>\n<p>雖然說之前已經認識了 useCallback、useMemo，但有時還是對於什麼時候要用它們的時機有些模糊，所以就透過這篇文章釐清觀念。</p>\n<p>首先要知道一點是如果沒有必要可以不用去用它們，盲目的使用反而更耗效能，因為它們在 React 底層記憶值也是需要消耗效能的。</p>\n<h2>Referential Equality</h2>\n<p>在此先複習一下 Referential Equality，對於理解後面的內容會有所幫助。</p>\n<p>我們知道陣列、物件、函式等物件型別擁有 call by reference 的特性，所以即使有兩個物件它們裡面的元素、屬性、函式內容都一樣，在做 <code>===</code> 比較時仍然會是 false。</p>\n<pre></pre>\n<blockquote>\n<p>這樣跟 React 又有什麼關係?讓我們繼續看下去!</p>\n</blockquote>\n<h2>useCallback 使用時機</h2>\n<h3>Referential Equality 案例 1</h3>\n<p>在下面的範例可以看到一個被 React.memo() 包覆的元件 Child，而且接收到一個函式 onClick 當作 props。</p>\n<p>父元件重新渲染時，雖然都還是同一個函式，但函式被重新產生了，所以 React.memo() 會以為傳入的 props 改變而重新渲染 Child 元件，所以加上了 useCallback。</p>\n<pre></pre>\n<pre></pre>\n<h3>Referential Equality 案例 2</h3>\n<p>useEffect 的 dependency array 的其中一個元素為物件型別時，若物件重新產生就會被 useEffect 當作 dependency array 改變，像以下的例子就造成了 useEffect 無限 render，所以也需要加上 useCallback。</p>\n<p>跟此範例類似的例子在 pjchender 大大的  也有提到，有興趣的讀者可以跳到\"在 useEffect 的 dependencies 中放入函式 - useCallback 的使用\"的段落去閱讀。</p>\n<pre></pre>\n<h2>useMemo 使用時機</h2>\n<h3>1. Referential Equality</h3>\n<p>Referential Equality 的概念也可以套用在 useMemo，所以也可以留意一下 useEffect 的 dependency array。</p>\n<pre></pre>\n<h3>2. 計算開銷較大的值</h3>\n<p>例如 filter 很多元素的陣列、複雜數學運算</p>\n<h2>參考資料 &amp; 推薦閱讀</h2>\n<p></p>\n<p></p>\n<p></p>\n<br/>\n</div>",
        "content_text": "前言\n雖然說之前已經認識了 useCallback、useMemo，但有時還是對於什麼時候要用它們的時機有些模糊，所以就透過這篇文章釐清觀念。\n首先要知道一點是如果沒有必要可以不用去用它們，盲目的使用反而更耗效能，因為它們在 React 底層記憶值也是需要消耗效能的。\nReferential Equality\n在此先複習一下 Referential Equality，對於理解後面的內容會有所幫助。\n我們知道陣列、物件、函式等物件型別擁有 call by reference 的特性，所以即使有兩個物件它們裡面的元素、屬性、函式內容都一樣，在做 === 比較時仍然會是 false。\n\n\n這樣跟 React 又有什麼關係?讓我們繼續看下去!\n\nuseCallback 使用時機\nReferential Equality 案例 1\n在下面的範例可以看到一個被 React.memo() 包覆的元件 Child，而且接收到一個函式 onClick 當作 props。\n父元件重新渲染時，雖然都還是同一個函式，但函式被重新產生了，所以 React.memo() 會以為傳入的 props 改變而重新渲染 Child 元件，所以加上了 useCallback。\n\n\nReferential Equality 案例 2\nuseEffect 的 dependency array 的其中一個元素為物件型別時，若物件重新產生就會被 useEffect 當作 dependency array 改變，像以下的例子就造成了 useEffect 無限 render，所以也需要加上 useCallback。\n跟此範例類似的例子在 pjchender 大大的  也有提到，有興趣的讀者可以跳到\"在 useEffect 的 dependencies 中放入函式 - useCallback 的使用\"的段落去閱讀。\n\nuseMemo 使用時機\n1. Referential Equality\nReferential Equality 的概念也可以套用在 useMemo，所以也可以留意一下 useEffect 的 dependency array。\n\n2. 計算開銷較大的值\n例如 filter 很多元素的陣列、複雜數學運算\n參考資料 & 推薦閱讀",
        "content_code_info": [
            {
                "language": "javascript",
                "content": "const hero1 = {\n  name: 'Batman'\n};\n\nconst hero2 = {\n  name: 'Batman'\n};\n\nconsole.log(hero1 === hero1); // => true\nconsole.log(hero1 === hero2); // => false\n"
            },
            {
                "language": "jsx",
                "content": "function Parent() {\n  const [count, setCount] = useState(0);\n\n  const onClick = useCallback(() => {\n    console.log('click');\n  }, []);\n\n  return (\n    <>\n      <Foo onClick={onClick} />\n      <p>{count}</p>\n      <button onClick={() => setCount(count + 1)}>count increment</button>\n    </>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "const Child = memo({ onClick }) => {\n  // ...略\n\n  return (\n    <>\n     // ...\n     <button onClick={onClick}>可點擊</button>\n    </>\n  )\n});\n"
            },
            {
                "language": "jsx",
                "content": "const App = () => {\n  const [id, setId] = useState(1);\n  const [detail, setDetail] = useState(\"\");\n\n  const getDetail = useCallback(() => {\n    fetch(`https://jsonplaceholder.typicode.com/users/${id}`)\n    .then(res => res.json())\n    .then(json => {\n      setDetail(json); // state updated\n    }));\n  }, [id]);\n\n  useEffect(() => {\n    getDetail();\n  }, [getDetail]);\n\n  return (\n    <>\n      <p>{detail.name}</p>\n      <p>Current id: {id}</p>\n      <button onClick={() => setId(id + 1)}>id increment</button>\n    </>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "const App = ({ param1, param2 }) => {\n  const params = useMemo(() => {\n    return { param1, param2, param3: 1 };\n  }, [param1, param2]);\n\n  useEffect(() => {\n    callApi(params);\n  }, [params]);\n}\n"
            }
        ],
        "programming_languages": [
            "javascript",
            "jsx"
        ],
        "word_seg_content_text": "前言\n雖然 說 之前 已經 認識 了\nuseCallback 、 useMemo ， 但 有時 還是 對於 什麼 時候 要 用 它們 的 時機 有些 模糊 ， 所以 就 透過 這 篇文章 釐清 觀念 。\n首先 要 知道 一點 是 如果 沒有 必要 可以 不用 去 用 它們 ， 盲目 的 使用 反而 更耗 效能 ， 因為 它們 在\nReact\n底層 記憶 值 也 是 需要 消耗 效能 的 。\nReferential\nEquality\n在 此 先 複習 一下\nReferential\nEquality ， 對於 理解 後面 的 內容 會 有所 幫助 。\n我們 知道 陣列 、 物件 、 函式 等 物件 型別 擁有\ncall\nby\nreference\n的 特性 ， 所以 即使 有 兩個 物件 它們 裡面 的 元素 、 屬性 、 函式 內容 都 一樣 ， 在 做\n= = =\n比較 時 仍然 會 是\nfalse 。\n這樣 跟\nReact\n又 有 什麼 關係 ? 讓 我們 繼續 看 下去 !\nuseCallback\n使用 時機\nReferential\nEquality\n案例\n1\n在 下面 的 範例 可以 看到 一個 被\nReact . memo ( )\n包覆 的 元件\nChild ， 而且 接收 到 一個 函式\nonClick\n當作\nprops 。\n父 元件 重新 渲染 時 ， 雖然 都 還是 同一個 函式 ， 但 函式 被 重新 產生 了 ， 所以\nReact . memo ( )\n會以 為 傳入 的\nprops\n改變 而 重新 渲染\nChild\n元件 ， 所以 加上 了\nuseCallback 。\nReferential\nEquality\n案例\n2\nuseEffect\n的\ndependency\narray\n的 其中 一個 元素 為 物件 型 別時 ， 若 物件 重新 產生 就 會 被\nuseEffect\n當作\ndependency\narray\n改變 ， 像 以下 的 例子 就 造成 了\nuseEffect\n無限\nrender ， 所以 也 需要 加上\nuseCallback 。\n跟 此 範例 類似 的 例子 在\npjchender\n大大的\n也 有 提到 ， 有 興趣 的 讀者 可以 跳 到 \" 在\nuseEffect\n的\ndependencies\n中 放入 函式\n-\nuseCallback\n的 使用 \" 的 段落 去 閱讀 。\nuseMemo\n使用 時機\n1 .\nReferential\nEquality\nReferential\nEquality\n的 概念 也 可以 套用 在\nuseMemo ， 所以 也 可以 留意 一下\nuseEffect\n的\ndependency\narray 。\n2 .\n計算 開銷 較大 的 值\n例如\nfilter\n很多 元素 的 陣列 、 複雜 數學 運算\n參考資料\n&\n推薦 閱讀",
        "word_seg_processed_content_text": "前言\n說\nusecallback usememo 時機 模糊 透過 篇文章 釐清 觀念\n一點 不用 盲目 反而 更耗 效能\nreact\n底層 記憶 值 消耗 效能\nreferential\nequality\n先 複習\nreferential\nequality 理解 內容 會\n陣列 物件 函式 物件 型別 擁有\ncall\n\nreference\n特性 兩個 物件 元素 屬性 函式 內容 做\n\n時 會\nfalse\n\nreact\n關係\nusecallback\n時機\nreferential\nequality\n案例\n1\n範例\nreact memo\n包覆 元件\nchild 接收 函式\nonclick\n當作\nprops\n父 元件 渲染 時 同一個 函式 函式\nreact memo\n會以 傳入\nprops\n改變 渲染\nchild\n元件 加上\nusecallback\nreferential\nequality\n案例\n2\nuseeffect\n\ndependency\narray\n元素 物件 型 別時 物件 會\nuseeffect\n當作\ndependency\narray\n改變 例子\nuseeffect\n無限\nrender 加上\nusecallback\n範例 類似 例子\npjchender\n大大的\n提到 興趣 讀者 跳\nuseeffect\n\ndependencies\n中 放入 函式\n\nusecallback\n段落 閱讀\nusememo\n時機\n1\nreferential\nequality\nreferential\nequality\n概念 套用\nusememo 留意\nuseeffect\n\ndependency\narray\n2\n計算 開銷 較大 值\n\nfilter\n很多 元素 陣列 數學 運算\n參考資料\n\n推薦 閱讀",
        "extracted_keywords": [
            "useeffect",
            "usecallback",
            "範例",
            "usememo",
            "特性"
        ],
        "extracted_keywords_phrases": [
            "usecallback 範例",
            "例子 useeffect",
            "前言 usecallback",
            "物件 useeffect",
            "useeffect 當作"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283162": {
        "href": "https://ithelp.ithome.com.tw/articles/10283162",
        "title": "大盤到底能不能攻上一萬八??",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>星期四(12/14)大盤跌幅近一個百分點，市場又是一片哀嚎<br>\n散戶很容易犯的錯就是<br>\n<strong>大漲不找理由，大跌狂找原因</strong></p>\n<p>很常聽到的就是，因為美股大跌才拖累大盤的，或是Fed主席鮑爾又講什麼才導致大跌的<br>\n不要去預設任何原因，你猜不到的，市場也不是單一力量說了算<br>\n這時候任何的因素一點意義也沒有</p>\n<p>反觀最重要的是，我們要檢視自己的持股是否已經到達停損的位階<br>\n身為投資人要認清一點<br>\n也是最重要的一點，<strong>除了賺錢跟賠錢外，其他都是次要</strong>，</p>\n<p>再一個多月農曆過年了，大家最關心的是<br>\n大盤究竟能不能攻上萬八？</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211217/20112573RN2lVyfBpw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211217/20112573RN2lVyfBpw.png\"></p>\n<p>目前總共有三次挑戰萬八，但都是失敗坐收，畢竟萬八是歷史高點，要順利站上一定沒那麼容易<br>\n而且每失敗一次，就一會有人被套牢，要衝破這關卡，就得先將前面的套牢賣壓消化掉<br>\n每次大跌我們要注意的不只是跌幅，更重要的是<strong>是否跌破支撐</strong><br>\n因為下面沒有支撐，就很容易整個直接往下</p>\n<p>所以像14號這跟黑K一舉跌破10日與月線，三天內一定要站上月線，不然它就會往下找季線支撐了<br>\n那天外資大賣，好家在官股有進場護盤，稍微止血<br>\n<a href=\"https://news.cnyes.com/news/id/4787161\" target=\"_blank\" rel=\"noreferrer noopener\">https://news.cnyes.com/news/id/4787161</a></p>\n<p>再看看15號有微漲，而且價量背離的價漲量減，至少賣壓沒有出來，<br>\n最不理想的情況是，大家都被14號下跌嚇到了，導致15號繼續恐慌性出場，那時賣壓一出來，就很危險了</p>\n<p>15號算是初步止跌訊號，所以16號有機會上攻，今天收盤的結果是價漲量增，算是多頭的走勢<br>\n而且都站上所有均線，算是好現象</p>\n<p>但因為太靠近萬八大關，在未站穩之前，很容易會有震盪的情況<br>\n所以我的資金部位不會放太多</p>\n<p>總之呢，心態的陪樣才是最要的，才不會每次大跌，自己嚇自己。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-17 01:25:51",
        "author_href": "https://ithelp.ithome.com.tw/users/20112573/ironman",
        "author_name": "WM",
        "series_href": "https://ithelp.ithome.com.tw/users/20112573/ironman/4721",
        "series_name": "如何成為成功的斜槓工程師 - 理財",
        "series_num": "34",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>星期四(12/14)大盤跌幅近一個百分點，市場又是一片哀嚎<br/>\n散戶很容易犯的錯就是<br/>\n<strong>大漲不找理由，大跌狂找原因</strong></p>\n<p>很常聽到的就是，因為美股大跌才拖累大盤的，或是Fed主席鮑爾又講什麼才導致大跌的<br/>\n不要去預設任何原因，你猜不到的，市場也不是單一力量說了算<br/>\n這時候任何的因素一點意義也沒有</p>\n<p>反觀最重要的是，我們要檢視自己的持股是否已經到達停損的位階<br/>\n身為投資人要認清一點<br/>\n也是最重要的一點，<strong>除了賺錢跟賠錢外，其他都是次要</strong>，</p>\n<p>再一個多月農曆過年了，大家最關心的是<br/>\n大盤究竟能不能攻上萬八？</p>\n<p></p>\n<p>目前總共有三次挑戰萬八，但都是失敗坐收，畢竟萬八是歷史高點，要順利站上一定沒那麼容易<br/>\n而且每失敗一次，就一會有人被套牢，要衝破這關卡，就得先將前面的套牢賣壓消化掉<br/>\n每次大跌我們要注意的不只是跌幅，更重要的是<strong>是否跌破支撐</strong><br/>\n因為下面沒有支撐，就很容易整個直接往下</p>\n<p>所以像14號這跟黑K一舉跌破10日與月線，三天內一定要站上月線，不然它就會往下找季線支撐了<br/>\n那天外資大賣，好家在官股有進場護盤，稍微止血<br/>\n</p>\n<p>再看看15號有微漲，而且價量背離的價漲量減，至少賣壓沒有出來，<br/>\n最不理想的情況是，大家都被14號下跌嚇到了，導致15號繼續恐慌性出場，那時賣壓一出來，就很危險了</p>\n<p>15號算是初步止跌訊號，所以16號有機會上攻，今天收盤的結果是價漲量增，算是多頭的走勢<br/>\n而且都站上所有均線，算是好現象</p>\n<p>但因為太靠近萬八大關，在未站穩之前，很容易會有震盪的情況<br/>\n所以我的資金部位不會放太多</p>\n<p>總之呢，心態的陪樣才是最要的，才不會每次大跌，自己嚇自己。</p>\n<br/>\n</div>",
        "content_text": "星期四(12/14)大盤跌幅近一個百分點，市場又是一片哀嚎\n散戶很容易犯的錯就是\n大漲不找理由，大跌狂找原因\n很常聽到的就是，因為美股大跌才拖累大盤的，或是Fed主席鮑爾又講什麼才導致大跌的\n不要去預設任何原因，你猜不到的，市場也不是單一力量說了算\n這時候任何的因素一點意義也沒有\n反觀最重要的是，我們要檢視自己的持股是否已經到達停損的位階\n身為投資人要認清一點\n也是最重要的一點，除了賺錢跟賠錢外，其他都是次要，\n再一個多月農曆過年了，大家最關心的是\n大盤究竟能不能攻上萬八？\n\n目前總共有三次挑戰萬八，但都是失敗坐收，畢竟萬八是歷史高點，要順利站上一定沒那麼容易\n而且每失敗一次，就一會有人被套牢，要衝破這關卡，就得先將前面的套牢賣壓消化掉\n每次大跌我們要注意的不只是跌幅，更重要的是是否跌破支撐\n因為下面沒有支撐，就很容易整個直接往下\n所以像14號這跟黑K一舉跌破10日與月線，三天內一定要站上月線，不然它就會往下找季線支撐了\n那天外資大賣，好家在官股有進場護盤，稍微止血\n\n再看看15號有微漲，而且價量背離的價漲量減，至少賣壓沒有出來，\n最不理想的情況是，大家都被14號下跌嚇到了，導致15號繼續恐慌性出場，那時賣壓一出來，就很危險了\n15號算是初步止跌訊號，所以16號有機會上攻，今天收盤的結果是價漲量增，算是多頭的走勢\n而且都站上所有均線，算是好現象\n但因為太靠近萬八大關，在未站穩之前，很容易會有震盪的情況\n所以我的資金部位不會放太多\n總之呢，心態的陪樣才是最要的，才不會每次大跌，自己嚇自己。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "星期四 ( 12 / 14 ) 大盤 跌幅 近 一個 百分點 ， 市場 又 是 一片 哀嚎\n散戶 很 容易 犯 的 錯 就是\n大漲 不 找 理由 ， 大跌 狂找 原因\n很 常聽到 的 就是 ， 因為 美股 大跌 才 拖累 大盤 的 ， 或是 Fed 主席 鮑爾又講 什麼 才 導致 大跌 的\n不要 去 預設 任何原因 ， 你 猜 不到 的 ， 市場 也 不是 單一 力量 說了算\n這時候 任何 的 因素 一點 意義 也 沒有\n反觀 最 重要 的 是 ， 我們 要 檢視 自己 的 持股 是否 已經 到達 停損 的 位階\n身為 投資人 要 認清 一點\n也 是 最 重要 的 一點 ， 除了 賺錢 跟 賠錢 外 ， 其他 都 是 次要 ，\n再 一個多月 農曆 過年 了 ， 大家 最 關心 的 是\n大盤 究竟 能 不能 攻 上萬 八 ？\n目前 總共 有 三次 挑戰 萬八 ， 但 都 是 失敗 坐收 ， 畢竟 萬八是 歷史 高點 ， 要 順利 站上 一定 沒 那麼 容易\n而且 每 失敗 一次 ， 就 一會 有人 被 套牢 ， 要 衝破 這 關卡 ， 就 得 先將 前面 的 套牢 賣壓 消化 掉\n每次 大跌 我們 要 注意 的 不 只是 跌幅 ， 更 重要 的 是 是否 跌破 支撐\n因為 下面 沒有支撐 ， 就 很 容易 整個 直接 往 下\n所以 像 14 號這跟 黑 K 一舉 跌破 10 日 與 月 線 ， 三天 內 一定 要 站上 月線 ， 不然 它 就 會 往 下 找 季線 支撐 了\n那天 外資 大賣 ， 好家 在 官股 有 進場 護盤 ， 稍微 止血\n再 看看 15 號有 微漲 ， 而且 價量 背離 的 價漲 量減 ， 至少 賣壓 沒有 出來 ，\n最 不 理想 的 情況 是 ， 大家 都 被 14 號 下跌 嚇到 了 ， 導致 15 號 繼續 恐慌性 出場 ， 那時 賣壓 一 出來 ， 就 很 危險 了\n15 號 算是 初步 止跌 訊號 ， 所以 16 號有 機會 上攻 ， 今天 收盤 的 結果 是 價漲量 增 ， 算是 多頭 的 走勢\n而且 都 站上 所有 均線 ， 算是 好 現象\n但 因為 太 靠近 萬 八大關 ， 在 未 站穩 之前 ， 很 容易 會 有 震盪 的 情況\n所以 我 的 資金 部位 不會 放太多\n總之 呢 ， 心態 的 陪樣 才 是 最要 的 ， 才 不會 每次 大跌 ， 自己 嚇 自己 。",
        "word_seg_processed_content_text": "星期四 12 14 大盤 跌幅 近 百分點 市場 哀嚎\n散戶 犯 錯\n大漲 找 理由 大跌 狂找 原因\n常聽到 美股 大跌 才 拖累 大盤 fed 主席 鮑爾又講 才 導致 大跌\n預設 任何原因 猜 不到 市場 單一 力量 說了算\n這時候 因素 一點 意義\n反觀 檢視 持股 到達 停損 位階\n身為 投資人 認清 一點\n一點 賺錢 賠錢 外 次要\n一個多月 農曆 過年 關心\n大盤 究竟 攻 上萬 八\n總共 三次 挑戰 萬八 失敗 坐收 畢竟 萬八是 歷史 高點 順利 站上 沒\n失敗 一會 有人 套牢 衝破 關卡 先將 套牢 賣壓 消化 掉\n每次 大跌 跌幅 更 跌破 支撐\n沒有支撐\n14 號這跟 黑 k 一舉 跌破 10 日 月 線 三天 內 站上 月線 會 找 季線 支撐\n那天 外資 大賣 好家 官股 進場 護盤 稍微 止血\n15 號有 微漲 價量 背離 價漲 量減 至少 賣壓\n理想 情況 14 號 下跌 嚇到 導致 15 號 恐慌性 出場 賣壓 危險\n15 號 算是 初步 止跌 訊號 16 號有 機會 上攻 收盤 價漲量 增 算是 多頭 走勢\n站上 均線 算是 現象\n太 靠近 萬 八大關 未 站穩 會 震盪 情況\n資金 部位 放太多\n心態 陪樣 才 最要 才 每次 大跌",
        "extracted_keywords": [
            "跌幅",
            "大跌",
            "市場",
            "量減",
            "下跌"
        ],
        "extracted_keywords_phrases": [
            "美股 大跌",
            "大跌 跌幅",
            "大盤 跌幅",
            "理由 大跌",
            "導致 大跌"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283072": {
        "href": "https://ithelp.ithome.com.tw/articles/10283072",
        "title": "goto die？ 那個 goto 到底能不能用啊？",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h3>寫在開始之前</h3>\n<p>今年以系統程式為主題跳進 Software Development 算是一個大膽的嘗試，對於一個大學時期只有寫過 web 與一些簡單程式的我來說，能在得獎名單上看到自己的作品真的讓我又驚又喜。<br>\n在學生時期拿到鐵人賽的個人獎項一直都是我的終極目標之一，我想以自己為例鼓勵大家跳脫舒適圈，或許不經意間就能為你的生活加入許多驚喜！</p>\n<h3>更新文章哪裡看</h3>\n<p>我預計會再補上 fork, wait, exit...等系統呼叫的文章，為多執行緒程式做一些基礎的鋪墊。<br>\n考慮到鐵人發文按鈕過一陣子就會消失，若之後有文章結構上的大調整或是有其他新文章，我都會優先更新在 <a href=\"https://github.com/ianchen0119/AwesomeCS/wiki\" target=\"_blank\" rel=\"noreferrer noopener\">AwesomeCS wiki</a> 上，以確保大家可以按照我所期望的順序學習系統程式，還請大家見諒 <code>&lt;(_ _)&gt;</code></p>\n<p>=== 廢話結束 ===</p>\n<p>是否要在 C 程式中使用 <strong>goto</strong>，一直都是工程師之間熱烈討論的話題之一。有人說使用 goto 會破壞程式結構、也有人說都有迴圈了，何必使用 goto 呢？</p>\n<h2>goto 於大型軟體專案的應用</h2>\n<p>因為實驗室開發的關係，筆者最近閱讀了一個大型的 c 語言專案，並且碰巧讀到了 <a href=\"https://eli.thegreenplace.net/2012/07/12/computed-goto-for-efficient-dispatch-tables\" target=\"_blank\" rel=\"noreferrer noopener\">Computed goto for efficient dispatch tables</a> 這篇文章，讓我對 goto 有了更深入的認知。<br>\n一般來說，goto 如果出現在 C 語言專案，那它有很大的可能是被應用在：</p>\n<ul>\n<li>exception handling</li>\n<li>computed goto</li>\n</ul>\n<p>前者可以方便開發者在 C 語言程式出錯時回收動態分配的記憶體，或是進行對應的錯誤處理以確保程式下次進入該函式時仍可以正常工作。<br>\n試想，如果一家公司需要開發一個高效能的網路程式，並且要確保該程式可以穩定且持續的工作，這時在軟體中可能發生的錯誤都不能被輕易放過。</p>\n<blockquote>\n<p>以 2021 年 10 月初 Facebook 斷線的例子來看，Facebook 因長達六小時的斷線，連帶損失估計超過 9 億美元，由此可見商業化軟體的穩定性是非常重要的。</p>\n</blockquote>\n<p>至於後者 <strong>computed goto</strong>，才是筆者想要在本文與大家分享的重點！</p>\n<h2>computed goto</h2>\n<p>在先前的<strong>淺談分支預測與 Hazards 議題</strong>一文中，我們可以歸納出一個重點： <strong>如果分支預測失敗，會導致流水線中已經排序的指令流被清除</strong>，這也就表示我們的處理器不止做了白工，還要把正確的指令填充回流水線上面。</p>\n<h3>再談 branch prediction</h3>\n<p><img src=\"https://i.imgur.com/cMciht1.png\" alt=\"\"></p>\n<p>現代處理器可能引入如上圖所示的分支預測方法，處理器會以 address 為索引，檢索 Pattern history table 上的歷史紀錄進一步的做出預測。</p>\n<h3>computed goto 的應用</h3>\n<p>computed goto 適用於取代 <code>switch case</code> 為基底的 dispatcher，因為 switch 僅會以一個基底作為分派任務的參考，這樣子說可能會有點抽象，讓我們用程式碼來進一步了解這個概念：</p>\n<pre><code class=\"language-c\">while (1) {\n        switch (code[pc++]) {\n            case OP_HALT:\n                return val;\n            case OP_INC:\n                val++;\n                break;\n            case OP_DEC:\n                val--;\n                break;\n            case OP_MUL2:\n                val *= 2;\n                break;\n            case OP_DIV2:\n                val /= 2;\n                break;\n            case OP_ADD7:\n                val += 7;\n                break;\n            case OP_NEG:\n                val = -val;\n                break;\n            default:\n                return val;\n        }\n    }\n</code></pre>\n<p>如果以現代處理器的分支預測方式來看，同一段程式碼在不同的週期可能會 jump 到不同的地方，這樣會導致分支預測的成功率下降，並且需要反覆的填充正確的指令到流水線上面。</p>\n<p>那 computed goto 會怎麽做呢？讓我們一起看下去：</p>\n<pre><code class=\"language-c\">int interp_cgoto(unsigned char* code, int initval) {\n\n    static void* dispatch_table[] = {\n        &amp;&amp;do_halt, &amp;&amp;do_inc, &amp;&amp;do_dec, &amp;&amp;do_mul2,\n        &amp;&amp;do_div2, &amp;&amp;do_add7, &amp;&amp;do_neg};\n    #define DISPATCH() goto *dispatch_table[code[pc++]]\n\n    int pc = 0;\n    int val = initval;\n\n    DISPATCH();\n    while (1) {\n        do_halt:\n            return val;\n        do_inc:\n            val++;\n            DISPATCH();\n        do_dec:\n            val--;\n            DISPATCH();\n        do_mul2:\n            val *= 2;\n            DISPATCH();\n        do_div2:\n            val /= 2;\n            DISPATCH();\n        do_add7:\n            val += 7;\n            DISPATCH();\n        do_neg:\n            val = -val;\n            DISPATCH();\n    }\n}\n</code></pre>\n<ul>\n<li>在 function 內宣告變數時加入 <code>static</code> 關鍵字可以使變數的生命週期延長至程式結束</li>\n</ul>\n<blockquote>\n<p>在 C/C++ 中，在不同的地方使用 <code>static</code> 可能會帶來不同的效果，使用上需要特別注意！</p>\n</blockquote>\n<ul>\n<li>unary operator <code>&amp;&amp;</code> 是 gcc 提供的擴展，它可以搭配 label 使用以取得明確的跳轉位址。</li>\n<li>配合 goto 可以讓程式訪問 <code>code[]</code> 的結果直接跳轉到它對應的操作。</li>\n</ul>\n<p>這樣做的好處顯而易見，computed goto 把 jump 的操作分成了好幾部分，只要正確的訪問 dispatch table，我們的處理器就能更精準的預測到正確的分支。</p>\n<h3>真實世界的例子</h3>\n<p>Computed goto for efficient dispatch tables 一文有提到 computed goto 被應用到了哪些知名的軟體上：</p>\n<ul>\n<li>Ruby 1.9 (YARV): also uses computed goto.</li>\n<li>Dalvik (the Android Java VM): computed goto</li>\n<li>Lua 5.2: uses a switch</li>\n</ul>\n<p>此外，由 Jserv 老師主導開發的 rv32emu-next 同樣引入了 computed goto 的實作，詳細手法可參考：</p>\n<ul>\n<li>\n<a href=\"https://github.com/sysprog21/rv32emu-next/pull/2\" target=\"_blank\" rel=\"noreferrer noopener\">rv32emu-next PR#2</a>\n</li>\n<li>\n<a href=\"https://hackmd.io/@sysprog/HJOpsvFqP\" target=\"_blank\" rel=\"noreferrer noopener\">2020q3 專題: RISC-V 模擬器</a>\n</li>\n</ul>\n<h3>使用前請詳閱公開說明書</h3>\n<p>由於 unary operator 是 gcc 特別提供的擴展，如果你的 C 語言專案不是由 gcc 編譯，或是有人下載了你的原始碼且採用其他編譯器進行編譯就有可能會造成錯誤。<br>\n因此，在使用時可以考慮：</p>\n<ul>\n<li>寫好 makefile，避免有使用者做出超出預期的行為</li>\n<li>針對編譯器類別做偵測，如果目標編譯器非 gcc，則使用一般的 switch case</li>\n</ul>\n<p>最後，可以在編譯時加入 <code>-fno-gcse</code> 與 <code>-fno-crossjumping</code>，讓 gcc 優化你的原始碼。</p>\n<h2>Reference</h2>\n<ul>\n<li>\n<a href=\"https://eli.thegreenplace.net/2012/07/12/computed-goto-for-efficient-dispatch-tables\" target=\"_blank\" rel=\"noreferrer noopener\">Computed goto for efficient dispatch tables</a>\n</li>\n<li>\n<a href=\"https://stackoverflow.com/questions/39357887/what-does-a-operator-do-when-there-is-no-left-side-in-c\" target=\"_blank\" rel=\"noreferrer noopener\">What does a &amp;&amp; operator do when there is no left side in C?</a>\n</li>\n<li>\n<a href=\"https://hackmd.io/@sysprog/c-control-flow?type=view\" target=\"_blank\" rel=\"noreferrer noopener\">你所不知道的C語言: goto 和流程控制篇</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,goto,computed-goto",
        "genre": "Software Development",
        "published_at": "2021-12-13 00:12:35",
        "author_href": "https://ithelp.ithome.com.tw/users/20110850/ironman",
        "author_name": "EN",
        "series_href": "https://ithelp.ithome.com.tw/users/20110850/ironman/3859",
        "series_name": "微自幹的作業系統輕旅行",
        "series_num": "40",
        "processed_content_html": "<div class=\"markdown__style\">\n<h3>寫在開始之前</h3>\n<p>今年以系統程式為主題跳進 Software Development 算是一個大膽的嘗試，對於一個大學時期只有寫過 web 與一些簡單程式的我來說，能在得獎名單上看到自己的作品真的讓我又驚又喜。<br/>\n在學生時期拿到鐵人賽的個人獎項一直都是我的終極目標之一，我想以自己為例鼓勵大家跳脫舒適圈，或許不經意間就能為你的生活加入許多驚喜！</p>\n<h3>更新文章哪裡看</h3>\n<p>我預計會再補上 fork, wait, exit...等系統呼叫的文章，為多執行緒程式做一些基礎的鋪墊。<br/>\n考慮到鐵人發文按鈕過一陣子就會消失，若之後有文章結構上的大調整或是有其他新文章，我都會優先更新在  上，以確保大家可以按照我所期望的順序學習系統程式，還請大家見諒 <code>&lt;(_ _)&gt;</code></p>\n<p>=== 廢話結束 ===</p>\n<p>是否要在 C 程式中使用 <strong>goto</strong>，一直都是工程師之間熱烈討論的話題之一。有人說使用 goto 會破壞程式結構、也有人說都有迴圈了，何必使用 goto 呢？</p>\n<h2>goto 於大型軟體專案的應用</h2>\n<p>因為實驗室開發的關係，筆者最近閱讀了一個大型的 c 語言專案，並且碰巧讀到了  這篇文章，讓我對 goto 有了更深入的認知。<br/>\n一般來說，goto 如果出現在 C 語言專案，那它有很大的可能是被應用在：</p>\n<ul>\n<li>exception handling</li>\n<li>computed goto</li>\n</ul>\n<p>前者可以方便開發者在 C 語言程式出錯時回收動態分配的記憶體，或是進行對應的錯誤處理以確保程式下次進入該函式時仍可以正常工作。<br/>\n試想，如果一家公司需要開發一個高效能的網路程式，並且要確保該程式可以穩定且持續的工作，這時在軟體中可能發生的錯誤都不能被輕易放過。</p>\n<blockquote>\n<p>以 2021 年 10 月初 Facebook 斷線的例子來看，Facebook 因長達六小時的斷線，連帶損失估計超過 9 億美元，由此可見商業化軟體的穩定性是非常重要的。</p>\n</blockquote>\n<p>至於後者 <strong>computed goto</strong>，才是筆者想要在本文與大家分享的重點！</p>\n<h2>computed goto</h2>\n<p>在先前的<strong>淺談分支預測與 Hazards 議題</strong>一文中，我們可以歸納出一個重點： <strong>如果分支預測失敗，會導致流水線中已經排序的指令流被清除</strong>，這也就表示我們的處理器不止做了白工，還要把正確的指令填充回流水線上面。</p>\n<h3>再談 branch prediction</h3>\n<p></p>\n<p>現代處理器可能引入如上圖所示的分支預測方法，處理器會以 address 為索引，檢索 Pattern history table 上的歷史紀錄進一步的做出預測。</p>\n<h3>computed goto 的應用</h3>\n<p>computed goto 適用於取代 <code>switch case</code> 為基底的 dispatcher，因為 switch 僅會以一個基底作為分派任務的參考，這樣子說可能會有點抽象，讓我們用程式碼來進一步了解這個概念：</p>\n<pre></pre>\n<p>如果以現代處理器的分支預測方式來看，同一段程式碼在不同的週期可能會 jump 到不同的地方，這樣會導致分支預測的成功率下降，並且需要反覆的填充正確的指令到流水線上面。</p>\n<p>那 computed goto 會怎麽做呢？讓我們一起看下去：</p>\n<pre></pre>\n<ul>\n<li>在 function 內宣告變數時加入 <code>static</code> 關鍵字可以使變數的生命週期延長至程式結束</li>\n</ul>\n<blockquote>\n<p>在 C/C++ 中，在不同的地方使用 <code>static</code> 可能會帶來不同的效果，使用上需要特別注意！</p>\n</blockquote>\n<ul>\n<li>unary operator <code>&amp;&amp;</code> 是 gcc 提供的擴展，它可以搭配 label 使用以取得明確的跳轉位址。</li>\n<li>配合 goto 可以讓程式訪問 <code>code[]</code> 的結果直接跳轉到它對應的操作。</li>\n</ul>\n<p>這樣做的好處顯而易見，computed goto 把 jump 的操作分成了好幾部分，只要正確的訪問 dispatch table，我們的處理器就能更精準的預測到正確的分支。</p>\n<h3>真實世界的例子</h3>\n<p>Computed goto for efficient dispatch tables 一文有提到 computed goto 被應用到了哪些知名的軟體上：</p>\n<ul>\n<li>Ruby 1.9 (YARV): also uses computed goto.</li>\n<li>Dalvik (the Android Java VM): computed goto</li>\n<li>Lua 5.2: uses a switch</li>\n</ul>\n<p>此外，由 Jserv 老師主導開發的 rv32emu-next 同樣引入了 computed goto 的實作，詳細手法可參考：</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<h3>使用前請詳閱公開說明書</h3>\n<p>由於 unary operator 是 gcc 特別提供的擴展，如果你的 C 語言專案不是由 gcc 編譯，或是有人下載了你的原始碼且採用其他編譯器進行編譯就有可能會造成錯誤。<br/>\n因此，在使用時可以考慮：</p>\n<ul>\n<li>寫好 makefile，避免有使用者做出超出預期的行為</li>\n<li>針對編譯器類別做偵測，如果目標編譯器非 gcc，則使用一般的 switch case</li>\n</ul>\n<p>最後，可以在編譯時加入 <code>-fno-gcse</code> 與 <code>-fno-crossjumping</code>，讓 gcc 優化你的原始碼。</p>\n<h2>Reference</h2>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "寫在開始之前\n今年以系統程式為主題跳進 Software Development 算是一個大膽的嘗試，對於一個大學時期只有寫過 web 與一些簡單程式的我來說，能在得獎名單上看到自己的作品真的讓我又驚又喜。\n在學生時期拿到鐵人賽的個人獎項一直都是我的終極目標之一，我想以自己為例鼓勵大家跳脫舒適圈，或許不經意間就能為你的生活加入許多驚喜！\n更新文章哪裡看\n我預計會再補上 fork, wait, exit...等系統呼叫的文章，為多執行緒程式做一些基礎的鋪墊。\n考慮到鐵人發文按鈕過一陣子就會消失，若之後有文章結構上的大調整或是有其他新文章，我都會優先更新在  上，以確保大家可以按照我所期望的順序學習系統程式，還請大家見諒 <(_ _)>\n=== 廢話結束 ===\n是否要在 C 程式中使用 goto，一直都是工程師之間熱烈討論的話題之一。有人說使用 goto 會破壞程式結構、也有人說都有迴圈了，何必使用 goto 呢？\ngoto 於大型軟體專案的應用\n因為實驗室開發的關係，筆者最近閱讀了一個大型的 c 語言專案，並且碰巧讀到了  這篇文章，讓我對 goto 有了更深入的認知。\n一般來說，goto 如果出現在 C 語言專案，那它有很大的可能是被應用在：\n\nexception handling\ncomputed goto\n\n前者可以方便開發者在 C 語言程式出錯時回收動態分配的記憶體，或是進行對應的錯誤處理以確保程式下次進入該函式時仍可以正常工作。\n試想，如果一家公司需要開發一個高效能的網路程式，並且要確保該程式可以穩定且持續的工作，這時在軟體中可能發生的錯誤都不能被輕易放過。\n\n以 2021 年 10 月初 Facebook 斷線的例子來看，Facebook 因長達六小時的斷線，連帶損失估計超過 9 億美元，由此可見商業化軟體的穩定性是非常重要的。\n\n至於後者 computed goto，才是筆者想要在本文與大家分享的重點！\ncomputed goto\n在先前的淺談分支預測與 Hazards 議題一文中，我們可以歸納出一個重點： 如果分支預測失敗，會導致流水線中已經排序的指令流被清除，這也就表示我們的處理器不止做了白工，還要把正確的指令填充回流水線上面。\n再談 branch prediction\n\n現代處理器可能引入如上圖所示的分支預測方法，處理器會以 address 為索引，檢索 Pattern history table 上的歷史紀錄進一步的做出預測。\ncomputed goto 的應用\ncomputed goto 適用於取代 switch case 為基底的 dispatcher，因為 switch 僅會以一個基底作為分派任務的參考，這樣子說可能會有點抽象，讓我們用程式碼來進一步了解這個概念：\n\n如果以現代處理器的分支預測方式來看，同一段程式碼在不同的週期可能會 jump 到不同的地方，這樣會導致分支預測的成功率下降，並且需要反覆的填充正確的指令到流水線上面。\n那 computed goto 會怎麽做呢？讓我們一起看下去：\n\n\n在 function 內宣告變數時加入 static 關鍵字可以使變數的生命週期延長至程式結束\n\n\n在 C/C++ 中，在不同的地方使用 static 可能會帶來不同的效果，使用上需要特別注意！\n\n\nunary operator && 是 gcc 提供的擴展，它可以搭配 label 使用以取得明確的跳轉位址。\n配合 goto 可以讓程式訪問 code[] 的結果直接跳轉到它對應的操作。\n\n這樣做的好處顯而易見，computed goto 把 jump 的操作分成了好幾部分，只要正確的訪問 dispatch table，我們的處理器就能更精準的預測到正確的分支。\n真實世界的例子\nComputed goto for efficient dispatch tables 一文有提到 computed goto 被應用到了哪些知名的軟體上：\n\nRuby 1.9 (YARV): also uses computed goto.\nDalvik (the Android Java VM): computed goto\nLua 5.2: uses a switch\n\n此外，由 Jserv 老師主導開發的 rv32emu-next 同樣引入了 computed goto 的實作，詳細手法可參考：\n\n\n\n\n\n\n\n\n使用前請詳閱公開說明書\n由於 unary operator 是 gcc 特別提供的擴展，如果你的 C 語言專案不是由 gcc 編譯，或是有人下載了你的原始碼且採用其他編譯器進行編譯就有可能會造成錯誤。\n因此，在使用時可以考慮：\n\n寫好 makefile，避免有使用者做出超出預期的行為\n針對編譯器類別做偵測，如果目標編譯器非 gcc，則使用一般的 switch case\n\n最後，可以在編譯時加入 -fno-gcse 與 -fno-crossjumping，讓 gcc 優化你的原始碼。\nReference",
        "content_code_info": [
            {
                "language": "c",
                "content": "while (1) {\n        switch (code[pc++]) {\n            case OP_HALT:\n                return val;\n            case OP_INC:\n                val++;\n                break;\n            case OP_DEC:\n                val--;\n                break;\n            case OP_MUL2:\n                val *= 2;\n                break;\n            case OP_DIV2:\n                val /= 2;\n                break;\n            case OP_ADD7:\n                val += 7;\n                break;\n            case OP_NEG:\n                val = -val;\n                break;\n            default:\n                return val;\n        }\n    }\n"
            },
            {
                "language": "c",
                "content": "int interp_cgoto(unsigned char* code, int initval) {\n\n    static void* dispatch_table[] = {\n        &&do_halt, &&do_inc, &&do_dec, &&do_mul2,\n        &&do_div2, &&do_add7, &&do_neg};\n    #define DISPATCH() goto *dispatch_table[code[pc++]]\n\n    int pc = 0;\n    int val = initval;\n\n    DISPATCH();\n    while (1) {\n        do_halt:\n            return val;\n        do_inc:\n            val++;\n            DISPATCH();\n        do_dec:\n            val--;\n            DISPATCH();\n        do_mul2:\n            val *= 2;\n            DISPATCH();\n        do_div2:\n            val /= 2;\n            DISPATCH();\n        do_add7:\n            val += 7;\n            DISPATCH();\n        do_neg:\n            val = -val;\n            DISPATCH();\n    }\n}\n"
            }
        ],
        "programming_languages": [
            "c"
        ],
        "word_seg_content_text": "寫 在 開始 之前\n今年 以 系統 程式 為 主題 跳進\nSoftware\nDevelopment\n算是 一個 大膽 的 嘗試 ， 對於 一個 大學 時期 只有 寫過\nweb\n與 一些 簡單 程式 的 我 來說 ， 能 在 得獎 名單 上 看到 自己 的 作品 真的 讓 我 又驚又喜 。\n在 學生 時期 拿到 鐵人 賽 的 個人 獎項 一直 都 是 我 的 終極目標 之一 ， 我 想 以 自己 為例 鼓勵 大家 跳脫 舒適 圈 ， 或許 不經意 間 就 能 為 你 的 生活 加入 許多 驚喜 ！\n更新 文章 哪裡 看\n我 預計 會 再補 上\nfork ,\nwait ,\nexit ... 等 系統 呼叫 的 文章 ， 為 多 執行 緒 程式 做 一些 基礎 的 鋪墊 。\n考慮 到 鐵人 發文 按鈕 過 一陣子 就 會 消失 ， 若 之後 有 文章 結構 上 的 大 調整 或是 有 其他 新 文章 ， 我 都 會 優先 更新 在\n上 ， 以 確保 大家 可以 按照 我 所 期望 的 順序 學習 系統 程式 ， 還請 大家 見諒\n< ( _\n_ ) >\n= = =\n廢話 結束\n= = =\n是否 要 在\nC\n程式 中 使用\ngoto ， 一直 都 是 工程師 之間 熱烈 討論 的 話題 之一 。 有人 說 使用\ngoto\n會 破壞 程式 結構 、 也 有人 說 都 有 迴圈 了 ， 何必 使用\ngoto\n呢 ？\ngoto\n於 大型 軟體 專案 的 應用\n因為 實驗室 開發 的 關係 ， 筆者 最近 閱讀 了 一個 大型 的\nc\n語言 專案 ， 並且 碰巧 讀到 了\n這 篇文章 ， 讓 我 對\ngoto\n有 了 更 深入 的 認知 。\n一般來說 ， goto\n如果 出現 在\nC\n語言 專案 ， 那 它 有 很大 的 可能 是 被 應用 在 ：\nexception\nhandling\ncomputed\ngoto\n前者 可以 方便 開發者 在\nC\n語言 程式 出錯 時 回收 動態分配 的 記憶體 ， 或是 進行 對應 的 錯誤處理 以 確保 程式 下次 進入 該函 式 時 仍 可以 正常 工作 。\n試想 ， 如果 一家 公司 需要 開發 一個 高效能 的 網路 程式 ， 並且 要 確保 該 程式 可以 穩定 且 持續 的 工作 ， 這時 在 軟體 中 可能 發生 的 錯誤 都 不能 被 輕易 放過 。\n以\n2021\n年\n10\n月初\nFacebook\n斷線 的 例子 來看 ， Facebook\n因 長達 六小時 的 斷線 ， 連帶 損失估計 超過\n9\n億美元 ， 由此可見 商業化 軟體 的 穩定性 是 非常 重要 的 。\n至於 後者\ncomputed\ngoto ， 才 是 筆者 想要 在 本文 與 大家 分享 的 重點 ！\ncomputed\ngoto\n在 先前 的 淺談 分支 預測 與\nHazards\n議題 一文 中 ， 我們 可以 歸納 出 一個 重點 ：\n如果 分支 預測 失敗 ， 會 導致 流水線 中 已經 排序 的 指令流 被 清除 ， 這也 就 表示 我們 的 處理器 不止 做 了 白工 ， 還要 把 正確 的 指令 填充 回 流水線 上面 。\n再談\nbranch\nprediction\n現代 處理器 可能 引入 如上圖 所示 的 分支 預測 方法 ， 處理器 會以\naddress\n為 索引 ， 檢索\nPattern\nhistory\ntable\n上 的 歷史紀錄 進一步 的 做出 預測 。\ncomputed\ngoto\n的 應用\ncomputed\ngoto\n適用於 取代\nswitch\ncase\n為 基底 的\ndispatcher ， 因為\nswitch\n僅會 以 一個 基底 作為 分派任務 的 參考 ， 這樣 子 說 可能 會 有點 抽象 ， 讓 我們 用 程式碼 來 進一步 了解 這個 概念 ：\n如果 以 現代 處理器 的 分支 預測 方式 來看 ， 同 一段 程式碼 在 不同 的 週期 可能 會\njump\n到 不同 的 地方 ， 這樣 會 導致 分支 預測 的 成功率 下降 ， 並且 需要 反覆 的 填充 正確 的 指令 到 流水線 上面 。\n那\ncomputed\ngoto\n會 怎 麽 做 呢 ？ 讓 我們 一起 看 下去 ：\n在\nfunction\n內 宣告 變數 時 加入\nstatic\n關鍵字 可以 使 變數 的 生命週期 延長 至 程式 結束\n在\nC / C++\n中 ， 在 不同 的 地方 使用\nstatic\n可能 會 帶來 不同 的 效果 ， 使用 上 需要 特別注意 ！\nunary\noperator\n&&\n是\ngcc\n提供 的 擴展 ， 它 可以 搭配\nlabel\n使用 以 取得 明確 的 跳轉 位址 。\n配合\ngoto\n可以 讓 程式 訪問\ncode [ ]\n的 結果 直接 跳轉 到 它 對應 的 操作 。\n這樣 做 的 好處 顯而易見 ， computed\ngoto\n把\njump\n的 操作 分成 了 好幾 部分 ， 只要 正確 的 訪問\ndispatch\ntable ， 我們 的 處理器 就 能 更 精準 的 預測 到 正確 的 分支 。\n真實世界 的 例子\nComputed\ngoto\nfor\nefficient\ndispatch\ntables\n一文 有 提到\ncomputed\ngoto\n被 應用 到 了 哪些 知名 的 軟體 上 ：\nRuby\n1.9\n( YARV ) :\nalso\nuses\ncomputed\ngoto .\nDalvik\n( the\nAndroid\nJava\nVM ) :\ncomputed\ngoto\nLua\n5.2 :\nuses\na\nswitch\n此外 ， 由\nJserv\n老師 主導 開發 的\nrv32emu - next\n同樣 引入 了\ncomputed\ngoto\n的 實作 ， 詳細 手法 可 參考 ：\n使用 前 請 詳閱 公開 說明書\n由於\nunary\noperator\n是\ngcc\n特別 提供 的 擴展 ， 如果 你 的\nC\n語言 專案 不是 由\ngcc\n編譯 ， 或是 有人 下載 了 你 的 原始 碼且 採用 其他 編譯器 進行 編譯 就 有 可能 會 造成 錯誤 。\n因此 ， 在 使用 時 可以 考慮 ：\n寫 好\nmakefile ， 避免 有 使用者 做出 超出 預期 的 行為\n針對 編譯器 類別 做 偵測 ， 如果 目標 編譯器 非\ngcc ， 則 使用 一般 的\nswitch\ncase\n最後 ， 可以 在 編譯 時 加入\n- fno - gcse\n與\n- fno - crossjumping ， 讓\ngcc\n優化 你 的 原始 碼 。\nReference",
        "word_seg_processed_content_text": "寫\n系統 程式 主題 跳進\nsoftware\ndevelopment\n算是 大膽 嘗試 大學 時期 寫過\nweb\n簡單 程式 來說 得獎 名單 作品 真的 又驚又喜\n學生 時期 拿到 鐵人 賽 獎項 終極目標 想 為例 鼓勵 跳脫 舒適 圈 或許 不經意 間 生活 驚喜\n更新 文章\n預計 會 再補\nfork\nwait\nexit ... 系統 呼叫 文章 執行 緒 程式 做 基礎 鋪墊\n鐵人 發文 按鈕 一陣子 會 消失 文章 結構 大 調整 新 文章 會 優先 更新\n確保 期望 順序 學習 系統 程式 還請 見諒\n\n\n\n廢話 結束\n\n\nc\n程式 中\ngoto 工程師 之間 熱烈 討論 話題 有人 說\ngoto\n會 破壞 程式 結構 有人 說 迴圈 何必\ngoto\n\ngoto\n大型 軟體 專案\n實驗室 開發 關係 筆者 閱讀 大型\nc\n語言 專案 碰巧 讀到\n篇文章\ngoto\n更 認知\n一般來說 goto\n\nc\n語言 專案 很大\nexception\nhandling\ncomputed\ngoto\n開發者\nc\n語言 程式 出錯 時 回收 動態分配 記憶體 錯誤處理 確保 程式 下次 該函 式 時 工作\n試想 一家 公司 開發 高效能 網路 程式 確保 程式 穩定 持續 工作 軟體 中 發生 錯誤 輕易 放過\n\n2021\n年\n10\n月初\nfacebook\n斷線 例子 來看 facebook\n長達 六小時 斷線 連帶 損失估計 超過\n9\n億美元 商業化 軟體 穩定性\n後者\ncomputed\ngoto 才 筆者 想要 本文 分享 重點\ncomputed\ngoto\n先前 淺談 分支 預測\nhazards\n議題 一文 中 歸納 出 重點\n分支 預測 失敗 會 導致 流水線 中 排序 指令流 清除 這也 處理器 不止 做 白工 還要 正確 指令 填充 回 流水線\n再談\nbranch\nprediction\n處理器 引入 如上圖 所示 分支 預測 方法 處理器 會以\naddress\n索引 檢索\npattern\nhistory\ntable\n歷史紀錄 進一步 做出 預測\ncomputed\ngoto\n\ncomputed\ngoto\n適用於 取代\nswitch\ncase\n基底\ndispatcher\nswitch\n僅會 基底 分派任務 參考 子 說 會 抽象 程式碼 進一步 了解 概念\n處理器 分支 預測 方式 來看 一段 程式碼 週期 會\njump\n地方 會 導致 分支 預測 成功率 下降 反覆 填充 正確 指令 流水線\n\ncomputed\ngoto\n會 麽 做\n\nfunction\n內 宣告 變數 時\nstatic\n關鍵字 變數 生命週期 延長 程式 結束\n\nc c++\n中 地方\nstatic\n會 帶來 效果 特別注意\nunary\noperator\n&&\n\ngcc\n提供 擴展 搭配\nlabel\n跳轉 位址\n配合\ngoto\n程式 訪問\ncode\n跳轉 操作\n做 好處 顯而易見 computed\ngoto\n\njump\n操作 分成 好幾 正確 訪問\ndispatch\ntable 處理器 更 精準 預測 正確 分支\n真實世界 例子\ncomputed\ngoto\n\nefficient\ndispatch\ntables\n一文 提到\ncomputed\ngoto\n知名 軟體\nruby\n1.9\nyarv\nalso\nuses\ncomputed\ngoto\ndalvik\n\nandroid\njava\nvm\ncomputed\ngoto\nlua\n5.2\nuses\na\nswitch\n\njserv\n老師 主導 開發\nrv32emu next\n引入\ncomputed\ngoto\n實作 詳細 手法 參考\n前 請 詳閱 公開 說明書\n\nunary\noperator\n\ngcc\n特別 提供 擴展\nc\n語言 專案\ngcc\n編譯 有人 下載 原始 碼且 採用 編譯器 編譯 會 錯誤\n時\n寫\nmakefile 使用者 做出 超出 預期\n針對 編譯器 類別 做 偵測 目標 編譯器 非\ngcc\nswitch\ncase\n編譯 時\nfno gcse\n\nfno crossjumping\ngcc\n優化 原始 碼\nreference",
        "extracted_keywords": [
            "軟體",
            "開發者",
            "software",
            "程式",
            "專案"
        ],
        "extracted_keywords_phrases": [
            "軟體 發生",
            "軟體 專案",
            "software development",
            "工作 軟體",
            "跳進 software"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283066": {
        "href": "https://ithelp.ithome.com.tw/articles/10283066",
        "title": "2021/12/12 更新",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>1.開啟網格機器人流程改成這樣</h1>\n<p>1.執行網格機器人<br>\n2.讀取money變數(現金部位大小)<br>\n3.讀取現股部位大小<br>\n4.印出機器人裡面的總資產=現股+現金<br>\n5.問使用者要不要加減碼(對money變數做操作)<br>\n6.執行機器人交易的部分<br>\n7.到下午兩點關閉機器人，並且把money變數寫到檔案</p>\n<h1>2.改用機器人自己紀錄的成交回報金額來計算機器人現金部位的增減，不再仰賴帳戶餘額+交割金</h1>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-12-12 15:59:06",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "41",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>1.開啟網格機器人流程改成這樣</h1>\n<p>1.執行網格機器人<br/>\n2.讀取money變數(現金部位大小)<br/>\n3.讀取現股部位大小<br/>\n4.印出機器人裡面的總資產=現股+現金<br/>\n5.問使用者要不要加減碼(對money變數做操作)<br/>\n6.執行機器人交易的部分<br/>\n7.到下午兩點關閉機器人，並且把money變數寫到檔案</p>\n<h1>2.改用機器人自己紀錄的成交回報金額來計算機器人現金部位的增減，不再仰賴帳戶餘額+交割金</h1>\n<br/>\n</div>",
        "content_text": "1.開啟網格機器人流程改成這樣\n1.執行網格機器人\n2.讀取money變數(現金部位大小)\n3.讀取現股部位大小\n4.印出機器人裡面的總資產=現股+現金\n5.問使用者要不要加減碼(對money變數做操作)\n6.執行機器人交易的部分\n7.到下午兩點關閉機器人，並且把money變數寫到檔案\n2.改用機器人自己紀錄的成交回報金額來計算機器人現金部位的增減，不再仰賴帳戶餘額+交割金",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "1 . 開啟 網格 機器人 流程 改成 這樣\n1 . 執行 網格 機器人\n2 . 讀取 money 變數 ( 現金 部位 大小 )\n3 . 讀 取現 股 部位 大小\n4 . 印出 機器人 裡面 的 總資產 = 現股 + 現金\n5 . 問 使用者 要 不要 加減 碼 ( 對 money 變數 做 操作 )\n6 . 執行 機器人 交易 的 部分\n7 . 到 下午 兩點 關閉 機器人 ， 並且 把 money 變數 寫到 檔案\n2 . 改用 機器人 自己 紀錄 的 成交 回報 金額 來 計算 機器人 現金 部位 的 增減 ， 不再 仰賴 帳戶 餘額 + 交割 金",
        "word_seg_processed_content_text": "1 開啟 網格 機器人 流程 改成\n1 執行 網格 機器人\n2 讀取 money 變數 現金 部位 大小\n3 讀 取現 股 部位 大小\n4 印出 機器人 總資產 現股 現金\n5 問 使用者 加減 碼 money 變數 做 操作\n6 執行 機器人 交易\n7 下午 兩點 關閉 機器人 money 變數 寫到 檔案\n2 改用 機器人 紀錄 成交 回報 金額 計算 機器人 現金 部位 增減 不再 仰賴 帳戶 餘額 交割 金",
        "extracted_keywords": [
            "機器人",
            "計算",
            "現金",
            "使用者",
            "金額"
        ],
        "extracted_keywords_phrases": [
            "機器人 現金",
            "計算 機器人",
            "機器人 money",
            "機器人 總資產",
            "機器人 交易"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282952": {
        "href": "https://ithelp.ithome.com.tw/articles/10282952",
        "title": "予焦啦！一夢終須醒......",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h3>佳作之後</h3>\n<p>承蒙評審給予肯定，最直接的感謝方式就是狗尾續貂一番。</p>\n<p>沈澱了一個多月，我時常咀嚼結語中故作輕鬆的豪語：</p>\n<blockquote>\n<p>所以，就先抓 2025 Q4 釋出 Hoddarla 1.0 版吧！</p>\n</blockquote>\n<p>鐵人賽畢、回歸日常之後，就像鬆開安全鎖之後走下大怒神或雲霄飛車座椅的感覺：方才的經歷在每一個瞬間都帶來極深刻的感官體驗，但又已經過去；日後是否能鼓起勇氣重新再挑戰，也沒有足夠把握。但，刺激的遊園設施經驗所能類比的部份，也就只到這裡了。</p>\n<p>先前最後的規劃，2025 Q4？幾乎像時間的盡頭。但若時間真正到達了盡頭，又哪需要什麼作業系統、哪需要什麼典範、概念、工程原則、破壞或創新或沿襲？有太多矛盾本身隱式地存在在這個專案的宣言裡面。</p>\n<p>要完成 side project，人們必須能從最原始的本能之中提取足夠的能量作為核心動力，而後才能夠<strong>啟動</strong>：設定目標與階段、一步步完成、回顧、改善、再前進。然而若這份能量突然空乏（也許是需挪作他途、也許是資源耗竭？），那無論進行到哪裏，都不會有達成目標的可能了。</p>\n<p>Hoddarla 於我，是過去兩年的生命本身；然而類似向度的思考（大部分已總結在<a href=\"https://ithelp.ithome.com.tw/articles/10279900\" target=\"_blank\" rel=\"noreferrer noopener\">予焦啦！結論與展望（一）：Hoddarla 專案的過去、現在與未來</a>一文之中），卻已經持續了很久，也非我所獨有。</p>\n<p>但如果我只是繼續沉吟，這末篇將會連狗尾的等級也沒有；所以，<strong>另外引了 2 則來源，希望能夠與讀者諸君一同品味我將 Hoddarla 1.0 這個目標擱置的決定</strong>。也許酐醉到了深處的 underflow，是恰到好處的醒覺也說不定。</p>\n<h3><a href=\"https://www.youtube.com/watch?v=36myc8wQhLo&amp;t=2s\" target=\"_blank\" rel=\"noreferrer noopener\">是時候讓作業系統重新認識它底下的硬體了</a></h3>\n<p>這場演講來自相當開放的系統架構論壇 <a href=\"https://www.usenix.org/\" target=\"_blank\" rel=\"noreferrer noopener\">USENIX</a> 今年（2021）的技術年會（連動 OSDI 研討會）的 Key Note 講座。精彩的 Key Note 所需富含的領域深度與洞見，這場講座當然不缺；而論啟發性與娛樂性，更是這場講座為人津津樂道之處（這一兩個月，只要是 <a href=\"https://news.ycombinator.com/\" target=\"_blank\" rel=\"noreferrer noopener\">Hacker News</a> 上稍微深入的作業系統主題，都會看到人們以這場講座為參照延伸討論）。</p>\n<p>講者 Timothy Roscoe 是一位帶領 ETH Zurich 系統部門的業界先進。他一開場，就以雞蛋高牆式的高反差手法指出，OSDI 這個作業系統領域裡面影響力最高的一份刊物之中，作業系統本身的學術論文僅是少數；而且在這些論文之中，除了以 Linux 為實驗平臺之外的作業系統研究，已經稀缺到一年只有一兩篇的程度了。</p>\n<p>於是下一個問題，思考過作業系統與相關哲學的人決不會陌生，那就是，**作業系統到底是什麼？**又，**為什麼是 Linux？**講者給出一個很強的斷言，我們若是只看到 Linux 在作業系統研究領域的高佔比，那就是見樹不見林；實際上，就算是 Linux 之外的那些作業系統設計與研究，也與 Linux 共享一項硬體假設： <strong>ccNUMA 架構</strong>，也就是對各個 CPU 叢集來說，記憶體存取有遠近親疏之別，但同時他們互相之間的 cache 是一致的（coherent）。於是，就此破題。</p>\n<p>講者列舉了一些顯然一點都不 ccNUMA 的系統方塊圖，幾乎可以說，Linux 以及其他為 ccNUMA 架構而生的作業系統，實際上只是控制真實硬體的 CPU 與<strong>部分</strong>記憶體而已。真實的其他硬體元件因此需要自己處理這種被解離的情境，它們不過是作業系統透過 driver 去稍微接觸的邊疆民；有趣的是，這也催生的其他領域的一些研究機會，如安全領域的 cross-SoC 研究、或是各種計算機架構的研究（對他們來說，直接改架構比理解如何調整軟體層的東西簡單多了），因為那些領域的研究者沒有時間使用 Linux 之外的作業系統，所以勢必得讓周邊硬體元件去配合 Linux 存在的狀態。</p>\n<blockquote>\n<p>講者也順便抱怨了一下 USENIX/OSDI 研討會，因為裡面大部分是機器學習、資料庫領域的研究，作業系統領域研究反而少不打緊，其它子領域都有專屬的高品質研討會，就只有作業系統沒有；不僅如此，如果硬是要研究作業系統的話，最好都選擇在 Linux 上進行；如果不是，也務必讓實驗 OS 盡量像 Linux（也就是運行在 ccNUMA 假設之下的意思）。</p>\n</blockquote>\n<p>31 分鐘，也就是這場講座的中間點，講者做了最重的批判：現狀（作業系統設計之研究）為何如此遠離真實硬體？</p>\n<ol>\n<li>人們根本就不知道現代硬體長什麼樣子：這是無知。</li>\n<li>人們停留在舒適圈裡面，專注於那些 Linux 本來就擅長的部分：這是否認現狀。</li>\n</ol>\n<p>作者之後語氣放緩，並開始提出一些建議的下一步作法，包含：</p>\n<ol>\n<li>寫系統以控制真實的 SoC。確實其中包含許多複雜的部分，但處理複雜、撰寫系統以降伏這些複雜度本來就是我們的天職。過程中講者也提出一篇他作為共同作者的論文：<a href=\"https://www.usenix.org/legacy/events/hotos11/tech/final_files/Mogul.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">Mind the Gap: Reconnecting Architecture and OS Research</a>，從 2011 年至今也沒什麼改變。以結果來說，以 Linux 為大宗的作業系統就這樣被排擠，孤立在僅僅佔據 CPU/Memory 的一小塊角落裡面，且有越來越多作業系統看不見的東西（延伸資料：<a href=\"https://www.zdnet.com/article/minix-intels-hidden-in-chip-operating-system/\" target=\"_blank\" rel=\"noreferrer noopener\">Intel CPU 附贈的 Minix 作業系統</a>），進而導致整體性的問題。</li>\n<li>打造自己的電腦（計算機）吧！講者儼然是個系統軟體禪師，大聲詰問：你們理解現在的電腦硬體嗎？你們根本不懂！至少從 2011 那篇論文之後，現在要自己制定規格以打造工業級電腦簡單多了。講者自己就簡單秀了一下規格與照片，然後描述一般作業系統研究者比較少關注的部分：BMC，也就是主機板上的基本控制器，它負責溫度與電量之類的、貼近原生硬體且的關鍵控制。回頭審視 ccNUMA 的假設的侷限性，講者認為安全領域與計算機架構領域的研究者關心的問題其實都非常關鍵，所以作業系統領域這邊也應該跟上才對。</li>\n</ol>\n<p>結論也就理所當然了。硬體這些年來的變化非常巨大；工程界很多公司也關注到這個現象而開發了新的作業系統；其它子領域（反覆強調的兩個大宗：安全與架構）的關注項目需要作業系統研究者跟上。然而，這個社群（USENIX/OSDI）並不鼓勵類似的研究，大環境否認了有在 Linux 之外的其他大問題，並且對於真實硬體的樣貌呈現給軟體的現狀缺乏認知。不過也因此對於作業系統研究是嶄新的機會！</p>\n<ul>\n<li>真的應該要為新的硬體們構思新的作業系統架構</li>\n<li>現在的工具遠比以前好多了：新的正規方法、語言、新的硬體...</li>\n</ul>\n<h4>Hoddarla?</h4>\n<p>在賽期中接觸到這個講座帶來莫大的鼓舞。從結論就可以看到，講者鼓勵新的語言和新的概念，然而遺憾的是，筆者至今接觸過的 RISC-V 機器，要不是相當簡單的平臺，再不然就是模擬器，並沒有真正進行新機器的探索。</p>\n<p>但是，講者在有頭有臉的研究單位裡面，又為居高職，他可以支配的資源量，才是支撐他作出這些乎告背後的靠山；<strong>現狀之所以如此，必有諸多原因，演化至今使然</strong>。</p>\n<p>至於未來，我認為若要待在能夠盈利的主流當中，還是只有 Linux 可以考慮；非 Linux 已經是離經叛道，遑論是非 POSIX 甚至排除 C 語言。所以認真說這個部分的未來事項的話，我將會開始研究最近成形的 RISC-V 進階中斷架構（Advanced Interrupt Architecture），這個新機制應該在兩三年後會普及並取代現今的 PLIC 做法，或許在許多硬體本身的控制器也轉為 RISC-V 的情況下，更有望支援類似於講者期望的那種作業系統也不一定。</p>\n<h3><a href=\"http://ithare.com/bringing-architecture-of-operating-systems-to-xxi-century-part-i-changes-in-it-since-over-last-50-years/\" target=\"_blank\" rel=\"noreferrer noopener\">21 世紀了，作業系統架構呢？</a></h3>\n<p>相較於前篇講座佳評連連，這系列文（共四篇）的評論卻是稍微的負面，其中甚至也有評論說，作者點出一大堆他自己都沒有深入了解的問題。為此，我本身也是沒有了解任何主題到足以稱之為深入的人，所以就在旁邊看看熱鬧。也許眾人的評論自有道理，作者非常稀疏地更新，從 2020 二月之後就沒有後續了，將系列文停留在架構構想階段。</p>\n<p>這個部落格中，作者只有部落格用的藝名 \"No Bugs\" Hare，行文是我行我素的美式口語幽默，完全不怕爭議處採他人痛點，與前一篇的講者在爭議處會放緩打預防針的做法完全不同。敢放話 No Bugs，對於技術當然是有一番見識的。</p>\n<p><a href=\"http://ithare.com/bringing-architecture-of-operating-systems-to-xxi-century-part-i-changes-in-it-since-over-last-50-years/\" target=\"_blank\" rel=\"noreferrer noopener\">第一篇</a>描述過去五十年的硬體與軟體生態系進展，為之後的論述打地基。硬體部分的改進或差異至少有以下數點：</p>\n<ol>\n<li>效能，無需多說</li>\n<li>不同元件的效能改進不同，CPU/Memory 之間處理資料的速度越差越大</li>\n<li>context switch 變得相當昂貴</li>\n<li>NUMA</li>\n<li>Interrupt 的改進</li>\n<li>更深的 pipeline，分支預測等軟體看不到的 CPU 改良</li>\n</ol>\n<p>軟體部分，大多與工具的功能增強有關：</p>\n<ol>\n<li>靜態分析工具</li>\n<li>公共簽署的實務：增加使用者對軟體的來源的信心</li>\n<li>應用程式層有更好的「不分享任何東西（Shared-Nothing）、訊息傳遞（Message-Passing）」式的 API 在不同的語言框架中供使用。作者也引述了 Golang 的 Channel 設計背後的核心精神：Do not communicate by sharing memory; instead, share memory by communicating。</li>\n<li>非同步的程式設計框架。</li>\n</ol>\n<p><a href=\"http://ithare.com/bringing-architecture-of-operating-systems-to-xxi-century-part-ii-desirable-improvements/\" target=\"_blank\" rel=\"noreferrer noopener\">第二篇</a>則是列舉作者希望能夠在現代作業系統中改良的八大項目：</p>\n<ol>\n<li>增加彈性：以佈署時的控制選項，取代現在主要是開發時或編譯時的控制選項。</li>\n<li>無論是低階的 MCU 或是高階 CPU，藉由一樣的作業系統介面，使得雙方可以共享應用程式與驅動程式，而非各自開發各自的。</li>\n<li>增加穩定度與可測試性，尤其是正式上線的生產環境的除錯經驗應有所提升。一例是，很多生產環境 crash 掉的問題根本很難解決，如果能夠有個監控機制，讓人們可以調度事發前一段時間的系統狀態，那顯然會更好。以我的認知，這當然現在很多工具能夠提供，但這裡是問，為何不能是作業系統提供的呢？</li>\n<li>內建容錯（Fault-tolerance）以及擴容（Scalibility）</li>\n<li>（需要安全性的情境）增加安全性。</li>\n<li>解決公共財的悲劇（參見<a href=\"https://zh.wikipedia.org/zh-tw/%E5%85%AC%E5%9C%B0%E6%82%B2%E5%8A%87\" target=\"_blank\" rel=\"noreferrer noopener\">維基</a>），作者應是意指多租戶或多使用者情境下的系統利用狀態。</li>\n<li>驅動程式開發應當被簡化</li>\n<li>增加效能，且須分開考慮 HPC（高效能運算，通常 CPU 負責絕大部分任務）與互動式工作。</li>\n</ol>\n<p>我認為作者遭受到的批評多是，這些作者希望可以改進的面向，都有一些相對應的措施或工具，是作者沒有評估過的。這些批評本身有其道理，但顯然作者不僅僅是希望那些改進的做法存在，實際上他更希望的應該是在作業系統核心與應用程式之間重新設定邊界，否則無異於多出一個又一個的框架或是第三方函式庫。這些也有可能只是我自己內心想望的投射，但總之我是這麼解讀的。</p>\n<p><a href=\"http://ithare.com/bringing-architecture-of-operating-systems-to-xxi-century-part-iii-basic-ideas/\" target=\"_blank\" rel=\"noreferrer noopener\">第三篇</a>比之前篇更進一步，從想要的功能到基本的想法。如果當初這個系列持續下去，那麼這篇應該就是最基本的藍圖。比之前篇描述的每個改良都只是小段落的撰寫，本篇提出五個功能且都是較長的段落，我直接做結論的話不免有點破壞性壓縮，這裡先行致歉；但讀者諸君應該可以感受到那份動能：</p>\n<ol>\n<li>原生支援事件驅動（Event-driven）式的程式設計模式，且支援手持裝置、桌面系統與伺服器。事件驅動模式通常是透過程式語言、框架或是函式庫來支援，為了支援這樣的方法給應用程式層，其實費了很多工夫；之所以需要費工夫，是因為底層系統本質上是中斷驅動（Interrupt-driven）式的。作者認為，如果大部分的事件處理都可以很快解決，那事件驅動模式不是很顯然優於中斷驅動模式嗎？考量到多執行緒的切換與維護在現代作業系統之中是何等的高成本（原文是 heavy-weighted），作者的出發點如此。更到細節處，他認為應該以有限狀態機（Finite state machine）作為執行的單元，事實上，很多現代的嵌入式作業系統或是即時作業系統也有類似的設計；作者在這一點上想要主張，就算是給高階處理器運行的作業系統，也應往這個方向靠攏才對。以網頁伺服器效能為例，non-blockng 的 nginx 能夠優於 apache。</li>\n<li>既然所有東西都是 FSM，那麼系統在執行時的行為就會是可決定（deterministic）的。這有助於檢驗生產環境上的 crash 事件。理論上，一臺機器上記錄下來的 log，應該也要能夠在其他運行相同系統的機器上重現出來。理想上，這也可以簡化遷移（migration）的流程。</li>\n<li>作者企圖重定義作業系統：它不應該只指涉核心，而應該指涉相同的 API、可提供相同的應用程式與驅動程式運行、但允許配備不同的核心。我認為這就是原系列作者最會被現實阻攔的一個設計原則。有個例子是網頁伺服器閱覽自己的組態檔的需求，在 Unix-like 系統你必須有個 open 系統呼叫來與檔案系統互動，也許有某個應用程式層的 API read_conf 使用到 open，可是如果這個伺服器想要運行在沒有檔案系統的微小系統上，這個 read_conf 就不堪使用了：為何不是定一個作業系統 API read_conf？</li>\n<li>API 應該要分群，並且讓應用程式的設計者決定它需要用到哪些，於是就只使用那些就足夠。我的看法是，這點直接延伸第三點，完全從應用程式設計者的角度出發，並提出兼具「應用程式僅使用需要的 API」以及「高層級 API 允許底層作業系統核心的抽換」的解法。延續第三點的網頁伺服器案例，設計者就可以選擇使用 read_conf 與 sql_socket，而非限定 Unix-like kernel 的 open、read 與 socket API。</li>\n<li>這一點我不太能夠理解其中的精神旨趣，但作者倡議作業系統與程式語言的編譯器應該更緊密合作，以呼應第二篇當中援引現代程式語言的靜態分析工具的優勢。</li>\n</ol>\n<p><a href=\"http://ithare.com/bringing-architecture-of-operating-systems-to-xxi-century-part-iv-first-draft\" target=\"_blank\" rel=\"noreferrer noopener\">第四篇</a>名為第一份草稿，比前篇更接近實際的設計，這裡就先跳過吧。</p>\n<h4>Hoddarla?</h4>\n<p>我原本以為我是個反社會的恐怖主義者，但與作者 \"No Bugs\" Hare 相比，我根本是傳統價值的乖乖牌；以系列文相比，我單純以 Golang 這個語言，比照以往的作業系統，照顧貼近硬體的抽象層級，但這個 XXI 系列充滿了更多想像。原作者部落格下的留言大多不以為然、轉發至 Hacker News 之後眾人的評論也不太優；相較之下，Hoddarla 本身沒有獲得任何迴響，甚至不如驅車入巷時突然猛吠的狗那樣能夠引人一瞥。</p>\n<p>真的要說這個系列文給了我什麼除了技術發想之外的點子，我覺得最接近第一時間感受的是這篇文章：<a href=\"https://stonemaiergames.com/kickstarter-lesson-204-your-idea-is-brilliant-your-idea-is-worthless/\" target=\"_blank\" rel=\"noreferrer noopener\">你的高明點子毫無價值</a>。</p>\n<p>這是 Stonemaier 設計師 Jamey 的文章，是指引有志於桌遊設計的人們的一系列心法中的一篇。一言以蔽之，**你以為你的點子聰穎無比，但要是沒做出東西來，什麼都不是：那些實踐的過程與結果，遠遠比你構想出一個神妙點子困難得多！**呃，當初乍看也是一把無明火，要是沒有點子，人們能夠作出什麼東西？但事實是，儘管夢想家比例佔全人類是少數，但總數實際上也是不少，實踐者與協調者總是會有好點子可以做。以結果來說，當然就是沒有被實現的夢想與不存在或是爛主意並無二致。</p>\n<p>甚至可以更極端的說，搞不好，實現率低的夢想家的價值更低也不一定。換個角度看比較容易理解，創業失敗的人受人景仰的程度，應該會遠大於一直在講自己要創業但什麼都沒做的人吧。這有點流於功利主義，但夢想的盡頭難道不是為這個世界帶來什麼更好的改變嗎？這不純然是結果論的，那些過程也是夢想兌現途中的一部分成果，重點是做，現在就做。這大概就是為什麼 Nike 品牌形象這個好的緣故。</p>\n<p>本來期待這個系列最後會引導到某個比 Hoddarla 的尷尬小 console 更高明的東西，但看到一個系列停止更新在 First draft，難免惆悵。</p>\n<h3>永遠站在雞蛋的那一邊？</h3>\n<p>很遺憾，無論如何，高牆是正確的。</p>\n<p>日前與同是晶心壯士的隊友 <a href=\"https://ithelp.ithome.com.tw/users/20140421\" target=\"_blank\" rel=\"noreferrer noopener\">Quechuas</a> 聊聊彼此在技術路上的夢想；知曉他的遠大夢想（這裡就不多泄漏他人祕密）之後，我追問：</p>\n<p>「既然如此，你在做鐵人賽或是這些其他的事情的時候，不會覺得自己還是太循規蹈矩了嗎？」<br>\n「畢竟還是有很多要看要學習的事情，對我來說現在就是吸收養分的時候吧。」<br>\n「理解...但對我來說這是一個很煎熬的震盪。每當我覺得安排自己走在正軌上，想要好好吸收養分的時候，不由得會覺得自己太乖了；反過來，像這整個 Hoddarla project 做一做，又會一直覺得該學的東西都還學不夠。」</p>\n<p>夢想、規劃、執行一年半、衝刺三五個月、沉澱、佳作、再沉澱、...我應該會選擇永遠讓 Hoddarla 停留在這個 0.1 的狀態，幾年內應該也不會再做作業系統專案的嘗試了。</p>\n<p>典範之所以是典範，就是因為它經過歲月風沙淘洗，仍然與人們共存、共生、共演化。人類在這裡面並不是唯一的主體或是宰制者，至多是有腦細胞的 player。看看 C 語言，看看 Linux，看看 Linux Foundation（！），這些概念從某些前輩（們）的腦中躍出之後，不只是一本本長灰塵的書，而是以電流為血、以概念為肉的巨大神物。</p>\n<p>要挑戰神獸？沒血沒魔沒裝沒天命，有何可戰？</p>\n<h3>作業系統專案的嘗試 == 自幹作業系統？</h3>\n<p>我的答案是否。這兩件事情應該區分開來看。先說第一件事，這比較接近 Hoddarla 或是 \"No Bugs\" Dare 想做的事情，這通常會被業界先進們歸類為經驗還不夠的那一群。</p>\n<p>我傾向於認同 Timothy 先生在講座中提到的（以及引用的 2011 年論文）那個角度，你們這些夢想家，想要挑戰甚至改動的作業系統原則那麼多，那你們光從軟體層做，真的夠嗎？一樣的硬體假設之下，會不會到頭來就算給你做起來，也不會和現在差太多？</p>\n<p>所以我覺得，反正之後 RISC-V 開源核心只會越來越多。應該把硬體的一些概念重新補回來，也許之後連同硬體層一起改，讓軟硬之間更能夠互補所需，應該會是更有趣的專案。這是從作業系統往下看去的角度。另一個角度是，Hoddarla 本身想要將 Golang 的執行期作為作業系統的一部分，但現在可以很直接地說，結果太醜陋了，沒有維護性。至少 Golang 直接套用，沒有可行性；若要維持在 Golang 裡面，至少要付出像是 TamaGo 專案那樣等級的心力才行，再不然就連程式語言也需要另外思考：語法簡潔、節省開發者認知資源、工具眾多...</p>\n<p>另外一件事情，關於自幹作業系統，我的認知上，不管是作業系統課堂或深或淺的作業，或是技術狂人們的實作，本質上是使用手邊的工具重現實務上使用的作業系統的一小部分。這不是我想要走的路，儘管過程中一定可以學到我現在缺乏的某些技術或知識，但是結果仍然只是玩具，而我不希望我做出來的東西只是玩具。</p>\n<blockquote>\n<p>話雖如此，光是這些駭客們能夠好好「自幹」並且做得出來的行為本身，就足以讓上述第一種人看起來像是逃避仔，關於這個看法我可以大方承認，對，我是想要逃避 C、POSIX、everything is a file、還有企鵝或是紅色惡魔。</p>\n</blockquote>\n<blockquote>\n<p>關於玩具，當然也是有<a href=\"https://www.ycombinator.com/library/3U-why-build-toys\" target=\"_blank\" rel=\"noreferrer noopener\">這種說法</a>倡導它的價值，但影響力是一回事，創業營利又是另外一回事。</p>\n</blockquote>\n<p>學習的面向或許是唯一一個創造玩具的好理由。如果直接讓學生潛入 Linux 或是任何大系統，並且要求他們在裡面找到痛點並修正，是的，聽起來需要很久的時間，而且如果學生的經驗都是 Input 而沒有 Output，效果不可能會好。如果是創造玩具的話，學習的認知上有進有出，可以預期這個方法的效果。</p>\n<p>打造玩具學習法有一大原因是它可以節省日後接觸真實系統需要的上手時間，而花在了解玩具的複雜度上也不會花太多時間；也就是說，教學者的心智模型是<strong>直接深潛至真實系統中所需的時間</strong>遠遠大於<strong>打造玩具過程中理解系統基本元件所需要的時間</strong>加上<strong>有過玩具經驗之後上手真實系統的學習時間</strong>。</p>\n<p>可是出了社會之後，我總覺得直接潛入真實世界也未必有什麼壞處。因為<strong>大部分人在就學時期連玩具都造不好甚至沒造過</strong>，工作之後能夠自由支配的時間更為稀缺，這時候再做玩具，對我來說毫無意義。</p>\n<h3>以 Side project 作為鐵人賽系列文在奪獎上的劣勢</h3>\n<p>最後聊聊這個劣勢。恭喜 <a href=\"https://ithelp.ithome.com.tw/users/20107429/ironman/3897\" target=\"_blank\" rel=\"noreferrer noopener\">Kuma</a> 大大獲得 Software Development 組冠軍。整個系列文的節奏分配，確實有登樓梯的感覺。除了程式碼的實例也通常夾帶重構心法，目標讀者群大，也易受益。</p>\n<p>反觀我過去的幾次嘗試大多非常自我中心。Side project 這種東西本來就只關乎自我成長，雖然 Hoddarla 是企圖讓 RISC-V 的一些面向透過實際操作的方式展露出來，也比我先前的幾次嘗試來得完整，但整體上對於學習來講還是略顯虛浮，沒有去蕪存菁的感覺。</p>\n<p>當然，如果是僅僅以參加為目的，那就沒有所謂的優勢劣勢。但是除了興趣型專案，我也沒有什麼獨到的領域型專門知識可以整理並以教學為目的分享成系列文的料，所以未來如果會參賽，核心應該也都還是這種形式吧。不求扭轉劣勢，但是還是可以考慮些策略。如果有爭獎打算，下次就回避 Modern Web 和 Software Development 這兩個一級戰區吧。</p>\n<h3>給評審與主辦單位</h3>\n<p>如果可以的話，是否能夠公佈評量的一些向度，與得獎的系列文在那些向度獲得的分數或評語？如此一來，不但未獲獎的多數技術人能夠有個目標，得獎者也相當於是獲得了回饋以增進自己傳遞知識的能力。</p>\n<p>由衷感謝！</p>\n<h3>給讀者</h3>\n<p>希望你不會因為我在這最末篇宣告 Hoddarla 1.0 永遠不會出現而感到閱讀這個系列是在浪費你的時間。</p>\n<p>理論上，大部分的 RISC-V S-mode CSR 我全部都有說明並使用，儘管不是很有系統，但卻是在 Hoddarla 這個系統建構的脈絡之下有邏輯地進行的，所以至少這個部分可以作為一點學習的參考；事實上，過去一個多月，我自己已經拿出來參考過幾次 PLIC。</p>\n<p>Golang 的系統面向則是非常偏門，也需要往復搭配我前年的系列才能夠比較清楚地閱讀。確實這個部分會非常難以入口吧，尤其是系統軟體圈多的是只知道 C 而不知道 Golang 的人們。</p>\n<p>絕大部分我都採取最生硬且最形式化的方式來表達在文章上面，確實是我刻意為之的結果，因為我一直認為這是表達對於讀者的尊重的方法。若實際上的成效相反，那只能說我對這個世界的誤會大得讓所有人都會遺憾。</p>\n<p>最後的結論以及本篇則是寬鬆之後的結果，更接近我日常行文的方式，讀來也許自溺，但我覺得這樣很有趣。我推薦讀者諸君也試著創作，我們可以在鐵人賽或是其他部落格相遇，更重要的是你自己也會在未來與先前寫作的自己重新相遇，那種經驗幾乎堪比接觸陌生人：舉例來說，我現在看自己先前的三個鐵人賽系列，我完全不認得那些筆調，精神與生命同等的隨著歲月遺失，留下來的則大部分是那些程式碼的概念與能夠讓我賴以為生的技術。</p>\n<p>感謝你們的閱讀，如果不是閱讀，這些文字與程式碼的存在毫無意義。</p>\n<p>請接受這過早的佳節祝福，也希望 2022 對所有人來說同樣是能夠帶來機會與成長的一年。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-12-12 13:41:05",
        "author_href": "https://ithelp.ithome.com.tw/users/20103524/ironman",
        "author_name": "高魁良",
        "series_href": "https://ithelp.ithome.com.tw/users/20103524/ironman/4460",
        "series_name": "予焦啦！Hoddarla 專案起步：使用 Golang 撰寫 RISC-V 作業系統的初步探索",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<h3>佳作之後</h3>\n<p>承蒙評審給予肯定，最直接的感謝方式就是狗尾續貂一番。</p>\n<p>沈澱了一個多月，我時常咀嚼結語中故作輕鬆的豪語：</p>\n<blockquote>\n<p>所以，就先抓 2025 Q4 釋出 Hoddarla 1.0 版吧！</p>\n</blockquote>\n<p>鐵人賽畢、回歸日常之後，就像鬆開安全鎖之後走下大怒神或雲霄飛車座椅的感覺：方才的經歷在每一個瞬間都帶來極深刻的感官體驗，但又已經過去；日後是否能鼓起勇氣重新再挑戰，也沒有足夠把握。但，刺激的遊園設施經驗所能類比的部份，也就只到這裡了。</p>\n<p>先前最後的規劃，2025 Q4？幾乎像時間的盡頭。但若時間真正到達了盡頭，又哪需要什麼作業系統、哪需要什麼典範、概念、工程原則、破壞或創新或沿襲？有太多矛盾本身隱式地存在在這個專案的宣言裡面。</p>\n<p>要完成 side project，人們必須能從最原始的本能之中提取足夠的能量作為核心動力，而後才能夠<strong>啟動</strong>：設定目標與階段、一步步完成、回顧、改善、再前進。然而若這份能量突然空乏（也許是需挪作他途、也許是資源耗竭？），那無論進行到哪裏，都不會有達成目標的可能了。</p>\n<p>Hoddarla 於我，是過去兩年的生命本身；然而類似向度的思考（大部分已總結在一文之中），卻已經持續了很久，也非我所獨有。</p>\n<p>但如果我只是繼續沉吟，這末篇將會連狗尾的等級也沒有；所以，<strong>另外引了 2 則來源，希望能夠與讀者諸君一同品味我將 Hoddarla 1.0 這個目標擱置的決定</strong>。也許酐醉到了深處的 underflow，是恰到好處的醒覺也說不定。</p>\n<h3></h3>\n<p>這場演講來自相當開放的系統架構論壇  今年（2021）的技術年會（連動 OSDI 研討會）的 Key Note 講座。精彩的 Key Note 所需富含的領域深度與洞見，這場講座當然不缺；而論啟發性與娛樂性，更是這場講座為人津津樂道之處（這一兩個月，只要是  上稍微深入的作業系統主題，都會看到人們以這場講座為參照延伸討論）。</p>\n<p>講者 Timothy Roscoe 是一位帶領 ETH Zurich 系統部門的業界先進。他一開場，就以雞蛋高牆式的高反差手法指出，OSDI 這個作業系統領域裡面影響力最高的一份刊物之中，作業系統本身的學術論文僅是少數；而且在這些論文之中，除了以 Linux 為實驗平臺之外的作業系統研究，已經稀缺到一年只有一兩篇的程度了。</p>\n<p>於是下一個問題，思考過作業系統與相關哲學的人決不會陌生，那就是，**作業系統到底是什麼？**又，**為什麼是 Linux？**講者給出一個很強的斷言，我們若是只看到 Linux 在作業系統研究領域的高佔比，那就是見樹不見林；實際上，就算是 Linux 之外的那些作業系統設計與研究，也與 Linux 共享一項硬體假設： <strong>ccNUMA 架構</strong>，也就是對各個 CPU 叢集來說，記憶體存取有遠近親疏之別，但同時他們互相之間的 cache 是一致的（coherent）。於是，就此破題。</p>\n<p>講者列舉了一些顯然一點都不 ccNUMA 的系統方塊圖，幾乎可以說，Linux 以及其他為 ccNUMA 架構而生的作業系統，實際上只是控制真實硬體的 CPU 與<strong>部分</strong>記憶體而已。真實的其他硬體元件因此需要自己處理這種被解離的情境，它們不過是作業系統透過 driver 去稍微接觸的邊疆民；有趣的是，這也催生的其他領域的一些研究機會，如安全領域的 cross-SoC 研究、或是各種計算機架構的研究（對他們來說，直接改架構比理解如何調整軟體層的東西簡單多了），因為那些領域的研究者沒有時間使用 Linux 之外的作業系統，所以勢必得讓周邊硬體元件去配合 Linux 存在的狀態。</p>\n<blockquote>\n<p>講者也順便抱怨了一下 USENIX/OSDI 研討會，因為裡面大部分是機器學習、資料庫領域的研究，作業系統領域研究反而少不打緊，其它子領域都有專屬的高品質研討會，就只有作業系統沒有；不僅如此，如果硬是要研究作業系統的話，最好都選擇在 Linux 上進行；如果不是，也務必讓實驗 OS 盡量像 Linux（也就是運行在 ccNUMA 假設之下的意思）。</p>\n</blockquote>\n<p>31 分鐘，也就是這場講座的中間點，講者做了最重的批判：現狀（作業系統設計之研究）為何如此遠離真實硬體？</p>\n<ol>\n<li>人們根本就不知道現代硬體長什麼樣子：這是無知。</li>\n<li>人們停留在舒適圈裡面，專注於那些 Linux 本來就擅長的部分：這是否認現狀。</li>\n</ol>\n<p>作者之後語氣放緩，並開始提出一些建議的下一步作法，包含：</p>\n<ol>\n<li>寫系統以控制真實的 SoC。確實其中包含許多複雜的部分，但處理複雜、撰寫系統以降伏這些複雜度本來就是我們的天職。過程中講者也提出一篇他作為共同作者的論文：，從 2011 年至今也沒什麼改變。以結果來說，以 Linux 為大宗的作業系統就這樣被排擠，孤立在僅僅佔據 CPU/Memory 的一小塊角落裡面，且有越來越多作業系統看不見的東西（延伸資料：），進而導致整體性的問題。</li>\n<li>打造自己的電腦（計算機）吧！講者儼然是個系統軟體禪師，大聲詰問：你們理解現在的電腦硬體嗎？你們根本不懂！至少從 2011 那篇論文之後，現在要自己制定規格以打造工業級電腦簡單多了。講者自己就簡單秀了一下規格與照片，然後描述一般作業系統研究者比較少關注的部分：BMC，也就是主機板上的基本控制器，它負責溫度與電量之類的、貼近原生硬體且的關鍵控制。回頭審視 ccNUMA 的假設的侷限性，講者認為安全領域與計算機架構領域的研究者關心的問題其實都非常關鍵，所以作業系統領域這邊也應該跟上才對。</li>\n</ol>\n<p>結論也就理所當然了。硬體這些年來的變化非常巨大；工程界很多公司也關注到這個現象而開發了新的作業系統；其它子領域（反覆強調的兩個大宗：安全與架構）的關注項目需要作業系統研究者跟上。然而，這個社群（USENIX/OSDI）並不鼓勵類似的研究，大環境否認了有在 Linux 之外的其他大問題，並且對於真實硬體的樣貌呈現給軟體的現狀缺乏認知。不過也因此對於作業系統研究是嶄新的機會！</p>\n<ul>\n<li>真的應該要為新的硬體們構思新的作業系統架構</li>\n<li>現在的工具遠比以前好多了：新的正規方法、語言、新的硬體...</li>\n</ul>\n<h4>Hoddarla?</h4>\n<p>在賽期中接觸到這個講座帶來莫大的鼓舞。從結論就可以看到，講者鼓勵新的語言和新的概念，然而遺憾的是，筆者至今接觸過的 RISC-V 機器，要不是相當簡單的平臺，再不然就是模擬器，並沒有真正進行新機器的探索。</p>\n<p>但是，講者在有頭有臉的研究單位裡面，又為居高職，他可以支配的資源量，才是支撐他作出這些乎告背後的靠山；<strong>現狀之所以如此，必有諸多原因，演化至今使然</strong>。</p>\n<p>至於未來，我認為若要待在能夠盈利的主流當中，還是只有 Linux 可以考慮；非 Linux 已經是離經叛道，遑論是非 POSIX 甚至排除 C 語言。所以認真說這個部分的未來事項的話，我將會開始研究最近成形的 RISC-V 進階中斷架構（Advanced Interrupt Architecture），這個新機制應該在兩三年後會普及並取代現今的 PLIC 做法，或許在許多硬體本身的控制器也轉為 RISC-V 的情況下，更有望支援類似於講者期望的那種作業系統也不一定。</p>\n<h3></h3>\n<p>相較於前篇講座佳評連連，這系列文（共四篇）的評論卻是稍微的負面，其中甚至也有評論說，作者點出一大堆他自己都沒有深入了解的問題。為此，我本身也是沒有了解任何主題到足以稱之為深入的人，所以就在旁邊看看熱鬧。也許眾人的評論自有道理，作者非常稀疏地更新，從 2020 二月之後就沒有後續了，將系列文停留在架構構想階段。</p>\n<p>這個部落格中，作者只有部落格用的藝名 \"No Bugs\" Hare，行文是我行我素的美式口語幽默，完全不怕爭議處採他人痛點，與前一篇的講者在爭議處會放緩打預防針的做法完全不同。敢放話 No Bugs，對於技術當然是有一番見識的。</p>\n<p>描述過去五十年的硬體與軟體生態系進展，為之後的論述打地基。硬體部分的改進或差異至少有以下數點：</p>\n<ol>\n<li>效能，無需多說</li>\n<li>不同元件的效能改進不同，CPU/Memory 之間處理資料的速度越差越大</li>\n<li>context switch 變得相當昂貴</li>\n<li>NUMA</li>\n<li>Interrupt 的改進</li>\n<li>更深的 pipeline，分支預測等軟體看不到的 CPU 改良</li>\n</ol>\n<p>軟體部分，大多與工具的功能增強有關：</p>\n<ol>\n<li>靜態分析工具</li>\n<li>公共簽署的實務：增加使用者對軟體的來源的信心</li>\n<li>應用程式層有更好的「不分享任何東西（Shared-Nothing）、訊息傳遞（Message-Passing）」式的 API 在不同的語言框架中供使用。作者也引述了 Golang 的 Channel 設計背後的核心精神：Do not communicate by sharing memory; instead, share memory by communicating。</li>\n<li>非同步的程式設計框架。</li>\n</ol>\n<p>則是列舉作者希望能夠在現代作業系統中改良的八大項目：</p>\n<ol>\n<li>增加彈性：以佈署時的控制選項，取代現在主要是開發時或編譯時的控制選項。</li>\n<li>無論是低階的 MCU 或是高階 CPU，藉由一樣的作業系統介面，使得雙方可以共享應用程式與驅動程式，而非各自開發各自的。</li>\n<li>增加穩定度與可測試性，尤其是正式上線的生產環境的除錯經驗應有所提升。一例是，很多生產環境 crash 掉的問題根本很難解決，如果能夠有個監控機制，讓人們可以調度事發前一段時間的系統狀態，那顯然會更好。以我的認知，這當然現在很多工具能夠提供，但這裡是問，為何不能是作業系統提供的呢？</li>\n<li>內建容錯（Fault-tolerance）以及擴容（Scalibility）</li>\n<li>（需要安全性的情境）增加安全性。</li>\n<li>解決公共財的悲劇（參見），作者應是意指多租戶或多使用者情境下的系統利用狀態。</li>\n<li>驅動程式開發應當被簡化</li>\n<li>增加效能，且須分開考慮 HPC（高效能運算，通常 CPU 負責絕大部分任務）與互動式工作。</li>\n</ol>\n<p>我認為作者遭受到的批評多是，這些作者希望可以改進的面向，都有一些相對應的措施或工具，是作者沒有評估過的。這些批評本身有其道理，但顯然作者不僅僅是希望那些改進的做法存在，實際上他更希望的應該是在作業系統核心與應用程式之間重新設定邊界，否則無異於多出一個又一個的框架或是第三方函式庫。這些也有可能只是我自己內心想望的投射，但總之我是這麼解讀的。</p>\n<p>比之前篇更進一步，從想要的功能到基本的想法。如果當初這個系列持續下去，那麼這篇應該就是最基本的藍圖。比之前篇描述的每個改良都只是小段落的撰寫，本篇提出五個功能且都是較長的段落，我直接做結論的話不免有點破壞性壓縮，這裡先行致歉；但讀者諸君應該可以感受到那份動能：</p>\n<ol>\n<li>原生支援事件驅動（Event-driven）式的程式設計模式，且支援手持裝置、桌面系統與伺服器。事件驅動模式通常是透過程式語言、框架或是函式庫來支援，為了支援這樣的方法給應用程式層，其實費了很多工夫；之所以需要費工夫，是因為底層系統本質上是中斷驅動（Interrupt-driven）式的。作者認為，如果大部分的事件處理都可以很快解決，那事件驅動模式不是很顯然優於中斷驅動模式嗎？考量到多執行緒的切換與維護在現代作業系統之中是何等的高成本（原文是 heavy-weighted），作者的出發點如此。更到細節處，他認為應該以有限狀態機（Finite state machine）作為執行的單元，事實上，很多現代的嵌入式作業系統或是即時作業系統也有類似的設計；作者在這一點上想要主張，就算是給高階處理器運行的作業系統，也應往這個方向靠攏才對。以網頁伺服器效能為例，non-blockng 的 nginx 能夠優於 apache。</li>\n<li>既然所有東西都是 FSM，那麼系統在執行時的行為就會是可決定（deterministic）的。這有助於檢驗生產環境上的 crash 事件。理論上，一臺機器上記錄下來的 log，應該也要能夠在其他運行相同系統的機器上重現出來。理想上，這也可以簡化遷移（migration）的流程。</li>\n<li>作者企圖重定義作業系統：它不應該只指涉核心，而應該指涉相同的 API、可提供相同的應用程式與驅動程式運行、但允許配備不同的核心。我認為這就是原系列作者最會被現實阻攔的一個設計原則。有個例子是網頁伺服器閱覽自己的組態檔的需求，在 Unix-like 系統你必須有個 open 系統呼叫來與檔案系統互動，也許有某個應用程式層的 API read_conf 使用到 open，可是如果這個伺服器想要運行在沒有檔案系統的微小系統上，這個 read_conf 就不堪使用了：為何不是定一個作業系統 API read_conf？</li>\n<li>API 應該要分群，並且讓應用程式的設計者決定它需要用到哪些，於是就只使用那些就足夠。我的看法是，這點直接延伸第三點，完全從應用程式設計者的角度出發，並提出兼具「應用程式僅使用需要的 API」以及「高層級 API 允許底層作業系統核心的抽換」的解法。延續第三點的網頁伺服器案例，設計者就可以選擇使用 read_conf 與 sql_socket，而非限定 Unix-like kernel 的 open、read 與 socket API。</li>\n<li>這一點我不太能夠理解其中的精神旨趣，但作者倡議作業系統與程式語言的編譯器應該更緊密合作，以呼應第二篇當中援引現代程式語言的靜態分析工具的優勢。</li>\n</ol>\n<p>名為第一份草稿，比前篇更接近實際的設計，這裡就先跳過吧。</p>\n<h4>Hoddarla?</h4>\n<p>我原本以為我是個反社會的恐怖主義者，但與作者 \"No Bugs\" Hare 相比，我根本是傳統價值的乖乖牌；以系列文相比，我單純以 Golang 這個語言，比照以往的作業系統，照顧貼近硬體的抽象層級，但這個 XXI 系列充滿了更多想像。原作者部落格下的留言大多不以為然、轉發至 Hacker News 之後眾人的評論也不太優；相較之下，Hoddarla 本身沒有獲得任何迴響，甚至不如驅車入巷時突然猛吠的狗那樣能夠引人一瞥。</p>\n<p>真的要說這個系列文給了我什麼除了技術發想之外的點子，我覺得最接近第一時間感受的是這篇文章：。</p>\n<p>這是 Stonemaier 設計師 Jamey 的文章，是指引有志於桌遊設計的人們的一系列心法中的一篇。一言以蔽之，**你以為你的點子聰穎無比，但要是沒做出東西來，什麼都不是：那些實踐的過程與結果，遠遠比你構想出一個神妙點子困難得多！**呃，當初乍看也是一把無明火，要是沒有點子，人們能夠作出什麼東西？但事實是，儘管夢想家比例佔全人類是少數，但總數實際上也是不少，實踐者與協調者總是會有好點子可以做。以結果來說，當然就是沒有被實現的夢想與不存在或是爛主意並無二致。</p>\n<p>甚至可以更極端的說，搞不好，實現率低的夢想家的價值更低也不一定。換個角度看比較容易理解，創業失敗的人受人景仰的程度，應該會遠大於一直在講自己要創業但什麼都沒做的人吧。這有點流於功利主義，但夢想的盡頭難道不是為這個世界帶來什麼更好的改變嗎？這不純然是結果論的，那些過程也是夢想兌現途中的一部分成果，重點是做，現在就做。這大概就是為什麼 Nike 品牌形象這個好的緣故。</p>\n<p>本來期待這個系列最後會引導到某個比 Hoddarla 的尷尬小 console 更高明的東西，但看到一個系列停止更新在 First draft，難免惆悵。</p>\n<h3>永遠站在雞蛋的那一邊？</h3>\n<p>很遺憾，無論如何，高牆是正確的。</p>\n<p>日前與同是晶心壯士的隊友  聊聊彼此在技術路上的夢想；知曉他的遠大夢想（這裡就不多泄漏他人祕密）之後，我追問：</p>\n<p>「既然如此，你在做鐵人賽或是這些其他的事情的時候，不會覺得自己還是太循規蹈矩了嗎？」<br/>\n「畢竟還是有很多要看要學習的事情，對我來說現在就是吸收養分的時候吧。」<br/>\n「理解...但對我來說這是一個很煎熬的震盪。每當我覺得安排自己走在正軌上，想要好好吸收養分的時候，不由得會覺得自己太乖了；反過來，像這整個 Hoddarla project 做一做，又會一直覺得該學的東西都還學不夠。」</p>\n<p>夢想、規劃、執行一年半、衝刺三五個月、沉澱、佳作、再沉澱、...我應該會選擇永遠讓 Hoddarla 停留在這個 0.1 的狀態，幾年內應該也不會再做作業系統專案的嘗試了。</p>\n<p>典範之所以是典範，就是因為它經過歲月風沙淘洗，仍然與人們共存、共生、共演化。人類在這裡面並不是唯一的主體或是宰制者，至多是有腦細胞的 player。看看 C 語言，看看 Linux，看看 Linux Foundation（！），這些概念從某些前輩（們）的腦中躍出之後，不只是一本本長灰塵的書，而是以電流為血、以概念為肉的巨大神物。</p>\n<p>要挑戰神獸？沒血沒魔沒裝沒天命，有何可戰？</p>\n<h3>作業系統專案的嘗試 == 自幹作業系統？</h3>\n<p>我的答案是否。這兩件事情應該區分開來看。先說第一件事，這比較接近 Hoddarla 或是 \"No Bugs\" Dare 想做的事情，這通常會被業界先進們歸類為經驗還不夠的那一群。</p>\n<p>我傾向於認同 Timothy 先生在講座中提到的（以及引用的 2011 年論文）那個角度，你們這些夢想家，想要挑戰甚至改動的作業系統原則那麼多，那你們光從軟體層做，真的夠嗎？一樣的硬體假設之下，會不會到頭來就算給你做起來，也不會和現在差太多？</p>\n<p>所以我覺得，反正之後 RISC-V 開源核心只會越來越多。應該把硬體的一些概念重新補回來，也許之後連同硬體層一起改，讓軟硬之間更能夠互補所需，應該會是更有趣的專案。這是從作業系統往下看去的角度。另一個角度是，Hoddarla 本身想要將 Golang 的執行期作為作業系統的一部分，但現在可以很直接地說，結果太醜陋了，沒有維護性。至少 Golang 直接套用，沒有可行性；若要維持在 Golang 裡面，至少要付出像是 TamaGo 專案那樣等級的心力才行，再不然就連程式語言也需要另外思考：語法簡潔、節省開發者認知資源、工具眾多...</p>\n<p>另外一件事情，關於自幹作業系統，我的認知上，不管是作業系統課堂或深或淺的作業，或是技術狂人們的實作，本質上是使用手邊的工具重現實務上使用的作業系統的一小部分。這不是我想要走的路，儘管過程中一定可以學到我現在缺乏的某些技術或知識，但是結果仍然只是玩具，而我不希望我做出來的東西只是玩具。</p>\n<blockquote>\n<p>話雖如此，光是這些駭客們能夠好好「自幹」並且做得出來的行為本身，就足以讓上述第一種人看起來像是逃避仔，關於這個看法我可以大方承認，對，我是想要逃避 C、POSIX、everything is a file、還有企鵝或是紅色惡魔。</p>\n</blockquote>\n<blockquote>\n<p>關於玩具，當然也是有倡導它的價值，但影響力是一回事，創業營利又是另外一回事。</p>\n</blockquote>\n<p>學習的面向或許是唯一一個創造玩具的好理由。如果直接讓學生潛入 Linux 或是任何大系統，並且要求他們在裡面找到痛點並修正，是的，聽起來需要很久的時間，而且如果學生的經驗都是 Input 而沒有 Output，效果不可能會好。如果是創造玩具的話，學習的認知上有進有出，可以預期這個方法的效果。</p>\n<p>打造玩具學習法有一大原因是它可以節省日後接觸真實系統需要的上手時間，而花在了解玩具的複雜度上也不會花太多時間；也就是說，教學者的心智模型是<strong>直接深潛至真實系統中所需的時間</strong>遠遠大於<strong>打造玩具過程中理解系統基本元件所需要的時間</strong>加上<strong>有過玩具經驗之後上手真實系統的學習時間</strong>。</p>\n<p>可是出了社會之後，我總覺得直接潛入真實世界也未必有什麼壞處。因為<strong>大部分人在就學時期連玩具都造不好甚至沒造過</strong>，工作之後能夠自由支配的時間更為稀缺，這時候再做玩具，對我來說毫無意義。</p>\n<h3>以 Side project 作為鐵人賽系列文在奪獎上的劣勢</h3>\n<p>最後聊聊這個劣勢。恭喜  大大獲得 Software Development 組冠軍。整個系列文的節奏分配，確實有登樓梯的感覺。除了程式碼的實例也通常夾帶重構心法，目標讀者群大，也易受益。</p>\n<p>反觀我過去的幾次嘗試大多非常自我中心。Side project 這種東西本來就只關乎自我成長，雖然 Hoddarla 是企圖讓 RISC-V 的一些面向透過實際操作的方式展露出來，也比我先前的幾次嘗試來得完整，但整體上對於學習來講還是略顯虛浮，沒有去蕪存菁的感覺。</p>\n<p>當然，如果是僅僅以參加為目的，那就沒有所謂的優勢劣勢。但是除了興趣型專案，我也沒有什麼獨到的領域型專門知識可以整理並以教學為目的分享成系列文的料，所以未來如果會參賽，核心應該也都還是這種形式吧。不求扭轉劣勢，但是還是可以考慮些策略。如果有爭獎打算，下次就回避 Modern Web 和 Software Development 這兩個一級戰區吧。</p>\n<h3>給評審與主辦單位</h3>\n<p>如果可以的話，是否能夠公佈評量的一些向度，與得獎的系列文在那些向度獲得的分數或評語？如此一來，不但未獲獎的多數技術人能夠有個目標，得獎者也相當於是獲得了回饋以增進自己傳遞知識的能力。</p>\n<p>由衷感謝！</p>\n<h3>給讀者</h3>\n<p>希望你不會因為我在這最末篇宣告 Hoddarla 1.0 永遠不會出現而感到閱讀這個系列是在浪費你的時間。</p>\n<p>理論上，大部分的 RISC-V S-mode CSR 我全部都有說明並使用，儘管不是很有系統，但卻是在 Hoddarla 這個系統建構的脈絡之下有邏輯地進行的，所以至少這個部分可以作為一點學習的參考；事實上，過去一個多月，我自己已經拿出來參考過幾次 PLIC。</p>\n<p>Golang 的系統面向則是非常偏門，也需要往復搭配我前年的系列才能夠比較清楚地閱讀。確實這個部分會非常難以入口吧，尤其是系統軟體圈多的是只知道 C 而不知道 Golang 的人們。</p>\n<p>絕大部分我都採取最生硬且最形式化的方式來表達在文章上面，確實是我刻意為之的結果，因為我一直認為這是表達對於讀者的尊重的方法。若實際上的成效相反，那只能說我對這個世界的誤會大得讓所有人都會遺憾。</p>\n<p>最後的結論以及本篇則是寬鬆之後的結果，更接近我日常行文的方式，讀來也許自溺，但我覺得這樣很有趣。我推薦讀者諸君也試著創作，我們可以在鐵人賽或是其他部落格相遇，更重要的是你自己也會在未來與先前寫作的自己重新相遇，那種經驗幾乎堪比接觸陌生人：舉例來說，我現在看自己先前的三個鐵人賽系列，我完全不認得那些筆調，精神與生命同等的隨著歲月遺失，留下來的則大部分是那些程式碼的概念與能夠讓我賴以為生的技術。</p>\n<p>感謝你們的閱讀，如果不是閱讀，這些文字與程式碼的存在毫無意義。</p>\n<p>請接受這過早的佳節祝福，也希望 2022 對所有人來說同樣是能夠帶來機會與成長的一年。</p>\n<br/>\n</div>",
        "content_text": "佳作之後\n承蒙評審給予肯定，最直接的感謝方式就是狗尾續貂一番。\n沈澱了一個多月，我時常咀嚼結語中故作輕鬆的豪語：\n\n所以，就先抓 2025 Q4 釋出 Hoddarla 1.0 版吧！\n\n鐵人賽畢、回歸日常之後，就像鬆開安全鎖之後走下大怒神或雲霄飛車座椅的感覺：方才的經歷在每一個瞬間都帶來極深刻的感官體驗，但又已經過去；日後是否能鼓起勇氣重新再挑戰，也沒有足夠把握。但，刺激的遊園設施經驗所能類比的部份，也就只到這裡了。\n先前最後的規劃，2025 Q4？幾乎像時間的盡頭。但若時間真正到達了盡頭，又哪需要什麼作業系統、哪需要什麼典範、概念、工程原則、破壞或創新或沿襲？有太多矛盾本身隱式地存在在這個專案的宣言裡面。\n要完成 side project，人們必須能從最原始的本能之中提取足夠的能量作為核心動力，而後才能夠啟動：設定目標與階段、一步步完成、回顧、改善、再前進。然而若這份能量突然空乏（也許是需挪作他途、也許是資源耗竭？），那無論進行到哪裏，都不會有達成目標的可能了。\nHoddarla 於我，是過去兩年的生命本身；然而類似向度的思考（大部分已總結在一文之中），卻已經持續了很久，也非我所獨有。\n但如果我只是繼續沉吟，這末篇將會連狗尾的等級也沒有；所以，另外引了 2 則來源，希望能夠與讀者諸君一同品味我將 Hoddarla 1.0 這個目標擱置的決定。也許酐醉到了深處的 underflow，是恰到好處的醒覺也說不定。\n\n這場演講來自相當開放的系統架構論壇  今年（2021）的技術年會（連動 OSDI 研討會）的 Key Note 講座。精彩的 Key Note 所需富含的領域深度與洞見，這場講座當然不缺；而論啟發性與娛樂性，更是這場講座為人津津樂道之處（這一兩個月，只要是  上稍微深入的作業系統主題，都會看到人們以這場講座為參照延伸討論）。\n講者 Timothy Roscoe 是一位帶領 ETH Zurich 系統部門的業界先進。他一開場，就以雞蛋高牆式的高反差手法指出，OSDI 這個作業系統領域裡面影響力最高的一份刊物之中，作業系統本身的學術論文僅是少數；而且在這些論文之中，除了以 Linux 為實驗平臺之外的作業系統研究，已經稀缺到一年只有一兩篇的程度了。\n於是下一個問題，思考過作業系統與相關哲學的人決不會陌生，那就是，**作業系統到底是什麼？**又，**為什麼是 Linux？**講者給出一個很強的斷言，我們若是只看到 Linux 在作業系統研究領域的高佔比，那就是見樹不見林；實際上，就算是 Linux 之外的那些作業系統設計與研究，也與 Linux 共享一項硬體假設： ccNUMA 架構，也就是對各個 CPU 叢集來說，記憶體存取有遠近親疏之別，但同時他們互相之間的 cache 是一致的（coherent）。於是，就此破題。\n講者列舉了一些顯然一點都不 ccNUMA 的系統方塊圖，幾乎可以說，Linux 以及其他為 ccNUMA 架構而生的作業系統，實際上只是控制真實硬體的 CPU 與部分記憶體而已。真實的其他硬體元件因此需要自己處理這種被解離的情境，它們不過是作業系統透過 driver 去稍微接觸的邊疆民；有趣的是，這也催生的其他領域的一些研究機會，如安全領域的 cross-SoC 研究、或是各種計算機架構的研究（對他們來說，直接改架構比理解如何調整軟體層的東西簡單多了），因為那些領域的研究者沒有時間使用 Linux 之外的作業系統，所以勢必得讓周邊硬體元件去配合 Linux 存在的狀態。\n\n講者也順便抱怨了一下 USENIX/OSDI 研討會，因為裡面大部分是機器學習、資料庫領域的研究，作業系統領域研究反而少不打緊，其它子領域都有專屬的高品質研討會，就只有作業系統沒有；不僅如此，如果硬是要研究作業系統的話，最好都選擇在 Linux 上進行；如果不是，也務必讓實驗 OS 盡量像 Linux（也就是運行在 ccNUMA 假設之下的意思）。\n\n31 分鐘，也就是這場講座的中間點，講者做了最重的批判：現狀（作業系統設計之研究）為何如此遠離真實硬體？\n\n人們根本就不知道現代硬體長什麼樣子：這是無知。\n人們停留在舒適圈裡面，專注於那些 Linux 本來就擅長的部分：這是否認現狀。\n\n作者之後語氣放緩，並開始提出一些建議的下一步作法，包含：\n\n寫系統以控制真實的 SoC。確實其中包含許多複雜的部分，但處理複雜、撰寫系統以降伏這些複雜度本來就是我們的天職。過程中講者也提出一篇他作為共同作者的論文：，從 2011 年至今也沒什麼改變。以結果來說，以 Linux 為大宗的作業系統就這樣被排擠，孤立在僅僅佔據 CPU/Memory 的一小塊角落裡面，且有越來越多作業系統看不見的東西（延伸資料：），進而導致整體性的問題。\n打造自己的電腦（計算機）吧！講者儼然是個系統軟體禪師，大聲詰問：你們理解現在的電腦硬體嗎？你們根本不懂！至少從 2011 那篇論文之後，現在要自己制定規格以打造工業級電腦簡單多了。講者自己就簡單秀了一下規格與照片，然後描述一般作業系統研究者比較少關注的部分：BMC，也就是主機板上的基本控制器，它負責溫度與電量之類的、貼近原生硬體且的關鍵控制。回頭審視 ccNUMA 的假設的侷限性，講者認為安全領域與計算機架構領域的研究者關心的問題其實都非常關鍵，所以作業系統領域這邊也應該跟上才對。\n\n結論也就理所當然了。硬體這些年來的變化非常巨大；工程界很多公司也關注到這個現象而開發了新的作業系統；其它子領域（反覆強調的兩個大宗：安全與架構）的關注項目需要作業系統研究者跟上。然而，這個社群（USENIX/OSDI）並不鼓勵類似的研究，大環境否認了有在 Linux 之外的其他大問題，並且對於真實硬體的樣貌呈現給軟體的現狀缺乏認知。不過也因此對於作業系統研究是嶄新的機會！\n\n真的應該要為新的硬體們構思新的作業系統架構\n現在的工具遠比以前好多了：新的正規方法、語言、新的硬體...\n\nHoddarla?\n在賽期中接觸到這個講座帶來莫大的鼓舞。從結論就可以看到，講者鼓勵新的語言和新的概念，然而遺憾的是，筆者至今接觸過的 RISC-V 機器，要不是相當簡單的平臺，再不然就是模擬器，並沒有真正進行新機器的探索。\n但是，講者在有頭有臉的研究單位裡面，又為居高職，他可以支配的資源量，才是支撐他作出這些乎告背後的靠山；現狀之所以如此，必有諸多原因，演化至今使然。\n至於未來，我認為若要待在能夠盈利的主流當中，還是只有 Linux 可以考慮；非 Linux 已經是離經叛道，遑論是非 POSIX 甚至排除 C 語言。所以認真說這個部分的未來事項的話，我將會開始研究最近成形的 RISC-V 進階中斷架構（Advanced Interrupt Architecture），這個新機制應該在兩三年後會普及並取代現今的 PLIC 做法，或許在許多硬體本身的控制器也轉為 RISC-V 的情況下，更有望支援類似於講者期望的那種作業系統也不一定。\n\n相較於前篇講座佳評連連，這系列文（共四篇）的評論卻是稍微的負面，其中甚至也有評論說，作者點出一大堆他自己都沒有深入了解的問題。為此，我本身也是沒有了解任何主題到足以稱之為深入的人，所以就在旁邊看看熱鬧。也許眾人的評論自有道理，作者非常稀疏地更新，從 2020 二月之後就沒有後續了，將系列文停留在架構構想階段。\n這個部落格中，作者只有部落格用的藝名 \"No Bugs\" Hare，行文是我行我素的美式口語幽默，完全不怕爭議處採他人痛點，與前一篇的講者在爭議處會放緩打預防針的做法完全不同。敢放話 No Bugs，對於技術當然是有一番見識的。\n描述過去五十年的硬體與軟體生態系進展，為之後的論述打地基。硬體部分的改進或差異至少有以下數點：\n\n效能，無需多說\n不同元件的效能改進不同，CPU/Memory 之間處理資料的速度越差越大\ncontext switch 變得相當昂貴\nNUMA\nInterrupt 的改進\n更深的 pipeline，分支預測等軟體看不到的 CPU 改良\n\n軟體部分，大多與工具的功能增強有關：\n\n靜態分析工具\n公共簽署的實務：增加使用者對軟體的來源的信心\n應用程式層有更好的「不分享任何東西（Shared-Nothing）、訊息傳遞（Message-Passing）」式的 API 在不同的語言框架中供使用。作者也引述了 Golang 的 Channel 設計背後的核心精神：Do not communicate by sharing memory; instead, share memory by communicating。\n非同步的程式設計框架。\n\n則是列舉作者希望能夠在現代作業系統中改良的八大項目：\n\n增加彈性：以佈署時的控制選項，取代現在主要是開發時或編譯時的控制選項。\n無論是低階的 MCU 或是高階 CPU，藉由一樣的作業系統介面，使得雙方可以共享應用程式與驅動程式，而非各自開發各自的。\n增加穩定度與可測試性，尤其是正式上線的生產環境的除錯經驗應有所提升。一例是，很多生產環境 crash 掉的問題根本很難解決，如果能夠有個監控機制，讓人們可以調度事發前一段時間的系統狀態，那顯然會更好。以我的認知，這當然現在很多工具能夠提供，但這裡是問，為何不能是作業系統提供的呢？\n內建容錯（Fault-tolerance）以及擴容（Scalibility）\n（需要安全性的情境）增加安全性。\n解決公共財的悲劇（參見），作者應是意指多租戶或多使用者情境下的系統利用狀態。\n驅動程式開發應當被簡化\n增加效能，且須分開考慮 HPC（高效能運算，通常 CPU 負責絕大部分任務）與互動式工作。\n\n我認為作者遭受到的批評多是，這些作者希望可以改進的面向，都有一些相對應的措施或工具，是作者沒有評估過的。這些批評本身有其道理，但顯然作者不僅僅是希望那些改進的做法存在，實際上他更希望的應該是在作業系統核心與應用程式之間重新設定邊界，否則無異於多出一個又一個的框架或是第三方函式庫。這些也有可能只是我自己內心想望的投射，但總之我是這麼解讀的。\n比之前篇更進一步，從想要的功能到基本的想法。如果當初這個系列持續下去，那麼這篇應該就是最基本的藍圖。比之前篇描述的每個改良都只是小段落的撰寫，本篇提出五個功能且都是較長的段落，我直接做結論的話不免有點破壞性壓縮，這裡先行致歉；但讀者諸君應該可以感受到那份動能：\n\n原生支援事件驅動（Event-driven）式的程式設計模式，且支援手持裝置、桌面系統與伺服器。事件驅動模式通常是透過程式語言、框架或是函式庫來支援，為了支援這樣的方法給應用程式層，其實費了很多工夫；之所以需要費工夫，是因為底層系統本質上是中斷驅動（Interrupt-driven）式的。作者認為，如果大部分的事件處理都可以很快解決，那事件驅動模式不是很顯然優於中斷驅動模式嗎？考量到多執行緒的切換與維護在現代作業系統之中是何等的高成本（原文是 heavy-weighted），作者的出發點如此。更到細節處，他認為應該以有限狀態機（Finite state machine）作為執行的單元，事實上，很多現代的嵌入式作業系統或是即時作業系統也有類似的設計；作者在這一點上想要主張，就算是給高階處理器運行的作業系統，也應往這個方向靠攏才對。以網頁伺服器效能為例，non-blockng 的 nginx 能夠優於 apache。\n既然所有東西都是 FSM，那麼系統在執行時的行為就會是可決定（deterministic）的。這有助於檢驗生產環境上的 crash 事件。理論上，一臺機器上記錄下來的 log，應該也要能夠在其他運行相同系統的機器上重現出來。理想上，這也可以簡化遷移（migration）的流程。\n作者企圖重定義作業系統：它不應該只指涉核心，而應該指涉相同的 API、可提供相同的應用程式與驅動程式運行、但允許配備不同的核心。我認為這就是原系列作者最會被現實阻攔的一個設計原則。有個例子是網頁伺服器閱覽自己的組態檔的需求，在 Unix-like 系統你必須有個 open 系統呼叫來與檔案系統互動，也許有某個應用程式層的 API read_conf 使用到 open，可是如果這個伺服器想要運行在沒有檔案系統的微小系統上，這個 read_conf 就不堪使用了：為何不是定一個作業系統 API read_conf？\nAPI 應該要分群，並且讓應用程式的設計者決定它需要用到哪些，於是就只使用那些就足夠。我的看法是，這點直接延伸第三點，完全從應用程式設計者的角度出發，並提出兼具「應用程式僅使用需要的 API」以及「高層級 API 允許底層作業系統核心的抽換」的解法。延續第三點的網頁伺服器案例，設計者就可以選擇使用 read_conf 與 sql_socket，而非限定 Unix-like kernel 的 open、read 與 socket API。\n這一點我不太能夠理解其中的精神旨趣，但作者倡議作業系統與程式語言的編譯器應該更緊密合作，以呼應第二篇當中援引現代程式語言的靜態分析工具的優勢。\n\n名為第一份草稿，比前篇更接近實際的設計，這裡就先跳過吧。\nHoddarla?\n我原本以為我是個反社會的恐怖主義者，但與作者 \"No Bugs\" Hare 相比，我根本是傳統價值的乖乖牌；以系列文相比，我單純以 Golang 這個語言，比照以往的作業系統，照顧貼近硬體的抽象層級，但這個 XXI 系列充滿了更多想像。原作者部落格下的留言大多不以為然、轉發至 Hacker News 之後眾人的評論也不太優；相較之下，Hoddarla 本身沒有獲得任何迴響，甚至不如驅車入巷時突然猛吠的狗那樣能夠引人一瞥。\n真的要說這個系列文給了我什麼除了技術發想之外的點子，我覺得最接近第一時間感受的是這篇文章：。\n這是 Stonemaier 設計師 Jamey 的文章，是指引有志於桌遊設計的人們的一系列心法中的一篇。一言以蔽之，**你以為你的點子聰穎無比，但要是沒做出東西來，什麼都不是：那些實踐的過程與結果，遠遠比你構想出一個神妙點子困難得多！**呃，當初乍看也是一把無明火，要是沒有點子，人們能夠作出什麼東西？但事實是，儘管夢想家比例佔全人類是少數，但總數實際上也是不少，實踐者與協調者總是會有好點子可以做。以結果來說，當然就是沒有被實現的夢想與不存在或是爛主意並無二致。\n甚至可以更極端的說，搞不好，實現率低的夢想家的價值更低也不一定。換個角度看比較容易理解，創業失敗的人受人景仰的程度，應該會遠大於一直在講自己要創業但什麼都沒做的人吧。這有點流於功利主義，但夢想的盡頭難道不是為這個世界帶來什麼更好的改變嗎？這不純然是結果論的，那些過程也是夢想兌現途中的一部分成果，重點是做，現在就做。這大概就是為什麼 Nike 品牌形象這個好的緣故。\n本來期待這個系列最後會引導到某個比 Hoddarla 的尷尬小 console 更高明的東西，但看到一個系列停止更新在 First draft，難免惆悵。\n永遠站在雞蛋的那一邊？\n很遺憾，無論如何，高牆是正確的。\n日前與同是晶心壯士的隊友  聊聊彼此在技術路上的夢想；知曉他的遠大夢想（這裡就不多泄漏他人祕密）之後，我追問：\n「既然如此，你在做鐵人賽或是這些其他的事情的時候，不會覺得自己還是太循規蹈矩了嗎？」\n「畢竟還是有很多要看要學習的事情，對我來說現在就是吸收養分的時候吧。」\n「理解...但對我來說這是一個很煎熬的震盪。每當我覺得安排自己走在正軌上，想要好好吸收養分的時候，不由得會覺得自己太乖了；反過來，像這整個 Hoddarla project 做一做，又會一直覺得該學的東西都還學不夠。」\n夢想、規劃、執行一年半、衝刺三五個月、沉澱、佳作、再沉澱、...我應該會選擇永遠讓 Hoddarla 停留在這個 0.1 的狀態，幾年內應該也不會再做作業系統專案的嘗試了。\n典範之所以是典範，就是因為它經過歲月風沙淘洗，仍然與人們共存、共生、共演化。人類在這裡面並不是唯一的主體或是宰制者，至多是有腦細胞的 player。看看 C 語言，看看 Linux，看看 Linux Foundation（！），這些概念從某些前輩（們）的腦中躍出之後，不只是一本本長灰塵的書，而是以電流為血、以概念為肉的巨大神物。\n要挑戰神獸？沒血沒魔沒裝沒天命，有何可戰？\n作業系統專案的嘗試 == 自幹作業系統？\n我的答案是否。這兩件事情應該區分開來看。先說第一件事，這比較接近 Hoddarla 或是 \"No Bugs\" Dare 想做的事情，這通常會被業界先進們歸類為經驗還不夠的那一群。\n我傾向於認同 Timothy 先生在講座中提到的（以及引用的 2011 年論文）那個角度，你們這些夢想家，想要挑戰甚至改動的作業系統原則那麼多，那你們光從軟體層做，真的夠嗎？一樣的硬體假設之下，會不會到頭來就算給你做起來，也不會和現在差太多？\n所以我覺得，反正之後 RISC-V 開源核心只會越來越多。應該把硬體的一些概念重新補回來，也許之後連同硬體層一起改，讓軟硬之間更能夠互補所需，應該會是更有趣的專案。這是從作業系統往下看去的角度。另一個角度是，Hoddarla 本身想要將 Golang 的執行期作為作業系統的一部分，但現在可以很直接地說，結果太醜陋了，沒有維護性。至少 Golang 直接套用，沒有可行性；若要維持在 Golang 裡面，至少要付出像是 TamaGo 專案那樣等級的心力才行，再不然就連程式語言也需要另外思考：語法簡潔、節省開發者認知資源、工具眾多...\n另外一件事情，關於自幹作業系統，我的認知上，不管是作業系統課堂或深或淺的作業，或是技術狂人們的實作，本質上是使用手邊的工具重現實務上使用的作業系統的一小部分。這不是我想要走的路，儘管過程中一定可以學到我現在缺乏的某些技術或知識，但是結果仍然只是玩具，而我不希望我做出來的東西只是玩具。\n\n話雖如此，光是這些駭客們能夠好好「自幹」並且做得出來的行為本身，就足以讓上述第一種人看起來像是逃避仔，關於這個看法我可以大方承認，對，我是想要逃避 C、POSIX、everything is a file、還有企鵝或是紅色惡魔。\n\n\n關於玩具，當然也是有倡導它的價值，但影響力是一回事，創業營利又是另外一回事。\n\n學習的面向或許是唯一一個創造玩具的好理由。如果直接讓學生潛入 Linux 或是任何大系統，並且要求他們在裡面找到痛點並修正，是的，聽起來需要很久的時間，而且如果學生的經驗都是 Input 而沒有 Output，效果不可能會好。如果是創造玩具的話，學習的認知上有進有出，可以預期這個方法的效果。\n打造玩具學習法有一大原因是它可以節省日後接觸真實系統需要的上手時間，而花在了解玩具的複雜度上也不會花太多時間；也就是說，教學者的心智模型是直接深潛至真實系統中所需的時間遠遠大於打造玩具過程中理解系統基本元件所需要的時間加上有過玩具經驗之後上手真實系統的學習時間。\n可是出了社會之後，我總覺得直接潛入真實世界也未必有什麼壞處。因為大部分人在就學時期連玩具都造不好甚至沒造過，工作之後能夠自由支配的時間更為稀缺，這時候再做玩具，對我來說毫無意義。\n以 Side project 作為鐵人賽系列文在奪獎上的劣勢\n最後聊聊這個劣勢。恭喜  大大獲得 Software Development 組冠軍。整個系列文的節奏分配，確實有登樓梯的感覺。除了程式碼的實例也通常夾帶重構心法，目標讀者群大，也易受益。\n反觀我過去的幾次嘗試大多非常自我中心。Side project 這種東西本來就只關乎自我成長，雖然 Hoddarla 是企圖讓 RISC-V 的一些面向透過實際操作的方式展露出來，也比我先前的幾次嘗試來得完整，但整體上對於學習來講還是略顯虛浮，沒有去蕪存菁的感覺。\n當然，如果是僅僅以參加為目的，那就沒有所謂的優勢劣勢。但是除了興趣型專案，我也沒有什麼獨到的領域型專門知識可以整理並以教學為目的分享成系列文的料，所以未來如果會參賽，核心應該也都還是這種形式吧。不求扭轉劣勢，但是還是可以考慮些策略。如果有爭獎打算，下次就回避 Modern Web 和 Software Development 這兩個一級戰區吧。\n給評審與主辦單位\n如果可以的話，是否能夠公佈評量的一些向度，與得獎的系列文在那些向度獲得的分數或評語？如此一來，不但未獲獎的多數技術人能夠有個目標，得獎者也相當於是獲得了回饋以增進自己傳遞知識的能力。\n由衷感謝！\n給讀者\n希望你不會因為我在這最末篇宣告 Hoddarla 1.0 永遠不會出現而感到閱讀這個系列是在浪費你的時間。\n理論上，大部分的 RISC-V S-mode CSR 我全部都有說明並使用，儘管不是很有系統，但卻是在 Hoddarla 這個系統建構的脈絡之下有邏輯地進行的，所以至少這個部分可以作為一點學習的參考；事實上，過去一個多月，我自己已經拿出來參考過幾次 PLIC。\nGolang 的系統面向則是非常偏門，也需要往復搭配我前年的系列才能夠比較清楚地閱讀。確實這個部分會非常難以入口吧，尤其是系統軟體圈多的是只知道 C 而不知道 Golang 的人們。\n絕大部分我都採取最生硬且最形式化的方式來表達在文章上面，確實是我刻意為之的結果，因為我一直認為這是表達對於讀者的尊重的方法。若實際上的成效相反，那只能說我對這個世界的誤會大得讓所有人都會遺憾。\n最後的結論以及本篇則是寬鬆之後的結果，更接近我日常行文的方式，讀來也許自溺，但我覺得這樣很有趣。我推薦讀者諸君也試著創作，我們可以在鐵人賽或是其他部落格相遇，更重要的是你自己也會在未來與先前寫作的自己重新相遇，那種經驗幾乎堪比接觸陌生人：舉例來說，我現在看自己先前的三個鐵人賽系列，我完全不認得那些筆調，精神與生命同等的隨著歲月遺失，留下來的則大部分是那些程式碼的概念與能夠讓我賴以為生的技術。\n感謝你們的閱讀，如果不是閱讀，這些文字與程式碼的存在毫無意義。\n請接受這過早的佳節祝福，也希望 2022 對所有人來說同樣是能夠帶來機會與成長的一年。",
        "content_code_info": [],
        "programming_languages": [
            "golang",
            "c"
        ],
        "word_seg_content_text": "佳作 之後\n承蒙 評審 給予 肯定 ， 最 直接 的 感謝 方式 就是 狗尾續貂 一番 。\n沈澱 了 一個多月 ， 我 時常 咀嚼 結語 中 故作 輕鬆 的 豪語 ：\n所以 ， 就 先抓\n2025\nQ4\n釋出\nHoddarla\n1.0\n版 吧 ！\n鐵人 賽畢 、 回歸 日常 之後 ， 就 像 鬆開 安全 鎖 之後 走下 大怒 神 或 雲霄飛車 座椅 的 感覺 ： 方才 的 經歷 在 每 一個 瞬間 都 帶來 極 深刻 的 感官 體驗 ， 但 又 已經 過去 ； 日後 是否 能 鼓起勇氣 重新 再 挑戰 ， 也 沒有 足夠 把握 。 但 ， 刺激 的 遊園 設施 經驗 所 能 類比 的 部份 ， 也 就 只 到 這裡 了 。\n先前 最後 的 規劃 ， 2025\nQ4 ？ 幾乎 像 時間 的 盡頭 。 但 若 時間 真正 到達 了 盡頭 ， 又 哪 需要 什麼 作業系統 、 哪 需要 什麼 典範 、 概念 、 工程 原則 、 破壞 或 創新 或 沿襲 ？ 有太多 矛盾 本身 隱式 地 存在 在 這個 專案 的 宣言 裡面 。\n要 完成\nside\nproject ， 人們 必須 能 從 最 原始 的 本能 之中 提取 足夠 的 能量 作為 核心 動力 ， 而後 才 能夠 啟動 ： 設定 目標 與 階段 、 一步步 完成 、 回顧 、 改善 、 再 前進 。 然而 若 這份 能量 突然 空乏 （ 也許 是 需 挪作 他途 、 也許 是 資源 耗竭 ？ ） ， 那 無論 進行 到 哪裏 ， 都 不會 有 達成 目標 的 可能 了 。\nHoddarla\n於 我 ， 是 過去 兩年 的 生命 本身 ； 然而 類似 向度 的 思考 （ 大部分 已 總結 在 一文 之中 ） ， 卻 已經 持續 了 很 久 ， 也 非 我 所 獨有 。\n但 如果 我 只是 繼續 沉吟 ， 這末 篇 將會 連狗尾 的 等級 也 沒有 ； 所以 ， 另外 引 了\n2\n則 來源 ， 希望 能夠 與 讀者 諸君 一同 品味 我將\nHoddarla\n1.0\n這個 目標 擱置 的 決定 。 也許 酐 醉 到 了 深處 的\nunderflow ， 是 恰到好處 的 醒覺 也 說不定 。\n這場 演講 來自 相當 開放 的 系統 架構 論壇\n今年 （ 2021 ） 的 技術 年會 （ 連動\nOSDI\n研討會 ） 的\nKey\nNote\n講座 。 精彩 的\nKey\nNote\n所 需 富含 的 領域 深度 與 洞見 ， 這場 講座 當然 不缺 ； 而論 啟 發性 與 娛樂性 ， 更是 這場 講座 為 人 津津樂道 之 處 （ 這 一兩個 月 ， 只要 是\n上 稍微 深入 的 作業系統 主題 ， 都 會 看到 人們 以 這場 講座 為 參照 延伸 討論 ） 。\n講者\nTimothy\nRoscoe\n是 一位 帶領\nETH\nZurich\n系統 部門 的 業界 先進 。 他 一 開場 ， 就 以 雞蛋 高牆 式 的 高 反差 手法 指出 ， OSDI\n這個 作業系統 領域 裡面 影響力 最高 的 一份 刊物 之中 ， 作業系統 本身 的 學術論文 僅是 少數 ； 而且 在 這些 論文 之中 ， 除了 以\nLinux\n為 實驗 平臺 之外 的 作業系統 研究 ， 已經 稀缺 到 一年 只有 一兩篇 的 程度 了 。\n於是 下 一個 問題 ， 思考 過 作業系統 與 相關 哲學 的 人 決不會 陌生 ， 那 就是 ， * * 作業系統 到底 是 什麼 ？ * * 又 ， * * 為 什麼 是\nLinux ？ * * 講者 給出 一個 很強 的 斷言 ， 我們 若 是 只 看到\nLinux\n在 作業系統 研究 領域 的 高 佔 比 ， 那 就是 見樹 不見 林 ； 實際上 ， 就算 是\nLinux\n之外 的 那些 作業系統 設計 與 研究 ， 也 與\nLinux\n共享 一項 硬體 假設 ：\nccNUMA\n架構 ， 也 就是 對 各個\nCPU\n叢集 來說 ， 記憶體 存取 有 遠近 親疏 之別 ， 但 同時 他們 互相 之間 的\ncache\n是 一致 的 （ coherent ） 。 於是 ， 就此 破題 。\n講者 列舉 了 一些 顯然 一點 都 不\nccNUMA\n的 系統 方塊圖 ， 幾乎 可以 說 ， Linux\n以及 其他 為\nccNUMA\n架構 而生 的 作業系統 ， 實際上 只是 控制 真實 硬體 的\nCPU\n與 部分 記憶體 而已 。 真實 的 其他 硬體 元件 因此 需要 自己 處理 這種 被 解離 的 情境 ， 它們 不過 是 作業系統 透過\ndriver\n去 稍微 接觸 的 邊疆 民 ； 有趣 的 是 ， 這也 催生 的 其他 領域 的 一些 研究 機會 ， 如 安全 領域 的\ncross - SoC\n研究 、 或是 各種 計算機 架構 的 研究 （ 對 他們 來說 ， 直接 改 架構 比 理解 如何 調整 軟體 層 的 東西 簡單 多 了 ） ， 因為 那些 領域 的 研究者 沒有 時間 使用\nLinux\n之外 的 作業系統 ， 所以 勢必 得 讓 周邊 硬體 元件 去 配合\nLinux\n存在 的 狀態 。\n講者 也 順便 抱怨 了 一下\nUSENIX / OSDI\n研討會 ， 因為 裡面 大部分 是 機器 學習 、 資料庫 領域 的 研究 ， 作業系統 領域 研究 反而 少 不打緊 ， 其它 子 領域 都 有 專屬 的 高品質 研討會 ， 就 只有 作業系統 沒有 ； 不僅如此 ， 如果 硬是 要 研究 作業系統 的話 ， 最好 都 選擇 在\nLinux\n上 進行 ； 如果 不是 ， 也 務必 讓 實驗\nOS\n盡量 像\nLinux （ 也 就是 運行 在\nccNUMA\n假設 之下 的 意思 ） 。\n31\n分鐘 ， 也 就是 這場 講座 的 中間 點 ， 講者 做 了 最重 的 批判 ： 現狀 （ 作業系統 設計 之 研究 ） 為何 如此 遠離 真實 硬體 ？\n人們 根本 就 不 知道 現代 硬 體長 什麼 樣子 ： 這是 無知 。\n人們 停留 在 舒適 圈裡面 ， 專注 於 那些\nLinux\n本來 就 擅長 的 部分 ： 這是 否認 現狀 。\n作者 之後 語氣 放緩 ， 並 開始 提出 一些 建議 的 下 一步 作法 ， 包含 ：\n寫 系統 以 控制 真實 的\nSoC 。 確實 其中 包含 許多 複雜 的 部分 ， 但 處理 複雜 、 撰寫 系統 以 降伏 這些 複雜度 本來 就是 我們 的 天職 。 過程 中 講者 也 提出 一篇 他作 為 共同 作者 的 論文 ： ， 從\n2011\n年 至今 也 沒什麼 改變 。 以 結果 來說 ， 以\nLinux\n為 大宗 的 作業系統 就 這樣 被 排擠 ， 孤立 在 僅僅 佔據\nCPU / Memory\n的 一小塊 角落 裡面 ， 且 有 越來越 多 作業系統 看不見 的 東西 （ 延伸 資料 ： ） ， 進而 導致 整體性 的 問題 。\n打造 自己 的 電腦 （ 計算機 ） 吧 ！ 講者 儼然 是 個 系統 軟體 禪師 ， 大聲 詰問 ： 你們 理解 現在 的 電腦 硬體 嗎 ？ 你們 根本 不 懂 ！ 至少 從\n2011\n那篇 論文 之後 ， 現在 要 自己 制定 規格 以 打造 工業 級 電腦 簡單 多 了 。 講者 自己 就 簡單 秀 了 一下 規格 與 照片 ， 然後 描述 一般 作業系統 研究者 比較 少 關注 的 部分 ： BMC ， 也 就是 主機板 上 的 基本 控制器 ， 它 負責 溫度 與 電量 之類 的 、 貼近 原生 硬體 且 的 關鍵 控制 。 回頭 審視\nccNUMA\n的 假設 的 侷限性 ， 講者 認為 安全 領域 與 計算機 架構 領域 的 研究者 關心 的 問題 其實 都 非常 關鍵 ， 所以 作業系統 領域 這邊 也 應該 跟上 才 對 。\n結論 也 就 理所當然 了 。 硬體 這些年來 的 變化 非常 巨大 ； 工程界 很多 公司 也 關注 到 這個 現象 而 開發 了 新 的 作業系統 ； 其它 子 領域 （ 反覆強調 的 兩個 大宗 ： 安全 與 架構 ） 的 關注 項目 需要 作業系統 研究者 跟上 。 然而 ， 這個 社群 （ USENIX / OSDI ） 並不 鼓勵 類似 的 研究 ， 大 環境 否認 了 有 在\nLinux\n之外 的 其他 大 問題 ， 並且 對於 真實 硬體 的 樣貌 呈現 給 軟體 的 現狀 缺乏 認知 。 不過 也 因此 對於 作業系統 研究 是 嶄新 的 機會 ！\n真的 應該 要 為 新 的 硬體 們 構思 新 的 作業系統 架構\n現在 的 工具 遠比 以前 好多 了 ： 新 的 正規方法 、 語言 、 新 的 硬體 ...\nHoddarla ?\n在 賽期 中 接觸 到 這個 講座 帶來 莫大 的 鼓舞 。 從 結論 就 可以 看到 ， 講者 鼓勵 新 的 語言 和 新 的 概念 ， 然而 遺憾 的 是 ， 筆者 至今 接觸 過的\nRISC - V\n機器 ， 要不是 相當 簡單 的 平臺 ， 再不然 就是 模擬器 ， 並 沒有 真正 進行 新 機器 的 探索 。\n但是 ， 講者 在 有頭有臉 的 研究 單位 裡面 ， 又 為 居 高職 ， 他 可以 支配 的 資源量 ， 才 是 支撐 他 作出 這些 乎 告 背後 的 靠山 ； 現狀 之所以 如此 ， 必有 諸多 原因 ， 演化 至今 使然 。\n至於 未來 ， 我 認為 若 要 待 在 能夠 盈利 的 主流 當中 ， 還是 只有\nLinux\n可以 考慮 ； 非\nLinux\n已經 是 離經叛道 ， 遑論 是非\nPOSIX\n甚至 排除\nC\n語言 。 所以 認真 說 這個 部分 的 未來 事項 的話 ， 我 將會 開始 研究 最近 成形 的\nRISC - V\n進階 中斷 架構 （ Advanced\nInterrupt\nArchitecture ） ， 這個 新機制 應該 在 兩三年 後 會 普及 並 取代 現今 的\nPLIC\n做法 ， 或許 在 許多 硬體 本身 的 控制器 也 轉為\nRISC - V\n的 情況 下 ， 更 有望 支援 類似 於 講者 期望 的 那種 作業系統 也 不 一定 。\n相較 於 前 篇 講座 佳評 連連 ， 這 系列 文 （ 共 四篇 ） 的 評論 卻是 稍微 的 負面 ， 其中 甚至 也 有評 論說 ， 作者 點出 一大堆 他 自己 都 沒有 深入 了解 的 問題 。 為 此 ， 我 本身 也 是 沒有 了解 任何 主題 到 足以 稱之為 深入 的 人 ， 所以 就 在 旁邊 看看 熱鬧 。 也許 眾人 的 評論 自有 道理 ， 作者 非常 稀疏地 更新 ， 從\n2020\n二月 之後 就 沒有 後續 了 ， 將 系列 文 停留 在 架構 構想 階段 。\n這個 部落 格中 ， 作者 只有 部落 格用 的 藝名\n\" No\nBugs \"\nHare ， 行文 是 我行我素 的 美式 口語 幽默 ， 完全 不怕 爭議 處採 他人 痛點 ， 與 前 一篇 的 講者 在 爭議 處會 放緩 打預防針 的 做法 完全 不同 。 敢 放話\nNo\nBugs ， 對於 技術 當然 是 有 一番 見識 的 。\n描述 過去 五十年 的 硬體 與 軟體 生態系 進展 ， 為 之後 的 論述 打 地基 。 硬體 部分 的 改進 或 差異 至少 有 以下 數點 ：\n效能 ， 無需多說\n不同 元件 的 效能 改進 不同 ， CPU / Memory\n之間 處理 資料 的 速度 越差 越大\ncontext\nswitch\n變得 相當 昂貴\nNUMA\nInterrupt\n的 改進\n更深 的\npipeline ， 分支 預測 等 軟體 看不到 的\nCPU\n改良\n軟體 部分 ， 大多 與 工具 的 功能 增強 有關 ：\n靜態 分析 工具\n公共 簽署 的 實務 ： 增加 使用者 對 軟體 的 來源 的 信心\n應用程式 層有 更好 的 「 不 分享 任何 東西 （ Shared - Nothing ） 、 訊息 傳遞 （ Message - Passing ） 」 式 的\nAPI\n在 不同 的 語言 框架 中供 使用 。 作者 也 引述 了\nGolang\n的\nChannel\n設計 背後 的 核心 精神 ： Do\nnot\ncommunicate\nby\nsharing\nmemory ;\ninstead ,\nshare\nmemory\nby\ncommunicating 。\n非 同步 的 程式設計 框架 。\n則是 列舉 作者 希望 能夠 在 現代 作業系統 中 改良 的 八大 項目 ：\n增加 彈性 ： 以 佈署 時 的 控制 選項 ， 取代 現在 主要 是 開發 時 或 編譯 時 的 控制 選項 。\n無論是 低階 的\nMCU\n或是 高階\nCPU ， 藉由 一樣 的 作業系統 介面 ， 使得 雙方 可以 共享 應用程式 與 驅動程式 ， 而 非 各自 開發 各自 的 。\n增加 穩定度 與 可 測試 性 ， 尤其 是 正式 上線 的 生產 環境 的 除錯 經驗 應 有所 提升 。 一例 是 ， 很多 生產 環境\ncrash\n掉 的 問題 根本 很 難解 決 ， 如果 能夠 有個 監控 機制 ， 讓 人們 可以 調度 事發 前 一段時間 的 系統 狀態 ， 那 顯然 會 更好 。 以 我 的 認知 ， 這 當然 現在 很多 工具 能夠 提供 ， 但 這裡 是問 ， 為何 不能 是 作業系統 提供 的 呢 ？\n內 建 容錯 （ Fault - tolerance ） 以及 擴容 （ Scalibility ）\n（ 需要 安全性 的 情境 ） 增加 安全性 。\n解決 公共 財的 悲劇 （ 參見 ） ， 作者 應是 意指 多 租戶 或 多 使用者 情境 下 的 系統 利用 狀態 。\n驅動程式 開發 應當 被 簡化\n增加 效能 ， 且須 分開 考慮\nHPC （ 高效能 運算 ， 通常\nCPU\n負責 絕大部分 任務 ） 與 互動式 工作 。\n我 認為 作者 遭受 到 的 批評 多 是 ， 這些 作者 希望 可以 改進 的 面向 ， 都 有 一些 相對 應 的 措施 或 工具 ， 是 作者 沒有 評估 過的 。 這些 批評 本身 有 其 道理 ， 但 顯然 作者 不僅僅 是 希望 那些 改進 的 做法 存在 ， 實際上 他 更 希望 的 應該 是 在 作業系統 核心 與 應用程式 之間 重新 設定 邊界 ， 否則 無異於 多出 一個 又 一個 的 框架 或是 第三方 函式 庫 。 這些 也 有 可能 只是 我 自己 內心 想望 的 投射 ， 但 總之 我 是 這麼 解讀 的 。\n比 之前 篇 更進一步 ， 從 想要 的 功能 到 基本 的 想法 。 如果 當初 這個 系列 持續 下去 ， 那麼 這篇 應該 就是 最 基本 的 藍圖 。 比 之前 篇 描述 的 每個 改良 都 只是 小 段落 的 撰寫 ， 本篇 提出 五個 功能 且 都 是 較 長 的 段落 ， 我 直接 做 結論 的話 不免 有點 破壞性 壓縮 ， 這裡 先行 致歉 ； 但 讀者 諸君 應該 可以 感受 到 那份 動能 ：\n原生 支援 事件驅動 （ Event - driven ） 式 的 程式設計 模式 ， 且 支援 手持 裝置 、 桌面 系統 與 伺服器 。 事件驅動 模式 通常 是 透過 程式 語言 、 框架 或是 函式 庫來 支援 ， 為 了 支援 這樣 的 方法 給 應用程式 層 ， 其實 費了 很多 工夫 ； 之所以 需要 費工夫 ， 是 因為 底層 系統 本質 上 是 中斷 驅動 （ Interrupt - driven ） 式 的 。 作者 認為 ， 如果 大部分 的 事件處理 都 可以 很快 解決 ， 那 事件驅動 模式 不是 很 顯然 優於 中斷 驅動 模式 嗎 ？ 考量 到 多 執行 緒 的 切換 與 維護 在 現代 作業系統 之中 是 何等 的 高 成本 （ 原文 是\nheavy - weighted ） ， 作者 的 出發點 如此 。 更到 細節 處 ， 他 認為 應該 以 有限 狀態機 （ Finite\nstate\nmachine ） 作為 執行 的 單元 ， 事實上 ， 很多 現代 的 嵌入式 作業系統 或是 即時 作業系統 也 有 類似 的 設計 ； 作者 在 這 一點 上 想要 主張 ， 就算 是給 高階 處理器 運行 的 作業系統 ， 也 應往 這個 方向 靠攏 才 對 。 以 網頁 伺服器 效能 為例 ， non - blockng\n的\nnginx\n能夠 優於\napache 。\n既然 所有 東西 都 是\nFSM ， 那麼 系統 在 執行 時 的 行為 就 會 是 可 決定 （ deterministic ） 的 。 這 有助於 檢驗 生產 環境 上 的\ncrash\n事件 。 理論 上 ， 一臺 機器 上 記錄下來 的\nlog ， 應該 也 要 能夠 在 其他 運行 相同 系統 的 機器 上 重現 出來 。 理想 上 ， 這也 可以 簡化 遷移 （ migration ） 的 流程 。\n作者 企圖 重 定義 作業系統 ： 它 不 應該 只 指涉 核心 ， 而 應該 指涉 相同 的\nAPI 、 可 提供 相同 的 應用程式 與 驅動程式 運行 、 但 允許 配備 不同 的 核心 。 我 認為 這 就是 原 系列 作者 最會 被 現實 阻攔 的 一個 設計 原則 。 有 個例 子 是 網頁 伺服器 閱覽 自己 的 組態 檔 的 需求 ， 在\nUnix - like\n系統 你 必須 有個\nopen\n系統 呼叫 來 與 檔案 系統 互動 ， 也許 有 某個 應用程式 層 的\nAPI\nread _ conf\n使用 到\nopen ， 可是 如果 這個 伺服器 想要 運行 在 沒有 檔案 系統 的 微小 系統 上 ， 這個\nread _ conf\n就 不堪 使用 了 ： 為 何不 是 定 一個 作業系統\nAPI\nread _ conf ？\nAPI\n應該 要 分群 ， 並且 讓 應用程式 的 設計者 決定 它 需要 用到 哪些 ， 於是 就 只 使用 那些 就 足夠 。 我 的 看法 是 ， 這點 直接 延伸 第三點 ， 完全 從 應用程式 設計者 的 角度 出發 ， 並 提出 兼具 「 應用程式 僅 使用 需要 的\nAPI 」 以及 「 高層 級\nAPI\n允許 底層 作業系統 核心 的 抽換 」 的 解法 。 延續 第三點 的 網頁 伺服器 案例 ， 設計者 就 可以 選擇 使用\nread _ conf\n與\nsql _ socket ， 而 非 限定\nUnix - like\nkernel\n的\nopen 、 read\n與\nsocket\nAPI 。\n這 一點 我 不 太 能夠 理解 其中 的 精神 旨趣 ， 但 作者 倡議 作業系統 與 程式 語言 的 編譯器 應該 更 緊密 合作 ， 以 呼應 第二篇 當中 援引 現代 程式 語言 的 靜態 分析 工具 的 優勢 。\n名為 第一份 草稿 ， 比前 篇 更 接近 實際 的 設計 ， 這裡 就 先 跳過 吧 。\nHoddarla ?\n我 原本 以為 我 是 個 反 社會 的 恐怖主義 者 ， 但 與 作者\n\" No\nBugs \"\nHare\n相比 ， 我 根本 是 傳統 價值 的 乖乖 牌 ； 以 系列 文 相比 ， 我 單純 以\nGolang\n這個 語言 ， 比照 以往 的 作業系統 ， 照顧 貼近 硬體 的 抽象 層級 ， 但 這個\nXXI\n系列 充滿 了 更 多 想像 。 原作者 部落 格下 的 留言 大多 不以 為然 、 轉發 至\nHacker\nNews\n之後 眾人 的 評論 也 不太優 ； 相 較 之下 ， Hoddarla\n本身 沒有 獲得 任何 迴響 ， 甚至 不如 驅車 入巷 時 突然 猛吠 的 狗 那樣 能夠 引 人 一瞥 。\n真的 要說 這個 系列 文給 了 我 什麼 除了 技術 發想 之外 的 點子 ， 我 覺得 最 接近 第一 時間 感受 的 是 這 篇文章 ： 。\n這是\nStonemaier\n設計師\nJamey\n的 文章 ， 是 指引 有志於 桌遊 設計 的 人們 的 一系列 心法 中 的 一篇 。 一言以蔽之 ， * * 你 以 為 你 的 點子 聰穎 無比 ， 但 要是 沒 做出 東西 來 ， 什麼 都 不是 ： 那些 實踐 的 過程 與 結果 ， 遠遠 比 你 構想 出 一個 神妙 點子 困難 得 多 ！ * * 呃 ， 當初 乍看 也 是 一把 無明火 ， 要是 沒有 點子 ， 人們 能夠 作出 什麼 東西 ？ 但 事實 是 ， 儘管 夢想家 比例 佔 全人類 是 少數 ， 但 總數 實際上 也 是 不少 ， 實踐者 與 協調者 總是 會 有 好 點子 可以 做 。 以 結果 來說 ， 當然 就是 沒有 被 實現 的 夢想 與 不 存在 或是 爛 主意 並無二致 。\n甚至 可以 更 極端 的 說 ， 搞不好 ， 實現 率低 的 夢想家 的 價值 更 低 也 不 一定 。 換個 角度看 比較 容易 理解 ， 創業 失敗 的 人 受 人 景仰 的 程度 ， 應該 會 遠大於 一直 在講 自己 要 創業 但 什麼 都 沒 做 的 人 吧 。 這 有點 流於 功利主義 ， 但 夢想 的 盡頭 難道 不是 為 這個 世界 帶來 什麼 更好 的 改變 嗎 ？ 這不 純然 是 結果 論 的 ， 那些 過程 也 是 夢想 兌現 途中 的 一部分 成果 ， 重點 是 做 ， 現在 就 做 。 這 大概 就是 為 什麼\nNike\n品牌形象 這個 好 的 緣故 。\n本來 期待 這個 系列 最後 會 引導 到 某個 比\nHoddarla\n的 尷尬 小\nconsole\n更 高明 的 東西 ， 但 看到 一個系列 停止 更新 在\nFirst\ndraft ， 難免 惆悵 。\n永遠 站 在 雞蛋 的 那 一邊 ？\n很 遺憾 ， 無論如何 ， 高牆 是 正確 的 。\n日前 與 同 是 晶心 壯士 的 隊友\n聊聊 彼此 在 技術 路上 的 夢想 ； 知曉 他 的 遠大 夢想 （ 這裡 就 不 多 泄漏 他人 祕密 ） 之後 ， 我 追問 ：\n「 既然如此 ， 你 在 做 鐵人 賽 或是 這些 其他 的 事情 的 時候 ， 不會 覺得 自己 還是 太 循規蹈矩 了 嗎 ？ 」\n「 畢竟 還是 有 很多 要 看 要 學習 的 事情 ， 對 我 來說 現在 就是 吸收 養分 的 時候 吧 。 」\n「 理解 ... 但 對 我 來說 這是 一個 很 煎熬 的 震盪 。 每當 我 覺得 安排 自己 走 在 正軌 上 ， 想要 好好 吸收 養分 的 時候 ， 不由得 會 覺得 自己 太乖 了 ； 反過來 ， 像 這 整個\nHoddarla\nproject\n做 一 做 ， 又 會 一直 覺得 該學 的 東西 都 還學 不夠 。 」\n夢想 、 規劃 、 執行 一年 半 、 衝刺 三五個 月 、 沉澱 、 佳作 、 再 沉澱 、 ... 我 應該 會 選擇 永遠 讓\nHoddarla\n停留 在 這個\n0.1\n的 狀態 ， 幾年 內 應該 也 不會 再 做 作業系統 專案 的 嘗試 了 。\n典範 之所以 是 典範 ， 就是 因為 它 經過 歲月 風沙 淘洗 ， 仍然 與 人們 共存 、 共生 、 共 演化 。 人類 在 這裡 面並 不是 唯一 的 主體 或是 宰制 者 ， 至多是 有 腦細胞 的\nplayer 。 看看\nC\n語言 ， 看看\nLinux ， 看看\nLinux\nFoundation （ ！ ） ， 這些 概念 從 某些 前輩 （ 們 ） 的 腦中 躍出 之後 ， 不 只是 一本 本長 灰塵 的 書 ， 而是 以 電流 為 血 、 以 概念 為 肉 的 巨大 神物 。\n要 挑戰 神獸 ？ 沒血 沒 魔 沒裝 沒 天命 ， 有何 可戰 ？\n作業系統 專案 的 嘗試\n= =\n自幹 作業系統 ？\n我 的 答案 是否 。 這 兩件 事情 應該 區分 開 來看 。 先說 第一件 事 ， 這 比較 接近\nHoddarla\n或是\n\" No\nBugs \"\nDare\n想 做 的 事情 ， 這 通常 會 被 業界 先進 們 歸類 為 經驗 還 不夠 的 那 一群 。\n我 傾向 於 認同\nTimothy\n先生 在 講座 中 提到 的 （ 以及 引用 的\n2011\n年 論文 ） 那個 角度 ， 你們 這些 夢想家 ， 想要 挑戰 甚至 改動 的 作業系統 原則 那麼 多 ， 那 你們 光 從 軟體 層 做 ， 真的 夠嗎 ？ 一樣 的 硬體 假設 之下 ， 會 不會 到頭來 就算 給你 做 起來 ， 也 不會 和 現在 差太多 ？\n所以 我 覺得 ， 反正 之後\nRISC - V\n開源 核心 只會 越來越 多 。 應該 把 硬體 的 一些 概念 重新 補 回來 ， 也許 之後 連同 硬 體層 一起 改 ， 讓 軟硬 之間 更 能夠 互補 所 需 ， 應該 會 是 更 有趣 的 專案 。 這 是從 作業系統 往下 看 去 的 角度 。 另 一個 角度 是 ， Hoddarla\n本身 想要 將\nGolang\n的 執行期 作為 作業系統 的 一部分 ， 但 現在 可以 很 直接 地說 ， 結果 太 醜陋 了 ， 沒有 維護性 。 至少\nGolang\n直接 套用 ， 沒有 可行性 ； 若 要 維持 在\nGolang\n裡面 ， 至少 要 付出 像是\nTamaGo\n專案 那樣 等級 的 心力 才行 ， 再不然 就連 程式 語言 也 需要 另外 思考 ： 語法 簡潔 、 節省 開發者 認知 資源 、 工具 眾多 ...\n另外 一件 事情 ， 關於 自幹 作業系統 ， 我 的 認知 上 ， 不管 是 作業系統 課堂 或 深 或 淺 的 作業 ， 或是 技術 狂 人們 的 實作 ， 本質 上 是 使用 手邊 的 工具 重現 實務 上 使用 的 作業系統 的 一小部分 。 這 不是 我 想要 走 的 路 ， 儘管 過程 中 一定 可以 學到 我 現在 缺乏 的 某些 技術 或 知識 ， 但是 結果 仍然 只是 玩具 ， 而 我 不 希望 我 做 出來 的 東西 只是 玩具 。\n話雖如此 ， 光是 這些 駭客 們 能夠 好好 「 自幹 」 並且 做 得 出來 的 行為 本身 ， 就 足以 讓 上述 第一種 人 看起來 像是 逃避 仔 ， 關於 這個 看法 我 可以 大方 承認 ， 對 ， 我 是 想要 逃避\nC 、 POSIX 、 everything\nis\na\nfile 、 還有 企鵝 或是 紅色 惡魔 。\n關於 玩具 ， 當然 也 是 有 倡導 它 的 價值 ， 但 影響力 是 一 回事 ， 創業 營利 又 是 另外 一 回事 。\n學習 的 面向 或許 是 唯一 一個 創造 玩具 的 好 理由 。 如果 直接 讓 學生 潛入\nLinux\n或是 任何 大 系統 ， 並且 要求 他們 在 裡面 找到 痛點 並 修正 ， 是 的 ， 聽 起來 需要 很久 的 時間 ， 而且 如果 學生 的 經驗 都 是\nInput\n而 沒有\nOutput ， 效果 不 可能 會 好 。 如果 是 創造 玩具 的話 ， 學習 的 認知 上 有進有出 ， 可以 預期 這個 方法 的 效果 。\n打造 玩具 學習 法有 一大 原因 是 它 可以 節省 日後 接觸 真實 系統 需要 的 上 手 時間 ， 而花 在 了解 玩具 的 複雜度 上 也 不會 花太多 時間 ； 也就是說 ， 教學 者 的 心智 模型 是 直接 深潛 至 真實 系統 中所 需 的 時間 遠遠 大於 打造 玩具 過程 中 理解 系統 基本 元件 所 需要 的 時間 加上 有過 玩具 經驗 之後 上 手 真實 系統 的 學習 時間 。\n可是 出 了 社會 之後 ， 我 總覺 得 直接 潛入 真實世界 也 未必 有 什麼 壞處 。 因為 大部分 人 在 就學 時期 連 玩具 都造 不好 甚至 沒造過 ， 工作 之後 能夠 自由支配 的 時間 更為 稀缺 ， 這時候 再 做 玩具 ， 對 我 來說 毫無意義 。\n以\nSide\nproject\n作為 鐵人 賽 系列 文在 奪獎 上 的 劣勢\n最後 聊聊 這個 劣勢 。 恭喜\n大大 獲得\nSoftware\nDevelopment\n組 冠軍 。 整個 系列 文 的 節奏 分配 ， 確實 有 登 樓梯 的 感覺 。 除了 程式碼 的 實例 也 通常 夾帶 重構 心法 ， 目標 讀者 群大 ， 也 易 受益 。\n反觀 我 過去 的 幾次 嘗試 大多 非常 自我中心 。 Side\nproject\n這種 東西 本來 就 只 關乎 自我 成長 ， 雖然\nHoddarla\n是 企圖 讓\nRISC - V\n的 一些 面向 透過 實際操作 的 方式 展露出來 ， 也 比 我 先前 的 幾次 嘗試 來得 完整 ， 但 整體 上 對於 學習 來講 還是 略顯 虛浮 ， 沒有 去蕪存菁 的 感覺 。\n當然 ， 如果 是 僅僅 以 參加 為 目的 ， 那 就 沒有 所謂 的 優勢 劣勢 。 但是 除了 興趣 型 專案 ， 我 也 沒有 什麼 獨到 的 領域 型 專門知識 可以 整理 並 以 教學 為 目的 分享 成 系列 文的料 ， 所以 未來 如果 會 參賽 ， 核心 應該 也 都 還是 這種 形式 吧 。 不 求 扭轉 劣勢 ， 但是 還是 可以 考慮 些 策略 。 如果 有 爭獎 打算 ， 下次 就 回避\nModern\nWeb\n和\nSoftware\nDevelopment\n這 兩個 一級 戰區 吧 。\n給 評審 與 主辦單位\n如果 可以 的話 ， 是否 能夠 公佈 評量 的 一些 向度 ， 與 得獎 的 系列 文在 那些 向度 獲得 的 分數 或 評語 ？ 如此一來 ， 不但 未獲獎 的 多數 技術 人 能夠 有個 目標 ， 得獎者 也 相當於 是 獲得 了 回饋 以 增進 自己 傳遞 知識 的 能力 。\n由衷感謝 ！\n給 讀者\n希望 你 不會 因為 我 在 這 最末 篇 宣告\nHoddarla\n1.0\n永遠 不會 出現 而 感到 閱讀 這個 系列 是 在 浪費 你 的 時間 。\n理論 上 ， 大部分 的\nRISC - V\nS - mode\nCSR\n我 全部 都 有 說明 並 使用 ， 儘管 不是 很 有 系統 ， 但 卻是 在\nHoddarla\n這個 系統 建構 的 脈絡 之下 有 邏輯 地 進行 的 ， 所以 至少 這個 部分 可以 作為 一點 學習 的 參考 ； 事實上 ， 過去 一個多月 ， 我 自己 已經 拿 出來 參考 過 幾次\nPLIC 。\nGolang\n的 系統 面向 則是 非常 偏門 ， 也 需要 往復 搭配 我 前年 的 系列 才 能夠 比較清楚 地 閱讀 。 確實 這個 部分 會 非常 難以 入口 吧 ， 尤其 是 系統 軟體 圈多 的 是 只 知道\nC\n而 不 知道\nGolang\n的 人們 。\n絕大部分 我 都 採取 最 生硬 且 最 形式化 的 方式 來 表達 在 文章 上面 ， 確實 是 我 刻意 為 之 的 結果 ， 因為 我 一直 認為 這是 表達 對於 讀者 的 尊重 的 方法 。 若 實際上 的 成效 相反 ， 那 只能 說 我 對 這個 世界 的 誤會 大得 讓 所有人 都 會 遺憾 。\n最後 的 結論 以及 本篇 則是 寬鬆 之後 的 結果 ， 更 接近 我 日常 行文 的 方式 ， 讀來 也許 自溺 ， 但 我 覺得 這樣 很 有趣 。 我 推薦 讀者 諸君 也 試著 創作 ， 我們 可以 在 鐵人 賽 或是 其他 部落 格 相遇 ， 更 重要 的 是 你 自己 也 會 在 未來 與 先前 寫作 的 自己 重新 相遇 ， 那種 經驗 幾乎 堪比 接觸 陌生人 ： 舉例來說 ， 我 現在 看 自己 先前 的 三個 鐵人 賽 系列 ， 我 完全 不 認得 那些 筆調 ， 精神 與 生命 同等 的 隨著 歲月 遺失 ， 留下來 的則 大部分 是 那些 程式碼 的 概念 與 能夠 讓 我 賴以 為生 的 技術 。\n感謝 你們 的 閱讀 ， 如果 不是 閱讀 ， 這些 文字 與 程式碼 的 存在 毫無意義 。\n請 接受 這 過早 的 佳節 祝福 ， 也 希望\n2022\n對 所有人 來說 同樣 是 能夠 帶來 機會 與 成長 的 一年 。",
        "word_seg_processed_content_text": "佳作\n承蒙 評審 給予 肯定 感謝 方式 狗尾續貂 一番\n沈澱 一個多月 時常 咀嚼 結語 中 故作 輕鬆 豪語\n先抓\n2025\nq4\n釋出\nhoddarla\n1.0\n版\n鐵人 賽畢 回歸 日常 鬆開 鎖 走下 大怒 神 雲霄飛車 座椅 感覺 方才 經歷 瞬間 帶來 極 深刻 感官 體驗 日後 鼓起勇氣 挑戰 足夠 把握 刺激 遊園 設施 經驗 類比 部份\n先前 規劃 2025\nq4 時間 盡頭 時間 到達 盡頭 作業系統 典範 概念 工程 原則 破壞 創新 沿襲 有太多 矛盾 本身 隱式 專案 宣言\n\nside\nproject 原始 本能 之中 提取 足夠 能量 核心 動力 而後 才 啟動 設定 目標 階段 一步步 回顧 改善 這份 能量 空乏 也許 需 挪作 他途 也許 資源 耗竭 哪裏 達成 目標\nhoddarla\n兩年 生命 本身 類似 向度 思考 大部分 一文 之中 持續 久 非 獨有\n沉吟 這末 篇 將會 連狗尾 等級 引\n2\n來源 希望 讀者 諸君 一同 品味 我將\nhoddarla\n1.0\n目標 擱置 也許 酐 醉 深處\nunderflow 恰到好處 醒覺 說不定\n這場 演講 來自 開放 系統 架構 論壇\n2021 技術 年會 連動\nosdi\n研討會\nkey\nnote\n講座 精彩\nkey\nnote\n需 富含 領域 深度 洞見 這場 講座 不缺 而論 啟 發性 娛樂性 更是 這場 講座 津津樂道 處 一兩個 月\n稍微 作業系統 主題 會 這場 講座 參照 延伸 討論\n講者\ntimothy\nroscoe\n一位 帶領\neth\nzurich\n系統 部門 業界 先進 開場 雞蛋 高牆 式 高 反差 手法 指出 osdi\n作業系統 領域 影響力 一份 刊物 之中 作業系統 本身 學術論文 僅是 論文 之中\nlinux\n實驗 平臺 之外 作業系統 研究 稀缺 一年 一兩篇 程度\n思考 作業系統 相關 哲學 決不會 陌生 作業系統 到底\nlinux 講者 給出 很強 斷言\nlinux\n作業系統 研究 領域 高 佔 見樹 不見 林 實際上 就算\nlinux\n之外 作業系統 設計 研究\nlinux\n共享 一項 硬體 假設\nccnuma\n架構\ncpu\n叢集 來說 記憶體 存取 遠近 親疏 之別 之間\ncache\ncoherent 就此 破題\n講者 列舉 一點\nccnuma\n系統 方塊圖 說 linux\n\nccnuma\n架構 而生 作業系統 實際上 控制 真實 硬體\ncpu\n記憶體 真實 硬體 元件 解離 情境 作業系統 透過\ndriver\n稍微 接觸 邊疆 民 有趣 這也 催生 領域 研究 機會 領域\ncross soc\n研究 計算機 架構 研究 來說 改 架構 理解 調整 軟體 層 東西 簡單 領域 研究者 時間\nlinux\n之外 作業系統 勢必 周邊 硬體 元件 配合\nlinux\n狀態\n講者 順便 抱怨\nusenix osdi\n研討會 大部分 機器 學習 資料庫 領域 研究 作業系統 領域 研究 反而 少 不打緊 子 領域 專屬 高品質 研討會 作業系統 不僅如此 硬是 研究 作業系統 選擇\nlinux\n務必 實驗\nos\n盡量\nlinux 運行\nccnuma\n假設 之下\n31\n分鐘 這場 講座 點 講者 做 最重 批判 現狀 作業系統 設計 研究 遠離 真實 硬體\n硬 體長 樣子 這是 無知\n停留 舒適 圈裡面 專注\nlinux\n本來 擅長 這是 否認 現狀\n作者 語氣 放緩 提出 建議 一步 作法 包含\n寫 系統 控制 真實\nsoc 確實 包含 撰寫 系統 降伏 複雜度 本來 天職 過程 中 講者 提出 一篇 他作 作者 論文\n2011\n年 至今 沒什麼 改變 來說\nlinux\n大宗 作業系統 排擠 孤立 僅僅 佔據\ncpu memory\n一小塊 角落 越來越 作業系統 看不見 東西 延伸 資料 導致 整體性\n打造 電腦 計算機 講者 儼然 系統 軟體 禪師 大聲 詰問 理解 電腦 硬體 懂 至少\n2011\n那篇 論文 制定 規格 打造 工業 級 電腦 簡單 講者 簡單 秀 規格 照片 描述 作業系統 研究者 少 關注 bmc 主機板 控制器 負責 溫度 電量 貼近 原生 硬體 關鍵 控制 回頭 審視\nccnuma\n假設 侷限性 講者 領域 計算機 架構 領域 研究者 關心 關鍵 作業系統 領域 跟上 才\n結論 理所當然 硬體 這些年來 變化 工程界 很多 公司 關注 現象 開發 新 作業系統 子 領域 反覆強調 兩個 大宗 架構 關注 項目 作業系統 研究者 跟上 社群 usenix osdi 鼓勵 類似 研究 大 環境 否認\nlinux\n之外 大 真實 硬體 樣貌 呈現 軟體 現狀 缺乏 認知 作業系統 研究 嶄新 機會\n真的 新 硬體 構思 新 作業系統 架構\n工具 遠比 好多 新 正規方法 語言 新 硬體 ...\nhoddarla\n賽期 中 接觸 講座 帶來 莫大 鼓舞 結論 講者 鼓勵 新 語言 新 概念 遺憾 筆者 至今 接觸 過的\nrisc v\n機器 簡單 平臺 再不然 模擬器 新 機器 探索\n講者 有頭有臉 研究 單位 居 高職 支配 資源量 才 支撐 作出 告 背後 靠山 現狀 必有 諸多 原因 演化 至今 使然\n未來 盈利 主流 當中\nlinux\n非\nlinux\n離經叛道 遑論 是非\nposix\n排除\nc\n語言 說 未來 事項 將會 研究 成形\nrisc v\n進階 中斷 架構 advanced\ninterrupt\narchitecture 新機制 兩三年 會 普及 取代 現今\nplic\n做法 或許 硬體 本身 控制器 轉為\nrisc v\n情況 更 有望 支援 類似 講者 期望 那種 作業系統\n相較 前 篇 講座 佳評 連連 系列 文 共 四篇 評論 卻是 稍微 負面 有評 論說 作者 點出 一大堆 了解 本身 了解 主題 足以 稱之為 旁邊 熱鬧 也許 眾人 評論 自有 道理 作者 稀疏地 更新\n2020\n二月 後續 系列 文 停留 架構 構想 階段\n部落 格中 作者 部落 格用 藝名\nno\nbugs\nhare 行文 我行我素 美式 口語 幽默 爭議 處採 痛點 前 一篇 講者 爭議 處會 放緩 打預防針 做法 敢 放話\nno\nbugs 技術 一番 見識\n描述 五十年 硬體 軟體 生態系 進展 論述 地基 硬體 改進 差異 至少 數點\n效能 無需多說\n元件 效能 改進 cpu memory\n之間 資料 速度 越差 越大\ncontext\nswitch\n變得 昂貴\nnuma\ninterrupt\n改進\n更深\npipeline 分支 預測 軟體 看不到\ncpu\n改良\n軟體 大多 工具 功能 增強\n靜態 分析 工具\n公共 簽署 實務 增加 使用者 軟體 來源 信心\n應用程式 層有 更好 分享 東西 shared nothing 訊息 傳遞 message passing 式\napi\n語言 框架 中供 作者 引述\ngolang\n\nchannel\n設計 背後 核心 精神 do\n\ncommunicate\n\nsharing\nmemory\ninstead\nshare\nmemory\n\ncommunicating\n非 同步 程式設計 框架\n則是 列舉 作者 希望 作業系統 中 改良 八大 項目\n增加 彈性 佈署 時 控制 選項 取代 開發 時 編譯 時 控制 選項\n無論是 低階\nmcu\n高階\ncpu 藉由 作業系統 介面 共享 應用程式 驅動程式 非 開發\n增加 穩定度 測試 性 正式 上線 生產 環境 除錯 經驗 應 提升 一例 很多 生產 環境\ncrash\n掉 難解 決 有個 監控 機制 調度 事發 前 一段時間 系統 狀態 會 更好 認知 很多 工具 提供 是問 作業系統 提供\n內 建 容錯 fault tolerance 擴容 scalibility\n安全性 情境 增加 安全性\n解決 公共 財的 悲劇 參見 作者 應是 意指 租戶 使用者 情境 系統 利用 狀態\n驅動程式 開發 簡化\n增加 效能 且須 分開\nhpc 高效能 運算\ncpu\n負責 絕大部分 互動式 工作\n作者 遭受 批評 作者 希望 改進 面向 應 措施 工具 作者 評估 過的 批評 本身 道理 作者 不僅僅 希望 改進 做法 實際上 更 希望 作業系統 核心 應用程式 之間 設定 邊界 無異於 多出 框架 第三方 函式 庫 內心 想望 投射 解讀\n篇 更進一步 想要 功能 想法 當初 系列 持續 這篇 藍圖 篇 描述 改良 段落 撰寫 本篇 提出 五個 功能 長 段落 做 結論 不免 破壞性 壓縮 先行 致歉 讀者 諸君 感受 那份 動能\n原生 支援 事件驅動 event driven 式 程式設計 模式 支援 手持 裝置 桌面 系統 伺服器 事件驅動 模式 透過 程式 語言 框架 函式 庫來 支援 支援 方法 應用程式 層 費了 很多 工夫 費工夫 底層 系統 本質 中斷 驅動 interrupt driven 式 作者 大部分 事件處理 很快 解決 事件驅動 模式 優於 中斷 驅動 模式 考量 執行 緒 切換 維護 作業系統 之中 何等 高 成本 原文\nheavy weighted 作者 出發點 更到 細節 處 有限 狀態機 finite\nstate\nmachine 執行 單元 事實上 很多 嵌入式 作業系統 即時 作業系統 類似 設計 作者 一點 想要 就算 是給 高階 處理器 運行 作業系統 應往 方向 靠攏 才 網頁 伺服器 效能 為例 non blockng\n\nnginx\n優於\napache\n東西\nfsm 系統 執行 時 會 deterministic 有助於 檢驗 生產 環境\ncrash\n事件 理論 一臺 機器 記錄下來\nlog 運行 系統 機器 重現 理想 這也 簡化 遷移 migration 流程\n作者 重 定義 作業系統 指涉 核心 指涉\napi 提供 應用程式 驅動程式 運行 配備 核心 原 系列 作者 最會 現實 阻攔 設計 原則 個例 子 網頁 伺服器 閱覽 組態 檔 需求\nunix like\n系統 有個\nopen\n系統 呼叫 檔案 系統 互動 也許 應用程式 層\napi\nread conf\n\nopen 伺服器 想要 運行 檔案 系統 微小 系統\nread conf\n不堪 何不 定 作業系統\napi\nread conf\napi\n分群 應用程式 設計者 用到 足夠 看法 延伸 第三點 應用程式 設計者 角度 出發 提出 兼具 應用程式 僅\napi 高層 級\napi\n底層 作業系統 核心 抽換 解法 延續 第三點 網頁 伺服器 案例 設計者 選擇\nread conf\n\nsql socket 非 限定\nunix like\nkernel\n\nopen read\n\nsocket\napi\n一點 太 理解 精神 旨趣 作者 倡議 作業系統 程式 語言 編譯器 更 緊密 合作 呼應 第二篇 當中 援引 程式 語言 靜態 分析 工具 優勢\n名為 第一份 草稿 比前 篇 更 接近 設計 先 跳過\nhoddarla\n原本 反 社會 恐怖主義 作者\nno\nbugs\nhare\n相比 傳統 價值 乖乖 牌 系列 文 相比 單純\ngolang\n語言 比照 以往 作業系統 照顧 貼近 硬體 抽象 層級\nxxi\n系列 充滿 更 想像 原作者 部落 格下 留言 大多 不以 為然 轉發\nhacker\nnews\n眾人 評論 不太優 相 之下 hoddarla\n本身 迴響 驅車 入巷 時 猛吠 狗 引 一瞥\n真的 要說 系列 文給 技術 發想 之外 點子 接近 第一 時間 感受 篇文章\n這是\nstonemaier\n設計師\njamey\n文章 指引 有志於 桌遊 設計 一系列 心法 中 一篇 一言以蔽之 點子 聰穎 無比 沒 做出 東西 實踐 過程 遠遠 構想 出 神妙 點子 困難 當初 乍看 一把 無明火 點子 作出 東西 事實 夢想家 比例 佔 全人類 總數 實際上 不少 實踐者 協調者 會 點子 做 來說 夢想 爛 主意 並無二致\n更 極端 說 搞不好 率低 夢想家 價值 更 低 換個 角度看 理解 創業 失敗 受 景仰 程度 會 遠大於 在講 創業 沒 做 流於 功利主義 夢想 盡頭 難道 世界 帶來 更好 改變 這不 純然 過程 夢想 兌現 途中 一部分 成果 重點 做 做 大概\nnike\n品牌形象 緣故\n本來 期待 系列 會 引導\nhoddarla\n尷尬\nconsole\n更 高明 東西 一個系列 停止 更新\nfirst\ndraft 難免 惆悵\n永遠 站 雞蛋\n遺憾 無論如何 高牆 正確\n日前 晶心 壯士 隊友\n聊聊 技術 路上 夢想 知曉 遠大 夢想 泄漏 祕密 追問\n既然如此 做 鐵人 賽 事情 太 循規蹈矩\n畢竟 很多 學習 事情 來說 吸收 養分\n理解 ... 來說 這是 煎熬 震盪 安排 走 正軌 想要 好好 吸收 養分 不由得 會 太乖\nhoddarla\nproject\n做 做 會 該學 東西 還學\n夢想 規劃 執行 一年 半 衝刺 三五個 月 沉澱 佳作 沉澱 ... 會 選擇 永遠\nhoddarla\n停留\n0.1\n狀態 幾年 內 做 作業系統 專案 嘗試\n典範 典範 歲月 風沙 淘洗 共存 共生 共 演化 人類 面並 唯一 主體 宰制 至多是 腦細胞\nplayer\nc\n語言\nlinux\nlinux\nfoundation 概念 前輩 腦中 躍出 一本 本長 灰塵 書 電流 血 概念 肉 神物\n挑戰 神獸 沒血 沒 魔 沒裝 沒 天命 有何 可戰\n作業系統 專案 嘗試\n\n自幹 作業系統\n答案 兩件 事情 區分 開 來看 先說 第一件 事 接近\nhoddarla\n\nno\nbugs\ndare\n想 做 事情 會 業界 先進 歸類 經驗 一群\n傾向 認同\ntimothy\n講座 中 提到 引用\n2011\n年 論文 角度 夢想家 想要 挑戰 改動 作業系統 原則 光 軟體 層 做 真的 夠嗎 硬體 假設 之下 會 到頭來 就算 給你 做 差太多\n反正\nrisc v\n開源 核心 只會 越來越 硬體 概念 補 回來 也許 硬 體層 改 軟硬 之間 更 互補 需 會 更 有趣 專案 是從 作業系統 往下 角度 角度 hoddarla\n本身 想要\ngolang\n執行期 作業系統 一部分 地說 太 醜陋 維護性 至少\ngolang\n套用 可行性\ngolang\n至少 付出 像是\ntamago\n專案 等級 心力 才行 再不然 就連 程式 語言 思考 語法 簡潔 節省 開發者 認知 資源 工具 眾多 ...\n一件 事情 自幹 作業系統 認知 作業系統 課堂 深 淺 作業 技術 狂 實作 本質 手邊 工具 重現 實務 作業系統 一小部分 想要 走 路 過程 中 學到 缺乏 技術 知識 玩具 希望 做 東西 玩具\n話雖如此 光是 駭客 好好 自幹 做 本身 足以 第一種 看起來 像是 逃避 仔 看法 大方 承認 想要 逃避\nc posix everything\n\na\nfile 企鵝 紅色 惡魔\n玩具 倡導 價值 影響力 回事 創業 營利 回事\n學習 面向 或許 唯一 創造 玩具 理由 學生 潛入\nlinux\n大 系統 找到 痛點 修正 聽 很久 時間 學生 經驗\ninput\n\noutput 效果 會 創造 玩具 學習 認知 有進有出 預期 方法 效果\n打造 玩具 學習 法有 一大 原因 節省 日後 接觸 真實 系統 手 時間 而花 了解 玩具 複雜度 花太多 時間 也就是說 教學 心智 模型 深潛 真實 系統 中所 需 時間 遠遠 大於 打造 玩具 過程 中 理解 系統 元件 時間 加上 有過 玩具 經驗 手 真實 系統 學習 時間\n出 社會 總覺 潛入 真實世界 未必 壞處 大部分 就學 時期 玩具 都造 不好 沒造過 工作 自由支配 時間 更為 稀缺 這時候 做 玩具 來說 毫無意義\n\nside\nproject\n鐵人 賽 系列 文在 奪獎 劣勢\n聊聊 劣勢 恭喜\n\nsoftware\ndevelopment\n組 冠軍 系列 文 節奏 分配 確實 登 樓梯 感覺 程式碼 實例 夾帶 重構 心法 目標 讀者 群大 易 受益\n反觀 幾次 嘗試 大多 自我中心 side\nproject\n東西 本來 關乎 自我 成長\nhoddarla\n\nrisc v\n面向 透過 實際操作 方式 展露出來 先前 幾次 嘗試 來得 完整 整體 學習 來講 略顯 虛浮 去蕪存菁 感覺\n僅僅 參加 目的 優勢 劣勢 興趣 型 專案 獨到 領域 型 專門知識 整理 教學 目的 分享 成 系列 文的料 未來 會 參賽 核心 形式 求 扭轉 劣勢 策略 爭獎 打算 下次 回避\nmodern\nweb\n\nsoftware\ndevelopment\n兩個 一級 戰區\n評審 主辦單位\n公佈 評量 向度 得獎 系列 文在 向度 分數 評語 如此一來 未獲獎 技術 有個 目標 得獎者 相當於 回饋 增進 傳遞 知識 能力\n由衷感謝\n讀者\n希望 最末 篇 宣告\nhoddarla\n1.0\n永遠 感到 閱讀 系列 浪費 時間\n理論 大部分\nrisc v\ns mode\ncsr\n系統 卻是\nhoddarla\n系統 建構 脈絡 之下 邏輯 至少 一點 學習 參考 事實上 一個多月 參考 幾次\nplic\ngolang\n系統 面向 則是 偏門 往復 搭配 前年 系列 才 比較清楚 閱讀 確實 會 難以 入口 系統 軟體 圈多\nc\n\ngolang\n\n絕大部分 生硬 形式化 方式 表達 文章 確實 刻意 這是 表達 讀者 尊重 方法 實際上 成效 只能 說 世界 誤會 大得 所有人 會 遺憾\n結論 本篇 則是 寬鬆 更 接近 日常 行文 方式 讀來 也許 自溺 有趣 推薦 讀者 諸君 試著 創作 鐵人 賽 部落 格 相遇 更 會 未來 先前 寫作 相遇 那種 經驗 堪比 接觸 陌生人 舉例來說 先前 三個 鐵人 賽 系列 認得 筆調 精神 生命 同等 歲月 遺失 留下來 的則 大部分 程式碼 概念 賴以 為生 技術\n感謝 閱讀 閱讀 文字 程式碼 毫無意義\n請 接受 過早 佳節 祝福 希望\n2022\n所有人 來說 帶來 機會 成長 一年",
        "extracted_keywords": [
            "津津樂道",
            "去蕪存菁",
            "歲月",
            "沉吟",
            "賽畢"
        ],
        "extracted_keywords_phrases": [
            "虛浮 去蕪存菁",
            "津津樂道",
            "去蕪存菁",
            "golang 執行期",
            "最末 宣告"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10283054": {
        "href": "https://ithelp.ithome.com.tw/articles/10283054",
        "title": "盤點清查與檢測掃描 - 資通安全健診",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>買啦，哪次不買好買滿，都到這最後一步了，能通過稽核就是最終目標!</p>\n<hr>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211210/20103688ugL9eNlqeO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211210/20103688ugL9eNlqeO.png\"></p>\n<hr>\n<p>適用人員: 技術人員<br>\n適用法規:  <a href=\"https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=A0030304\" target=\"_blank\" rel=\"noreferrer noopener\">資通安全責任等級分級辦法 </a> - <a href=\"https://law.moj.gov.tw/LawClass/LawGetFile.ashx?FileId=0000298115&amp;lan=C\" target=\"_blank\" rel=\"noreferrer noopener\">附表十資通系統防護基準.PDF</a><br>\n範圍: 網路架構/網路連線、使用者電腦/伺服器電臘<br>\n頻率:  A 級每年辦理一次、其餘每二年辦理一次</p>\n<p>技術面分類提要</p>\n<ul>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>安全性檢測</li>\n<li>\n<code>資通安全健診</code>\n</li>\n</ul>\n</li>\n</ul>\n<p>健診的目包括:</p>\n<ul>\n<li>網路架構檢視: 是否有將網路分區、公私有的IP配置是否合理、彼此間的連線是否有存取限制等</li>\n<li>網路惡意活動檢視: 會側錄網路各個分區間的封包是否異常，以及分析網路設備的 log 是否有異常</li>\n<li>使用者端電腦惡意活動檢視: 檢測電腦中的異常，包含程式、網路連線、帳號等，還會看作業系統、應用程式是否有安裝更新</li>\n<li>伺服器主機惡意活動檢視: 與使用者端一樣，但注意有這一項「是否使用不合宜之作業系統(如使用Windows10 等)」</li>\n<li>目錄伺服器設定及防火牆連線設定檢視: 主要檢測是否有套用 GCB</li>\n</ul>\n<p>政府已經貼心的打包好供您選購了，請參閱<a href=\"https://www.spo.org.tw/office_new3/images/spo_files/project/1100205/1100205_1022.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">110年第五次-資通安全服務暨資訊服務</a><br>\n。不要看到只有 $4531 以為揪甘心，這裡的價格僅僅是以上單一項目的價格...的人天費用! 另外還有規定<a href=\"https://www.spo.org.tw/office_new3/images/spo_files/project/1100205/1100205__safety_regu.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">最低採買數量</a>，因此全部加總下來需要 7 萬之多，還不包含 GCB 及資料庫檢測...</p>\n<table>\n<thead>\n<tr>\n<th>110年 資安健診費用</th>\n<th>最低費用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-6 基本項目</td>\n<td>74761.5</td>\n</tr>\n<tr>\n<td>1-6 基本項目+ 7.GCB</td>\n<td>108744</td>\n</tr>\n<tr>\n<td>1-6 基本項目+ 7.GCB+ 8.防火牆</td>\n<td>131399</td>\n</tr>\n</tbody>\n</table>\n<p>除了是應辦事項外，健診也是<a href=\"https://www.chsmr.chc.edu.tw/ezfiles/0/1000/attach/0/pta_10291_9517870_07477.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">稽核</a><br>\n列入的先行作業，以上提到的執行項目(包含GCB、資料庫)都會在稽核時再技術檢測一次。因此建議選擇優質的廠商(尋找中)，以能夠順利通過複測(稽核)為目標。</p>\n<h2>文件庫</h2>\n<p><a href=\"https://docs.google.com/spreadsheets/d/1sMm0NhRmEo4-pyHX9kdufW4AxCzH7PcCBcl2BYz8xBo/edit?usp=sharing\" target=\"_blank\" rel=\"noreferrer noopener\">[鐵人賽專用] 資安法相關-資安健診費用</a></p>\n<h2>參考資源</h2>\n<p><a href=\"https://www.spo.org.tw/office_new3/images/spo_files/project/1100205/1100205__safety_regu.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">110 年共同供應契約資通安全服務品項採購規範</a><br>\n<a href=\"https://www.chsmr.chc.edu.tw/ezfiles/0/1000/attach/0/pta_10291_9517870_07477.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">110年資通安全稽核計畫</a></p>\n<h2>延伸閱讀</h2>\n<p><a href=\"https://download.nccst.nat.gov.tw/attachfilespmo/109%E5%B9%B4%E5%85%B1%E5%A5%91%E8%B3%87%E5%AE%89%E6%9C%8D%E5%8B%99%E5%BB%A0%E5%95%86%E8%A9%95%E9%91%91%E7%B5%90%E6%9E%9Cv1.0_1100204.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">109 年共契資安服務廠商評鑑結果</a><br>\n<a href=\"https://download.nccst.nat.gov.tw/attachfilespmo/%E8%B3%87%E5%AE%89%E5%81%A5%E8%A8%BA%E6%9C%8D%E5%8B%99RFP%E7%AF%84%E6%9C%ACv4.0_1100915.pdf\" target=\"_blank\" rel=\"noreferrer noopener\">資安健診服務RFP範本v4.0</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Security",
        "published_at": "2021-12-10 14:11:03",
        "author_href": "https://ithelp.ithome.com.tw/users/20103688/ironman",
        "author_name": "魯大常",
        "series_href": "https://ithelp.ithome.com.tw/users/20103688/ironman/4430",
        "series_name": "作業抄起來!資通安全管理法什麼的",
        "series_num": "34",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>買啦，哪次不買好買滿，都到這最後一步了，能通過稽核就是最終目標!</p>\n<hr/>\n<p></p>\n<hr/>\n<p>適用人員: 技術人員<br/>\n適用法規:   - <br/>\n範圍: 網路架構/網路連線、使用者電腦/伺服器電臘<br/>\n頻率:  A 級每年辦理一次、其餘每二年辦理一次</p>\n<p>技術面分類提要</p>\n<ul>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>安全性檢測</li>\n<li>\n<code>資通安全健診</code>\n</li>\n</ul>\n</li>\n</ul>\n<p>健診的目包括:</p>\n<ul>\n<li>網路架構檢視: 是否有將網路分區、公私有的IP配置是否合理、彼此間的連線是否有存取限制等</li>\n<li>網路惡意活動檢視: 會側錄網路各個分區間的封包是否異常，以及分析網路設備的 log 是否有異常</li>\n<li>使用者端電腦惡意活動檢視: 檢測電腦中的異常，包含程式、網路連線、帳號等，還會看作業系統、應用程式是否有安裝更新</li>\n<li>伺服器主機惡意活動檢視: 與使用者端一樣，但注意有這一項「是否使用不合宜之作業系統(如使用Windows10 等)」</li>\n<li>目錄伺服器設定及防火牆連線設定檢視: 主要檢測是否有套用 GCB</li>\n</ul>\n<p>政府已經貼心的打包好供您選購了，請參閱<br/>\n。不要看到只有 $4531 以為揪甘心，這裡的價格僅僅是以上單一項目的價格...的人天費用! 另外還有規定，因此全部加總下來需要 7 萬之多，還不包含 GCB 及資料庫檢測...</p>\n<table>\n<thead>\n<tr>\n<th>110年 資安健診費用</th>\n<th>最低費用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1-6 基本項目</td>\n<td>74761.5</td>\n</tr>\n<tr>\n<td>1-6 基本項目+ 7.GCB</td>\n<td>108744</td>\n</tr>\n<tr>\n<td>1-6 基本項目+ 7.GCB+ 8.防火牆</td>\n<td>131399</td>\n</tr>\n</tbody>\n</table>\n<p>除了是應辦事項外，健診也是<br/>\n列入的先行作業，以上提到的執行項目(包含GCB、資料庫)都會在稽核時再技術檢測一次。因此建議選擇優質的廠商(尋找中)，以能夠順利通過複測(稽核)為目標。</p>\n<h2>文件庫</h2>\n<p></p>\n<h2>參考資源</h2>\n<p><br/>\n</p>\n<h2>延伸閱讀</h2>\n<p><br/>\n</p>\n<br/>\n</div>",
        "content_text": "買啦，哪次不買好買滿，都到這最後一步了，能通過稽核就是最終目標!\n\n\n\n適用人員: 技術人員\n適用法規:   - \n範圍: 網路架構/網路連線、使用者電腦/伺服器電臘\n頻率:  A 級每年辦理一次、其餘每二年辦理一次\n技術面分類提要\n\n網路架構的檢視\n端點的安全防護\n應用開發的防護基準\n盤點清查與檢測掃描\n\n盤點文件、清查舊系統、帳號\n安全性檢測\n\n資通安全健診\n\n\n\n\n健診的目包括:\n\n網路架構檢視: 是否有將網路分區、公私有的IP配置是否合理、彼此間的連線是否有存取限制等\n網路惡意活動檢視: 會側錄網路各個分區間的封包是否異常，以及分析網路設備的 log 是否有異常\n使用者端電腦惡意活動檢視: 檢測電腦中的異常，包含程式、網路連線、帳號等，還會看作業系統、應用程式是否有安裝更新\n伺服器主機惡意活動檢視: 與使用者端一樣，但注意有這一項「是否使用不合宜之作業系統(如使用Windows10 等)」\n目錄伺服器設定及防火牆連線設定檢視: 主要檢測是否有套用 GCB\n\n政府已經貼心的打包好供您選購了，請參閱\n。不要看到只有 $4531 以為揪甘心，這裡的價格僅僅是以上單一項目的價格...的人天費用! 另外還有規定，因此全部加總下來需要 7 萬之多，還不包含 GCB 及資料庫檢測...\n\n\n\n110年 資安健診費用\n最低費用\n\n\n\n\n1-6 基本項目\n74761.5\n\n\n1-6 基本項目+ 7.GCB\n108744\n\n\n1-6 基本項目+ 7.GCB+ 8.防火牆\n131399\n\n\n\n除了是應辦事項外，健診也是\n列入的先行作業，以上提到的執行項目(包含GCB、資料庫)都會在稽核時再技術檢測一次。因此建議選擇優質的廠商(尋找中)，以能夠順利通過複測(稽核)為目標。\n文件庫\n\n參考資源\n\n\n延伸閱讀",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "買 啦 ， 哪次 不 買好 買滿 ， 都 到 這 最後 一步 了 ， 能 通過 稽核 就是 最終目標 !\n適用 人員 :\n技術人員\n適用 法規 :\n-\n範圍 :\n網路 架構 / 網路 連線 、 使用者 電腦 / 伺服器 電臘\n頻率 :\nA\n級 每年 辦理 一次 、 其餘 每 二年 辦理 一次\n技術 面 分類 提要\n網路 架構 的 檢視\n端點 的 安全 防護\n應用 開發 的 防護 基準\n盤點 清查 與 檢測 掃描\n盤點 文件 、 清查 舊 系統 、 帳號\n安全性 檢測\n資通 安全 健診\n健診 的 目 包括 :\n網路 架構 檢視 :\n是否 有將 網路 分區 、 公私 有 的 IP 配置 是否 合理 、 彼此間 的 連線 是否 有 存取 限制 等\n網路 惡意 活動 檢視 :\n會側 錄 網路 各個 分 區間 的 封包 是否 異常 ， 以及 分析 網路 設備 的\nlog\n是否 有 異常\n使用者 端 電腦 惡意 活動 檢視 :\n檢測 電腦 中 的 異常 ， 包含 程式 、 網路 連線 、 帳號 等 ， 還會 看 作業系統 、 應用程式 是否 有 安裝 更新\n伺服器 主機 惡意 活動 檢視 :\n與 使用者 端 一樣 ， 但 注意 有 這 一項 「 是否 使用 不合宜 之 作業系統 ( 如 使用 Windows10\n等 ) 」\n目錄 伺服器 設定 及 防火牆 連線 設定 檢視 :\n主要 檢測 是否 有 套用\nGCB\n政府 已經 貼心 的 打包 好供 您 選購 了 ， 請參閱\n。 不要 看到 只有\n$ 4531\n以為 揪 甘心 ， 這裡 的 價格 僅僅 是 以上 單一 項目 的 價格 ... 的 人天 費用 !\n另外 還有 規定 ， 因此 全部 加總 下來 需要\n7\n萬之多 ， 還不 包含\nGCB\n及 資料庫 檢測 ...\n110 年\n資安健 診費 用\n最低 費用\n1 - 6\n基本 項目\n74761.5\n1 - 6\n基本 項目 +\n7 . GCB\n108744\n1 - 6\n基本 項目 +\n7 . GCB +\n8 . 防火牆\n131399\n除了 是 應辦 事項 外 ， 健診 也 是\n列入 的 先行 作業 ， 以上 提到 的 執行 項目 ( 包含 GCB 、 資料庫 ) 都 會 在 稽核 時 再 技術 檢測 一次 。 因此 建議 選擇 優質 的 廠商 ( 尋找 中 ) ， 以 能夠 順利 通過 複測 ( 稽核 ) 為 目標 。\n文件 庫\n參考 資源\n延伸 閱讀",
        "word_seg_processed_content_text": "買 哪次 買好 買滿 一步 稽核 最終目標\n人員\n技術人員\n法規\n\n\n網路 架構 網路 連線 使用者 電腦 伺服器 電臘\n頻率\na\n級 辦理 二年 辦理\n技術 面 分類 提要\n網路 架構 檢視\n端點 防護\n開發 防護 基準\n盤點 清查 檢測 掃描\n盤點 文件 清查 舊 系統 帳號\n安全性 檢測\n資通 健診\n健診 目 包括\n網路 架構 檢視\n有將 網路 分區 公私 ip 配置 彼此間 連線 存取\n網路 惡意 活動 檢視\n會側 錄 網路 分 區間 封包 異常 分析 網路 設備\nlog\n異常\n使用者 端 電腦 惡意 活動 檢視\n檢測 電腦 中 異常 包含 程式 網路 連線 帳號 還會 作業系統 應用程式 安裝 更新\n伺服器 主機 惡意 活動 檢視\n使用者 端 一項 不合宜 作業系統 windows10\n\n目錄 伺服器 設定 防火牆 連線 設定 檢視\n檢測 套用\ngcb\n政府 貼心 打包 好供 選購 請參閱\n\n4531\n揪 甘心 價格 僅僅 單一 項目 價格 ... 人天 費用\n加總\n7\n萬之多 還不 包含\ngcb\n資料庫 檢測 ...\n110 年\n資安健 診費\n最低 費用\n1 6\n項目\n74761.5\n1 6\n項目\n7 gcb\n108744\n1 6\n項目\n7 gcb\n8 防火牆\n131399\n應辦 事項 外 健診\n列入 先行 作業 提到 執行 項目 包含 gcb 資料庫 會 稽核 時 技術 檢測 建議 選擇 優質 廠商 尋找 中 順利 複測 稽核 目標\n文件 庫\n參考 資源\n延伸 閱讀",
        "extracted_keywords": [
            "技術",
            "網路",
            "技術人員",
            "基準",
            "安全性"
        ],
        "extracted_keywords_phrases": [
            "技術 分類",
            "法規 網路",
            "分析 網路",
            "技術人員 法規",
            "網路 設備"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282995": {
        "href": "https://ithelp.ithome.com.tw/articles/10282995",
        "title": "[13th][Day23] http response header（下）",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>接續昨天 response headers 的部分</p>\n<p>一樣是看 Julia Evans 大大的可愛的圖<br>\n<img src=\"https://pbs.twimg.com/media/FAssEqcXoAY_gLq?format=jpg&amp;name=medium\" alt=\"\"><br>\n圖片來源：<a href=\"https://twitter.com/b0rk/status/1444296663577808897/photo/1\" target=\"_blank\" rel=\"noreferrer noopener\">https://twitter.com/b0rk/status/1444296663577808897/photo/1</a></p>\n<p>Set-Cookie：set a cookie<br>\nAccess-Control-* ：呼叫 Cross-Origin Resource Sharing (CORS)），允許 cross-origin 請求<br>\nContent-Type：body 的 MIME type<br>\nContent-Length：body 的長度用 ，單位：bytes<br>\nContent-Language：body 的語言<br>\nContent-Encoding：body 的壓縮方式<br>\nLocation：URL 轉倒到 ...<br>\nAccept-Ranges：server 告知 client 端可否支援 range , 以及 range 範圍</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,http",
        "genre": "Modern Web",
        "published_at": "2021-12-07 08:57:53",
        "author_href": "https://ithelp.ithome.com.tw/users/20119546/ironman",
        "author_name": "阿展展展",
        "series_href": "https://ithelp.ithome.com.tw/users/20119546/ironman/4246",
        "series_name": "還喝不 go",
        "series_num": "23",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>接續昨天 response headers 的部分</p>\n<p>一樣是看 Julia Evans 大大的可愛的圖<br/>\n<br/>\n圖片來源：</p>\n<p>Set-Cookie：set a cookie<br/>\nAccess-Control-* ：呼叫 Cross-Origin Resource Sharing (CORS)），允許 cross-origin 請求<br/>\nContent-Type：body 的 MIME type<br/>\nContent-Length：body 的長度用 ，單位：bytes<br/>\nContent-Language：body 的語言<br/>\nContent-Encoding：body 的壓縮方式<br/>\nLocation：URL 轉倒到 ...<br/>\nAccept-Ranges：server 告知 client 端可否支援 range , 以及 range 範圍</p>\n<br/>\n</div>",
        "content_text": "接續昨天 response headers 的部分\n一樣是看 Julia Evans 大大的可愛的圖\n\n圖片來源：\nSet-Cookie：set a cookie\nAccess-Control-* ：呼叫 Cross-Origin Resource Sharing (CORS)），允許 cross-origin 請求\nContent-Type：body 的 MIME type\nContent-Length：body 的長度用 ，單位：bytes\nContent-Language：body 的語言\nContent-Encoding：body 的壓縮方式\nLocation：URL 轉倒到 ...\nAccept-Ranges：server 告知 client 端可否支援 range , 以及 range 範圍",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "接續 昨天\nresponse\nheaders\n的 部分\n一樣 是 看\nJulia\nEvans\n大大的 可愛 的 圖\n圖片 來源 ：\nSet - Cookie ： set\na\ncookie\nAccess - Control - *\n： 呼叫\nCross - Origin\nResource\nSharing\n( CORS ) ） ， 允許\ncross - origin\n請求\nContent - Type ： body\n的\nMIME\ntype\nContent - Length ： body\n的 長度 用\n， 單位 ： bytes\nContent - Language ： body\n的 語言\nContent - Encoding ： body\n的 壓縮 方式\nLocation ： URL\n轉倒 到\n...\nAccept - Ranges ： server\n告知\nclient\n端 可否 支援\nrange\n,\n以及\nrange\n範圍",
        "word_seg_processed_content_text": "接續 昨天\nresponse\nheaders\n\n\njulia\nevans\n大大的 可愛 圖\n圖片 來源\nset cookie set\na\ncookie\naccess control\n呼叫\ncross origin\nresource\nsharing\ncors\ncross origin\n請求\ncontent type body\n\nmime\ntype\ncontent length body\n長度\n單位 bytes\ncontent language body\n語言\ncontent encoding body\n壓縮 方式\nlocation url\n轉倒\n...\naccept ranges server\n告知\nclient\n端 可否 支援\nrange\n\n\nrange\n",
        "extracted_keywords": [
            "cookie",
            "url",
            "client",
            "server",
            "content"
        ],
        "extracted_keywords_phrases": [
            "cookie access",
            "cookie set",
            "content type",
            "content encoding",
            "set cookie"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10277253": {
        "href": "https://ithelp.ithome.com.tw/articles/10277253",
        "title": "[13th][Day22]  http response header（上）",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>之前看了 request 常用的 headers<br>\n接下來要看看 response 常用的 headers<br>\n一樣是看 Julia Evans 大大的可愛的圖<br>\n<img src=\"https://pbs.twimg.com/media/FAssEqcXoAY_gLq?format=jpg&amp;name=medium\" alt=\"\"><br>\n圖片來源：<a href=\"https://twitter.com/b0rk/status/1444296663577808897/photo/1\" target=\"_blank\" rel=\"noreferrer noopener\">https://twitter.com/b0rk/status/1444296663577808897/photo/1</a></p>\n<p>Age：response 被 cache 了多久 (s)<br>\nDate：response 在何時被 send 出<br>\nLast-Modified：內文最後何時被 異動<br>\nETag：response body 的版本 ，通常是一串 hash<br>\nCache-Control：各種 cache 設置<br>\nVary：根據 req 的 header 而會有變化，通常是 accept-xxxxx<br>\nVia：由 proxy server 加上，ex: nginx<br>\nExpires：本次 response 的有效期限<br>\nConnection：close / keep-alive , 判斷 tcp 連線是否開啟</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,http",
        "genre": "Modern Web",
        "published_at": "2021-12-07 08:56:20",
        "author_href": "https://ithelp.ithome.com.tw/users/20119546/ironman",
        "author_name": "阿展展展",
        "series_href": "https://ithelp.ithome.com.tw/users/20119546/ironman/4246",
        "series_name": "還喝不 go",
        "series_num": "22",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>之前看了 request 常用的 headers<br/>\n接下來要看看 response 常用的 headers<br/>\n一樣是看 Julia Evans 大大的可愛的圖<br/>\n<br/>\n圖片來源：</p>\n<p>Age：response 被 cache 了多久 (s)<br/>\nDate：response 在何時被 send 出<br/>\nLast-Modified：內文最後何時被 異動<br/>\nETag：response body 的版本 ，通常是一串 hash<br/>\nCache-Control：各種 cache 設置<br/>\nVary：根據 req 的 header 而會有變化，通常是 accept-xxxxx<br/>\nVia：由 proxy server 加上，ex: nginx<br/>\nExpires：本次 response 的有效期限<br/>\nConnection：close / keep-alive , 判斷 tcp 連線是否開啟</p>\n<br/>\n</div>",
        "content_text": "之前看了 request 常用的 headers\n接下來要看看 response 常用的 headers\n一樣是看 Julia Evans 大大的可愛的圖\n\n圖片來源：\nAge：response 被 cache 了多久 (s)\nDate：response 在何時被 send 出\nLast-Modified：內文最後何時被 異動\nETag：response body 的版本 ，通常是一串 hash\nCache-Control：各種 cache 設置\nVary：根據 req 的 header 而會有變化，通常是 accept-xxxxx\nVia：由 proxy server 加上，ex: nginx\nExpires：本次 response 的有效期限\nConnection：close / keep-alive , 判斷 tcp 連線是否開啟",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "之前 看 了\nrequest\n常用 的\nheaders\n接下來 要 看看\nresponse\n常用 的\nheaders\n一樣 是 看\nJulia\nEvans\n大大的 可愛 的 圖\n圖片 來源 ：\nAge ： response\n被\ncache\n了 多久\n( s )\nDate ： response\n在 何時 被\nsend\n出\nLast - Modified ： 內文 最後 何時 被\n異動\nETag ： response\nbody\n的 版本\n， 通常 是 一串\nhash\nCache - Control ： 各種\ncache\n設置\nVary ： 根據\nreq\n的\nheader\n而會 有 變化 ， 通常 是\naccept - xxxxx\nVia ： 由\nproxy\nserver\n加上 ， ex :\nnginx\nExpires ： 本次\nresponse\n的 有效期限\nConnection ： close\n/\nkeep - alive\n,\n判斷\ntcp\n連線 是否 開啟",
        "word_seg_processed_content_text": "\nrequest\n常用\nheaders\n接下來\nresponse\n常用\nheaders\n\njulia\nevans\n大大的 可愛 圖\n圖片 來源\nage response\n\ncache\n多久\ns\ndate response\n\nsend\n出\nlast modified 內文\n異動\netag response\nbody\n版本\n一串\nhash\ncache control\ncache\n設置\nvary\nreq\n\nheader\n而會 變化\naccept xxxxx\nvia\nproxy\nserver\n加上 ex\nnginx\nexpires 本次\nresponse\n有效期限\nconnection close\n\nkeep alive\n\n判斷\ntcp\n連線 開啟",
        "extracted_keywords": [
            "cache",
            "expires",
            "server",
            "proxy",
            "tcp"
        ],
        "extracted_keywords_phrases": [
            "cache 多久",
            "response cache",
            "cache",
            "cache control",
            "hash cache"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282984": {
        "href": "https://ithelp.ithome.com.tw/articles/10282984",
        "title": "[13th][Day21] golang context",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>context 是個處理流程中關於『超時限制』的控制器</p>\n<p>lib context<br>\n<a href=\"https://pkg.go.dev/context@go1.17.3\" target=\"_blank\" rel=\"noreferrer noopener\">https://pkg.go.dev/context@go1.17.3</a></p>\n<p>常用的 context 方法</p>\n<pre><code>WithCancel: cancellation\nWithDeadline and WithTimeout: deadline/timeout and cancellation\nWithValue: key-value pairs\n</code></pre>\n<p>來看看幾個例子</p>\n<pre><code>    ctx, cancel := context.WithCancel(context.Background())\n\n\ttime.AfterFunc(4*time.Second, func() {\n\t\tcancel()\n\t})\n\n\tgo func() {\n\t\t&lt;-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n</code></pre>\n<p>上述例子中，會在第四秒時發出 cancel() 訊號<br>\n輸出為</p>\n<pre><code>After 1 second: &lt;nil&gt;\nAfter 3 seconds: &lt;nil&gt;\nContext done!\nAfter 5 seconds: context canceled\n</code></pre>\n<p>第五秒時 本 context 已 cancel</p>\n<hr>\n<p>第二個例子</p>\n<pre><code>\n    ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)\n\t_ = cancel // 本例中不使用 cancel\n\n\tgo func() {\n\t\t&lt;-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n</code></pre>\n<p>上述例子中，使用 WithTimeout 設定本 context 會在第四秒時超時<br>\n輸出為</p>\n<pre><code>After 1 second: &lt;nil&gt;\nAfter 3 seconds: &lt;nil&gt;\nContext done!\nAfter 5 seconds: context deadline exceeded\n</code></pre>\n<hr>\n<p>第三個例子</p>\n<pre><code>\n    ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)\n\n\ttime.AfterFunc(2*time.Second, func() {\n\t\tcancel()\n\t})\n\n\tgo func() {\n\t\t&lt;-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n</code></pre>\n<p>同時使用 WithTimeout ＆ cancel()<br>\ncontext 在 cancel 後就不會 time out 了</p>\n<p>輸出為</p>\n<pre><code>After 1 second: &lt;nil&gt;\nContext done!\nAfter 3 seconds: context canceled\nAfter 5 seconds: context canceled\n</code></pre>\n<hr>\n<p>context 可以確保處理流程的安全性（thread-safe），更準確的是指 goroutine-safe<br>\ncontext 是不可變動的，只能基於現有的 context 創出新的 子 context</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,golang",
        "genre": "Modern Web",
        "published_at": "2021-12-06 14:50:57",
        "author_href": "https://ithelp.ithome.com.tw/users/20119546/ironman",
        "author_name": "阿展展展",
        "series_href": "https://ithelp.ithome.com.tw/users/20119546/ironman/4246",
        "series_name": "還喝不 go",
        "series_num": "21",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>context 是個處理流程中關於『超時限制』的控制器</p>\n<p>lib context<br/>\n</p>\n<p>常用的 context 方法</p>\n<pre></pre>\n<p>來看看幾個例子</p>\n<pre></pre>\n<p>上述例子中，會在第四秒時發出 cancel() 訊號<br/>\n輸出為</p>\n<pre></pre>\n<p>第五秒時 本 context 已 cancel</p>\n<hr/>\n<p>第二個例子</p>\n<pre></pre>\n<p>上述例子中，使用 WithTimeout 設定本 context 會在第四秒時超時<br/>\n輸出為</p>\n<pre></pre>\n<hr/>\n<p>第三個例子</p>\n<pre></pre>\n<p>同時使用 WithTimeout ＆ cancel()<br/>\ncontext 在 cancel 後就不會 time out 了</p>\n<p>輸出為</p>\n<pre></pre>\n<hr/>\n<p>context 可以確保處理流程的安全性（thread-safe），更準確的是指 goroutine-safe<br/>\ncontext 是不可變動的，只能基於現有的 context 創出新的 子 context</p>\n<br/>\n</div>",
        "content_text": "context 是個處理流程中關於『超時限制』的控制器\nlib context\n\n常用的 context 方法\n\n來看看幾個例子\n\n上述例子中，會在第四秒時發出 cancel() 訊號\n輸出為\n\n第五秒時 本 context 已 cancel\n\n第二個例子\n\n上述例子中，使用 WithTimeout 設定本 context 會在第四秒時超時\n輸出為\n\n\n第三個例子\n\n同時使用 WithTimeout ＆ cancel()\ncontext 在 cancel 後就不會 time out 了\n輸出為\n\n\ncontext 可以確保處理流程的安全性（thread-safe），更準確的是指 goroutine-safe\ncontext 是不可變動的，只能基於現有的 context 創出新的 子 context",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "WithCancel: cancellation\nWithDeadline and WithTimeout: deadline/timeout and cancellation\nWithValue: key-value pairs\n"
            },
            {
                "language": "unknown",
                "content": "    ctx, cancel := context.WithCancel(context.Background())\n\n\ttime.AfterFunc(4*time.Second, func() {\n\t\tcancel()\n\t})\n\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n"
            },
            {
                "language": "unknown",
                "content": "After 1 second: <nil>\nAfter 3 seconds: <nil>\nContext done!\nAfter 5 seconds: context canceled\n"
            },
            {
                "language": "unknown",
                "content": "\n    ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)\n\t_ = cancel // 本例中不使用 cancel\n\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n"
            },
            {
                "language": "unknown",
                "content": "After 1 second: <nil>\nAfter 3 seconds: <nil>\nContext done!\nAfter 5 seconds: context deadline exceeded\n"
            },
            {
                "language": "unknown",
                "content": "\n    ctx, cancel := context.WithTimeout(context.Background(), 4*time.Second)\n\n\ttime.AfterFunc(2*time.Second, func() {\n\t\tcancel()\n\t})\n\n\tgo func() {\n\t\t<-ctx.Done()\n\t\tfmt.Println(\"Context done!\")\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(1 * time.Second)\n\t\tfmt.Println(\"After 1 second:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tfmt.Println(\"After 3 seconds:\", ctx.Err())\n\t}()\n\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tfmt.Println(\"After 5 seconds:\", ctx.Err())\n\t}()\n\n\ttime.Sleep(6 * time.Second)\n"
            },
            {
                "language": "unknown",
                "content": "After 1 second: <nil>\nContext done!\nAfter 3 seconds: context canceled\nAfter 5 seconds: context canceled\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "context\n是 個 處理 流程 中 關於 『 超時 限制 』 的 控制器\nlib\ncontext\n常用 的\ncontext\n方法\n來看 看 幾個 例子\n上述 例子 中 ， 會 在 第四 秒 時 發出\ncancel ( )\n訊號\n輸出 為\n第五 秒 時\n本\ncontext\n已\ncancel\n第二個 例子\n上述 例子 中 ， 使用\nWithTimeout\n設定 本\ncontext\n會 在 第四 秒 時 超時\n輸出 為\n第三個 例子\n同時 使用\nWithTimeout\n＆\ncancel ( )\ncontext\n在\ncancel\n後 就 不會\ntime\nout\n了\n輸出 為\ncontext\n可以 確保 處理 流程 的 安全性 （ thread - safe ） ， 更 準確 的 是 指\ngoroutine - safe\ncontext\n是 不可 變動 的 ， 只能 基於 現有 的\ncontext\n創出 新 的\n子\ncontext",
        "word_seg_processed_content_text": "context\n流程 中 超時 控制器\nlib\ncontext\n常用\ncontext\n方法\n來看 幾個 例子\n例子 中 會 第四 秒 時 發出\ncancel\n訊號\n輸出\n第五 秒 時\n\ncontext\n\ncancel\n第二個 例子\n例子 中\nwithtimeout\n設定\ncontext\n會 第四 秒 時 超時\n輸出\n第三個 例子\n\nwithtimeout\n\ncancel\ncontext\n\ncancel\n\ntime\nout\n\n輸出\ncontext\n確保 流程 安全性 thread safe 更 準確 指\ngoroutine safe\ncontext\n變動 只能 基於 現有\ncontext\n創出 新\n子\ncontext",
        "extracted_keywords": [
            "context",
            "withtimeout",
            "超時",
            "time",
            "thread"
        ],
        "extracted_keywords_phrases": [
            "context cancel",
            "cancel context",
            "context 流程",
            "context 常用",
            "context 方法"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282962": {
        "href": "https://ithelp.ithome.com.tw/articles/10282962",
        "title": "股票怎麼選？掌握這原則，你也能找到強勢股",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大盤上周連漲四天後，週五以小跌作收<br>\n收盤價在所有均線之上，以目前的型態來看，算是止穩盤<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/201125739f67eT9WQ1.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/201125739f67eT9WQ1.png\"></p>\n<p>櫃買指數<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573w3MHyie8eU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573w3MHyie8eU.png\"><br>\n因為遇前高的關係，多少會有些震盪，目前處於高檔盤整中，且量有點萎縮跡象<br>\n週五收盤價也是站上所有均線，<br>\n<strong>以盤代跌</strong>，是目前的情況</p>\n<p>講完目前的盤勢後，接著進入今天的主題：<strong>該如何選股？</strong></p>\n<p>不論你是基本面，籌碼面，技術面，除了聽明牌之外<br>\n做足功課後，最終都一定會面臨到一個問題，<strong>我該如何選股</strong>？</p>\n<p>以下將以實際案例來說明，我是如何操作的</p>\n<ol>\n<li></li>\n</ol>\n<p>首先，掌握大原則，<strong>由上到下，見林再找樹</strong>，<br>\n先不要找個股<br>\n先從國際盤勢看，就是看美股<br>\n美股的表現足以影響全球股市，這不用我多說<br>\n有個迷思這邊要糾正一下：<strong>台股跟美股沒有一定的連動性</strong><br>\n請破除這樣的迷思，<br>\n這樣的步驟，至少對於台股的盤勢會有個底</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573dY8r4cYYjc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573dY8r4cYYjc.png\"><br>\n各位可以看到櫃買指數在8~10月間，是呈現向下的趨勢，這時若進場，很容易賠錢</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573hV2NrlTxyT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573hV2NrlTxyT.png\"><br>\n接著，在底部形成一個帶量的W底，這時我們就可以觀察，等待時機準備入場了</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573Bm7Z1k5CBp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573Bm7Z1k5CBp.png\"><br>\n最保險的情況是，帶量站上季線，</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573phR2pewPP9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573phR2pewPP9.png\"><br>\n並且突破下降趨勢線</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573bAhbNZftbQ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573bAhbNZftbQ.png\"><br>\n如果按照預期的趨勢向上，就持續觀察，是否有跌破趨勢線，若破了，就要準備出場了</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>接著看類股，<br>\n台股的資金輪動非常快速，昨天航運，今天塑化，明天晶圓代工<br>\n<strong>當一個類股發動攻擊的時候，當中的幾檔領頭羊，很容易會齊漲齊跌的情況</strong><br>\n<strong>類股好，個股就好</strong><br>\n這個觀念各位可以去看傑西李佛摩這本書，裡面有講到「協力車」的概念<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573TzpGXxaqBh.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573TzpGXxaqBh.jpg\"></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573wQoBnRXv5c.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573wQoBnRXv5c.png\"><br>\n櫃買指數以電子類股為主，所以櫃半導體指數與櫃買指數連動性相當高</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>最後，才著眼於個股的選擇<br>\n以合晶 6182 為例<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573JIWh6ueF1i.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573JIWh6ueF1i.png\"><br>\n在11/24，以開盤跳空直接突破區間整理，均線漂亮，是進場的好時機<br>\n觀察3天，不回檔，續抱<br>\n其他的相同分類的個股，也是可以按照此方式去篩選</p>\n<p>即便型態如此強勢，我們也不敢保證就會一路漲，所以我的方式會篩選2~3隻，同時入場<br>\n但伴隨而來的風險就是，萬一趨勢變了，很有可能3隻齊跌，這就是在入場前為何要做好資金控管的原因</p>\n<p>第3點，我大略帶過，有很多細節還未講，新手可以先不用著手於個股的選擇，至少第二跟第三點要做扎實，<br>\n<strong>你如果連盤勢跟類股的趨勢都不會看，貿然進場，也只有被割的分</strong></p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573yB8FfxKgdV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211205/20112573yB8FfxKgdV.png\"></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-12-05 13:04:19",
        "author_href": "https://ithelp.ithome.com.tw/users/20112573/ironman",
        "author_name": "WM",
        "series_href": "https://ithelp.ithome.com.tw/users/20112573/ironman/4721",
        "series_name": "如何成為成功的斜槓工程師 - 理財",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大盤上周連漲四天後，週五以小跌作收<br/>\n收盤價在所有均線之上，以目前的型態來看，算是止穩盤<br/>\n</p>\n<p>櫃買指數<br/>\n<br/>\n因為遇前高的關係，多少會有些震盪，目前處於高檔盤整中，且量有點萎縮跡象<br/>\n週五收盤價也是站上所有均線，<br/>\n<strong>以盤代跌</strong>，是目前的情況</p>\n<p>講完目前的盤勢後，接著進入今天的主題：<strong>該如何選股？</strong></p>\n<p>不論你是基本面，籌碼面，技術面，除了聽明牌之外<br/>\n做足功課後，最終都一定會面臨到一個問題，<strong>我該如何選股</strong>？</p>\n<p>以下將以實際案例來說明，我是如何操作的</p>\n<ol>\n<li></li>\n</ol>\n<p>首先，掌握大原則，<strong>由上到下，見林再找樹</strong>，<br/>\n先不要找個股<br/>\n先從國際盤勢看，就是看美股<br/>\n美股的表現足以影響全球股市，這不用我多說<br/>\n有個迷思這邊要糾正一下：<strong>台股跟美股沒有一定的連動性</strong><br/>\n請破除這樣的迷思，<br/>\n這樣的步驟，至少對於台股的盤勢會有個底</p>\n<p><br/>\n各位可以看到櫃買指數在8~10月間，是呈現向下的趨勢，這時若進場，很容易賠錢</p>\n<p><br/>\n接著，在底部形成一個帶量的W底，這時我們就可以觀察，等待時機準備入場了</p>\n<p><br/>\n最保險的情況是，帶量站上季線，</p>\n<p><br/>\n並且突破下降趨勢線</p>\n<p><br/>\n如果按照預期的趨勢向上，就持續觀察，是否有跌破趨勢線，若破了，就要準備出場了</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<p>接著看類股，<br/>\n台股的資金輪動非常快速，昨天航運，今天塑化，明天晶圓代工<br/>\n<strong>當一個類股發動攻擊的時候，當中的幾檔領頭羊，很容易會齊漲齊跌的情況</strong><br/>\n<strong>類股好，個股就好</strong><br/>\n這個觀念各位可以去看傑西李佛摩這本書，裡面有講到「協力車」的概念<br/>\n</p>\n<p><br/>\n櫃買指數以電子類股為主，所以櫃半導體指數與櫃買指數連動性相當高</p>\n<ol start=\"3\">\n<li></li>\n</ol>\n<p>最後，才著眼於個股的選擇<br/>\n以合晶 6182 為例<br/>\n<br/>\n在11/24，以開盤跳空直接突破區間整理，均線漂亮，是進場的好時機<br/>\n觀察3天，不回檔，續抱<br/>\n其他的相同分類的個股，也是可以按照此方式去篩選</p>\n<p>即便型態如此強勢，我們也不敢保證就會一路漲，所以我的方式會篩選2~3隻，同時入場<br/>\n但伴隨而來的風險就是，萬一趨勢變了，很有可能3隻齊跌，這就是在入場前為何要做好資金控管的原因</p>\n<p>第3點，我大略帶過，有很多細節還未講，新手可以先不用著手於個股的選擇，至少第二跟第三點要做扎實，<br/>\n<strong>你如果連盤勢跟類股的趨勢都不會看，貿然進場，也只有被割的分</strong></p>\n<p></p>\n<br/>\n</div>",
        "content_text": "大盤上周連漲四天後，週五以小跌作收\n收盤價在所有均線之上，以目前的型態來看，算是止穩盤\n\n櫃買指數\n\n因為遇前高的關係，多少會有些震盪，目前處於高檔盤整中，且量有點萎縮跡象\n週五收盤價也是站上所有均線，\n以盤代跌，是目前的情況\n講完目前的盤勢後，接著進入今天的主題：該如何選股？\n不論你是基本面，籌碼面，技術面，除了聽明牌之外\n做足功課後，最終都一定會面臨到一個問題，我該如何選股？\n以下將以實際案例來說明，我是如何操作的\n\n\n\n首先，掌握大原則，由上到下，見林再找樹，\n先不要找個股\n先從國際盤勢看，就是看美股\n美股的表現足以影響全球股市，這不用我多說\n有個迷思這邊要糾正一下：台股跟美股沒有一定的連動性\n請破除這樣的迷思，\n這樣的步驟，至少對於台股的盤勢會有個底\n\n各位可以看到櫃買指數在8~10月間，是呈現向下的趨勢，這時若進場，很容易賠錢\n\n接著，在底部形成一個帶量的W底，這時我們就可以觀察，等待時機準備入場了\n\n最保險的情況是，帶量站上季線，\n\n並且突破下降趨勢線\n\n如果按照預期的趨勢向上，就持續觀察，是否有跌破趨勢線，若破了，就要準備出場了\n\n\n\n接著看類股，\n台股的資金輪動非常快速，昨天航運，今天塑化，明天晶圓代工\n當一個類股發動攻擊的時候，當中的幾檔領頭羊，很容易會齊漲齊跌的情況\n類股好，個股就好\n這個觀念各位可以去看傑西李佛摩這本書，裡面有講到「協力車」的概念\n\n\n櫃買指數以電子類股為主，所以櫃半導體指數與櫃買指數連動性相當高\n\n\n\n最後，才著眼於個股的選擇\n以合晶 6182 為例\n\n在11/24，以開盤跳空直接突破區間整理，均線漂亮，是進場的好時機\n觀察3天，不回檔，續抱\n其他的相同分類的個股，也是可以按照此方式去篩選\n即便型態如此強勢，我們也不敢保證就會一路漲，所以我的方式會篩選2~3隻，同時入場\n但伴隨而來的風險就是，萬一趨勢變了，很有可能3隻齊跌，這就是在入場前為何要做好資金控管的原因\n第3點，我大略帶過，有很多細節還未講，新手可以先不用著手於個股的選擇，至少第二跟第三點要做扎實，\n你如果連盤勢跟類股的趨勢都不會看，貿然進場，也只有被割的分",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "大盤 上周 連漲 四天 後 ， 週五 以 小跌 作收\n收盤價 在 所有 均線 之上 ， 以 目前 的 型態 來看 ， 算是 止 穩盤\n櫃買 指數\n因為 遇前 高 的 關係 ， 多少 會 有些 震盪 ， 目前 處於 高檔 盤整 中 ， 且量 有點 萎縮 跡象\n週五 收盤價 也 是 站上 所有 均線 ，\n以盤 代跌 ， 是 目前 的 情況\n講完 目前 的 盤勢 後 ， 接著 進入 今天 的 主題 ： 該 如何 選股 ？\n不論 你 是 基本面 ， 籌碼 面 ， 技術 面 ， 除了 聽 明牌 之外\n做足 功課 後 ， 最終 都 一定 會 面臨 到 一個 問題 ， 我該 如何 選股 ？\n以下 將以 實際 案例 來說 明 ， 我 是 如何 操作 的\n首先 ， 掌握 大 原則 ， 由 上 到 下 ， 見林 再 找 樹 ，\n先 不要 找 個股\n先 從 國際 盤勢 看 ， 就是 看美股\n美股 的 表現 足以 影響 全球股市 ， 這 不用 我 多 說\n有個 迷思 這邊 要 糾正 一下 ： 台股 跟 美股 沒有 一定 的 連動 性\n請 破除 這樣 的 迷思 ，\n這樣 的 步驟 ， 至少 對於 台股 的 盤勢 會 有 個 底\n各位 可以 看到 櫃買 指數 在 8 ~ 10 月間 ， 是 呈現 向下 的 趨勢 ， 這時 若 進場 ， 很 容易 賠錢\n接著 ， 在 底部 形成 一個 帶量 的 W 底 ， 這時 我們 就 可以 觀察 ， 等待 時機 準備 入場 了\n最 保險 的 情況 是 ， 帶量 站上 季線 ，\n並且 突破 下降 趨勢 線\n如果 按照 預期 的 趨勢 向上 ， 就 持續 觀察 ， 是否 有 跌破 趨勢 線 ， 若破 了 ， 就要 準備 出場 了\n接著 看類 股 ，\n台股 的 資金 輪動 非常 快速 ， 昨天 航運 ， 今天 塑化 ， 明天 晶圓 代工\n當 一個 類股 發動 攻擊 的 時候 ， 當中 的 幾檔 領頭羊 ， 很 容易 會齊漲 齊跌 的 情況\n類股 好 ， 個股 就 好\n這個 觀念 各位 可以 去 看 傑西 李佛摩 這本 書 ， 裡面 有 講到 「 協力車 」 的 概念\n櫃買 指數 以 電子 類股 為 主 ， 所以 櫃 半導體 指數 與 櫃買 指數 連動 性 相當 高\n最後 ， 才 著眼 於 個股 的 選擇\n以合晶\n6182\n為例\n在 11 / 24 ， 以 開盤 跳空 直接 突破 區間 整理 ， 均線 漂亮 ， 是 進場 的 好時機\n觀察 3 天 ， 不 回檔 ， 續 抱\n其他 的 相同 分類 的 個股 ， 也 是 可以 按照 此 方式 去 篩選\n即便 型態 如此 強勢 ， 我們 也 不敢 保證 就 會 一路 漲 ， 所以 我 的 方式 會 篩選 2 ~ 3 隻 ， 同時 入場\n但 伴隨 而來 的 風險 就是 ， 萬一 趨勢 變 了 ， 很 有 可能 3 隻 齊跌 ， 這 就是 在 入場 前為 何要 做好 資金 控管 的 原因\n第 3 點 ， 我大 略帶 過 ， 有 很多 細節 還未講 ， 新手 可以 先 不用 著手 於 個股 的 選擇 ， 至少 第二 跟 第三點 要 做 扎實 ，\n你 如果 連盤勢 跟 類股 的 趨勢 都 不會 看 ， 貿然 進場 ， 也 只有 被 割 的 分",
        "word_seg_processed_content_text": "大盤 上周 連漲 四天 週五 小跌 作收\n收盤價 均線 之上 型態 來看 算是 止 穩盤\n櫃買 指數\n遇前 高 關係 會 震盪 處於 高檔 盤整 中 且量 萎縮 跡象\n週五 收盤價 站上 均線\n以盤 代跌 情況\n講完 盤勢 主題 選股\n基本面 籌碼 面 技術 面 聽 明牌 之外\n做足 功課 最終 會 面臨 我該 選股\n將以 案例 來說 明 操作\n大 原則 見林 找 樹\n先 找 個股\n先 國際 盤勢 看美股\n美股 表現 足以 影響 全球股市 不用 說\n有個 迷思 糾正 台股 美股 連動 性\n請 破除 迷思\n步驟 至少 台股 盤勢 會 底\n櫃買 指數 8 10 月間 呈現 向下 趨勢 進場 賠錢\n底部 帶量 w 底 觀察 等待 時機 入場\n保險 情況 帶量 站上 季線\n突破 下降 趨勢 線\n預期 趨勢 向上 持續 觀察 跌破 趨勢 線 若破 就要 出場\n看類 股\n台股 資金 輪動 快速 昨天 航運 塑化 明天 晶圓 代工\n類股 發動 攻擊 當中 幾檔 領頭羊 會齊漲 齊跌 情況\n類股 個股\n觀念 傑西 李佛摩 這本 書 講到 協力車 概念\n櫃買 指數 電子 類股 主 櫃 半導體 指數 櫃買 指數 連動 性 高\n才 著眼 個股 選擇\n以合晶\n6182\n為例\n11 24 開盤 跳空 突破 區間 整理 均線 漂亮 進場 好時機\n觀察 3 天 回檔 續 抱\n分類 個股 方式 篩選\n型態 強勢 保證 會 一路 漲 方式 會 篩選 2 3 隻 入場\n伴隨 而來 風險 趨勢 變 3 隻 齊跌 入場 前為 何要 做好 資金 控管 原因\n3 點 我大 略帶 很多 細節 還未講 新手 先 不用 著手 個股 選擇 至少 第二 第三點 做 扎實\n連盤勢 類股 趨勢 貿然 進場 割 分",
        "extracted_keywords": [
            "收盤價",
            "代跌",
            "盤勢",
            "小跌",
            "連漲"
        ],
        "extracted_keywords_phrases": [
            "週五 收盤價",
            "週五 小跌",
            "收盤價 站上",
            "台股 盤勢",
            "會齊漲 齊跌"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282941": {
        "href": "https://ithelp.ithome.com.tw/articles/10282941",
        "title": "Git push",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>今天上班看一下github的紀錄，發現最近只有commit沒push，所以都沒上到github上，現在上傳了。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-12-03 20:00:03",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "40",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>今天上班看一下github的紀錄，發現最近只有commit沒push，所以都沒上到github上，現在上傳了。</p>\n<br/>\n</div>",
        "content_text": "今天上班看一下github的紀錄，發現最近只有commit沒push，所以都沒上到github上，現在上傳了。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "今天 上班 看 一下 github 的 紀錄 ， 發現 最近 只有 commit 沒 push ， 所以 都 沒 上 到 github 上 ， 現在 上傳 了 。",
        "word_seg_processed_content_text": "上班 github 紀錄 發現 commit 沒 push 沒 github 上傳",
        "extracted_keywords": [
            "github",
            "commit",
            "push",
            "上傳",
            "紀錄"
        ],
        "extracted_keywords_phrases": [
            "github 紀錄",
            "github 上傳",
            "push github",
            "上班 github",
            "github"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282910": {
        "href": "https://ithelp.ithome.com.tw/articles/10282910",
        "title": "盤點清查與檢測掃描 - 安全性檢測",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>以一個月發一篇的速度，怕是還發完就關賽了...<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211202/20103688lDSbHi8mJc.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211202/20103688lDSbHi8mJc.png\"></p>\n<hr>\n<p>適用人員: 技術人員。<br>\n適用法規:  <a href=\"https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=A0030304\" target=\"_blank\" rel=\"noreferrer noopener\">資通安全責任等級分級辦法 </a> - <a href=\"https://law.moj.gov.tw/LawClass/LawGetFile.ashx?FileId=0000298115&amp;lan=C\" target=\"_blank\" rel=\"noreferrer noopener\">附表十資通系統防護基準.PDF</a></p>\n<ul>\n<li>技術面分類提要</li>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>\n<code>安全性檢測</code>\n<ul>\n<li>弱點掃描</li>\n<li>\n<code>滲透測試</code>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>資通安全健診</li>\n</ul>\n<p>如果說弱點掃描只是列個清單的好好先生，不痛不癢的還可以賴皮說有誤判，那麼本篇的滲透測試就是實實在在的暴燥壞蛋，一不開心可能直接將您打回老家了。測試的結果除了列出可利用的漏洞外，還會詳細說明了攻擊手法與結果，想賴都都賴不掉，很糟糕的技術呀(誤</p>\n<p>從上述可知，滲透測試更像是一種技術、行為，但這裡仍然列出可自動化的軟體以便符(一ㄥˋ)合(ㄈㄨˋ)規範。</p>\n<ul>\n<li>metabolic: 免費，但仍偏向與其他軟體配合才能達到自動化，可參考 <a href=\"https://ithelp.ithome.com.tw/articles/10279483?sc=hot\" target=\"_blank\" rel=\"noreferrer noopener\">認識 Metasploit</a>\n</li>\n<li>rapid 7 : 商業軟體。其實也就是收購上面 metabolic 的公司...</li>\n<li>sqlmap:針對 SQL injection 的工具</li>\n<li>Burpsuite: 商業軟體(謎之聲: 但人手一套是怎麼回事)</li>\n<li>其他: 目前實在是沒測試到有免費或好用的完全自動化軟體，有找到再補吧...</li>\n</ul>\n<p>滲透掃描的適用範圍與弱點掃描沒有太大的不同，簡單區分就是淺與深的程度，弱點掃描能夠快速的產出、成本較低，使用也較頻繁，法規規定每年至少一次。而滲透掃描的思維是模擬駭客的攻擊，因此使用的手法多、組合性也多，成本較高的情況下，規定每2年執行一次即可。</p>\n<p>滲透測試的技術門檻較高，如果要認真起來，請尋找一家經驗豐富的廠商，給予充足的時間，再進行手動會可靠的多，當然 $$ 也隨之高漲。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Security",
        "published_at": "2021-12-02 16:56:26",
        "author_href": "https://ithelp.ithome.com.tw/users/20103688/ironman",
        "author_name": "魯大常",
        "series_href": "https://ithelp.ithome.com.tw/users/20103688/ironman/4430",
        "series_name": "作業抄起來!資通安全管理法什麼的",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>以一個月發一篇的速度，怕是還發完就關賽了...<br/>\n</p>\n<hr/>\n<p>適用人員: 技術人員。<br/>\n適用法規:   - </p>\n<ul>\n<li>技術面分類提要</li>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>\n<code>安全性檢測</code>\n<ul>\n<li>弱點掃描</li>\n<li>\n<code>滲透測試</code>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>資通安全健診</li>\n</ul>\n<p>如果說弱點掃描只是列個清單的好好先生，不痛不癢的還可以賴皮說有誤判，那麼本篇的滲透測試就是實實在在的暴燥壞蛋，一不開心可能直接將您打回老家了。測試的結果除了列出可利用的漏洞外，還會詳細說明了攻擊手法與結果，想賴都都賴不掉，很糟糕的技術呀(誤</p>\n<p>從上述可知，滲透測試更像是一種技術、行為，但這裡仍然列出可自動化的軟體以便符(一ㄥˋ)合(ㄈㄨˋ)規範。</p>\n<ul>\n<li>metabolic: 免費，但仍偏向與其他軟體配合才能達到自動化，可參考 \n</li>\n<li>rapid 7 : 商業軟體。其實也就是收購上面 metabolic 的公司...</li>\n<li>sqlmap:針對 SQL injection 的工具</li>\n<li>Burpsuite: 商業軟體(謎之聲: 但人手一套是怎麼回事)</li>\n<li>其他: 目前實在是沒測試到有免費或好用的完全自動化軟體，有找到再補吧...</li>\n</ul>\n<p>滲透掃描的適用範圍與弱點掃描沒有太大的不同，簡單區分就是淺與深的程度，弱點掃描能夠快速的產出、成本較低，使用也較頻繁，法規規定每年至少一次。而滲透掃描的思維是模擬駭客的攻擊，因此使用的手法多、組合性也多，成本較高的情況下，規定每2年執行一次即可。</p>\n<p>滲透測試的技術門檻較高，如果要認真起來，請尋找一家經驗豐富的廠商，給予充足的時間，再進行手動會可靠的多，當然 $$ 也隨之高漲。</p>\n<br/>\n</div>",
        "content_text": "以一個月發一篇的速度，怕是還發完就關賽了...\n\n\n適用人員: 技術人員。\n適用法規:   - \n\n技術面分類提要\n網路架構的檢視\n端點的安全防護\n應用開發的防護基準\n盤點清查與檢測掃描\n\n盤點文件、清查舊系統、帳號\n\n安全性檢測\n\n弱點掃描\n\n滲透測試\n\n\n\n\n\n資通安全健診\n\n如果說弱點掃描只是列個清單的好好先生，不痛不癢的還可以賴皮說有誤判，那麼本篇的滲透測試就是實實在在的暴燥壞蛋，一不開心可能直接將您打回老家了。測試的結果除了列出可利用的漏洞外，還會詳細說明了攻擊手法與結果，想賴都都賴不掉，很糟糕的技術呀(誤\n從上述可知，滲透測試更像是一種技術、行為，但這裡仍然列出可自動化的軟體以便符(一ㄥˋ)合(ㄈㄨˋ)規範。\n\nmetabolic: 免費，但仍偏向與其他軟體配合才能達到自動化，可參考 \n\nrapid 7 : 商業軟體。其實也就是收購上面 metabolic 的公司...\nsqlmap:針對 SQL injection 的工具\nBurpsuite: 商業軟體(謎之聲: 但人手一套是怎麼回事)\n其他: 目前實在是沒測試到有免費或好用的完全自動化軟體，有找到再補吧...\n\n滲透掃描的適用範圍與弱點掃描沒有太大的不同，簡單區分就是淺與深的程度，弱點掃描能夠快速的產出、成本較低，使用也較頻繁，法規規定每年至少一次。而滲透掃描的思維是模擬駭客的攻擊，因此使用的手法多、組合性也多，成本較高的情況下，規定每2年執行一次即可。\n滲透測試的技術門檻較高，如果要認真起來，請尋找一家經驗豐富的廠商，給予充足的時間，再進行手動會可靠的多，當然 $$ 也隨之高漲。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "以 一個月 發 一篇 的 速度 ， 怕 是還 發完 就 關賽 了 ...\n適用 人員 :\n技術人員 。\n適用 法規 :\n-\n技術 面 分類 提要\n網路 架構 的 檢視\n端點 的 安全 防護\n應用 開發 的 防護 基準\n盤點 清查 與 檢測 掃描\n盤點 文件 、 清查 舊 系統 、 帳號\n安全性 檢測\n弱點 掃描\n滲透 測試\n資通 安全 健診\n如果說 弱點 掃描 只是 列個 清單 的 好好先生 ， 不痛不癢 的還 可以 賴皮 說 有 誤判 ， 那麼 本篇 的 滲透 測試 就是 實實在在 的 暴燥 壞蛋 ， 一 不 開心 可能 直接 將您打 回老家 了 。 測試 的 結果 除了 列出 可 利用 的 漏洞 外 ， 還會 詳細 說明 了 攻擊 手法 與 結果 ， 想賴 都 都 賴不掉 ， 很 糟糕 的 技術 呀 ( 誤\n從 上述 可知 ， 滲透 測試 更 像是 一種 技術 、 行為 ， 但 這裡 仍然 列出 可 自動化 的 軟體 以便 符 ( 一 ㄥ ˋ ) 合 ( ㄈ ㄨ ˋ ) 規範 。\nmetabolic :\n免費 ， 但 仍 偏向 與其 他 軟體 配合 才能 達到 自動化 ， 可 參考\nrapid\n7\n:\n商業 軟體 。 其實 也 就是 收購 上面\nmetabolic\n的 公司 ...\nsqlmap : 針對\nSQL\ninjection\n的 工具\nBurpsuite :\n商業 軟體 ( 謎 之聲 :\n但 人手 一套 是 怎麼回事 )\n其他 :\n目前 實在 是 沒 測試 到 有 免費 或 好 用 的 完全 自動化 軟體 ， 有 找到 再補 吧 ...\n滲透 掃描 的 適用範圍 與 弱點 掃描 沒有 太大 的 不同 ， 簡單 區分 就是 淺 與 深 的 程度 ， 弱點 掃描 能夠 快速 的 產出 、 成本 較 低 ， 使用 也 較 頻繁 ， 法規 規定 每年 至少 一次 。 而 滲透 掃描 的 思維 是 模擬 駭客 的 攻擊 ， 因此 使用 的 手法 多 、 組合 性 也 多 ， 成本 較 高 的 情況 下 ， 規定 每 2 年 執行 一次 即可 。\n滲透 測試 的 技術 門檻 較 高 ， 如果 要 認真 起來 ， 請 尋找 一家 經驗豐富 的 廠商 ， 給予 充足 的 時間 ， 再 進行 手動 會 可靠 的 多 ， 當然\n$ $\n也 隨之 高漲 。",
        "word_seg_processed_content_text": "一個月 發 一篇 速度 怕 是還 發完 關賽 ...\n人員\n技術人員\n法規\n\n技術 面 分類 提要\n網路 架構 檢視\n端點 防護\n開發 防護 基準\n盤點 清查 檢測 掃描\n盤點 文件 清查 舊 系統 帳號\n安全性 檢測\n弱點 掃描\n滲透 測試\n資通 健診\n如果說 弱點 掃描 列個 清單 好好先生 不痛不癢 的還 賴皮 說 誤判 本篇 滲透 測試 實實在在 暴燥 壞蛋 開心 將您打 回老家 測試 列出 利用 漏洞 外 還會 詳細 攻擊 手法 想賴 賴不掉 糟糕 技術 誤\n可知 滲透 測試 更 像是 一種 技術 列出 自動化 軟體 符 ㄥ ˋ 合 ㄈ ㄨ ˋ 規範\nmetabolic\n免費 偏向 軟體 配合 才能 自動化 參考\nrapid\n7\n\n商業 軟體 收購\nmetabolic\n公司 ...\nsqlmap 針對\nsql\ninjection\n工具\nburpsuite\n商業 軟體 謎 之聲\n人手 一套 怎麼回事\n\n實在 沒 測試 免費 自動化 軟體 找到 再補 ...\n滲透 掃描 適用範圍 弱點 掃描 太大 簡單 區分 淺 深 程度 弱點 掃描 快速 產出 成本 低 頻繁 法規 至少 滲透 掃描 思維 模擬 駭客 攻擊 手法 組合 性 成本 高 情況 2 年 執行 即可\n滲透 測試 技術 門檻 高 請 尋找 一家 經驗豐富 廠商 給予 充足 時間 手動 會 可靠\n\n隨之 高漲",
        "extracted_keywords": [
            "安全性",
            "檢測",
            "漏洞",
            "測試",
            "防護"
        ],
        "extracted_keywords_phrases": [
            "安全性 檢測",
            "技術 門檻",
            "滲透 測試",
            "測試 技術",
            "利用 漏洞"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282846": {
        "href": "https://ithelp.ithome.com.tw/articles/10282846",
        "title": "完賽心得",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>完賽不發個心得好像怪怪的。原本想整個系列補充完再發心得，但是沒有趕稿壓力下的產出超低落，果然是人性...<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211129/20103688cdnDbqClY8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211129/20103688cdnDbqClY8.png\"><br>\n(才沒生氣呢)</p>\n<hr>\n<p>話說上次的鐵人賽有幸得到出書的機會，但礙於版權的關係失敗收場，也算是另外解鎖真鐵人系列成就「鐵人賽斷賽」之「出書失敗」...打擊之下有想過再次出發，以能出書的前提下挑選題目。但收拾一下心情之後，如果有了太多考量反而失去了分享的樂趣。因此這次的參賽題目一反常態選了與工作較相關的「正(無)經(聊)」 題目，也許這樣「正常」的寫文章，也能幫助一些資安法下的受苦受難的善男信女(包含我自己)。</p>\n<p>相反的在不需要考慮出書的束縛下，沒有版權的考量下大玩梗圖、說說五四三，非常舒壓~~<br>\n至於下次的鐵人賽題目，應該還是會回到上次的初衷，好玩、有趣優先，有沒有其他附加價值就當佛系作者吧 XD</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Security",
        "published_at": "2021-11-29 16:19:10",
        "author_href": "https://ithelp.ithome.com.tw/users/20103688/ironman",
        "author_name": "魯大常",
        "series_href": "https://ithelp.ithome.com.tw/users/20103688/ironman/4430",
        "series_name": "作業抄起來!資通安全管理法什麼的",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>完賽不發個心得好像怪怪的。原本想整個系列補充完再發心得，但是沒有趕稿壓力下的產出超低落，果然是人性...<br/>\n<br/>\n(才沒生氣呢)</p>\n<hr/>\n<p>話說上次的鐵人賽有幸得到出書的機會，但礙於版權的關係失敗收場，也算是另外解鎖真鐵人系列成就「鐵人賽斷賽」之「出書失敗」...打擊之下有想過再次出發，以能出書的前提下挑選題目。但收拾一下心情之後，如果有了太多考量反而失去了分享的樂趣。因此這次的參賽題目一反常態選了與工作較相關的「正(無)經(聊)」 題目，也許這樣「正常」的寫文章，也能幫助一些資安法下的受苦受難的善男信女(包含我自己)。</p>\n<p>相反的在不需要考慮出書的束縛下，沒有版權的考量下大玩梗圖、說說五四三，非常舒壓~~<br/>\n至於下次的鐵人賽題目，應該還是會回到上次的初衷，好玩、有趣優先，有沒有其他附加價值就當佛系作者吧 XD</p>\n<br/>\n</div>",
        "content_text": "完賽不發個心得好像怪怪的。原本想整個系列補充完再發心得，但是沒有趕稿壓力下的產出超低落，果然是人性...\n\n(才沒生氣呢)\n\n話說上次的鐵人賽有幸得到出書的機會，但礙於版權的關係失敗收場，也算是另外解鎖真鐵人系列成就「鐵人賽斷賽」之「出書失敗」...打擊之下有想過再次出發，以能出書的前提下挑選題目。但收拾一下心情之後，如果有了太多考量反而失去了分享的樂趣。因此這次的參賽題目一反常態選了與工作較相關的「正(無)經(聊)」 題目，也許這樣「正常」的寫文章，也能幫助一些資安法下的受苦受難的善男信女(包含我自己)。\n相反的在不需要考慮出書的束縛下，沒有版權的考量下大玩梗圖、說說五四三，非常舒壓~~\n至於下次的鐵人賽題目，應該還是會回到上次的初衷，好玩、有趣優先，有沒有其他附加價值就當佛系作者吧 XD",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "完賽 不 發個 心得 好像 怪怪的 。 原本 想 整個 系列 補充 完再發 心得 ， 但是 沒有 趕稿 壓力 下 的 產出 超 低落 ， 果然 是 人性 ...\n( 才 沒生氣 呢 )\n話 說 上次 的 鐵人 賽 有幸 得到 出書 的 機會 ， 但 礙於 版權 的 關係 失敗 收場 ， 也 算是 另外 解鎖 真 鐵人 系列 成就 「 鐵人 賽斷賽 」 之 「 出書 失敗 」 ... 打擊 之下 有想過 再次 出發 ， 以能 出書 的 前提 下 挑選 題目 。 但 收拾 一下 心情 之後 ， 如果 有 了 太 多 考量 反而 失去 了 分享 的 樂趣 。 因此 這次 的 參賽 題目 一反常態 選 了 與 工作 較 相關 的 「 正 ( 無 ) 經 ( 聊 ) 」\n題目 ， 也許 這樣 「 正常 」 的 寫文章 ， 也 能 幫助 一些 資安法 下 的 受苦受難 的 善男信女 ( 包含 我 自己 ) 。\n相反 的 在 不 需要 考慮 出書 的 束縛 下 ， 沒有 版權 的 考量 下大玩梗圖 、 說 說 五四三 ， 非常 舒壓 ~ ~\n至於 下次 的 鐵人 賽 題目 ， 應該 還是 會 回到 上次 的 初衷 ， 好玩 、 有趣 優先 ， 有沒有 其他 附加 價值 就 當佛系 作者 吧\nXD",
        "word_seg_processed_content_text": "完賽 發個 心得 好像 怪怪的 原本 想 系列 補充 完再發 心得 趕稿 壓力 產出 超 低落 人性 ...\n才 沒生氣\n話 說 上次 鐵人 賽 有幸 出書 機會 礙於 版權 關係 失敗 收場 算是 解鎖 真 鐵人 系列 成就 鐵人 賽斷賽 出書 失敗 ... 打擊 之下 有想過 再次 出發 以能 出書 前提 挑選 題目 收拾 心情 太 考量 反而 分享 樂趣 這次 參賽 題目 一反常態 選 工作 相關 正 聊\n題目 也許 寫文章 資安法 受苦受難 善男信女 包含\n出書 束縛 版權 考量 下大玩梗圖 說 說 五四三 舒壓\n下次 鐵人 賽 題目 會 回到 上次 初衷 好玩 有趣 優先 有沒有 附加 價值 當佛系 作者\nxd",
        "extracted_keywords": [
            "賽斷賽",
            "完賽",
            "完再發",
            "失敗",
            "原本"
        ],
        "extracted_keywords_phrases": [
            "賽斷賽 出書",
            "失敗 收場",
            "出書 失敗",
            "賽斷賽",
            "失敗 打擊"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282839": {
        "href": "https://ithelp.ithome.com.tw/articles/10282839",
        "title": "2021/11/28更新",
        "content_html": "<div class=\"markdown__style\">\n                                                            <ol>\n<li>ShiojiLogin.py:<br>\n加了contracts_timeout=10000的參數，在登入時會等待Contracts資料下載完，這樣登入比較慢但可以避免一些錯誤。</li>\n<li>Gridbot.py:<br>\n新增了在下午三點中止執行，並且把money寫到檔案的部分。接下來這周開關網格機器人會改成這樣的流程:<br>\n1.執行網格機器人<br>\n2.讀取money變數(現金部位大小)<br>\n3.讀取現股部位大小<br>\n4.印出機器人裡面的總資產=現股+現金<br>\n5.問使用者要不要加減碼(對money變數做操作)<br>\n6.執行機器人交易的部分<br>\n7.到下午三點關閉機器人，並且把money變數寫到檔案</li>\n</ol>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-11-28 23:24:44",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "39",
        "processed_content_html": "<div class=\"markdown__style\">\n<ol>\n<li>ShiojiLogin.py:<br/>\n加了contracts_timeout=10000的參數，在登入時會等待Contracts資料下載完，這樣登入比較慢但可以避免一些錯誤。</li>\n<li>Gridbot.py:<br/>\n新增了在下午三點中止執行，並且把money寫到檔案的部分。接下來這周開關網格機器人會改成這樣的流程:<br/>\n1.執行網格機器人<br/>\n2.讀取money變數(現金部位大小)<br/>\n3.讀取現股部位大小<br/>\n4.印出機器人裡面的總資產=現股+現金<br/>\n5.問使用者要不要加減碼(對money變數做操作)<br/>\n6.執行機器人交易的部分<br/>\n7.到下午三點關閉機器人，並且把money變數寫到檔案</li>\n</ol>\n<br/>\n</div>",
        "content_text": "ShiojiLogin.py:\n加了contracts_timeout=10000的參數，在登入時會等待Contracts資料下載完，這樣登入比較慢但可以避免一些錯誤。\nGridbot.py:\n新增了在下午三點中止執行，並且把money寫到檔案的部分。接下來這周開關網格機器人會改成這樣的流程:\n1.執行網格機器人\n2.讀取money變數(現金部位大小)\n3.讀取現股部位大小\n4.印出機器人裡面的總資產=現股+現金\n5.問使用者要不要加減碼(對money變數做操作)\n6.執行機器人交易的部分\n7.到下午三點關閉機器人，並且把money變數寫到檔案",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "ShiojiLogin . py :\n加 了 contracts _ timeout = 10000 的 參數 ， 在 登入 時會 等待 Contracts 資料 下載 完 ， 這樣 登入 比較慢 但 可以 避免 一些 錯誤 。\nGridbot . py :\n新增 了 在 下午 三點 中止執行 ， 並且 把 money 寫到 檔案 的 部分 。 接下來 這周 開關 網格 機器人 會 改成 這樣 的 流程 :\n1 . 執行 網格 機器人\n2 . 讀取 money 變數 ( 現金 部位 大小 )\n3 . 讀 取現 股 部位 大小\n4 . 印出 機器人 裡面 的 總資產 = 現股 + 現金\n5 . 問 使用者 要 不要 加減 碼 ( 對 money 變數 做 操作 )\n6 . 執行 機器人 交易 的 部分\n7 . 到 下午 三點 關閉 機器人 ， 並且 把 money 變數 寫到 檔案",
        "word_seg_processed_content_text": "shiojilogin py\n加 contracts timeout 10000 參數 登入 時會 等待 contracts 資料 下載 完 登入 比較慢 錯誤\ngridbot py\n新增 下午 三點 中止執行 money 寫到 檔案 接下來 這周 開關 網格 機器人 會 改成 流程\n1 執行 網格 機器人\n2 讀取 money 變數 現金 部位 大小\n3 讀 取現 股 部位 大小\n4 印出 機器人 總資產 現股 現金\n5 問 使用者 加減 碼 money 變數 做 操作\n6 執行 機器人 交易\n7 下午 三點 關閉 機器人 money 變數 寫到 檔案",
        "extracted_keywords": [
            "timeout",
            "機器人",
            "使用者",
            "shiojilogin",
            "py"
        ],
        "extracted_keywords_phrases": [
            "機器人 money",
            "timeout 10000",
            "contracts timeout",
            "機器人 交易",
            "py contracts"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282817": {
        "href": "https://ithelp.ithome.com.tw/articles/10282817",
        "title": "C# 入门之正则表达式匹配并替换",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>好久没有更新了，最近比较忙，不过今天遇到一个很有意思的问题，就过来记录一下。</p>\n<p>通过正则表达式匹配文本并替换。</p>\n<p>在一个脚本中，有很多路径，此时我需要更改这个路径的部分，所以需要通过正则表达式来匹配，找到满足条件的字符串，然后再进行替换。</p>\n<p>原始路径：</p>\n<pre><code>%USERPROFILE%\\tools\\test.cmd\n</code></pre>\n<p>替换后的路径：</p>\n<pre><code>C:\\tools\\test.cmd\n</code></pre>\n<p>代码内容：</p>\n<pre><code>using System;\nusing System.Text.RegularExpressions;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string a = \"%USERPROFILE%\\\\tools\\\\test.cmd\";\n            string regexStr = @\"^\\%.*\\%\";    // 匹配已 % 开头和结尾，中间有一个或多个字符串\n            string c = Regex.Replace(a, regexStr,\"C:\");   // 通过 Regex 类中的 Replace 方法，来进行匹配替换\n            Console.WriteLine(c);\n        }\n    }\n}\n</code></pre>\n<p>Replace 语法：</p>\n<pre><code>Regex.Replace(源文本, 匹配规则,替换字符串)\n</code></pre>\n<p>为什么说这个很有意思呢，我的理解：在匹配规则的时候，我使用了 @，后面应该都转义了，不需要额外的转义字符了，应该可以直接将两个 % 当成字符串进行匹配，结果确不行。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-26 14:57:42",
        "author_href": "https://ithelp.ithome.com.tw/users/20099494/ironman",
        "author_name": "as900",
        "series_href": "https://ithelp.ithome.com.tw/users/20099494/ironman/4373",
        "series_name": "C# 入门",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>好久没有更新了，最近比较忙，不过今天遇到一个很有意思的问题，就过来记录一下。</p>\n<p>通过正则表达式匹配文本并替换。</p>\n<p>在一个脚本中，有很多路径，此时我需要更改这个路径的部分，所以需要通过正则表达式来匹配，找到满足条件的字符串，然后再进行替换。</p>\n<p>原始路径：</p>\n<pre></pre>\n<p>替换后的路径：</p>\n<pre></pre>\n<p>代码内容：</p>\n<pre></pre>\n<p>Replace 语法：</p>\n<pre></pre>\n<p>为什么说这个很有意思呢，我的理解：在匹配规则的时候，我使用了 @，后面应该都转义了，不需要额外的转义字符了，应该可以直接将两个 % 当成字符串进行匹配，结果确不行。</p>\n<br/>\n</div>",
        "content_text": "好久没有更新了，最近比较忙，不过今天遇到一个很有意思的问题，就过来记录一下。\n通过正则表达式匹配文本并替换。\n在一个脚本中，有很多路径，此时我需要更改这个路径的部分，所以需要通过正则表达式来匹配，找到满足条件的字符串，然后再进行替换。\n原始路径：\n\n替换后的路径：\n\n代码内容：\n\nReplace 语法：\n\n为什么说这个很有意思呢，我的理解：在匹配规则的时候，我使用了 @，后面应该都转义了，不需要额外的转义字符了，应该可以直接将两个 % 当成字符串进行匹配，结果确不行。",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "%USERPROFILE%\\tools\\test.cmd\n"
            },
            {
                "language": "unknown",
                "content": "C:\\tools\\test.cmd\n"
            },
            {
                "language": "unknown",
                "content": "using System;\nusing System.Text.RegularExpressions;\n\nnamespace test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string a = \"%USERPROFILE%\\\\tools\\\\test.cmd\";\n            string regexStr = @\"^\\%.*\\%\";    // 匹配已 % 开头和结尾，中间有一个或多个字符串\n            string c = Regex.Replace(a, regexStr,\"C:\");   // 通过 Regex 类中的 Replace 方法，来进行匹配替换\n            Console.WriteLine(c);\n        }\n    }\n}\n"
            },
            {
                "language": "unknown",
                "content": "Regex.Replace(源文本, 匹配规则,替换字符串)\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "好久 没有 更新 了 ， 最近 比较忙 ， 不过 今天 遇到 一个 很 有意思 的 问题 ， 就 过来 记录 一下 。\n通过 正则表达式 匹配 文本 并 替换 。\n在 一个 脚本 中 ， 有 很多 路径 ， 此时 我 需要 更改 这个 路径 的 部分 ， 所以 需要 通过 正则表达式 来 匹配 ， 找到 满足条件 的 字符串 ， 然后 再 进行 替换 。\n原始 路径 ：\n替换 后 的 路径 ：\n代码 内容 ：\nReplace\n语法 ：\n为什么 说 这个 很 有意思 呢 ， 我 的 理解 ： 在 匹配 规则 的 时候 ， 我 使用 了\n@ ， 后面 应该 都 转义 了 ， 不 需要 额外 的 转义字符 了 ， 应该 可以 直接 将 两个\n%\n当成 字符串 进行 匹配 ， 结果 确 不行 。",
        "word_seg_processed_content_text": "好久 没有 更新 比较忙 不过 一个 有意思 问题 过来 记录\n通过 正则表达式 匹配 文本 并 替换\n一个 脚本 中 很多 路径 此时 更改 这个 路径 通过 正则表达式 来 匹配 找到 满足条件 字符串 然后 进行 替换\n原始 路径\n替换 后 路径\n代码 内容\nreplace\n语法\n为什么 说 这个 有意思 理解 匹配 规则 时候\n后面 应该 转义 额外 转义字符 应该 将 两个\n\n当成 字符串 进行 匹配 结果 确 不行",
        "extracted_keywords": [
            "字符串",
            "代码",
            "路径",
            "正则表达式",
            "文本"
        ],
        "extracted_keywords_phrases": [
            "文本 替换",
            "路径 替换",
            "路径 代码",
            "替换 路径",
            "匹配 文本"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282773": {
        "href": "https://ithelp.ithome.com.tw/articles/10282773",
        "title": "[Bonus 系列] - 來看看 React Router v6 有什麼新功能?和 v5 有哪些地方不同?",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>在 2021 年 11 月初，React Router 正式釋出 v6 版本，身為 React 開發者已經按捺不住好奇心，想看看這個版本究竟增加了什麼功能?修改了什麼語法?因此就有了這篇文章的誕生。而在這篇文章中，我會介紹 v6 的一些新功能和 v5 有哪些地方不同。</p>\n<h3>1. Switch 元件被 Routes 取代，傳遞 props 元件的方式也做了調整，出現了新的 props，element</h3>\n<p>v5:</p>\n<pre><code class=\"language-jsx\">&lt;Switch&gt;\n  &lt;Route path=\"/about\"&gt;\n    &lt;About /&gt;\n  &lt;/Route&gt;\n  &lt;Route path=\"/topics\"&gt;\n    &lt;Topics /&gt;\n  &lt;/Route&gt;\n  &lt;Route path=\"/\"&gt;\n    &lt;Home /&gt;\n  &lt;/Route&gt;\n&lt;/Switch&gt;\n</code></pre>\n<p>v6:</p>\n<pre><code class=\"language-jsx\">&lt;Routes&gt;\n  &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n  &lt;Route path=\"/topics\" element={&lt;Topics /&gt;} /&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre>\n<h3>2. Router 變聰明了，不用再加上 exact</h3>\n<p>在過去，需透過 exact 設定完全符合 url 時才會顯現指定的元件內容，現在 Router 會抓取最相近的 url 去呈現對應的元件。</p>\n<pre><code class=\"language-jsx\">&lt;Routes&gt;\n  &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n  &lt;Route path=\"/topics\" element={&lt;Topics /&gt;} /&gt;\n  &lt;Route path=\"/topics/:topic\" element={&lt;SpecTopics /&gt;} /&gt;\n  &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre>\n<h3>3. NavLink 的 activeClassName prop 被移除</h3>\n<p>在 <a href=\"https://v5.reactrouter.com/web/api/NavLink\" target=\"_blank\" rel=\"noreferrer noopener\">React Router v5 的官網</a>有提到 activeClassName 被移除，v6 直接用 className 去判定即可。</p>\n<pre><code class=\"language-jsx\">&lt;NavLink className={(navData) =&gt; navData.isActive ? \"active\" : \"\" } to=\"/about\" /&gt;\n</code></pre>\n<h3>4. 簡化巢狀路由、推出 Outlet API</h3>\n<p>之前的版本需要搭配 useRouteMatch 去組出巢狀路由，現在可以直接寫上想要的子路由上去。</p>\n<p>v5:</p>\n<pre><code class=\"language-jsx\">export default function Topics() {\n  let match = useRouteMatch();\n  console.log(match);\n\n  return (\n    &lt;div&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          &lt;Link to={`${match.url}/components`}&gt;Components&lt;/Link&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;Link to={`${match.url}/props-v-state`}&gt;Props v. State&lt;/Link&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n      &lt;Switch&gt;\n        &lt;Route path={`${match.path}/:topicId`}&gt;\n          &lt;Topic /&gt;\n        &lt;/Route&gt;\n        &lt;Route path={match.path}&gt;\n          &lt;h3&gt;Please select a topic.&lt;/h3&gt;\n        &lt;/Route&gt;\n      &lt;/Switch&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>v6:</p>\n<pre><code class=\"language-jsx\">export default function Topics() {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Topics&lt;/h2&gt;\n\n      &lt;ul&gt;\n        &lt;li&gt;\n          &lt;Link to=\"components\"&gt;Components&lt;/Link&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;Link to=\"props-v-state\"&gt;Props v. State&lt;/Link&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n\n      &lt;Routes&gt;\n        &lt;Route path=\":topicId\" element={&lt;Topic /&gt;} /&gt;\n        &lt;Route path=\"*\" element={&lt;h3&gt;Please select a topic.&lt;/h3&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>另外在 path 有沒有加上 '/' 結果都是一樣的:</p>\n<pre><code class=\"language-jsx\">// 路由為 `/hobby/favorite`\n&lt;Route\n  path=\"favorite\"\n  element={&lt;FavoriteHobbyListBody /&gt;}\n/&gt;\n\n// 路由也為 `/hobby/favorite`\n&lt;Route\n  path=\"/favorite\"\n  element={&lt;FavoriteHobbyListBody /&gt;}\n/&gt;\n</code></pre>\n<h4>Outlet api 也是建立巢狀路由的一大利器，以下為官方提供的範例。</h4>\n<p>在 Dashboard 元件內部，會根據路由 <code>/messages</code> 或 <code>/tasks</code> 在 <code>&lt;Outlet /&gt;</code> 的地方呈現對應的元件 <code>&lt;DashboardMessages /&gt;</code> or <code>&lt;DashboardTasks&gt;</code>。</p>\n<pre><code class=\"language-jsx\">function Dashboard() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n      {/* This element will render either &lt;DashboardMessages&gt; when the URL is\n          \"/messages\", &lt;DashboardTasks&gt; at \"/tasks\", or null if it is \"/\"\n      */}\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Dashboard /&gt;}&gt;\n        &lt;Route\n          path=\"messages\"\n          element={&lt;DashboardMessages /&gt;}\n        /&gt;\n        &lt;Route path=\"tasks\" element={&lt;DashboardTasks /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n<h3>5. useNavigate 代替了 useHistory</h3>\n<p>useNavigate 的第一個參數可以是路由或是數字，代表前進或回去的頁數。</p>\n<h4>範例1:</h4>\n<p>v5:</p>\n<pre><code class=\"language-jsx\">import { useHistory } from \"react-router-dom\";\n\nconst News = () =&gt; {\n  let history = useHistory();\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={()=&gt; history.push(\"/home\")}&gt;Home&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<p>v6:</p>\n<pre><code class=\"language-jsx\">import { useNavigate } from \"react-router-dom\";\n\nconst News = () =&gt; {\n  let navigate = useNavigate();\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={()=&gt; navigate('/home')}&gt;Home&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<h4>範例2:</h4>\n<p>v5:</p>\n<pre><code class=\"language-jsx\">import { useHistory } from \"react-router-dom\";\n\nfunction Exchanges() {\n  const { go, goBack, goForward } = useHistory();\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; go(-2)}&gt;\n        2 steps back\n      &lt;/button&gt;\n      &lt;button onClick={goBack}&gt;1 step back&lt;/button&gt;\n      &lt;button onClick={goForward}&gt;1 step forward&lt;/button&gt;\n      &lt;button onClick={() =&gt; go(2)}&gt;\n        2 steps forward\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\n</code></pre>\n<p>v6:</p>\n<pre><code class=\"language-jsx\">import { useNavigate } from \"react-router-dom\";\n\nfunction Exchanges() {\n  const navigate = useNavigate();\n\n  return (\n    &lt;&gt;\n      &lt;button onClick={() =&gt; navigate(-2)}&gt;\n        2 steps back\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; navigate(-1)}&gt;1 step back&lt;/button&gt;\n      &lt;button onClick={() =&gt; navigate(1)}&gt;\n        1 step forward\n      &lt;/button&gt;\n      &lt;button onClick={() =&gt; navigate(2)}&gt;\n        2 steps forward\n      &lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n<blockquote>\n<p>除了 useNavigate hook 外，v6 也提供了 <a href=\"https://reactrouter.com/docs/en/v6/api#navigate\" target=\"_blank\" rel=\"noreferrer noopener\"></a>元件。</p>\n</blockquote>\n<h3>6. useRoutes 代替 react-router-config</h3>\n<p><a href=\"https://reactrouter.com/docs/en/v6/api#useroutes\" target=\"_blank\" rel=\"noreferrer noopener\">useRoutes 官網說明</a></p>\n<pre><code class=\"language-jsx\">import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\n\nconst App = () =&gt; {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: &lt;Dashboard /&gt;,\n      children: [\n        {\n          path: \"messages\",\n          element: &lt;DashboardMessages /&gt;\n        },\n        { path: \"tasks\", element: &lt;DashboardTasks /&gt; }\n      ]\n    },\n    { path: \"team\", element: &lt;AboutPage /&gt; }\n  ]);\n\n  return element;\n}\n</code></pre>\n<h3>7. 其他功能</h3>\n<p>除了上述幾點之外，當然還有其他的變更，像是 React Router v6 整個 bundle size 縮小，更加輕量，不過以上就舉比較常用的幾點來說明，想了解更深入可以點擊我推薦的 youtube 影片或是到官網去閱讀文件囉!</p>\n<ul>\n<li>\n<a href=\"https://youtu.be/zEQiNFAwDGo\" target=\"_blank\" rel=\"noreferrer noopener\">Youtube Academind: React Router 6 - What Changed &amp; Upgrading Guide</a>\n</li>\n<li>\n<a href=\"https://youtu.be/0cSVuySEB0A\" target=\"_blank\" rel=\"noreferrer noopener\">React Router v6 in depth guide</a>\n</li>\n<li>\n<a href=\"https://reactrouter.com/docs/en/v6/getting-started/overview\" target=\"_blank\" rel=\"noreferrer noopener\">React Router v6 官網</a>\n</li>\n</ul>\n<hr>\n<p>最後，放上在<a href=\"https://ithelp.ithome.com.tw/articles/10276683\" target=\"_blank\" rel=\"noreferrer noopener\">鐵人賽 Day19 文章</a>中介紹 React Router v5 的範例程式碼和修改後的 v6 版本程式碼範例提供給讀者做比較，不過範例中並沒有將文中的全部功能都使用上去，讀者可以自行練習看看哩!</p>\n<p><a href=\"https://codesandbox.io/s/friendly-flower-zj1ok\" target=\"_blank\" rel=\"noreferrer noopener\">v5 版本 codesandbox 範例</a><br>\n<a href=\"https://codesandbox.io/s/gifted-easley-jghgu\" target=\"_blank\" rel=\"noreferrer noopener\">v6 版本 codesandbox 範例</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,react router v6,react.js",
        "genre": "Modern Web",
        "published_at": "2021-11-25 09:12:59",
        "author_href": "https://ithelp.ithome.com.tw/users/20116883/ironman",
        "author_name": "harry xie",
        "series_href": "https://ithelp.ithome.com.tw/users/20116883/ironman/4069",
        "series_name": "用30天更加認識 React.js 這個好朋友",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>在 2021 年 11 月初，React Router 正式釋出 v6 版本，身為 React 開發者已經按捺不住好奇心，想看看這個版本究竟增加了什麼功能?修改了什麼語法?因此就有了這篇文章的誕生。而在這篇文章中，我會介紹 v6 的一些新功能和 v5 有哪些地方不同。</p>\n<h3>1. Switch 元件被 Routes 取代，傳遞 props 元件的方式也做了調整，出現了新的 props，element</h3>\n<p>v5:</p>\n<pre></pre>\n<p>v6:</p>\n<pre></pre>\n<h3>2. Router 變聰明了，不用再加上 exact</h3>\n<p>在過去，需透過 exact 設定完全符合 url 時才會顯現指定的元件內容，現在 Router 會抓取最相近的 url 去呈現對應的元件。</p>\n<pre></pre>\n<h3>3. NavLink 的 activeClassName prop 被移除</h3>\n<p>在 有提到 activeClassName 被移除，v6 直接用 className 去判定即可。</p>\n<pre></pre>\n<h3>4. 簡化巢狀路由、推出 Outlet API</h3>\n<p>之前的版本需要搭配 useRouteMatch 去組出巢狀路由，現在可以直接寫上想要的子路由上去。</p>\n<p>v5:</p>\n<pre></pre>\n<p>v6:</p>\n<pre></pre>\n<p>另外在 path 有沒有加上 '/' 結果都是一樣的:</p>\n<pre></pre>\n<h4>Outlet api 也是建立巢狀路由的一大利器，以下為官方提供的範例。</h4>\n<p>在 Dashboard 元件內部，會根據路由 <code>/messages</code> 或 <code>/tasks</code> 在 <code>&lt;Outlet /&gt;</code> 的地方呈現對應的元件 <code>&lt;DashboardMessages /&gt;</code> or <code>&lt;DashboardTasks&gt;</code>。</p>\n<pre></pre>\n<h3>5. useNavigate 代替了 useHistory</h3>\n<p>useNavigate 的第一個參數可以是路由或是數字，代表前進或回去的頁數。</p>\n<h4>範例1:</h4>\n<p>v5:</p>\n<pre></pre>\n<p>v6:</p>\n<pre></pre>\n<h4>範例2:</h4>\n<p>v5:</p>\n<pre></pre>\n<p>v6:</p>\n<pre></pre>\n<blockquote>\n<p>除了 useNavigate hook 外，v6 也提供了 元件。</p>\n</blockquote>\n<h3>6. useRoutes 代替 react-router-config</h3>\n<p></p>\n<pre></pre>\n<h3>7. 其他功能</h3>\n<p>除了上述幾點之外，當然還有其他的變更，像是 React Router v6 整個 bundle size 縮小，更加輕量，不過以上就舉比較常用的幾點來說明，想了解更深入可以點擊我推薦的 youtube 影片或是到官網去閱讀文件囉!</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<hr/>\n<p>最後，放上在中介紹 React Router v5 的範例程式碼和修改後的 v6 版本程式碼範例提供給讀者做比較，不過範例中並沒有將文中的全部功能都使用上去，讀者可以自行練習看看哩!</p>\n<p><br/>\n</p>\n<br/>\n</div>",
        "content_text": "在 2021 年 11 月初，React Router 正式釋出 v6 版本，身為 React 開發者已經按捺不住好奇心，想看看這個版本究竟增加了什麼功能?修改了什麼語法?因此就有了這篇文章的誕生。而在這篇文章中，我會介紹 v6 的一些新功能和 v5 有哪些地方不同。\n1. Switch 元件被 Routes 取代，傳遞 props 元件的方式也做了調整，出現了新的 props，element\nv5:\n\nv6:\n\n2. Router 變聰明了，不用再加上 exact\n在過去，需透過 exact 設定完全符合 url 時才會顯現指定的元件內容，現在 Router 會抓取最相近的 url 去呈現對應的元件。\n\n3. NavLink 的 activeClassName prop 被移除\n在 有提到 activeClassName 被移除，v6 直接用 className 去判定即可。\n\n4. 簡化巢狀路由、推出 Outlet API\n之前的版本需要搭配 useRouteMatch 去組出巢狀路由，現在可以直接寫上想要的子路由上去。\nv5:\n\nv6:\n\n另外在 path 有沒有加上 '/' 結果都是一樣的:\n\nOutlet api 也是建立巢狀路由的一大利器，以下為官方提供的範例。\n在 Dashboard 元件內部，會根據路由 /messages 或 /tasks 在 <Outlet /> 的地方呈現對應的元件 <DashboardMessages /> or <DashboardTasks>。\n\n5. useNavigate 代替了 useHistory\nuseNavigate 的第一個參數可以是路由或是數字，代表前進或回去的頁數。\n範例1:\nv5:\n\nv6:\n\n範例2:\nv5:\n\nv6:\n\n\n除了 useNavigate hook 外，v6 也提供了 元件。\n\n6. useRoutes 代替 react-router-config\n\n\n7. 其他功能\n除了上述幾點之外，當然還有其他的變更，像是 React Router v6 整個 bundle size 縮小，更加輕量，不過以上就舉比較常用的幾點來說明，想了解更深入可以點擊我推薦的 youtube 影片或是到官網去閱讀文件囉!\n\n\n\n\n\n\n\n\n\n\n\n\n最後，放上在中介紹 React Router v5 的範例程式碼和修改後的 v6 版本程式碼範例提供給讀者做比較，不過範例中並沒有將文中的全部功能都使用上去，讀者可以自行練習看看哩!",
        "content_code_info": [
            {
                "language": "jsx",
                "content": "<Switch>\n  <Route path=\"/about\">\n    <About />\n  </Route>\n  <Route path=\"/topics\">\n    <Topics />\n  </Route>\n  <Route path=\"/\">\n    <Home />\n  </Route>\n</Switch>\n"
            },
            {
                "language": "jsx",
                "content": "<Routes>\n  <Route path=\"/about\" element={<About />} />\n  <Route path=\"/topics\" element={<Topics />} />\n  <Route path=\"/\" element={<Home />} />\n</Routes>\n"
            },
            {
                "language": "jsx",
                "content": "<Routes>\n  <Route path=\"/about\" element={<About />} />\n  <Route path=\"/topics\" element={<Topics />} />\n  <Route path=\"/topics/:topic\" element={<SpecTopics />} />\n  <Route path=\"/\" element={<Home />} />\n</Routes>\n"
            },
            {
                "language": "jsx",
                "content": "<NavLink className={(navData) => navData.isActive ? \"active\" : \"\" } to=\"/about\" />\n"
            },
            {
                "language": "jsx",
                "content": "export default function Topics() {\n  let match = useRouteMatch();\n  console.log(match);\n\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "export default function Topics() {\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to=\"components\">Components</Link>\n        </li>\n        <li>\n          <Link to=\"props-v-state\">Props v. State</Link>\n        </li>\n      </ul>\n\n      <Routes>\n        <Route path=\":topicId\" element={<Topic />} />\n        <Route path=\"*\" element={<h3>Please select a topic.</h3>} />\n      </Routes>\n    </div>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "// 路由為 `/hobby/favorite`\n<Route\n  path=\"favorite\"\n  element={<FavoriteHobbyListBody />}\n/>\n\n// 路由也為 `/hobby/favorite`\n<Route\n  path=\"/favorite\"\n  element={<FavoriteHobbyListBody />}\n/>\n"
            },
            {
                "language": "jsx",
                "content": "function Dashboard() {\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      {/* This element will render either <DashboardMessages> when the URL is\n          \"/messages\", <DashboardTasks> at \"/tasks\", or null if it is \"/\"\n      */}\n      <Outlet />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Dashboard />}>\n        <Route\n          path=\"messages\"\n          element={<DashboardMessages />}\n        />\n        <Route path=\"tasks\" element={<DashboardTasks />} />\n      </Route>\n    </Routes>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "import { useHistory } from \"react-router-dom\";\n\nconst News = () => {\n  let history = useHistory();\n\n  return (\n    <>\n      <button onClick={()=> history.push(\"/home\")}>Home</button>\n    </>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "import { useNavigate } from \"react-router-dom\";\n\nconst News = () => {\n  let navigate = useNavigate();\n\n  return (\n    <>\n      <button onClick={()=> navigate('/home')}>Home</button>\n    </>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "import { useHistory } from \"react-router-dom\";\n\nfunction Exchanges() {\n  const { go, goBack, goForward } = useHistory();\n\n  return (\n    <>\n      <button onClick={() => go(-2)}>\n        2 steps back\n      </button>\n      <button onClick={goBack}>1 step back</button>\n      <button onClick={goForward}>1 step forward</button>\n      <button onClick={() => go(2)}>\n        2 steps forward\n      </button>\n    </>\n  );\n}\n\n"
            },
            {
                "language": "jsx",
                "content": "import { useNavigate } from \"react-router-dom\";\n\nfunction Exchanges() {\n  const navigate = useNavigate();\n\n  return (\n    <>\n      <button onClick={() => navigate(-2)}>\n        2 steps back\n      </button>\n      <button onClick={() => navigate(-1)}>1 step back</button>\n      <button onClick={() => navigate(1)}>\n        1 step forward\n      </button>\n      <button onClick={() => navigate(2)}>\n        2 steps forward\n      </button>\n    </>\n  );\n}\n"
            },
            {
                "language": "jsx",
                "content": "import React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\n\nconst App = () => {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: <Dashboard />,\n      children: [\n        {\n          path: \"messages\",\n          element: <DashboardMessages />\n        },\n        { path: \"tasks\", element: <DashboardTasks /> }\n      ]\n    },\n    { path: \"team\", element: <AboutPage /> }\n  ]);\n\n  return element;\n}\n"
            }
        ],
        "programming_languages": [
            "jsx"
        ],
        "word_seg_content_text": "在\n2021\n年\n11\n月初 ， React\nRouter\n正式 釋出\nv6\n版本 ， 身為\nReact\n開發者 已經 按捺不住 好奇心 ， 想 看看 這個 版本 究竟 增加 了 什麼 功能 ? 修改 了 什麼 語法 ? 因此 就 有 了 這 篇文章 的 誕生 。 而 在 這 篇文章 中 ， 我會 介紹\nv6\n的 一些 新 功能 和\nv5\n有 哪些地方 不同 。\n1 .\nSwitch\n元件 被\nRoutes\n取代 ， 傳遞\nprops\n元件 的 方式 也 做 了 調整 ， 出現 了 新 的\nprops ， element\nv5 :\nv6 :\n2 .\nRouter\n變 聰明 了 ， 不用 再 加上\nexact\n在 過去 ， 需 透過\nexact\n設定 完全符合\nurl\n時才 會 顯現 指定 的 元件 內容 ， 現在\nRouter\n會 抓取 最 相近 的\nurl\n去 呈現 對應 的 元件 。\n3 .\nNavLink\n的\nactiveClassName\nprop\n被 移除\n在\n有 提到\nactiveClassName\n被 移除 ， v6\n直接 用\nclassName\n去 判定 即可 。\n4 .\n簡化 巢狀 路由 、 推出\nOutlet\nAPI\n之前 的 版本 需要 搭配\nuseRouteMatch\n去 組出 巢狀 路由 ， 現在 可以 直接 寫 上 想要 的 子 路由 上去 。\nv5 :\nv6 :\n另外 在\npath\n有沒有 加上\n' / '\n結果 都 是 一樣 的 :\nOutlet\napi\n也 是 建立 巢狀 路由 的 一大 利器 ， 以下 為 官方 提供 的 範例 。\n在\nDashboard\n元件 內部 ， 會 根據 路由\n/ messages\n或\n/ tasks\n在\n< Outlet\n/ >\n的 地方 呈現 對應 的 元件\n< DashboardMessages\n/ >\nor\n< DashboardTasks > 。\n5 .\nuseNavigate\n代替 了\nuseHistory\nuseNavigate\n的 第一個 參數 可以 是 路由 或是 數字 ， 代表 前進 或 回去 的 頁數 。\n範例 1 :\nv5 :\nv6 :\n範例 2 :\nv5 :\nv6 :\n除了\nuseNavigate\nhook\n外 ， v6\n也 提供 了\n元件 。\n6 .\nuseRoutes\n代替\nreact - router - config\n7 .\n其他 功能\n除了 上述 幾點 之外 ， 當然 還有 其他 的 變更 ， 像是\nReact\nRouter\nv6\n整個\nbundle\nsize\n縮小 ， 更加 輕量 ， 不過 以上 就舉 比較 常用 的 幾點 來說 明 ， 想 了解 更 深入 可以 點擊 我 推薦 的\nyoutube\n影片 或是 到 官網 去 閱讀 文件 囉 !\n最後 ， 放上 在 中 介紹\nReact\nRouter\nv5\n的 範例 程式碼 和 修改 後 的\nv6\n版本 程式碼 範例 提供 給 讀者 做 比較 ， 不過 範例 中並 沒有 將 文中 的 全部 功能 都 使用 上去 ， 讀者 可以 自行 練習 看看 哩 !",
        "word_seg_processed_content_text": "\n2021\n年\n11\n月初 react\nrouter\n正式 釋出\nv6\n版本 身為\nreact\n開發者 按捺不住 好奇心 想 版本 究竟 增加 功能 修改 語法 篇文章 誕生 篇文章 中 我會 介紹\nv6\n新 功能\nv5\n哪些地方\n1\nswitch\n元件\nroutes\n取代 傳遞\nprops\n元件 方式 做 調整 新\nprops element\nv5\nv6\n2\nrouter\n變 聰明 不用 加上\nexact\n需 透過\nexact\n設定 完全符合\nurl\n時才 會 顯現 指定 元件 內容\nrouter\n會 抓取 相近\nurl\n呈現 元件\n3\nnavlink\n\nactiveclassname\nprop\n移除\n\n提到\nactiveclassname\n移除 v6\n\nclassname\n判定 即可\n4\n簡化 巢狀 路由 推出\noutlet\napi\n版本 搭配\nuseroutematch\n組出 巢狀 路由 寫 想要 子 路由\nv5\nv6\n\npath\n有沒有 加上\n' '\n\noutlet\napi\n建立 巢狀 路由 一大 利器 官方 提供 範例\n\ndashboard\n元件 內部 會 路由\nmessages\n\ntasks\n\noutlet\n\n地方 呈現 元件\ndashboardmessages\n\n\ndashboardtasks\n5\nusenavigate\n\nusehistory\nusenavigate\n第一個 參數 路由 數字 代表 回去 頁數\n範例 1\nv5\nv6\n範例 2\nv5\nv6\n\nusenavigate\nhook\n外 v6\n提供\n元件\n6\nuseroutes\n\nreact router config\n7\n功能\n幾點 之外 變更 像是\nreact\nrouter\nv6\n\nbundle\nsize\n縮小 輕量 就舉 常用 幾點 來說 明 想 了解 更 點擊 推薦\nyoutube\n影片 官網 閱讀 文件 囉\n放上 中 介紹\nreact\nrouter\nv5\n範例 程式碼 修改\nv6\n版本 程式碼 範例 提供 讀者 做 範例 中並 文中 功能 讀者 自行",
        "extracted_keywords": [
            "v5",
            "v6",
            "router",
            "開發者",
            "修改"
        ],
        "extracted_keywords_phrases": [
            "router v5",
            "v6 router",
            "修改 v6",
            "路由 v5",
            "v5"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282785": {
        "href": "https://ithelp.ithome.com.tw/articles/10282785",
        "title": "2021-11-24 盤勢分析",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h3>加權指數</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573DHG8PW0aOh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573DHG8PW0aOh.png\"><br>\n完成W底後，在10/19站上頸線，直接一路狂奔直到11/19，歷經1個月的多頭格局，<br>\n在這一個月有入場的人應該大部分都是賺的。</p>\n<p>不過在11/19之後，開始回檔的跡象。<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573lkvnqcQhn7.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573lkvnqcQhn7.png\"><br>\n今日的回檔，再次跌破前高的支撐線。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573VWOer6fwqw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573VWOer6fwqw.png\"><br>\n連續2天跌破10日線。</p>\n<p>有的投資人看到這邊就會開始荒。<br>\n別緊張，目前還不到空頭，只是回檔而已。</p>\n<p>今日要觀察的重點是<strong>會不會再度跌破支撐線</strong>，<br>\n如果跌破的話，對於加權市場個股的操作，我就會傾向保守，以保住獲利為第一原則。<br>\n但至於是不是空頭，就不要瞎猜了，按照紀律進出比較重要。</p>\n<h3>櫃買指數</h3>\n<p>相較於加權指數，櫃買指數的氣焰可強多了<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573rtFZtS3Ffx.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211125/20112573rtFZtS3Ffx.png\"></p>\n<ol>\n<li>一舉站上前高支撐，目前未有回檔跡象</li>\n<li>均線漂亮，發散開花，排列正確</li>\n<li>這一波的量能，明顯比7~10月還多</li>\n</ol>\n<p>目前的電子類股還是屬於領先族群，個人的操作也都是以電子類股居多<br>\n獲利的原則是大賺小賠，在盤勢很強的時候要盡量放大獲利，盤勢轉弱要懂得收手<br>\n以上為右側交易的原則</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-25 09:01:57",
        "author_href": "https://ithelp.ithome.com.tw/users/20112573/ironman",
        "author_name": "WM",
        "series_href": "https://ithelp.ithome.com.tw/users/20112573/ironman/4721",
        "series_name": "如何成為成功的斜槓工程師 - 理財",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<h3>加權指數</h3>\n<p><br/>\n完成W底後，在10/19站上頸線，直接一路狂奔直到11/19，歷經1個月的多頭格局，<br/>\n在這一個月有入場的人應該大部分都是賺的。</p>\n<p>不過在11/19之後，開始回檔的跡象。<br/>\n<br/>\n今日的回檔，再次跌破前高的支撐線。</p>\n<p><br/>\n連續2天跌破10日線。</p>\n<p>有的投資人看到這邊就會開始荒。<br/>\n別緊張，目前還不到空頭，只是回檔而已。</p>\n<p>今日要觀察的重點是<strong>會不會再度跌破支撐線</strong>，<br/>\n如果跌破的話，對於加權市場個股的操作，我就會傾向保守，以保住獲利為第一原則。<br/>\n但至於是不是空頭，就不要瞎猜了，按照紀律進出比較重要。</p>\n<h3>櫃買指數</h3>\n<p>相較於加權指數，櫃買指數的氣焰可強多了<br/>\n</p>\n<ol>\n<li>一舉站上前高支撐，目前未有回檔跡象</li>\n<li>均線漂亮，發散開花，排列正確</li>\n<li>這一波的量能，明顯比7~10月還多</li>\n</ol>\n<p>目前的電子類股還是屬於領先族群，個人的操作也都是以電子類股居多<br/>\n獲利的原則是大賺小賠，在盤勢很強的時候要盡量放大獲利，盤勢轉弱要懂得收手<br/>\n以上為右側交易的原則</p>\n<br/>\n</div>",
        "content_text": "加權指數\n\n完成W底後，在10/19站上頸線，直接一路狂奔直到11/19，歷經1個月的多頭格局，\n在這一個月有入場的人應該大部分都是賺的。\n不過在11/19之後，開始回檔的跡象。\n\n今日的回檔，再次跌破前高的支撐線。\n\n連續2天跌破10日線。\n有的投資人看到這邊就會開始荒。\n別緊張，目前還不到空頭，只是回檔而已。\n今日要觀察的重點是會不會再度跌破支撐線，\n如果跌破的話，對於加權市場個股的操作，我就會傾向保守，以保住獲利為第一原則。\n但至於是不是空頭，就不要瞎猜了，按照紀律進出比較重要。\n櫃買指數\n相較於加權指數，櫃買指數的氣焰可強多了\n\n\n一舉站上前高支撐，目前未有回檔跡象\n均線漂亮，發散開花，排列正確\n這一波的量能，明顯比7~10月還多\n\n目前的電子類股還是屬於領先族群，個人的操作也都是以電子類股居多\n獲利的原則是大賺小賠，在盤勢很強的時候要盡量放大獲利，盤勢轉弱要懂得收手\n以上為右側交易的原則",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "加權指數\n完成 W 底 後 ， 在 10 / 19 站上 頸線 ， 直接 一路 狂奔 直到 11 / 19 ， 歷經 1 個 月 的 多頭 格局 ，\n在 這 一個月 有 入場 的 人 應該 大部分 都 是 賺 的 。\n不過 在 11 / 19 之後 ， 開始 回檔 的 跡象 。\n今日 的 回檔 ， 再次 跌破 前高 的 支撐 線 。\n連續 2 天 跌破 10 日線 。\n有 的 投資人 看到 這邊 就 會 開始 荒 。\n別 緊張 ， 目前 還 不到 空頭 ， 只是 回檔 而已 。\n今日 要 觀察 的 重點 是 會 不會 再度 跌破 支撐 線 ，\n如果 跌破 的話 ， 對於 加權 市場 個股 的 操作 ， 我 就 會 傾向 保守 ， 以 保住 獲利 為 第一 原則 。\n但 至於 是不是 空頭 ， 就 不要 瞎猜 了 ， 按照 紀律 進出 比較 重要 。\n櫃買 指數\n相較 於 加權指數 ， 櫃買 指數 的 氣焰 可強 多 了\n一舉 站 上前 高 支撐 ， 目前 未有 回檔 跡象\n均線 漂亮 ， 發散 開花 ， 排列 正確\n這一波 的 量 能 ， 明顯 比 7 ~ 10 月 還多\n目前 的 電子 類股 還是 屬於 領先 族群 ， 個人 的 操作 也 都 是 以 電子 類股 居多\n獲利 的 原則 是 大 賺 小 賠 ， 在 盤勢 很強 的 時候 要 盡量 放大 獲利 ， 盤勢 轉弱 要 懂得 收手\n以上 為 右側 交易 的 原則",
        "word_seg_processed_content_text": "加權指數\nw 底 10 19 站上 頸線 一路 狂奔 11 19 歷經 1 月 多頭 格局\n一個月 入場 大部分 賺\n11 19 回檔 跡象\n今日 回檔 再次 跌破 前高 支撐 線\n連續 2 天 跌破 10 日線\n投資人 會 荒\n緊張 不到 空頭 回檔\n今日 觀察 重點 會 再度 跌破 支撐 線\n跌破 加權 市場 個股 操作 會 傾向 保守 保住 獲利 第一 原則\n空頭 瞎猜 紀律 進出\n櫃買 指數\n相較 加權指數 櫃買 指數 氣焰 可強\n一舉 站 上前 高 支撐 未有 回檔 跡象\n均線 漂亮 發散 開花 排列 正確\n這一波 量 7 10 月 還多\n電子 類股 領先 族群 操作 電子 類股 居多\n獲利 原則 大 賺 賠 盤勢 很強 盡量 放大 獲利 盤勢 轉弱 懂得 收手\n右側 交易 原則",
        "extracted_keywords": [
            "這一波",
            "傾向",
            "市場",
            "加權指數",
            "盤勢"
        ],
        "extracted_keywords_phrases": [
            "連續 跌破",
            "盤勢 轉弱",
            "加權 市場",
            "跌破 加權",
            "加權指數 櫃買"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282746": {
        "href": "https://ithelp.ithome.com.tw/articles/10282746",
        "title": "做不好資金控管，一檔大賠，獲利全吐",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>最近有位朋友抱怨，跟我的單但績效卻跟我差很多<br>\n我第一個直覺反應就是他沒做好「資金控管」</p>\n<h3>因為很重要，先說三次</h3>\n<h3>資金控管很重要！資金控管很重要！資金控管很重要！</h3>\n<p>資金控管沒做好，就算讓你跟到好標的，一樣有可能讓你賠錢，<br>\n以下我將用實際損益來解釋到底是如何做到賠錢的<br>\n這張是我近一個月的未實現損益<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211123/20112573qx2JYoGuaV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211123/20112573qx2JYoGuaV.png\"><br>\n表面上看起來很漂亮啊，只有一檔目前是賠的，怎麼會賠？</p>\n<p>目前持股標的中，有一檔是聯發科(11/23收盤價 $1080)，其他都是$250以下的<br>\n我這位朋友呢，他聽了我的建議，都給他買一張，感覺會漲的就給他多買幾張</p>\n<p>問題就出在這：「<strong>那萬一唯一賠的那檔是聯發科呢？</strong>」<br>\n照他這樣買法，聯發科佔整體資金比重太重了，萬一大跌的話，會拖垮整體獲利！！！</p>\n<p>正確的做法應該是<strong>平均分配個股的佔比</strong>。</p>\n<p>舉例來說，假設投資標的中有$100、$50、$20的股票<br>\n<strong>你最不應該做的是各買一張</strong>，</p>\n<p>萬一$100跌個10%，$20要漲50%才能打平，<br>\n你覺得$100跌10%跟$20漲50%，哪個機率高？</p>\n<p>正確的做法應該是$100買1張，$50買2張，$20買5張，<br>\n核心觀念就是<strong>將風險平均分攤到各股，以防止高價股大跌，獲利全吐</strong></p>\n<p>正確的投資心態是<strong>長期而穩定的獲利，而不是一時的輸贏！！！</strong></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-24 00:37:22",
        "author_href": "https://ithelp.ithome.com.tw/users/20112573/ironman",
        "author_name": "WM",
        "series_href": "https://ithelp.ithome.com.tw/users/20112573/ironman/4721",
        "series_name": "如何成為成功的斜槓工程師 - 理財",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>最近有位朋友抱怨，跟我的單但績效卻跟我差很多<br/>\n我第一個直覺反應就是他沒做好「資金控管」</p>\n<h3>因為很重要，先說三次</h3>\n<h3>資金控管很重要！資金控管很重要！資金控管很重要！</h3>\n<p>資金控管沒做好，就算讓你跟到好標的，一樣有可能讓你賠錢，<br/>\n以下我將用實際損益來解釋到底是如何做到賠錢的<br/>\n這張是我近一個月的未實現損益<br/>\n<br/>\n表面上看起來很漂亮啊，只有一檔目前是賠的，怎麼會賠？</p>\n<p>目前持股標的中，有一檔是聯發科(11/23收盤價 $1080)，其他都是$250以下的<br/>\n我這位朋友呢，他聽了我的建議，都給他買一張，感覺會漲的就給他多買幾張</p>\n<p>問題就出在這：「<strong>那萬一唯一賠的那檔是聯發科呢？</strong>」<br/>\n照他這樣買法，聯發科佔整體資金比重太重了，萬一大跌的話，會拖垮整體獲利！！！</p>\n<p>正確的做法應該是<strong>平均分配個股的佔比</strong>。</p>\n<p>舉例來說，假設投資標的中有$100、$50、$20的股票<br/>\n<strong>你最不應該做的是各買一張</strong>，</p>\n<p>萬一$100跌個10%，$20要漲50%才能打平，<br/>\n你覺得$100跌10%跟$20漲50%，哪個機率高？</p>\n<p>正確的做法應該是$100買1張，$50買2張，$20買5張，<br/>\n核心觀念就是<strong>將風險平均分攤到各股，以防止高價股大跌，獲利全吐</strong></p>\n<p>正確的投資心態是<strong>長期而穩定的獲利，而不是一時的輸贏！！！</strong></p>\n<br/>\n</div>",
        "content_text": "最近有位朋友抱怨，跟我的單但績效卻跟我差很多\n我第一個直覺反應就是他沒做好「資金控管」\n因為很重要，先說三次\n資金控管很重要！資金控管很重要！資金控管很重要！\n資金控管沒做好，就算讓你跟到好標的，一樣有可能讓你賠錢，\n以下我將用實際損益來解釋到底是如何做到賠錢的\n這張是我近一個月的未實現損益\n\n表面上看起來很漂亮啊，只有一檔目前是賠的，怎麼會賠？\n目前持股標的中，有一檔是聯發科(11/23收盤價 $1080)，其他都是$250以下的\n我這位朋友呢，他聽了我的建議，都給他買一張，感覺會漲的就給他多買幾張\n問題就出在這：「那萬一唯一賠的那檔是聯發科呢？」\n照他這樣買法，聯發科佔整體資金比重太重了，萬一大跌的話，會拖垮整體獲利！！！\n正確的做法應該是平均分配個股的佔比。\n舉例來說，假設投資標的中有$100、$50、$20的股票\n你最不應該做的是各買一張，\n萬一$100跌個10%，$20要漲50%才能打平，\n你覺得$100跌10%跟$20漲50%，哪個機率高？\n正確的做法應該是$100買1張，$50買2張，$20買5張，\n核心觀念就是將風險平均分攤到各股，以防止高價股大跌，獲利全吐\n正確的投資心態是長期而穩定的獲利，而不是一時的輸贏！！！",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "最近 有位 朋友 抱怨 ， 跟 我 的 單 但 績效 卻 跟 我 差 很多\n我 第一個 直覺反應 就是 他 沒 做好 「 資金 控管 」\n因為 很 重要 ， 先說 三次\n資金 控管 很 重要 ！ 資金 控管 很 重要 ！ 資金 控管 很 重要 ！\n資金 控管 沒 做好 ， 就算 讓 你 跟 到 好 標的 ， 一樣 有 可能 讓 你 賠錢 ，\n以下 我 將用 實際 損益 來 解釋 到底 是 如何 做到 賠錢 的\n這張 是 我 近 一個月 的 未 實現 損益\n表面 上 看起來 很漂亮 啊 ， 只有 一檔 目前 是 賠 的 ， 怎麼 會 賠 ？\n目前 持股 標的 中 ， 有 一檔 是 聯發科 ( 11 / 23 收盤價\n$ 1080 ) ， 其他 都 是 $ 250 以下 的\n我 這位 朋友 呢 ， 他 聽 了 我 的 建議 ， 都給 他 買 一張 ， 感覺 會漲 的 就給 他 多 買 幾張\n問題 就 出 在 這 ： 「 那 萬一 唯一 賠 的 那 檔 是 聯發科 呢 ？ 」\n照 他 這樣 買法 ， 聯發科 佔 整體 資金 比重 太重 了 ， 萬一 大跌 的話 ， 會 拖垮 整體 獲利 ！ ！ ！\n正確 的 做法 應該 是 平均分配 個股 的 佔 比 。\n舉例來說 ， 假設 投資 標的 中有 $ 100 、 $ 50 、 $ 20 的 股票\n你 最 不 應該 做 的 是 各 買 一張 ，\n萬一 $ 100 跌個 10% ， $ 20 要漲 50% 才能 打平 ，\n你 覺得 $ 100 跌 10% 跟 $ 20 漲 50% ， 哪個 機率 高 ？\n正確 的 做法 應該 是 $ 100 買 1 張 ， $ 50 買 2 張 ， $ 20 買 5 張 ，\n核心 觀念 就是 將 風險 平均 分攤 到 各股 ， 以 防止 高價股 大跌 ， 獲利 全吐\n正確 的 投資 心態 是 長期 而 穩定 的 獲利 ， 而 不是 一時 的 輸贏 ！ ！ ！",
        "word_seg_processed_content_text": "有位 朋友 抱怨 單 績效 差 很多\n第一個 直覺反應 沒 做好 資金 控管\n先說 三次\n資金 控管 資金 控管 資金 控管\n資金 控管 沒 做好 就算 標的 賠錢\n將用 損益 解釋 到底 賠錢\n這張 近 一個月 未 損益\n表面 看起來 很漂亮 一檔 賠 會 賠\n持股 標的 中 一檔 聯發科 11 23 收盤價\n1080 250\n這位 朋友 聽 建議 都給 買 一張 感覺 會漲 就給 買 幾張\n出 唯一 賠 檔 聯發科\n買法 聯發科 佔 整體 資金 比重 太重 大跌 會 拖垮 整體 獲利\n正確 做法 平均分配 個股 佔\n舉例來說 假設 投資 標的 中有 100 50 20 股票\n做 買 一張\n100 跌個 10% 20 要漲 50% 才能 打平\n100 跌 10% 20 漲 50% 機率 高\n正確 做法 100 買 1 張 50 買 2 張 20 買 5 張\n核心 觀念 風險 平均 分攤 各股 高價股 大跌 獲利 全吐\n正確 投資 心態 長期 穩定 獲利 輸贏",
        "extracted_keywords": [
            "資金",
            "賠錢",
            "損益",
            "獲利",
            "風險"
        ],
        "extracted_keywords_phrases": [
            "資金 控管",
            "控管 資金",
            "標的 賠錢",
            "大跌 獲利",
            "抱怨 績效"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282688": {
        "href": "https://ithelp.ithome.com.tw/articles/10282688",
        "title": "DevFest'21 Hsinchu & Taichung 議程錄影上線啦！",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>今年的 DevFest Hsinchu &amp; Taichung 已經在上週六順利結束了！感謝 Ryan 的邀請讓我有機會在學生時期站上 DevFest 的舞台 QQ</p>\n<p><iframe width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" src=\"https://www.youtube.com/embed/rCI6Cz07gls\"></iframe></p>\n<ul>\n<li>\n<a href=\"https://docs.google.com/presentation/d/1VZ0my-lc7o5pIV59_B07NnGUtOlhkv05/edit?usp=sharing&amp;ouid=109591845288009239961&amp;rtpof=true&amp;sd=true\" target=\"_blank\" rel=\"noreferrer noopener\">投影片這裡下載</a>\n</li>\n<li>\n<a href=\"https://gdg.community.dev/events/details/google-gdg-taichung-presents-devfest21-hsinchu-taichung\" target=\"_blank\" rel=\"noreferrer noopener\">完整議程表看這裡</a>\n</li>\n</ul>\n<p>我在這次的議程中主要介紹了 RISC-V 的中斷與異常的處理，以及它在作業系統當中的應用，我想影片解說應該會比滿滿的文字要更容易理解，有興趣的朋友們可以在影片五小時處開始觀看議程錄影。</p>\n<blockquote>\n<p>排在小弟的前一場議程有提到 IC 產業的分工，內容也十分豐富，在這邊跟大家推薦一下～</p>\n</blockquote>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,devfest,gdg,risc-v",
        "genre": "Software Development",
        "published_at": "2021-11-18 22:17:05",
        "author_href": "https://ithelp.ithome.com.tw/users/20110850/ironman",
        "author_name": "EN",
        "series_href": "https://ithelp.ithome.com.tw/users/20110850/ironman/3859",
        "series_name": "微自幹的作業系統輕旅行",
        "series_num": "39",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>今年的 DevFest Hsinchu &amp; Taichung 已經在上週六順利結束了！感謝 Ryan 的邀請讓我有機會在學生時期站上 DevFest 的舞台 QQ</p>\n<p><iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/rCI6Cz07gls\" width=\"560\"></iframe></p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<p>我在這次的議程中主要介紹了 RISC-V 的中斷與異常的處理，以及它在作業系統當中的應用，我想影片解說應該會比滿滿的文字要更容易理解，有興趣的朋友們可以在影片五小時處開始觀看議程錄影。</p>\n<blockquote>\n<p>排在小弟的前一場議程有提到 IC 產業的分工，內容也十分豐富，在這邊跟大家推薦一下～</p>\n</blockquote>\n<br/>\n</div>",
        "content_text": "今年的 DevFest Hsinchu & Taichung 已經在上週六順利結束了！感謝 Ryan 的邀請讓我有機會在學生時期站上 DevFest 的舞台 QQ\n\n\n\n\n\n\n\n\n\n我在這次的議程中主要介紹了 RISC-V 的中斷與異常的處理，以及它在作業系統當中的應用，我想影片解說應該會比滿滿的文字要更容易理解，有興趣的朋友們可以在影片五小時處開始觀看議程錄影。\n\n排在小弟的前一場議程有提到 IC 產業的分工，內容也十分豐富，在這邊跟大家推薦一下～",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "今年 的\nDevFest\nHsinchu\n&\nTaichung\n已經 在 上 週六 順利 結束 了 ！ 感謝\nRyan\n的 邀請 讓 我 有 機會 在 學生 時期 站上\nDevFest\n的 舞台\nQQ\n我 在 這次 的 議程 中 主要 介紹 了\nRISC - V\n的 中斷 與 異常 的 處理 ， 以及 它 在 作業系統 當中 的 應用 ， 我 想 影片 解說 應該 會 比 滿滿的 文字 要 更 容易 理解 ， 有 興趣 的 朋友 們 可以 在 影片 五小時 處 開始 觀看 議程 錄影 。\n排 在 小弟 的 前 一場 議程 有 提到\nIC\n產業 的 分工 ， 內容 也 十分 豐富 ， 在 這邊 跟 大家 推薦 一下 ～",
        "word_seg_processed_content_text": "\ndevfest\nhsinchu\n\ntaichung\n週六 順利 結束 感謝\nryan\n邀請 機會 學生 時期 站上\ndevfest\n舞台\nqq\n這次 議程 中 介紹\nrisc v\n中斷 異常 作業系統 當中 想 影片 解說 會 滿滿的 文字 更 理解 興趣 朋友 影片 五小時 處 觀看 議程 錄影\n排 小弟 前 一場 議程 提到\nic\n產業 分工 內容 推薦",
        "extracted_keywords": [
            "devfest",
            "結束",
            "taichung",
            "中斷",
            "介紹"
        ],
        "extracted_keywords_phrases": [
            "站上 devfest",
            "devfest hsinchu",
            "devfest",
            "devfest 舞台",
            "taichung 週六"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282642": {
        "href": "https://ithelp.ithome.com.tw/articles/10282642",
        "title": "建立第一個單元測試(golang)-2(Day21)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>接下來就是我要將測試放入現在正在進行的api中了</p>\n<p>在這次的測試中，我想測試mRequest.Get()會不會回傳資料庫的所有request的值</p>\n<p>而這次測試中，mRequest.Get()十分的單純</p>\n<pre><code class=\"language-go=\">func (r *MRequest) Get() (requests []Request, err error) {\n\tif findErr := r.db.Find(&amp;requests).Error; findErr != nil {\n\t\terr = findErr\n\t\treturn\n\t}\n\treturn\n}\n</code></pre>\n<p>而要預期資料庫會不會回傳所有的值，最直接的就是看，他有沒有執行</p>\n<pre><code class=\"language-sql=\">select * from requests\n</code></pre>\n<p>只要執行了這段sql，就表示他在正常連線下可以取得requests的所有資料</p>\n<p>那接著，我們要用<br>\n<a href=\"https://github.com/DATA-DOG/go-sqlmock\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/DATA-DOG/go-sqlmock</a><br>\n來對gorm進行mock<br>\n這個lib可以對大部分的sql的資料庫進行mock，所以就不用自己重新製造輪子來mock裡面的method了，而詳細的用法可以到上述連結中進行查詢<br>\n而我們這次使用的是ExpectQuery這個method，他可以幫你檢查你是否有執行你想要的sql語法<br>\n用法如下</p>\n<pre><code class=\"language-go=\">const sqlSelectAll = `SELECT * FROM \"requests\"`\nmock.ExpectQuery(regexp.QuoteMeta(sqlSelectAll)).WillReturnRows(sqlmock.NewRows(nil))\n_, err := r.Get()\nExpect(err).ShouldNot(HaveOccurred())\n</code></pre>\n<p>這樣就可以檢查到他是否有執行SELECT * FROM \"requests\"這段內容了</p>\n<p>至於說為什麼要使用regexp.QuoteMeta()這個method，是因為ExpectQuery中，他預設會認爲裡面的內容是正規表達式，所以在這句sql語法中的*跟正規表達式裡面的符號衝到了，因此如果想要預期裡面直接是字串符合的話，就要加上regexp.QuoteMeta()來讓你直接是跟這段內容相符，當然你也可以將判斷句改為</p>\n<pre><code class=\"language-go=\">select \\* from \"requests\"\n</code></pre>\n<p>這樣也是可以的</p>\n<p>接著只要到model的資料夾下執行</p>\n<pre><code class=\"language-bash=\">go test .\n</code></pre>\n<p>或是到最外面執行</p>\n<pre><code class=\"language-bash=\">go test ./...\n</code></pre>\n<p>就可以看到這次測試的結果摟<br>\n<img src=\"https://i.imgur.com/yp9uu4Y.png\" alt=\"\"></p>\n<p>以下附上這次的commit紀錄<br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.3.1\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.3.1</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-16 20:40:42",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "21",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>接下來就是我要將測試放入現在正在進行的api中了</p>\n<p>在這次的測試中，我想測試mRequest.Get()會不會回傳資料庫的所有request的值</p>\n<p>而這次測試中，mRequest.Get()十分的單純</p>\n<pre></pre>\n<p>而要預期資料庫會不會回傳所有的值，最直接的就是看，他有沒有執行</p>\n<pre></pre>\n<p>只要執行了這段sql，就表示他在正常連線下可以取得requests的所有資料</p>\n<p>那接著，我們要用<br/>\n<br/>\n來對gorm進行mock<br/>\n這個lib可以對大部分的sql的資料庫進行mock，所以就不用自己重新製造輪子來mock裡面的method了，而詳細的用法可以到上述連結中進行查詢<br/>\n而我們這次使用的是ExpectQuery這個method，他可以幫你檢查你是否有執行你想要的sql語法<br/>\n用法如下</p>\n<pre></pre>\n<p>這樣就可以檢查到他是否有執行SELECT * FROM \"requests\"這段內容了</p>\n<p>至於說為什麼要使用regexp.QuoteMeta()這個method，是因為ExpectQuery中，他預設會認爲裡面的內容是正規表達式，所以在這句sql語法中的*跟正規表達式裡面的符號衝到了，因此如果想要預期裡面直接是字串符合的話，就要加上regexp.QuoteMeta()來讓你直接是跟這段內容相符，當然你也可以將判斷句改為</p>\n<pre></pre>\n<p>這樣也是可以的</p>\n<p>接著只要到model的資料夾下執行</p>\n<pre></pre>\n<p>或是到最外面執行</p>\n<pre></pre>\n<p>就可以看到這次測試的結果摟<br/>\n</p>\n<p>以下附上這次的commit紀錄<br/>\n</p>\n<br/>\n</div>",
        "content_text": "接下來就是我要將測試放入現在正在進行的api中了\n在這次的測試中，我想測試mRequest.Get()會不會回傳資料庫的所有request的值\n而這次測試中，mRequest.Get()十分的單純\n\n而要預期資料庫會不會回傳所有的值，最直接的就是看，他有沒有執行\n\n只要執行了這段sql，就表示他在正常連線下可以取得requests的所有資料\n那接著，我們要用\n\n來對gorm進行mock\n這個lib可以對大部分的sql的資料庫進行mock，所以就不用自己重新製造輪子來mock裡面的method了，而詳細的用法可以到上述連結中進行查詢\n而我們這次使用的是ExpectQuery這個method，他可以幫你檢查你是否有執行你想要的sql語法\n用法如下\n\n這樣就可以檢查到他是否有執行SELECT * FROM \"requests\"這段內容了\n至於說為什麼要使用regexp.QuoteMeta()這個method，是因為ExpectQuery中，他預設會認爲裡面的內容是正規表達式，所以在這句sql語法中的*跟正規表達式裡面的符號衝到了，因此如果想要預期裡面直接是字串符合的話，就要加上regexp.QuoteMeta()來讓你直接是跟這段內容相符，當然你也可以將判斷句改為\n\n這樣也是可以的\n接著只要到model的資料夾下執行\n\n或是到最外面執行\n\n就可以看到這次測試的結果摟\n\n以下附上這次的commit紀錄",
        "content_code_info": [
            {
                "language": "golang",
                "content": "func (r *MRequest) Get() (requests []Request, err error) {\n\tif findErr := r.db.Find(&requests).Error; findErr != nil {\n\t\terr = findErr\n\t\treturn\n\t}\n\treturn\n}\n"
            },
            {
                "language": "sql",
                "content": "select * from requests\n"
            },
            {
                "language": "golang",
                "content": "const sqlSelectAll = `SELECT * FROM \"requests\"`\nmock.ExpectQuery(regexp.QuoteMeta(sqlSelectAll)).WillReturnRows(sqlmock.NewRows(nil))\n_, err := r.Get()\nExpect(err).ShouldNot(HaveOccurred())\n"
            },
            {
                "language": "golang",
                "content": "select \\* from \"requests\"\n"
            },
            {
                "language": "bash",
                "content": "go test .\n"
            },
            {
                "language": "bash",
                "content": "go test ./...\n"
            }
        ],
        "programming_languages": [
            "golang",
            "sql",
            "bash"
        ],
        "word_seg_content_text": "接下來 就是 我 要將 測試 放入 現在 正在 進行 的 api 中 了\n在 這次 的 測試 中 ， 我 想 測試 mRequest . Get ( ) 會 不會 回傳 資料庫 的 所有 request 的 值\n而 這次 測試 中 ， mRequest . Get ( ) 十分 的 單純\n而 要 預期 資料庫 會 不會 回傳 所有 的 值 ， 最 直接 的 就是 看 ， 他 有沒有 執行\n只要 執行 了 這段 sql ， 就 表示 他 在 正常 連線 下 可以 取得 requests 的 所有 資料\n那接 著 ， 我們 要 用\n來 對 gorm 進行 mock\n這個 lib 可以 對 大部分 的 sql 的 資料庫 進行 mock ， 所以 就 不用 自己 重新 製造 輪子 來 mock 裡面 的 method 了 ， 而 詳細 的 用法 可以 到 上述 連結 中 進行 查詢\n而 我們 這次 使用 的 是 ExpectQuery 這個 method ， 他 可以 幫 你 檢查 你 是否 有 執行 你 想要 的 sql 語法\n用法 如下\n這樣 就 可以 檢查 到 他 是否 有 執行 SELECT\n*\nFROM\n\" requests \" 這段 內容 了\n至於 說 為 什麼 要 使用 regexp . QuoteMeta ( ) 這個 method ， 是 因為 ExpectQuery 中 ， 他 預設 會 認爲 裡面 的 內容 是 正規 表達式 ， 所以 在 這句 sql 語法 中 的 * 跟 正規 表達式 裡面 的 符號 衝到 了 ， 因此 如果 想要 預期 裡面 直接 是 字串 符合 的話 ， 就要 加上 regexp . QuoteMeta ( ) 來 讓 你 直接 是 跟 這段 內容 相符 ， 當然 你 也 可以 將 判斷句 改為\n這樣 也 是 可以 的\n接著 只要 到 model 的 資料夾 下 執行\n或是 到 最 外面 執行\n就 可以 看到 這次 測試 的 結果 摟\n以下 附上 這次 的 commit 紀錄",
        "word_seg_processed_content_text": "接下來 要將 測試 放入 api 中\n這次 測試 中 想 測試 mrequest get 會 回傳 資料庫 request 值\n這次 測試 中 mrequest get 單純\n預期 資料庫 會 回傳 值 有沒有 執行\n執行 這段 sql 連線 requests 資料\n那接\ngorm mock\nlib 大部分 sql 資料庫 mock 不用 製造 輪子 mock method 詳細 用法 連結 中 查詢\n這次 expectquery method 幫 檢查 執行 想要 sql 語法\n用法\n檢查 執行 select\n\n\nrequests 這段 內容\n說 regexp quotemeta method expectquery 中 預設 會 認爲 內容 正規 表達式 這句 sql 語法 中 正規 表達式 符號 衝到 想要 預期 字串 符合 就要 加上 regexp quotemeta 這段 內容 相符 判斷句 改為\n\nmodel 資料夾 執行\n外面 執行\n這次 測試 摟\n附上 這次 commit 紀錄",
        "extracted_keywords": [
            "mrequest",
            "sql",
            "測試",
            "資料庫",
            "資料"
        ],
        "extracted_keywords_phrases": [
            "測試 mrequest",
            "資料庫 mock",
            "mrequest 回傳",
            "mrequest 單純",
            "這句 sql"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282593": {
        "href": "https://ithelp.ithome.com.tw/articles/10282593",
        "title": "更新網格交易機器人",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>改成使用targetCapital這個變數來控制總部位大小，不用每天開機器人的時候還要算加減多少錢。除此之外，這個大小在初始化的時候會檢查帳戶餘額和交割金，避免沒錢交割，不過這部分我也沒特別把帳戶裡的錢匯出去測試他的行為有沒有跟預期的一樣，最好還是多放一些錢。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-11-14 23:37:16",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "38",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>改成使用targetCapital這個變數來控制總部位大小，不用每天開機器人的時候還要算加減多少錢。除此之外，這個大小在初始化的時候會檢查帳戶餘額和交割金，避免沒錢交割，不過這部分我也沒特別把帳戶裡的錢匯出去測試他的行為有沒有跟預期的一樣，最好還是多放一些錢。</p>\n<br/>\n</div>",
        "content_text": "改成使用targetCapital這個變數來控制總部位大小，不用每天開機器人的時候還要算加減多少錢。除此之外，這個大小在初始化的時候會檢查帳戶餘額和交割金，避免沒錢交割，不過這部分我也沒特別把帳戶裡的錢匯出去測試他的行為有沒有跟預期的一樣，最好還是多放一些錢。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "改成 使用 targetCapital 這個 變數 來 控制 總部 位 大小 ， 不用 每天 開 機器人 的 時候 還要 算 加減 多少錢 。 除此之外 ， 這個 大小 在 初始化 的 時候 會 檢查 帳戶 餘額 和 交割 金 ， 避免 沒 錢 交割 ， 不過 這部分 我 也 沒 特別 把 帳戶 裡的 錢匯 出去 測試 他 的 行為 有沒有 跟 預期 的 一樣 ， 最好 還是 多放 一些 錢 。",
        "word_seg_processed_content_text": "改成 targetcapital 變數 控制 總部 位 大小 不用 開 機器人 還要 算 加減 多少錢 大小 初始化 會 檢查 帳戶 餘額 交割 金 沒 錢 交割 這部分 沒 特別 帳戶 裡的 錢匯 測試 有沒有 預期 多放 錢",
        "extracted_keywords": [
            "錢匯",
            "targetcapital",
            "帳戶",
            "變數",
            "控制"
        ],
        "extracted_keywords_phrases": [
            "改成 targetcapital",
            "targetcapital 變數",
            "錢匯 測試",
            "裡的 錢匯",
            "帳戶 餘額"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282547": {
        "href": "https://ithelp.ithome.com.tw/articles/10282547",
        "title": "STM32的開發生態，Cube、HAL庫、LL庫",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>這個分享適合剛入門STM32的新手，快速了解STM32的開發生態<br>\n我昨天最後講到我個人建議從標準庫學，懂了後再使用STM32CubeIDE，這方法只適合要走韌體開發工程師或者有心想研究這韌體的領域，絕對不適合那種只想要快速開發有功能就覺得OK的人，功能有出來就好，就別學標準庫開發了直接用STM32CubeIDE就好，什麼暫存器看法、函示配置方法、腳位宣告等等，這些STM32CubeMX都幫你弄好好了，選好IC點一點圖片中的腳位就配置好初始化函示啦~。</p>\n<p>接下來我盡量以我了解的東西用簡短的方式讓大家看一次就懂，先來介紹STM32Cube生態，具我昨天參加的ST線上研討會，第一是在介紹各個新出的MCU應用範圍，我這邊簡單整理，詳細資料可以去ST官網查詢。</p>\n<h3>1.STM32MP1</h3>\n<p>這顆屬於MPU，使用了Cortex-A7核心相對Cortex-M系列大幅提高性能，主要是支持使用Linux系统的用戶，內部含有GPU，下圖是從會議中的截圖MP1架構，可以看到具有雙核心A7和M4<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211111/20141979Krs5CoAuYH.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211111/20141979Krs5CoAuYH.png\"></p>\n<h3>2.STM32H7</h3>\n<p>最高性能的MCU，具有雙核心M7和M4，480MHz和240MHz，高達2Mbytes的內部Flash</p>\n<h3>3.STM32U5</h3>\n<p>今年新出的極低功耗MCU，更高度的安全性，ADC提升到14-bit</p>\n<p>再來聊聊STM32Cube的軟體開發工具系列</p>\n<p>STM32CubeMX：圖形化設定工具<br>\nSTM32CubeIDE：整合開發環境的IDE<br>\nSTM32CubeProgrammer：燒錄程式</p>\n<p>STM32CubeMX選定你要開發的MCU型號，在MCU圖片上點選你要使用的腳位初始化設定，STM32CubeMX也支援最新的MP1系列MPU，<code>STM32CubeMX</code>可幫助你產生把周邊init 好的 C project，有HAL庫和LL庫可根據使用者自行決定，我之前有提到HAL庫是標準庫的精簡版本，LL庫則是從HAL衍生出來的精簡版本，幾乎都是暫存器操作，這樣能大幅縮小原本程式容量，使用IDE還有個好處，就是不用受限於Keil5免費版本的程式大小限，太大就不讓你燒入困擾。</p>\n<p><code>STM32CubeIDE</code>是compiler tools ，但它在開新專案有整合CubeMX進去，就算沒有下載<code>STM32CubeMX</code>，在<code>STM32CubeIDE</code>裡還是會連結到<code>STM32CubeMX</code>我昨天在使用上沒下載<code>STM32CubeMX</code>，發現IDE裡面連結的MX會有些卡頓，在想是否與軟體使用時再與內部所建立的MX做連動所導致的些微卡頓，我在之後又去下載了<code>STM32CubeMX</code>分開使用上就比較順暢點。</p>\n<p>總之分開使用不影響原本的專案，當使用MX視窗設定好腳會後Generate code在IDE軟體上初始化也會設定好了~<br>\n首先我先放上截圖，我設定的UART2來看看跟我使用的標準庫設定差別吧</p>\n<p>首先是點完Generate code後的UART的初始化函式：<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211111/20141979x2EZbVpyC2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211111/20141979x2EZbVpyC2.png\"><br>\n再來看看我用標準庫開發自己打的UART初始化函式<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211111/201419792Z4dseYah5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211111/201419792Z4dseYah5.png\"></p>\n<p>用IDE點一點就出來，省去了很多時間昨天用到很想跳來用IDE~，由於我有開發標準庫的經驗，我在看這自動產生的程式碼不會很陌生，也大概瞭每個地方是在做什麼事，我覺得這能力是一個韌體開發該具備的基本能力。<br>\n之後也會開始來用這IDE啦~。</p>\n<p>昨天我在發表上的QA問答有問到，STM32L系列有提供標準庫開發資料嗎?，回答：沒有目前只有提供HAL庫和LL庫，我聽到這回答我就知道ST已經不在提供新的標準庫的程式，以LL庫來說會比標準庫效率更高，因為LL庫幾乎都在操作暫存器。</p>\n<p>線上研討會還有提到今年MCU結合AI，也有出了<code>STM32Cube.AI</code>軟體，這方面我就沒很清楚了，只知道這套軟體適合原本就有AI訓練的經驗的人，套用訓練好的Mode在產生對應C code燒給MCU做結合。<br>\n我在下面附上相關的教學資料，在研討會上有人問到有沒有相關的中文學習資料，<br>\n回答：無</p>\n<p><a href=\"https://www.st.com/content/st_com/en/support/learning/stm32-education/stm32-moocs.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.st.com/content/st_com/en/support/learning/stm32-education/stm32-moocs.html</a></p>\n<p><a href=\"https://www.st.com/content/st_com/en/support/learning/stm32-education/stm32-moocs/Introduction_to_STM32CubeAI_MOOC.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.st.com/content/st_com/en/support/learning/stm32-education/stm32-moocs/Introduction_to_STM32CubeAI_MOOC.html</a></p>\n<p><code>STM32Cube.AI</code>影片教學：<br>\n<a href=\"https://www.youtube.com/playlist?list=PLnMKNibPkDnFiQd11pDFtDL2aqUZHTjto\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/playlist?list=PLnMKNibPkDnFiQd11pDFtDL2aqUZHTjto</a><br>\n<a href=\"https://www.youtube.com/playlist?list=PLnMKNibPkDnEOUdTXlDH7yWN6qyxXPsEb\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/playlist?list=PLnMKNibPkDnEOUdTXlDH7yWN6qyxXPsEb</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,ecosystem,stm32cube,stm32",
        "genre": "Arm Platforms",
        "published_at": "2021-11-11 14:51:15",
        "author_href": "https://ithelp.ithome.com.tw/users/20141979/ironman",
        "author_name": "Shortbread",
        "series_href": "https://ithelp.ithome.com.tw/users/20141979/ironman/4820",
        "series_name": "基於ARM-M0架構MCU之落摔檢測韌體開發",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>這個分享適合剛入門STM32的新手，快速了解STM32的開發生態<br/>\n我昨天最後講到我個人建議從標準庫學，懂了後再使用STM32CubeIDE，這方法只適合要走韌體開發工程師或者有心想研究這韌體的領域，絕對不適合那種只想要快速開發有功能就覺得OK的人，功能有出來就好，就別學標準庫開發了直接用STM32CubeIDE就好，什麼暫存器看法、函示配置方法、腳位宣告等等，這些STM32CubeMX都幫你弄好好了，選好IC點一點圖片中的腳位就配置好初始化函示啦~。</p>\n<p>接下來我盡量以我了解的東西用簡短的方式讓大家看一次就懂，先來介紹STM32Cube生態，具我昨天參加的ST線上研討會，第一是在介紹各個新出的MCU應用範圍，我這邊簡單整理，詳細資料可以去ST官網查詢。</p>\n<h3>1.STM32MP1</h3>\n<p>這顆屬於MPU，使用了Cortex-A7核心相對Cortex-M系列大幅提高性能，主要是支持使用Linux系统的用戶，內部含有GPU，下圖是從會議中的截圖MP1架構，可以看到具有雙核心A7和M4<br/>\n</p>\n<h3>2.STM32H7</h3>\n<p>最高性能的MCU，具有雙核心M7和M4，480MHz和240MHz，高達2Mbytes的內部Flash</p>\n<h3>3.STM32U5</h3>\n<p>今年新出的極低功耗MCU，更高度的安全性，ADC提升到14-bit</p>\n<p>再來聊聊STM32Cube的軟體開發工具系列</p>\n<p>STM32CubeMX：圖形化設定工具<br/>\nSTM32CubeIDE：整合開發環境的IDE<br/>\nSTM32CubeProgrammer：燒錄程式</p>\n<p>STM32CubeMX選定你要開發的MCU型號，在MCU圖片上點選你要使用的腳位初始化設定，STM32CubeMX也支援最新的MP1系列MPU，<code>STM32CubeMX</code>可幫助你產生把周邊init 好的 C project，有HAL庫和LL庫可根據使用者自行決定，我之前有提到HAL庫是標準庫的精簡版本，LL庫則是從HAL衍生出來的精簡版本，幾乎都是暫存器操作，這樣能大幅縮小原本程式容量，使用IDE還有個好處，就是不用受限於Keil5免費版本的程式大小限，太大就不讓你燒入困擾。</p>\n<p><code>STM32CubeIDE</code>是compiler tools ，但它在開新專案有整合CubeMX進去，就算沒有下載<code>STM32CubeMX</code>，在<code>STM32CubeIDE</code>裡還是會連結到<code>STM32CubeMX</code>我昨天在使用上沒下載<code>STM32CubeMX</code>，發現IDE裡面連結的MX會有些卡頓，在想是否與軟體使用時再與內部所建立的MX做連動所導致的些微卡頓，我在之後又去下載了<code>STM32CubeMX</code>分開使用上就比較順暢點。</p>\n<p>總之分開使用不影響原本的專案，當使用MX視窗設定好腳會後Generate code在IDE軟體上初始化也會設定好了~<br/>\n首先我先放上截圖，我設定的UART2來看看跟我使用的標準庫設定差別吧</p>\n<p>首先是點完Generate code後的UART的初始化函式：<br/>\n<br/>\n再來看看我用標準庫開發自己打的UART初始化函式<br/>\n</p>\n<p>用IDE點一點就出來，省去了很多時間昨天用到很想跳來用IDE~，由於我有開發標準庫的經驗，我在看這自動產生的程式碼不會很陌生，也大概瞭每個地方是在做什麼事，我覺得這能力是一個韌體開發該具備的基本能力。<br/>\n之後也會開始來用這IDE啦~。</p>\n<p>昨天我在發表上的QA問答有問到，STM32L系列有提供標準庫開發資料嗎?，回答：沒有目前只有提供HAL庫和LL庫，我聽到這回答我就知道ST已經不在提供新的標準庫的程式，以LL庫來說會比標準庫效率更高，因為LL庫幾乎都在操作暫存器。</p>\n<p>線上研討會還有提到今年MCU結合AI，也有出了<code>STM32Cube.AI</code>軟體，這方面我就沒很清楚了，只知道這套軟體適合原本就有AI訓練的經驗的人，套用訓練好的Mode在產生對應C code燒給MCU做結合。<br/>\n我在下面附上相關的教學資料，在研討會上有人問到有沒有相關的中文學習資料，<br/>\n回答：無</p>\n<p></p>\n<p></p>\n<p><code>STM32Cube.AI</code>影片教學：<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "這個分享適合剛入門STM32的新手，快速了解STM32的開發生態\n我昨天最後講到我個人建議從標準庫學，懂了後再使用STM32CubeIDE，這方法只適合要走韌體開發工程師或者有心想研究這韌體的領域，絕對不適合那種只想要快速開發有功能就覺得OK的人，功能有出來就好，就別學標準庫開發了直接用STM32CubeIDE就好，什麼暫存器看法、函示配置方法、腳位宣告等等，這些STM32CubeMX都幫你弄好好了，選好IC點一點圖片中的腳位就配置好初始化函示啦~。\n接下來我盡量以我了解的東西用簡短的方式讓大家看一次就懂，先來介紹STM32Cube生態，具我昨天參加的ST線上研討會，第一是在介紹各個新出的MCU應用範圍，我這邊簡單整理，詳細資料可以去ST官網查詢。\n1.STM32MP1\n這顆屬於MPU，使用了Cortex-A7核心相對Cortex-M系列大幅提高性能，主要是支持使用Linux系统的用戶，內部含有GPU，下圖是從會議中的截圖MP1架構，可以看到具有雙核心A7和M4\n\n2.STM32H7\n最高性能的MCU，具有雙核心M7和M4，480MHz和240MHz，高達2Mbytes的內部Flash\n3.STM32U5\n今年新出的極低功耗MCU，更高度的安全性，ADC提升到14-bit\n再來聊聊STM32Cube的軟體開發工具系列\nSTM32CubeMX：圖形化設定工具\nSTM32CubeIDE：整合開發環境的IDE\nSTM32CubeProgrammer：燒錄程式\nSTM32CubeMX選定你要開發的MCU型號，在MCU圖片上點選你要使用的腳位初始化設定，STM32CubeMX也支援最新的MP1系列MPU，STM32CubeMX可幫助你產生把周邊init 好的 C project，有HAL庫和LL庫可根據使用者自行決定，我之前有提到HAL庫是標準庫的精簡版本，LL庫則是從HAL衍生出來的精簡版本，幾乎都是暫存器操作，這樣能大幅縮小原本程式容量，使用IDE還有個好處，就是不用受限於Keil5免費版本的程式大小限，太大就不讓你燒入困擾。\nSTM32CubeIDE是compiler tools ，但它在開新專案有整合CubeMX進去，就算沒有下載STM32CubeMX，在STM32CubeIDE裡還是會連結到STM32CubeMX我昨天在使用上沒下載STM32CubeMX，發現IDE裡面連結的MX會有些卡頓，在想是否與軟體使用時再與內部所建立的MX做連動所導致的些微卡頓，我在之後又去下載了STM32CubeMX分開使用上就比較順暢點。\n總之分開使用不影響原本的專案，當使用MX視窗設定好腳會後Generate code在IDE軟體上初始化也會設定好了~\n首先我先放上截圖，我設定的UART2來看看跟我使用的標準庫設定差別吧\n首先是點完Generate code後的UART的初始化函式：\n\n再來看看我用標準庫開發自己打的UART初始化函式\n\n用IDE點一點就出來，省去了很多時間昨天用到很想跳來用IDE~，由於我有開發標準庫的經驗，我在看這自動產生的程式碼不會很陌生，也大概瞭每個地方是在做什麼事，我覺得這能力是一個韌體開發該具備的基本能力。\n之後也會開始來用這IDE啦~。\n昨天我在發表上的QA問答有問到，STM32L系列有提供標準庫開發資料嗎?，回答：沒有目前只有提供HAL庫和LL庫，我聽到這回答我就知道ST已經不在提供新的標準庫的程式，以LL庫來說會比標準庫效率更高，因為LL庫幾乎都在操作暫存器。\n線上研討會還有提到今年MCU結合AI，也有出了STM32Cube.AI軟體，這方面我就沒很清楚了，只知道這套軟體適合原本就有AI訓練的經驗的人，套用訓練好的Mode在產生對應C code燒給MCU做結合。\n我在下面附上相關的教學資料，在研討會上有人問到有沒有相關的中文學習資料，\n回答：無\n\n\nSTM32Cube.AI影片教學：",
        "content_code_info": [],
        "programming_languages": [
            "c"
        ],
        "word_seg_content_text": "這個 分享 適合 剛 入門 STM32 的 新手 ， 快速 了解 STM32 的 開發 生態\n我 昨天 最後 講到 我 個人 建議 從 標準 庫學 ， 懂 了 後 再 使用 STM32CubeIDE ， 這方 法只 適合 要 走 韌體 開發 工程師 或者 有 心想 研究 這韌體 的 領域 ， 絕對 不 適合 那種 只 想要 快速 開發 有 功能 就 覺得 OK 的 人 ， 功能 有 出來 就 好 ， 就 別學 標準 庫 開發 了 直接 用 STM32CubeIDE 就 好 ， 什麼 暫存器 看法 、 函示 配置 方法 、 腳位 宣告 等等 ， 這些 STM32CubeMX 都 幫 你 弄 好好 了 ， 選好 IC 點 一點 圖片 中 的 腳位 就 配置 好 初始化 函示 啦 ~ 。\n接下來 我 盡量 以 我 了解 的 東西 用 簡短 的 方式 讓 大家 看 一次 就 懂 ， 先來 介紹 STM32Cube 生態 ， 具 我 昨天 參加 的 ST 線上 研討會 ， 第一 是 在 介紹 各個 新出 的 MCU 應用 範圍 ， 我 這邊 簡單 整理 ， 詳細資料 可以 去 ST 官網 查詢 。\n1 . STM32MP1\n這顆 屬於 MPU ， 使用 了 Cortex - A7 核心 相對 Cortex - M 系列 大幅提高 性能 ， 主要 是 支持 使用 Linux 系统 的 用戶 ， 內部 含有 GPU ， 下圖 是從 會議 中 的 截圖 MP1 架構 ， 可以 看到 具有 雙核心 A7 和 M4\n2 . STM32H7\n最高 性能 的 MCU ， 具有 雙核心 M7 和 M4 ， 480MHz 和 240MHz ， 高達 2Mbytes 的 內部 Flash\n3 . STM32U5\n今年 新出 的極 低功耗 MCU ， 更 高度 的 安全性 ， ADC 提升 到 14 - bit\n再來 聊聊 STM32Cube 的 軟體 開發工具 系列\nSTM32CubeMX ： 圖形化 設定 工具\nSTM32CubeIDE ： 整合 開發 環境 的 IDE\nSTM32CubeProgrammer ： 燒錄 程式\nSTM32CubeMX 選定 你 要 開發 的 MCU 型號 ， 在 MCU 圖片 上 點選 你 要 使用 的 腳位 初始化 設定 ， STM32CubeMX 也 支援 最新 的 MP1 系列 MPU ， STM32CubeMX 可 幫助 你 產生 把 周邊 init\n好 的\nC\nproject ， 有 HAL 庫 和 LL 庫 可 根據 使用者 自行決定 ， 我 之前 有 提到 HAL 庫是 標準 庫 的 精簡 版本 ， LL 庫則 是從 HAL 衍生 出來 的 精簡 版本 ， 幾乎 都 是 暫存器 操作 ， 這樣 能 大幅 縮小 原本 程式 容量 ， 使用 IDE 還有 個 好處 ， 就是 不用 受限於 Keil5 免費 版本 的 程式 大小 限 ， 太大 就 不讓 你 燒入 困擾 。\nSTM32CubeIDE 是 compiler\ntools\n， 但 它 在 開新 專案 有 整合 CubeMX 進去 ， 就算 沒有 下載 STM32CubeMX ， 在 STM32CubeIDE 裡 還是 會 連結 到 STM32CubeMX 我 昨天 在 使用 上 沒 下載 STM32CubeMX ， 發現 IDE 裡面 連結 的 MX 會 有些 卡頓 ， 在 想 是否 與 軟體 使用 時 再 與 內部 所 建立 的 MX 做 連動 所 導致 的 些微 卡頓 ， 我 在 之後 又 去 下載 了 STM32CubeMX 分開 使用 上 就 比較 順暢 點 。\n總之 分開 使用 不 影響 原本 的 專案 ， 當 使用 MX 視窗 設定 好腳 會後 Generate\ncode 在 IDE 軟體 上 初始化 也 會 設定 好 了 ~\n首先 我 先放上 截圖 ， 我 設定 的 UART2 來看 看 跟 我 使用 的 標準 庫 設定 差別 吧\n首先 是點 完 Generate\ncode 後 的 UART 的 初始化 函式 ：\n再 來看 看 我 用 標準 庫 開發 自己 打 的 UART 初始化 函式\n用 IDE 點 一點 就 出來 ， 省去 了 很多 時間 昨天 用到 很想 跳來 用 IDE ~ ， 由於 我 有 開發 標準 庫 的 經驗 ， 我 在 看 這 自動 產生 的 程式碼 不會 很 陌生 ， 也 大概 瞭 每個 地方 是 在 做 什麼 事 ， 我 覺得 這 能力 是 一個 韌體 開發 該 具備 的 基本 能力 。\n之後 也 會 開始 來用 這 IDE 啦 ~ 。\n昨天 我 在 發表 上 的 QA 問答 有 問到 ， STM32L 系列 有 提供 標準 庫 開發 資料 嗎 ? ， 回答 ： 沒有 目前 只有 提供 HAL 庫 和 LL 庫 ， 我 聽到 這回 答 我 就 知道 ST 已經 不在 提供 新 的 標準 庫 的 程式 ， 以 LL 庫 來說 會 比 標準 庫 效率 更高 ， 因為 LL 庫 幾乎 都 在 操作 暫存器 。\n線上 研討會 還有 提到 今年 MCU 結合 AI ， 也 有 出 了 STM32Cube . AI 軟體 ， 這方面 我 就 沒 很 清楚 了 ， 只 知道 這套 軟體 適合 原本 就 有 AI 訓練 的 經驗 的 人 ， 套用 訓練 好 的 Mode 在 產生 對應 C\ncode 燒給 MCU 做 結合 。\n我 在 下面 附上 相關 的 教學資料 ， 在 研討會 上 有人 問 到 有沒有 相關 的 中文 學習 資料 ，\n回答 ： 無\nSTM32Cube . AI 影片 教學 ：",
        "word_seg_processed_content_text": "分享 適合 剛 入門 stm32 新手 快速 了解 stm32 開發 生態\n昨天 講到 建議 標準 庫學 懂 stm32cubeide 這方 法只 適合 走 韌體 開發 工程師 心想 研究 這韌體 領域 適合 那種 想要 快速 開發 功能 ok 功能 別學 標準 庫 開發 stm32cubeide 暫存器 看法 函示 配置 方法 腳位 宣告 stm32cubemx 幫 弄 好好 選好 ic 點 一點 圖片 中 腳位 配置 初始化 函示\n接下來 盡量 了解 東西 簡短 方式 懂 先來 介紹 stm32cube 生態 具 昨天 參加 st 線上 研討會 第一 介紹 新出 mcu 簡單 整理 詳細資料 st 官網 查詢\n1 stm32mp1\n這顆 mpu cortex a7 核心 cortex m 系列 大幅提高 性能 支持 linux 系统 用戶 內部 含有 gpu 下圖 是從 會議 中 截圖 mp1 架構 雙核心 a7 m4\n2 stm32h7\n性能 mcu 雙核心 m7 m4 480mhz 240mhz 高達 2mbytes 內部 flash\n3 stm32u5\n新出 的極 低功耗 mcu 更 高度 安全性 adc 提升 14 bit\n再來 聊聊 stm32cube 軟體 開發工具 系列\nstm32cubemx 圖形化 設定 工具\nstm32cubeide 整合 開發 環境 ide\nstm32cubeprogrammer 燒錄 程式\nstm32cubemx 選定 開發 mcu 型號 mcu 圖片 點選 腳位 初始化 設定 stm32cubemx 支援 最新 mp1 系列 mpu stm32cubemx 周邊 init\n\nc\nproject hal 庫 ll 庫 使用者 自行決定 提到 hal 庫是 標準 庫 精簡 版本 ll 庫則 是從 hal 衍生 精簡 版本 暫存器 操作 大幅 縮小 原本 程式 容量 ide 好處 不用 受限於 keil5 免費 版本 程式 大小 限 太大 不讓 燒入 困擾\nstm32cubeide compiler\ntools\n開新 專案 整合 cubemx 進去 就算 下載 stm32cubemx stm32cubeide 裡 會 連結 stm32cubemx 昨天 沒 下載 stm32cubemx 發現 ide 連結 mx 會 卡頓 想 軟體 時 內部 建立 mx 做 連動 導致 些微 卡頓 下載 stm32cubemx 分開 順暢 點\n分開 影響 原本 專案 mx 視窗 設定 好腳 會後 generate\ncode ide 軟體 初始化 會 設定\n先放上 截圖 設定 uart2 來看 標準 庫 設定 差別\n是點 完 generate\ncode uart 初始化 函式\n來看 標準 庫 開發 uart 初始化 函式\nide 點 一點 省去 很多 時間 昨天 用到 很想 跳來 ide 開發 標準 庫 經驗 自動 程式碼 陌生 大概 瞭 地方 做 事 能力 韌體 開發 具備 能力\n會 來用 ide\n昨天 發表 qa 問答 問到 stm32l 系列 提供 標準 庫 開發 資料 回答 提供 hal 庫 ll 庫 聽到 這回 答 st 不在 提供 新 標準 庫 程式 ll 庫 來說 會 標準 庫 效率 更高 ll 庫 操作 暫存器\n線上 研討會 提到 mcu ai 出 stm32cube ai 軟體 這方面 沒 這套 軟體 適合 原本 ai 訓練 經驗 套用 訓練 mode c\ncode 燒給 mcu 做\n附上 相關 教學資料 研討會 有人 問 有沒有 相關 中文 學習 資料\n回答\nstm32cube ai 影片 教學",
        "extracted_keywords": [
            "stm32cubeprogrammer",
            "stm32cube",
            "stm32",
            "stm32cubeide",
            "stm32l"
        ],
        "extracted_keywords_phrases": [
            "stm32 開發",
            "開發 stm32cubeide",
            "ide stm32cubeprogrammer",
            "stm32cubeprogrammer",
            "介紹 stm32cube"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282545": {
        "href": "https://ithelp.ithome.com.tw/articles/10282545",
        "title": "閒聊STM32CubeMX和STM32CubeIDE",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>我這分享很適合剛入門STM32的新手!~<br>\n來閒聊一下STM32的生態吧，我在11月09日和11月10日我參加了ST的線上研討會，聽了ST介紹自己的生態有些了感想，也了解到<code>STM32CubeMX</code>和<code>STM32CubeIDE</code>的開發模式和我標準庫開發的差別。</p>\n<p>首先我原本是完全沒使用過<code>STM32CubeMX</code>和<code>STM32CubeIDE</code>，只聽說過這兩個的功能，模糊的印象<code>STM32CubeMX</code>就是自動產生配置的初始化函式，<code>STM32CubeIDE</code>就是有包含MX的設定功能和編譯產生的配置環境，然而我這模糊的方向大致是對的但還有些不知道的重要觀念，接下來會在說明我這兩天所了解的知識，有STM32CubeMX和STM32CubeIDE的差別，HAL庫跟LL庫是什麼東西，和我第一次使用STM32CubeMX和STM32CubeIDE的感想...，我覺得這這東西太方便了，方便到我想轉過來使用STM32Cube系列了XD，但這方便到讓我產生了一些感想。</p>\n<p>總之，我還是十分建議學完標準庫開發方式再去學著使用<br>\n<code>STM32CubeMX和STM32CubeIDE</code>，等我分享完就會知道為甚麼我會這樣說了。</p>\n<p>由於今天剛聽完線上研討會，立馬去載了STM32CubeMX和STM32CubeIDE來使用到剛剛，就想來分享這些事情。</p>\n<h2>明天說說<code>STM32CubeMX和STM32CubeIDE</code>、<code>HAL庫和LL庫</code>的差別</h2>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,stm32cubemx和stm32cubeide,ecosystem,stm32",
        "genre": "Arm Platforms",
        "published_at": "2021-11-10 22:17:32",
        "author_href": "https://ithelp.ithome.com.tw/users/20141979/ironman",
        "author_name": "Shortbread",
        "series_href": "https://ithelp.ithome.com.tw/users/20141979/ironman/4820",
        "series_name": "基於ARM-M0架構MCU之落摔檢測韌體開發",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>我這分享很適合剛入門STM32的新手!~<br/>\n來閒聊一下STM32的生態吧，我在11月09日和11月10日我參加了ST的線上研討會，聽了ST介紹自己的生態有些了感想，也了解到<code>STM32CubeMX</code>和<code>STM32CubeIDE</code>的開發模式和我標準庫開發的差別。</p>\n<p>首先我原本是完全沒使用過<code>STM32CubeMX</code>和<code>STM32CubeIDE</code>，只聽說過這兩個的功能，模糊的印象<code>STM32CubeMX</code>就是自動產生配置的初始化函式，<code>STM32CubeIDE</code>就是有包含MX的設定功能和編譯產生的配置環境，然而我這模糊的方向大致是對的但還有些不知道的重要觀念，接下來會在說明我這兩天所了解的知識，有STM32CubeMX和STM32CubeIDE的差別，HAL庫跟LL庫是什麼東西，和我第一次使用STM32CubeMX和STM32CubeIDE的感想...，我覺得這這東西太方便了，方便到我想轉過來使用STM32Cube系列了XD，但這方便到讓我產生了一些感想。</p>\n<p>總之，我還是十分建議學完標準庫開發方式再去學著使用<br/>\n<code>STM32CubeMX和STM32CubeIDE</code>，等我分享完就會知道為甚麼我會這樣說了。</p>\n<p>由於今天剛聽完線上研討會，立馬去載了STM32CubeMX和STM32CubeIDE來使用到剛剛，就想來分享這些事情。</p>\n<h2>明天說說<code>STM32CubeMX和STM32CubeIDE</code>、<code>HAL庫和LL庫</code>的差別</h2>\n<br/>\n</div>",
        "content_text": "我這分享很適合剛入門STM32的新手!~\n來閒聊一下STM32的生態吧，我在11月09日和11月10日我參加了ST的線上研討會，聽了ST介紹自己的生態有些了感想，也了解到STM32CubeMX和STM32CubeIDE的開發模式和我標準庫開發的差別。\n首先我原本是完全沒使用過STM32CubeMX和STM32CubeIDE，只聽說過這兩個的功能，模糊的印象STM32CubeMX就是自動產生配置的初始化函式，STM32CubeIDE就是有包含MX的設定功能和編譯產生的配置環境，然而我這模糊的方向大致是對的但還有些不知道的重要觀念，接下來會在說明我這兩天所了解的知識，有STM32CubeMX和STM32CubeIDE的差別，HAL庫跟LL庫是什麼東西，和我第一次使用STM32CubeMX和STM32CubeIDE的感想...，我覺得這這東西太方便了，方便到我想轉過來使用STM32Cube系列了XD，但這方便到讓我產生了一些感想。\n總之，我還是十分建議學完標準庫開發方式再去學著使用\nSTM32CubeMX和STM32CubeIDE，等我分享完就會知道為甚麼我會這樣說了。\n由於今天剛聽完線上研討會，立馬去載了STM32CubeMX和STM32CubeIDE來使用到剛剛，就想來分享這些事情。\n明天說說STM32CubeMX和STM32CubeIDE、HAL庫和LL庫的差別",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "我 這 分享 很 適合 剛 入門 STM32 的 新手 ! ~\n來 閒聊 一下 STM32 的 生態 吧 ， 我 在 11 月 09 日 和 11 月 10 日 我 參加 了 ST 的 線 上 研討會 ， 聽 了 ST 介紹 自己 的 生態 有些 了 感想 ， 也 了解 到 STM32CubeMX 和 STM32CubeIDE 的 開發 模式 和 我 標準 庫 開發 的 差別 。\n首先 我 原本 是 完全 沒 使用 過 STM32CubeMX 和 STM32CubeIDE ， 只 聽說 過 這 兩個 的 功能 ， 模糊 的 印象 STM32CubeMX 就是 自動 產生 配置 的 初始化 函式 ， STM32CubeIDE 就是 有 包含 MX 的 設定 功能 和 編譯 產生 的 配置 環境 ， 然而 我 這 模糊 的 方向 大致 是 對 的 但還 有些 不 知道 的 重要 觀念 ， 接下來 會 在 說明 我 這 兩天 所 了解 的 知識 ， 有 STM32CubeMX 和 STM32CubeIDE 的 差別 ， HAL 庫 跟 LL 庫是 什麼 東西 ， 和 我 第一次 使用 STM32CubeMX 和 STM32CubeIDE 的 感想 ... ， 我 覺得 這 這 東西 太 方便 了 ， 方便 到 我 想 轉過 來 使用 STM32Cube 系列 了 XD ， 但 這方 便 到 讓 我 產生 了 一些 感想 。\n總之 ， 我 還是 十分 建議 學完 標準 庫 開發方式 再 去 學著 使用\nSTM32CubeMX 和 STM32CubeIDE ， 等 我 分享 完就會 知道 為 甚麼 我會 這樣 說 了 。\n由於 今天 剛聽 完線 上 研討會 ， 立馬 去 載 了 STM32CubeMX 和 STM32CubeIDE 來 使用 到 剛剛 ， 就 想來 分享 這些 事情 。\n明天 說 說 STM32CubeMX 和 STM32CubeIDE 、 HAL 庫 和 LL 庫 的 差別",
        "word_seg_processed_content_text": "分享 適合 剛 入門 stm32 新手\n閒聊 stm32 生態 11 月 09 日 11 月 10 日 參加 st 線 研討會 聽 st 介紹 生態 感想 了解 stm32cubemx stm32cubeide 開發 模式 標準 庫 開發 差別\n原本 沒 stm32cubemx stm32cubeide 聽說 兩個 功能 模糊 印象 stm32cubemx 自動 配置 初始化 函式 stm32cubeide 包含 mx 設定 功能 編譯 配置 環境 模糊 方向 大致 但還 觀念 接下來 會 兩天 了解 知識 stm32cubemx stm32cubeide 差別 hal 庫 ll 庫是 東西 第一次 stm32cubemx stm32cubeide 感想 ... 東西 太 想 轉過 stm32cube 系列 xd 這方 便 感想\n建議 學完 標準 庫 開發方式 學著\nstm32cubemx stm32cubeide 分享 完就會 我會 說\n剛聽 完線 研討會 立馬 載 stm32cubemx stm32cubeide 剛剛 想來 分享 事情\n明天 說 說 stm32cubemx stm32cubeide hal 庫 ll 庫 差別",
        "extracted_keywords": [
            "stm32cube",
            "stm32cubeide",
            "stm32",
            "stm32cubemx",
            "st"
        ],
        "extracted_keywords_phrases": [
            "stm32 生態",
            "stm32cubeide 開發",
            "stm32cubeide 感想",
            "stm32cubeide 包含",
            "stm32cube"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282544": {
        "href": "https://ithelp.ithome.com.tw/articles/10282544",
        "title": "建立第一個單元測試(golang)-1(Day20)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>當我們建立起最簡單的RESTful api後，接下來我們就要將測試也放到我們的程式中了<br>\n在golang中，他原本就有將測試的框架包進去他原生的函示庫了，在網路上也很很多不一樣的測試框架，而我接下來會實做的測試方式，主要是參考</p>\n<p>gorm mock</p>\n<ul>\n<li>\n<a href=\"https://yuanchieh.page/posts/2021/2021-03-18-golang-test/\" target=\"_blank\" rel=\"noreferrer noopener\">https://yuanchieh.page/posts/2021/2021-03-18-golang-test/</a>\n</li>\n<li>\n<a href=\"https://medium.com/cbi-engineering/mocking-techniques-for-go-805c10f1676b\" target=\"_blank\" rel=\"noreferrer noopener\">https://medium.com/cbi-engineering/mocking-techniques-for-go-805c10f1676b</a>\n</li>\n<li>\n<a href=\"https://medium.com/@rosaniline/unit-testing-gorm-with-go-sqlmock-in-go-93cbce1f6b5b\" target=\"_blank\" rel=\"noreferrer noopener\">https://medium.com/@rosaniline/unit-testing-gorm-with-go-sqlmock-in-go-93cbce1f6b5b</a>\n</li>\n<li>\n<a href=\"https://betterprogramming.pub/how-to-unit-test-a-gorm-application-with-sqlmock-97ee73e36526\" target=\"_blank\" rel=\"noreferrer noopener\">https://betterprogramming.pub/how-to-unit-test-a-gorm-application-with-sqlmock-97ee73e36526</a>\n</li>\n</ul>\n<p>這篇文章的實作方式，如果大家有什麼其他的說明，也可以在下面留言交流</p>\n<p>首先，要先安裝測試需要的套件<br>\n測試框架<br>\n<a href=\"https://onsi.github.io/ginkgo/#getting-ginkgo\" target=\"_blank\" rel=\"noreferrer noopener\">https://onsi.github.io/ginkgo/#getting-ginkgo</a></p>\n<pre><code class=\"language-shell=\">go get github.com/onsi/ginkgo/ginkgo\ngo get github.com/onsi/gomega/...\n</code></pre>\n<p>mock框架<br>\n<a href=\"https://github.com/golang/mock\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/golang/mock</a></p>\n<pre><code class=\"language-shell=\">go install github.com/golang/mock/mockgen@v1.6.0\n</code></pre>\n<p>gorm mock<br>\n<a href=\"https://github.com/DATA-DOG/go-sqlmock\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/DATA-DOG/go-sqlmock</a></p>\n<pre><code class=\"language-shell=\">go get github.com/DATA-DOG/go-sqlmock\n</code></pre>\n<p>在這邊補充說明一下mock的用途<br>\n在最簡單的測試中，你的程式中只會有input跟output<br>\n例如</p>\n<pre><code class=\"language-go=\">func add(a int, b int) (output int) {\n    return a + b\n}\n</code></pre>\n<p>這樣在撰寫測試的時候就只要寫上</p>\n<pre><code class=\"language-go=\">result := add(1,2)\nExpect(result).To(Equal(3))\n</code></pre>\n<p>這樣即可，但如果有一天你的程式有依賴其他人<br>\n例如</p>\n<pre><code class=\"language-go=\">import (\n\t\"math/rand\"\n)\n\nfunc isRandomEven() (output bool) {\n\tresult := rand.Intn(86)\n\treturn result%2 == 0\n}\n</code></pre>\n<p>這時的測試就不能像上方這樣寫了，因為每次測試出來的結果都會不一樣<br>\n這時候就要將rand.Intn所產出的內容用一個我們可以控制的function來控制，而這個動作就叫做mock<br>\n原始程式</p>\n<pre><code class=\"language-go=\">import (\n\t\"math/rand\"\n)\nvar getRandom = rand.Intn\nfunc isRandomEven() (output bool) {\n\tresult := getRandom(86)\n\treturn result%2 == 0\n}\n</code></pre>\n<p>測試</p>\n<pre><code class=\"language-go=\">getRandom = func (_ int) int {\n    return 10\n}\nresult := isRandomEven()\nExpect(result).To(Equal(true))\n</code></pre>\n<p>下一篇我們就要將這些測試的內容放到我們的程式中了</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-10 20:40:28",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "20",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>當我們建立起最簡單的RESTful api後，接下來我們就要將測試也放到我們的程式中了<br/>\n在golang中，他原本就有將測試的框架包進去他原生的函示庫了，在網路上也很很多不一樣的測試框架，而我接下來會實做的測試方式，主要是參考</p>\n<p>gorm mock</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<p>這篇文章的實作方式，如果大家有什麼其他的說明，也可以在下面留言交流</p>\n<p>首先，要先安裝測試需要的套件<br/>\n測試框架<br/>\n</p>\n<pre></pre>\n<p>mock框架<br/>\n</p>\n<pre></pre>\n<p>gorm mock<br/>\n</p>\n<pre></pre>\n<p>在這邊補充說明一下mock的用途<br/>\n在最簡單的測試中，你的程式中只會有input跟output<br/>\n例如</p>\n<pre></pre>\n<p>這樣在撰寫測試的時候就只要寫上</p>\n<pre></pre>\n<p>這樣即可，但如果有一天你的程式有依賴其他人<br/>\n例如</p>\n<pre></pre>\n<p>這時的測試就不能像上方這樣寫了，因為每次測試出來的結果都會不一樣<br/>\n這時候就要將rand.Intn所產出的內容用一個我們可以控制的function來控制，而這個動作就叫做mock<br/>\n原始程式</p>\n<pre></pre>\n<p>測試</p>\n<pre></pre>\n<p>下一篇我們就要將這些測試的內容放到我們的程式中了</p>\n<br/>\n</div>",
        "content_text": "當我們建立起最簡單的RESTful api後，接下來我們就要將測試也放到我們的程式中了\n在golang中，他原本就有將測試的框架包進去他原生的函示庫了，在網路上也很很多不一樣的測試框架，而我接下來會實做的測試方式，主要是參考\ngorm mock\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n這篇文章的實作方式，如果大家有什麼其他的說明，也可以在下面留言交流\n首先，要先安裝測試需要的套件\n測試框架\n\n\nmock框架\n\n\ngorm mock\n\n\n在這邊補充說明一下mock的用途\n在最簡單的測試中，你的程式中只會有input跟output\n例如\n\n這樣在撰寫測試的時候就只要寫上\n\n這樣即可，但如果有一天你的程式有依賴其他人\n例如\n\n這時的測試就不能像上方這樣寫了，因為每次測試出來的結果都會不一樣\n這時候就要將rand.Intn所產出的內容用一個我們可以控制的function來控制，而這個動作就叫做mock\n原始程式\n\n測試\n\n下一篇我們就要將這些測試的內容放到我們的程式中了",
        "content_code_info": [
            {
                "language": "shell",
                "content": "go get github.com/onsi/ginkgo/ginkgo\ngo get github.com/onsi/gomega/...\n"
            },
            {
                "language": "shell",
                "content": "go install github.com/golang/mock/mockgen@v1.6.0\n"
            },
            {
                "language": "shell",
                "content": "go get github.com/DATA-DOG/go-sqlmock\n"
            },
            {
                "language": "golang",
                "content": "func add(a int, b int) (output int) {\n    return a + b\n}\n"
            },
            {
                "language": "golang",
                "content": "result := add(1,2)\nExpect(result).To(Equal(3))\n"
            },
            {
                "language": "golang",
                "content": "import (\n\t\"math/rand\"\n)\n\nfunc isRandomEven() (output bool) {\n\tresult := rand.Intn(86)\n\treturn result%2 == 0\n}\n"
            },
            {
                "language": "golang",
                "content": "import (\n\t\"math/rand\"\n)\nvar getRandom = rand.Intn\nfunc isRandomEven() (output bool) {\n\tresult := getRandom(86)\n\treturn result%2 == 0\n}\n"
            },
            {
                "language": "golang",
                "content": "getRandom = func (_ int) int {\n    return 10\n}\nresult := isRandomEven()\nExpect(result).To(Equal(true))\n"
            }
        ],
        "programming_languages": [
            "shell",
            "golang"
        ],
        "word_seg_content_text": "當 我們 建立 起 最 簡單 的 RESTful\napi 後 ， 接下來 我們 就要 將 測試 也 放到 我們 的 程式 中 了\n在 golang 中 ， 他 原本 就 有將 測試 的 框架 包 進去 他 原生 的 函示 庫 了 ， 在 網路上 也 很 很多 不 一樣 的 測試 框架 ， 而 我 接下來 會實 做 的 測試 方式 ， 主要 是 參考\ngorm\nmock\n這 篇文章 的 實作 方式 ， 如果 大家 有 什麼 其他 的 說明 ， 也 可以 在 下面 留言 交流\n首先 ， 要 先 安裝 測試 需要 的 套件\n測試 框架\nmock 框架\ngorm\nmock\n在 這邊 補充 說明 一下 mock 的 用途\n在 最 簡單 的 測試 中 ， 你 的 程式 中 只會 有 input 跟 output\n例如\n這樣 在 撰寫 測試 的 時候 就 只要 寫 上\n這樣 即可 ， 但 如果 有 一天 你 的 程式 有 依賴 其他人\n例如\n這時 的 測試 就 不能 像 上方 這樣 寫 了 ， 因為 每次 測試 出來 的 結果 都 會 不 一樣\n這時候 就要 將 rand . Intn 所 產出 的 內容 用 一個 我們 可以 控制 的 function 來 控制 ， 而 這個 動作 就 叫做 mock\n原始 程式\n測試\n下 一篇 我們 就要 將 這些 測試 的 內容 放到 我們 的 程式 中 了",
        "word_seg_processed_content_text": "建立 簡單 restful\napi 接下來 就要 測試 放到 程式 中\ngolang 中 原本 有將 測試 框架 包 進去 原生 函示 庫 網路上 很多 測試 框架 接下來 會實 做 測試 方式 參考\ngorm\nmock\n篇文章 實作 方式 留言 交流\n先 安裝 測試 套件\n測試 框架\nmock 框架\ngorm\nmock\n補充 mock 用途\n簡單 測試 中 程式 中 只會 input output\n\n撰寫 測試 寫\n即可 程式 依賴 其他人\n\n測試 上方 寫 每次 測試 會\n這時候 就要 rand intn 產出 內容 控制 function 控制 動作 mock\n原始 程式\n測試\n一篇 就要 測試 內容 放到 程式 中",
        "extracted_keywords": [
            "測試",
            "mock",
            "程式",
            "框架",
            "用途"
        ],
        "extracted_keywords_phrases": [
            "測試 框架",
            "測試 程式",
            "程式 測試",
            "測試 套件",
            "套件 測試"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282541": {
        "href": "https://ithelp.ithome.com.tw/articles/10282541",
        "title": "Day 38 - 在 AWS Lambda 中使用 YOLO 推估 (Inference)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>Day 38 - 在 AWS Lambda 中使用 YOLO 推估 (Inference)</h1>\n<p>在 <a href=\"https://ithelp.ithome.com.tw/articles/10264575\" target=\"_blank\" rel=\"noreferrer noopener\">Day 15 - 說明 YOLO 相關設定</a> 以及 <a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">Day 16 - 進行影像辨識訓練</a>完成了 YOLO 自訂資料集的訓練，在 <a href=\"https://ithelp.ithome.com.tw/articles/10282495\" target=\"_blank\" rel=\"noreferrer noopener\">Day 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識</a> 與 <a href=\"https://ithelp.ithome.com.tw/articles/10282519\" target=\"_blank\" rel=\"noreferrer noopener\">Day 36 - 使用 Container 建立 Amazon SageMaker 端點</a> 分別用不同的方法來進行 YOLO 推估的任務。</p>\n<p>彼此之間的關係如下圖所示，使用者透過 <strong>API Gateway</strong> 上傳 (PUT) 圖片到 <strong>儲存貯體 A</strong>，這個事件會驅動 <strong>AWS Lambda 函數</strong>，此時，<strong>AWS Lambda 函數</strong> 會根據事先訓練好的 YOLO 模型，對於該圖片進行 YOLO 推估 (Inference)，接著以 <strong>IAM 角色 B</strong> 的身分，將偵測到物件畫出方塊框後，存到 <strong>儲存貯體 B</strong>，而使用者就可以看到處理後的結果。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510LZjSpkJlEt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510LZjSpkJlEt.png\"><br>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p><a href=\"https://github.com/erentknn/yolov4-object-detection/blob/master/yolo_image.py\" target=\"_blank\" rel=\"noreferrer noopener\">Simple Inference Scripts for YOLO with OpenCV</a> 這份專案中提供了一個使用 OpenCV 來進行 YOLO 推論的案例，現在我們就試著將這個案例佈署到 AWS Lambda 進行測試，需要的前期準備工作如下：</p>\n<ol>\n<li>上傳 YOLO 相關檔案到 S3： 訓練好的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg)</li>\n<li>建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。</li>\n<li>建立 AWS Lambda 函數，並設定環境變數。</li>\n<li>在 AWS Lambda 建立 OpenCV 層</li>\n<li>撰寫 AWS Lambda 函數並完成測試</li>\n</ol>\n<p><strong>步驟 1. 上傳 YOLO 相關檔案到 S3</strong></p>\n<p>因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg) 存到 S3 中，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510PEMPbnXX5X.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510PEMPbnXX5X.png\"><br>\n圖 2、上傳 YOLO 相關檔案到 S3</p>\n<p><strong>步驟 2. 建立 IAM 角色</strong></p>\n<p>建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510Ho1lmAVeEv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510Ho1lmAVeEv.png\"><br>\n圖 3、建立一個角色選擇 Lambda 的使用案例</p>\n<p>在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ONBVaFtqLd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ONBVaFtqLd.png\"><br>\n圖 4、連接基礎的 CloudWatch 除錯用的許可政策</p>\n<p>最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510tcuQo65mSs.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510tcuQo65mSs.png\"><br>\n圖 5、檢閱設定並建立角色</p>\n<p>編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295106z8PES6Fyg.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295106z8PES6Fyg.png\"><br>\n圖 6、新增政策</p>\n<p>接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295104ocZPCDT9y.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295104ocZPCDT9y.png\"><br>\n圖 7、將新增的政策連接到先前的角色</p>\n<p><strong>步驟 3. 建立 AWS Lambda 函數</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇 <em>Python 3.7</em>，因為要使用 OpenCV 函式庫層，而執行角色要也要記得選擇上一個步驟設定的角色。</p>\n<ul>\n<li>選擇下列選項之一來建立您的函式： <em>從頭開始撰寫</em>\n</li>\n<li>函式名稱： <em>opencv45Func</em>\n</li>\n<li>執行時間： <em>Python 3.7</em>\n</li>\n<li>架構： <em>x86_64</em>\n</li>\n<li>執行角色： <em>使用現有的角色</em>\n</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510GSsTSguPHs.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510GSsTSguPHs.png\"><br>\n圖 8、建立 Lambda 函數設定畫面</p>\n<p>在 Lambda 函數中點擊 <strong>組態</strong> 頁籤，接著點擊 <strong>環境變量</strong>，新增三個環境變量，如下所示：</p>\n<ul>\n<li>modelbucket： 存放權重的<strong>儲存貯體</strong>，應該也是<strong>儲存貯體 B</strong>，因為任何對 <strong>儲存貯體 A</strong> 所做的寫入都會引發驅動 Lambda 的事件。</li>\n<li>modelweight：<em>yolov4cfg/yolov3.backup</em>\n</li>\n<li>putbucket： <em>儲存貯體 B</em>\n</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ljWNiRwXfE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ljWNiRwXfE.png\"><br>\n圖 9、新增 Lambda 函數組態中的環境變量</p>\n<p><strong>步驟 4.在 AWS Lambda 建立 OpenCV 層</strong></p>\n<p>建立 Lambda 函數後，選擇進入 AWS Lambda 函數的設定畫面，在畫面的最底端，為本函數 <strong>新建 Layer</strong>，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510BQI91WmFO5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510BQI91WmFO5.png\"><br>\n圖 10、為 Lambda 函數新增 Layer</p>\n<p>進入新增 Layer 畫面後，選擇層來源為 <em>自訂 Layer</em>，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295100VqEUZgVUo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/201295100VqEUZgVUo.png\"><br>\n圖 11、選擇 opencv45 函式庫層</p>\n<p><strong>步驟 5. 撰寫 AWS Lambda 函數並完成測試</strong></p>\n<p>需要先建立一個目錄 <em>cfg</em>，在目錄內新增一個檔案 <em>yolov3.cfg</em> ，這個檔案的內容可以參考 <a href=\"https://ithelp.ithome.com.tw/articles/10264575\" target=\"_blank\" rel=\"noreferrer noopener\">Day 15 - 說明 YOLO 相關設定</a>，而主要的推論程式為 <em>service.py</em>，內容如下</p>\n<p><em>service.py</em></p>\n<pre><code>from __future__ import print_function\n\nimport urllib.request\nimport os\nimport subprocess\nimport boto3\nimport time\nimport cv2 \n\nSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\nLIB_DIR = os.path.join(SCRIPT_DIR, 'lib')\ns3_client = boto3.client('s3')\nmodelbucket = os.environ['modelbucket']\nmodelweight = os.environ['modelweight']\nmodelcfg = 'cfg/yolov3.cfg'\n\n# 從 s3 下載檔案\ndef downloadFromS3(strBucket,strKey,strFile):\n  s3_client.download_file(strBucket, strKey, strFile)\n\nstrWeightFile = '/tmp/' +  modelweight.replace('/', '')\ndownloadFromS3(modelbucket,modelweight,strWeightFile)  \nprint(strWeightFile)\n\n# 繪製物件方塊框\ndef draw_image(image_path, output_path, pridicts):\n  cv2image = cv2.imread(image_path)\n  for k in range(len(pridicts[0])):\n    x, y, w, h  = pridicts[2][k]\n    cv2.putText(cv2image, \"{:.4f}\".format(pridicts[1][k][0]), (x, y-6), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 1, cv2.LINE_AA)\n    cv2.rectangle(cv2image, (int(x),int(y)), (int(x+w),int(y+w)), (0,255,0), 2)\n  cv2.imwrite(output_path, cv2image)\n\n# yolo 推論函數\ndef yolo_infer(weight, cfg, pic):\n  frame = cv2.imread(pic)\n  model = cv2.dnn.readNet(weight,cfg)\n  net = cv2.dnn_DetectionModel(model)\n  net.setInputSize(608, 608)\n  net.setInputScale(1.0 / 255)\n  net.setInputSwapRB(True)\n\n  classes, confidences, boxes = net.detect(frame, confThreshold=0.1, nmsThreshold=0.4)\n  return classes,confidences,boxes\n\n# lambda 程式進入口    \ndef handler(event, context):\n  for record in event['Records']:\n    inputbucket = record['s3']['bucket']['name']\n    outputbucket = os.environ['putbucket']\n    key = record['s3']['object']['key']\n    imgfilepath = '/tmp/inputimage.jpg'\n    \n    downloadFromS3(inputbucket,key,imgfilepath)\n    prev_time = time.time()\n    result = yolo_infer(strWeightFile, modelcfg, imgfilepath)\n    print('predicting time: ' , (time.time() - prev_time))\n\n    tmpkey = key.replace('/', '')\n    upload_path = '/tmp/process-{}'.format(tmpkey)\n    draw_image(imgfilepath, upload_path, result)\n    s3_client.upload_file(upload_path, outputbucket, key,ExtraArgs={'ACL': 'public-read','ContentType':'image/jpeg'})\n\n    return 0 \n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510bCzPmnTmsw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510bCzPmnTmsw.png\"><br>\n圖 12、AWS Lambda 程式碼</p>\n<p>建立新測試事件，事件範本選擇 <em>hello-world</em>，事件名稱輸入 <em>fromS3Bucket</em>，內容所下圖所示，這是用來模擬當 S3 觸發 Lambda 函數後所傳過來的參數內容，記得將 [INPUT_BUCKET] 改成實際的輸入儲存貯體名稱，而[INPUT_OBJECT]要確保有這個檔案。</p>\n<pre><code>{\n  \"Records\": [\n    {\n      \"s3\": {\n        \"bucket\": {\n          \"name\": \"[INPUT_BUCKET]\",\n          \"arn\": \"arn:aws:s3:::[INPUT_BUCKET]\"\n        },\n        \"object\": {\n          \"key\": \"[INPUT_OBJECT]\"\n        }\n      }\n    }\n  ]\n}\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510FbtH6Go5r2.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510FbtH6Go5r2.png\"><br>\n圖 13、設定 Lambda 函數測試事件</p>\n<p>拉到畫面下方，修改 <strong>執行時間設定</strong>，將 <em>處理常式</em> 指定為 <em>service.handler</em>，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ZZPRzUD1Ib.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ZZPRzUD1Ib.png\"><br>\n圖 14、修改執行時間設定中的處理常式</p>\n<p>最後點擊 <strong>Test</strong> 進行測試，得到的結果如下圖所示，推論時間約 1.75 秒，所需記憶體為 990 MB。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510rdoMbLi0oF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510rdoMbLi0oF.png\"><br>\n圖 15、使用 OpenCV 進行 YOLO 推論</p>\n<p>因此，這似乎是一個可以接受的解決方案，表 1.列出目前為止的所有 YOLO 辨識部署解決方案。</p>\n<p>表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較</p>\n<table>\n<thead>\n<tr>\n<th>&nbsp;</th>\n<th>使用 EC2</th>\n<th>使用 Lambda (darknet)</th>\n<th>使用 SageMaker</th>\n<th>使用 Lambda (OpenCV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成本(USD)</td>\n<td>0.736/hour</td>\n<td>0</td>\n<td>1.0304/hour</td>\n<td>0</td>\n</tr>\n<tr>\n<td>時間(秒)</td>\n<td>~ 0.1 秒</td>\n<td>&gt; 60 秒</td>\n<td>1秒 左右</td>\n<td>1-3 秒</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>較差</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n</tr>\n</tbody>\n</table>\n<h2>參考資料</h2>\n<ul>\n<li>Simple Inference Scripts for YOLO with OpenCV, <a href=\"https://github.com/erentknn/yolov4-object-detection/blob/master/yolo_image.py\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/erentknn/yolov4-object-detection/blob/master/yolo_image.py</a>\n</li>\n<li>Day 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識, <a href=\"https://ithelp.ithome.com.tw/articles/10282495\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10282495</a>\n</li>\n<li>Day 35 - Amazon SageMaker 簡介, <a href=\"https://ithelp.ithome.com.tw/articles/10282504\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10282504</a>\n</li>\n<li>Day 36 - 使用 Container 建立 Amazon SageMaker 端點, <a href=\"https://ithelp.ithome.com.tw/articles/10282519\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10282519</a>\n</li>\n<li>Day 37 - 在 AWS Lambda 建立 OpenCV Layer, <a href=\"https://ithelp.ithome.com.tw/articles/10282533\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10282533</a>\n</li>\n<li>yolov4-SageMaker, <a href=\"https://github.com/jackie930/yolov4-SageMaker\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/jackie930/yolov4-SageMaker</a>\n</li>\n<li>Pytorch-YOLOv4, <a href=\"https://github.com/Tianxiaomo/pytorch-YOLOv4\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/Tianxiaomo/pytorch-YOLOv4</a>\n</li>\n<li>YOLO v4-v3 CPU Inference API for Windows and Linux, <a href=\"https://github.com/BMW-InnovationLab/BMW-YOLOv4-Inference-API-CPU\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/BMW-InnovationLab/BMW-YOLOv4-Inference-API-CPU</a>\n</li>\n<li>pytorch_YOLO_OpenVINO_demo, <a href=\"https://github.com/Chen-MingChang/pytorch_YOLO_OpenVINO_demo\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/Chen-MingChang/pytorch_YOLO_OpenVINO_demo</a>\n</li>\n<li>Real-time Object Detection on CPU, <a href=\"https://towardsdatascience.com/real-time-object-detection-on-cpu-9f77d32deeaf\" target=\"_blank\" rel=\"noreferrer noopener\">https://towardsdatascience.com/real-time-object-detection-on-cpu-9f77d32deeaf</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,yolo,aws lambda,opencv",
        "genre": "AI & Data",
        "published_at": "2021-11-10 16:27:40",
        "author_href": "https://ithelp.ithome.com.tw/users/20129510/ironman",
        "author_name": "yehchitsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20129510/ironman/4385",
        "series_name": "觀賞魚辨識的YOLO全餐",
        "series_num": "38",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>Day 38 - 在 AWS Lambda 中使用 YOLO 推估 (Inference)</h1>\n<p>在  以及 完成了 YOLO 自訂資料集的訓練，在  與  分別用不同的方法來進行 YOLO 推估的任務。</p>\n<p>彼此之間的關係如下圖所示，使用者透過 <strong>API Gateway</strong> 上傳 (PUT) 圖片到 <strong>儲存貯體 A</strong>，這個事件會驅動 <strong>AWS Lambda 函數</strong>，此時，<strong>AWS Lambda 函數</strong> 會根據事先訓練好的 YOLO 模型，對於該圖片進行 YOLO 推估 (Inference)，接著以 <strong>IAM 角色 B</strong> 的身分，將偵測到物件畫出方塊框後，存到 <strong>儲存貯體 B</strong>，而使用者就可以看到處理後的結果。</p>\n<p><br/>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p> 這份專案中提供了一個使用 OpenCV 來進行 YOLO 推論的案例，現在我們就試著將這個案例佈署到 AWS Lambda 進行測試，需要的前期準備工作如下：</p>\n<ol>\n<li>上傳 YOLO 相關檔案到 S3： 訓練好的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg)</li>\n<li>建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。</li>\n<li>建立 AWS Lambda 函數，並設定環境變數。</li>\n<li>在 AWS Lambda 建立 OpenCV 層</li>\n<li>撰寫 AWS Lambda 函數並完成測試</li>\n</ol>\n<p><strong>步驟 1. 上傳 YOLO 相關檔案到 S3</strong></p>\n<p>因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg) 存到 S3 中，如下圖所示。</p>\n<p><br/>\n圖 2、上傳 YOLO 相關檔案到 S3</p>\n<p><strong>步驟 2. 建立 IAM 角色</strong></p>\n<p>建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。</p>\n<p><br/>\n圖 3、建立一個角色選擇 Lambda 的使用案例</p>\n<p>在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。</p>\n<p><br/>\n圖 4、連接基礎的 CloudWatch 除錯用的許可政策</p>\n<p>最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。</p>\n<p><br/>\n圖 5、檢閱設定並建立角色</p>\n<p>編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。</p>\n<p><br/>\n圖 6、新增政策</p>\n<p>接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。</p>\n<p><br/>\n圖 7、將新增的政策連接到先前的角色</p>\n<p><strong>步驟 3. 建立 AWS Lambda 函數</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇 <em>Python 3.7</em>，因為要使用 OpenCV 函式庫層，而執行角色要也要記得選擇上一個步驟設定的角色。</p>\n<ul>\n<li>選擇下列選項之一來建立您的函式： <em>從頭開始撰寫</em>\n</li>\n<li>函式名稱： <em>opencv45Func</em>\n</li>\n<li>執行時間： <em>Python 3.7</em>\n</li>\n<li>架構： <em>x86_64</em>\n</li>\n<li>執行角色： <em>使用現有的角色</em>\n</li>\n</ul>\n<p><br/>\n圖 8、建立 Lambda 函數設定畫面</p>\n<p>在 Lambda 函數中點擊 <strong>組態</strong> 頁籤，接著點擊 <strong>環境變量</strong>，新增三個環境變量，如下所示：</p>\n<ul>\n<li>modelbucket： 存放權重的<strong>儲存貯體</strong>，應該也是<strong>儲存貯體 B</strong>，因為任何對 <strong>儲存貯體 A</strong> 所做的寫入都會引發驅動 Lambda 的事件。</li>\n<li>modelweight：<em>yolov4cfg/yolov3.backup</em>\n</li>\n<li>putbucket： <em>儲存貯體 B</em>\n</li>\n</ul>\n<p><br/>\n圖 9、新增 Lambda 函數組態中的環境變量</p>\n<p><strong>步驟 4.在 AWS Lambda 建立 OpenCV 層</strong></p>\n<p>建立 Lambda 函數後，選擇進入 AWS Lambda 函數的設定畫面，在畫面的最底端，為本函數 <strong>新建 Layer</strong>，如下圖所示。</p>\n<p><br/>\n圖 10、為 Lambda 函數新增 Layer</p>\n<p>進入新增 Layer 畫面後，選擇層來源為 <em>自訂 Layer</em>，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。</p>\n<p><br/>\n圖 11、選擇 opencv45 函式庫層</p>\n<p><strong>步驟 5. 撰寫 AWS Lambda 函數並完成測試</strong></p>\n<p>需要先建立一個目錄 <em>cfg</em>，在目錄內新增一個檔案 <em>yolov3.cfg</em> ，這個檔案的內容可以參考 ，而主要的推論程式為 <em>service.py</em>，內容如下</p>\n<p><em>service.py</em></p>\n<pre></pre>\n<p><br/>\n圖 12、AWS Lambda 程式碼</p>\n<p>建立新測試事件，事件範本選擇 <em>hello-world</em>，事件名稱輸入 <em>fromS3Bucket</em>，內容所下圖所示，這是用來模擬當 S3 觸發 Lambda 函數後所傳過來的參數內容，記得將 [INPUT_BUCKET] 改成實際的輸入儲存貯體名稱，而[INPUT_OBJECT]要確保有這個檔案。</p>\n<pre></pre>\n<p><br/>\n圖 13、設定 Lambda 函數測試事件</p>\n<p>拉到畫面下方，修改 <strong>執行時間設定</strong>，將 <em>處理常式</em> 指定為 <em>service.handler</em>，如下圖所示。</p>\n<p><br/>\n圖 14、修改執行時間設定中的處理常式</p>\n<p>最後點擊 <strong>Test</strong> 進行測試，得到的結果如下圖所示，推論時間約 1.75 秒，所需記憶體為 990 MB。</p>\n<p><br/>\n圖 15、使用 OpenCV 進行 YOLO 推論</p>\n<p>因此，這似乎是一個可以接受的解決方案，表 1.列出目前為止的所有 YOLO 辨識部署解決方案。</p>\n<p>表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較</p>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>使用 EC2</th>\n<th>使用 Lambda (darknet)</th>\n<th>使用 SageMaker</th>\n<th>使用 Lambda (OpenCV)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成本(USD)</td>\n<td>0.736/hour</td>\n<td>0</td>\n<td>1.0304/hour</td>\n<td>0</td>\n</tr>\n<tr>\n<td>時間(秒)</td>\n<td>~ 0.1 秒</td>\n<td>&gt; 60 秒</td>\n<td>1秒 左右</td>\n<td>1-3 秒</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>較差</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n</tr>\n</tbody>\n</table>\n<h2>參考資料</h2>\n<ul>\n<li>Simple Inference Scripts for YOLO with OpenCV, \n</li>\n<li>Day 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識, \n</li>\n<li>Day 35 - Amazon SageMaker 簡介, \n</li>\n<li>Day 36 - 使用 Container 建立 Amazon SageMaker 端點, \n</li>\n<li>Day 37 - 在 AWS Lambda 建立 OpenCV Layer, \n</li>\n<li>yolov4-SageMaker, \n</li>\n<li>Pytorch-YOLOv4, \n</li>\n<li>YOLO v4-v3 CPU Inference API for Windows and Linux, \n</li>\n<li>pytorch_YOLO_OpenVINO_demo, \n</li>\n<li>Real-time Object Detection on CPU, \n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Day 38 - 在 AWS Lambda 中使用 YOLO 推估 (Inference)\n在  以及 完成了 YOLO 自訂資料集的訓練，在  與  分別用不同的方法來進行 YOLO 推估的任務。\n彼此之間的關係如下圖所示，使用者透過 API Gateway 上傳 (PUT) 圖片到 儲存貯體 A，這個事件會驅動 AWS Lambda 函數，此時，AWS Lambda 函數 會根據事先訓練好的 YOLO 模型，對於該圖片進行 YOLO 推估 (Inference)，接著以 IAM 角色 B 的身分，將偵測到物件畫出方塊框後，存到 儲存貯體 B，而使用者就可以看到處理後的結果。\n\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖\n 這份專案中提供了一個使用 OpenCV 來進行 YOLO 推論的案例，現在我們就試著將這個案例佈署到 AWS Lambda 進行測試，需要的前期準備工作如下：\n\n上傳 YOLO 相關檔案到 S3： 訓練好的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg)\n建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。\n建立 AWS Lambda 函數，並設定環境變數。\n在 AWS Lambda 建立 OpenCV 層\n撰寫 AWS Lambda 函數並完成測試\n\n步驟 1. 上傳 YOLO 相關檔案到 S3\n因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔 (yolov3.backup) 以及待推論的圖片 (02-frame-608x608-0090.jpg) 存到 S3 中，如下圖所示。\n\n圖 2、上傳 YOLO 相關檔案到 S3\n步驟 2. 建立 IAM 角色\n建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 下一個：許可 按鈕。\n\n圖 3、建立一個角色選擇 Lambda 的使用案例\n在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。\n\n圖 4、連接基礎的 CloudWatch 除錯用的許可政策\n最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。\n\n圖 5、檢閱設定並建立角色\n編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。\n\n圖 6、新增政策\n接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。\n\n圖 7、將新增的政策連接到先前的角色\n步驟 3. 建立 AWS Lambda 函數\n進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇 Python 3.7，因為要使用 OpenCV 函式庫層，而執行角色要也要記得選擇上一個步驟設定的角色。\n\n選擇下列選項之一來建立您的函式： 從頭開始撰寫\n\n函式名稱： opencv45Func\n\n執行時間： Python 3.7\n\n架構： x86_64\n\n執行角色： 使用現有的角色\n\n\n\n圖 8、建立 Lambda 函數設定畫面\n在 Lambda 函數中點擊 組態 頁籤，接著點擊 環境變量，新增三個環境變量，如下所示：\n\nmodelbucket： 存放權重的儲存貯體，應該也是儲存貯體 B，因為任何對 儲存貯體 A 所做的寫入都會引發驅動 Lambda 的事件。\nmodelweight：yolov4cfg/yolov3.backup\n\nputbucket： 儲存貯體 B\n\n\n\n圖 9、新增 Lambda 函數組態中的環境變量\n步驟 4.在 AWS Lambda 建立 OpenCV 層\n建立 Lambda 函數後，選擇進入 AWS Lambda 函數的設定畫面，在畫面的最底端，為本函數 新建 Layer，如下圖所示。\n\n圖 10、為 Lambda 函數新增 Layer\n進入新增 Layer 畫面後，選擇層來源為 自訂 Layer，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。\n\n圖 11、選擇 opencv45 函式庫層\n步驟 5. 撰寫 AWS Lambda 函數並完成測試\n需要先建立一個目錄 cfg，在目錄內新增一個檔案 yolov3.cfg ，這個檔案的內容可以參考 ，而主要的推論程式為 service.py，內容如下\nservice.py\n\n\n圖 12、AWS Lambda 程式碼\n建立新測試事件，事件範本選擇 hello-world，事件名稱輸入 fromS3Bucket，內容所下圖所示，這是用來模擬當 S3 觸發 Lambda 函數後所傳過來的參數內容，記得將 [INPUT_BUCKET] 改成實際的輸入儲存貯體名稱，而[INPUT_OBJECT]要確保有這個檔案。\n\n\n圖 13、設定 Lambda 函數測試事件\n拉到畫面下方，修改 執行時間設定，將 處理常式 指定為 service.handler，如下圖所示。\n\n圖 14、修改執行時間設定中的處理常式\n最後點擊 Test 進行測試，得到的結果如下圖所示，推論時間約 1.75 秒，所需記憶體為 990 MB。\n\n圖 15、使用 OpenCV 進行 YOLO 推論\n因此，這似乎是一個可以接受的解決方案，表 1.列出目前為止的所有 YOLO 辨識部署解決方案。\n表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較\n\n\n\n \n使用 EC2\n使用 Lambda (darknet)\n使用 SageMaker\n使用 Lambda (OpenCV)\n\n\n\n\n成本(USD)\n0.736/hour\n0\n1.0304/hour\n0\n\n\n時間(秒)\n~ 0.1 秒\n> 60 秒\n1秒 左右\n1-3 秒\n\n\n可用性\n較差\nAWS 托管\nAWS 托管\nAWS 托管\n\n\n\n參考資料\n\nSimple Inference Scripts for YOLO with OpenCV, \n\nDay 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識, \n\nDay 35 - Amazon SageMaker 簡介, \n\nDay 36 - 使用 Container 建立 Amazon SageMaker 端點, \n\nDay 37 - 在 AWS Lambda 建立 OpenCV Layer, \n\nyolov4-SageMaker, \n\nPytorch-YOLOv4, \n\nYOLO v4-v3 CPU Inference API for Windows and Linux, \n\npytorch_YOLO_OpenVINO_demo, \n\nReal-time Object Detection on CPU,",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "from __future__ import print_function\n\nimport urllib.request\nimport os\nimport subprocess\nimport boto3\nimport time\nimport cv2 \n\nSCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))\nLIB_DIR = os.path.join(SCRIPT_DIR, 'lib')\ns3_client = boto3.client('s3')\nmodelbucket = os.environ['modelbucket']\nmodelweight = os.environ['modelweight']\nmodelcfg = 'cfg/yolov3.cfg'\n\n# 從 s3 下載檔案\ndef downloadFromS3(strBucket,strKey,strFile):\n  s3_client.download_file(strBucket, strKey, strFile)\n\nstrWeightFile = '/tmp/' +  modelweight.replace('/', '')\ndownloadFromS3(modelbucket,modelweight,strWeightFile)  \nprint(strWeightFile)\n\n# 繪製物件方塊框\ndef draw_image(image_path, output_path, pridicts):\n  cv2image = cv2.imread(image_path)\n  for k in range(len(pridicts[0])):\n    x, y, w, h  = pridicts[2][k]\n    cv2.putText(cv2image, \"{:.4f}\".format(pridicts[1][k][0]), (x, y-6), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 1, cv2.LINE_AA)\n    cv2.rectangle(cv2image, (int(x),int(y)), (int(x+w),int(y+w)), (0,255,0), 2)\n  cv2.imwrite(output_path, cv2image)\n\n# yolo 推論函數\ndef yolo_infer(weight, cfg, pic):\n  frame = cv2.imread(pic)\n  model = cv2.dnn.readNet(weight,cfg)\n  net = cv2.dnn_DetectionModel(model)\n  net.setInputSize(608, 608)\n  net.setInputScale(1.0 / 255)\n  net.setInputSwapRB(True)\n\n  classes, confidences, boxes = net.detect(frame, confThreshold=0.1, nmsThreshold=0.4)\n  return classes,confidences,boxes\n\n# lambda 程式進入口    \ndef handler(event, context):\n  for record in event['Records']:\n    inputbucket = record['s3']['bucket']['name']\n    outputbucket = os.environ['putbucket']\n    key = record['s3']['object']['key']\n    imgfilepath = '/tmp/inputimage.jpg'\n    \n    downloadFromS3(inputbucket,key,imgfilepath)\n    prev_time = time.time()\n    result = yolo_infer(strWeightFile, modelcfg, imgfilepath)\n    print('predicting time: ' , (time.time() - prev_time))\n\n    tmpkey = key.replace('/', '')\n    upload_path = '/tmp/process-{}'.format(tmpkey)\n    draw_image(imgfilepath, upload_path, result)\n    s3_client.upload_file(upload_path, outputbucket, key,ExtraArgs={'ACL': 'public-read','ContentType':'image/jpeg'})\n\n    return 0 \n"
            },
            {
                "language": "unknown",
                "content": "{\n  \"Records\": [\n    {\n      \"s3\": {\n        \"bucket\": {\n          \"name\": \"[INPUT_BUCKET]\",\n          \"arn\": \"arn:aws:s3:::[INPUT_BUCKET]\"\n        },\n        \"object\": {\n          \"key\": \"[INPUT_OBJECT]\"\n        }\n      }\n    }\n  ]\n}\n"
            }
        ],
        "programming_languages": [
            "python"
        ],
        "word_seg_content_text": "Day\n38\n-\n在\nAWS\nLambda\n中 使用\nYOLO\n推估\n( Inference )\n在\n以及\n完成 了\nYOLO\n自訂 資料集 的 訓練 ， 在\n與\n分別 用 不同 的 方法 來 進行\nYOLO\n推估 的 任務 。\n彼此之間 的 關係 如 下圖 所示 ， 使用者 透過\nAPI\nGateway\n上傳\n( PUT )\n圖片 到\n儲存 貯體\nA ， 這個 事件 會 驅動\nAWS\nLambda\n函數 ， 此時 ， AWS\nLambda\n函數\n會 根據 事先 訓練 好 的\nYOLO\n模型 ， 對於 該 圖片 進行\nYOLO\n推估\n( Inference ) ， 接著 以\nIAM\n角色\nB\n的 身分 ， 將 偵測 到 物件 畫出 方塊 框 後 ， 存 到\n儲存 貯體\nB ， 而 使用者 就 可以 看到 處理 後 的 結果 。\n圖\n1 、 S3\n驅動\nLambda\n函數 進行\nYOLO\n辨識 架構圖\n這份 專案 中 提供 了 一個 使用\nOpenCV\n來 進行\nYOLO\n推論 的 案例 ， 現在 我們 就 試著將 這個 案例 佈署 到\nAWS\nLambda\n進行 測試 ， 需要 的 前期 準備 工作 如下 ：\n上傳\nYOLO\n相關 檔案 到\nS3 ：\n訓練 好 的 權重 檔\n( yolov3 . backup )\n以及 待 推論 的 圖片\n( 02 - frame - 608x608 - 0090 . jpg )\n建立\nIAM\n角色 ， 允許 執行\nAWS\nLambda ， 並有 存取\nS3\n的 許可 。\n建立\nAWS\nLambda\n函數 ， 並 設定 環境 變數 。\n在\nAWS\nLambda\n建立\nOpenCV\n層\n撰寫\nAWS\nLambda\n函數 並 完成 測試\n步驟\n1 .\n上傳\nYOLO\n相關 檔案 到\nS3\n因為\nAWS\nLambda\n函數 的 大小 限制 為\n256\nMB ， 所以 需要 把\nYOLO\n的 權重 檔\n( yolov3 . backup )\n以及 待 推論 的 圖片\n( 02 - frame - 608x608 - 0090 . jpg )\n存 到\nS3\n中 ， 如 下圖 所示 。\n圖\n2 、 上傳\nYOLO\n相關 檔案 到\nS3\n步驟\n2 .\n建立\nIAM\n角色\n建立 一個\nIAM\n角色 ， 允許 執行\nAWS\nLambda ， 並有 存取\nS3\n的 許可 。 進入\nIAM\n管理 控制台 ， 選擇 新增 角色 ， 接下來 如 下圖 所示 ， 選擇\nLambda\n的 使用 案例 後 點擊\n下 一個 ： 許可\n按鈕 。\n圖\n3 、 建立 一個 角色 選擇\nLambda\n的 使用 案例\n在 搜尋 文字 框中 輸入\nbasic\n找到\nAWSLambdaBasicExecutionRole\n進行 連接 ， 這將 允許 這個 角色 有 寫入\nCloudWatch\n記錄 檔 的 全縣 ， 方便 程式 除錯 之用 ， 如 下圖 所示 。\n圖\n4 、 連接 基礎 的\nCloudWatch\n除錯 用 的 許可 政策\n最後 確定 先前 的 設定 後並 輸入 角色 名稱 後 ， 就 可以 建立 角色 ， 如 下圖 所示 。\n圖\n5 、 檢閱 設定 並 建立 角色\n編輯 一個 新 的 政策 ， 內容 如 下圖 所示 ， 給定 讀取\n( GetObject )\n儲存 貯體\nA\n與 寫入 物件\n( PutObject )\n與 權限\n( PutObjectAcl )\n到 儲存 貯體\nB 。\n圖\n6 、 新增 政策\n接著 到 角色 設定 畫面 ， 將 新建 政策 連接 到 角色 上 ， 如 下圖 所示 。\n圖\n7 、 將 新增 的 政策 連接 到 先前 的 角色\n步驟\n3 .\n建立\nAWS\nLambda\n函數\n進入\nAWS\nLambda\n管理 控制台 ， 選擇 建立\nLambda\n函數 ， 設定 內容 如 下圖 所示 。 比較 需要 注意 的 是 執行 時間 務必 選擇\nPython\n3.7 ， 因為 要 使用\nOpenCV\n函式 庫層 ， 而 執行 角色 要 也 要 記得 選擇 上 一個 步驟 設定 的 角色 。\n選擇 下列 選項 之 一來 建立 您 的 函式 ：\n從頭開始 撰寫\n函式 名稱 ：\nopencv45Func\n執行 時間 ：\nPython\n3.7\n架構 ：\nx86 _ 64\n執行 角色 ：\n使用 現有 的 角色\n圖\n8 、 建立\nLambda\n函數 設定 畫面\n在\nLambda\n函數 中 點擊\n組態\n頁 籤 ， 接著 點擊\n環境變量 ， 新增 三個 環境變量 ， 如下 所示 ：\nmodelbucket ：\n存放 權重 的 儲存 貯體 ， 應該 也 是 儲存 貯體\nB ， 因為 任何 對\n儲存 貯體\nA\n所 做 的 寫入 都 會 引發 驅動\nLambda\n的 事件 。\nmodelweight ： yolov4cfg / yolov3 . backup\nputbucket ：\n儲存 貯體\nB\n圖\n9 、 新增\nLambda\n函數 組態 中 的 環境變量\n步驟\n4 . 在\nAWS\nLambda\n建立\nOpenCV\n層\n建立\nLambda\n函數 後 ， 選擇 進入\nAWS\nLambda\n函數 的 設定 畫面 ， 在 畫面 的 最 底端 ， 為本 函數\n新建\nLayer ， 如 下圖 所示 。\n圖\n10 、 為\nLambda\n函數 新增\nLayer\n進入 新增\nLayer\n畫面 後 ， 選擇 層 來源 為\n自訂\nLayer ， 接著 選擇 先前 建立 的\nopencv45\n函式 庫層 ， 如 下圖 所示 。\n圖\n11 、 選擇\nopencv45\n函式 庫層\n步驟\n5 .\n撰寫\nAWS\nLambda\n函數 並 完成 測試\n需要 先 建立 一個 目錄\ncfg ， 在 目錄 內 新增 一個 檔案\nyolov3 . cfg\n， 這個 檔案 的 內容 可以 參考\n， 而 主要 的 推論 程式 為\nservice . py ， 內容 如下\nservice . py\n圖\n12 、 AWS\nLambda\n程式碼\n建立 新 測試 事件 ， 事件 範本 選擇\nhello - world ， 事件 名稱 輸入\nfromS3Bucket ， 內容 所 下圖 所示 ， 這是 用來 模擬 當\nS3\n觸發\nLambda\n函數 後 所 傳過來 的 參數 內容 ， 記得 將\n[ INPUT _ BUCKET ]\n改成 實際 的 輸入 儲存 貯體 名稱 ， 而 [ INPUT _ OBJECT ] 要 確保 有 這個 檔案 。\n圖\n13 、 設定\nLambda\n函數 測試 事件\n拉 到 畫面 下方 ， 修改\n執行 時間 設定 ， 將\n處理 常式\n指定 為\nservice . handler ， 如 下圖 所示 。\n圖\n14 、 修改 執行 時間 設定 中 的 處理 常式\n最後 點擊\nTest\n進行 測試 ， 得到 的 結果 如 下圖 所示 ， 推論 時間 約\n1.75\n秒 ， 所 需 記憶體 為\n990\nMB 。\n圖\n15 、 使用\nOpenCV\n進行\nYOLO\n推論\n因此 ， 這 似乎 是 一個 可以 接受 的 解決方案 ， 表\n1 . 列出 目前 為止 的 所有\nYOLO\n辨識 部署 解決方案 。\n表\n1 、\n使用\nEC2 / Lambda / SageMaker\n進行\nYOLO\n辨識 比較\n使用\nEC2\n使用\nLambda\n( darknet )\n使用\nSageMaker\n使用\nLambda\n( OpenCV )\n成本 ( USD )\n0.736 / hour\n0\n1.0304 / hour\n0\n時間 ( 秒 )\n~\n0.1\n秒\n>\n60\n秒\n1 秒\n左右\n1 - 3\n秒\n可用性\n較差\nAWS\n托管\nAWS\n托管\nAWS\n托管\n參考資料\nSimple\nInference\nScripts\nfor\nYOLO\nwith\nOpenCV ,\nDay\n34\n-\n實作\nS3\n驅動\nLambda\n函數 進行\nYolo\n物件 辨識 ,\nDay\n35\n-\nAmazon\nSageMaker\n簡介 ,\nDay\n36\n-\n使用\nContainer\n建立\nAmazon\nSageMaker\n端點 ,\nDay\n37\n-\n在\nAWS\nLambda\n建立\nOpenCV\nLayer ,\nyolov4 - SageMaker ,\nPytorch - YOLOv4 ,\nYOLO\nv4 - v3\nCPU\nInference\nAPI\nfor\nWindows\nand\nLinux ,\npytorch _ YOLO _ OpenVINO _ demo ,\nReal - time\nObject\nDetection\non\nCPU ,",
        "word_seg_processed_content_text": "day\n38\n\n\naws\nlambda\n中\nyolo\n推估\ninference\n\n\n\nyolo\n自訂 資料集 訓練\n\n方法\nyolo\n推估\n彼此之間 關係 下圖 所示 使用者 透過\napi\ngateway\n上傳\nput\n圖片\n儲存 貯體\na 事件 會 驅動\naws\nlambda\n函數 aws\nlambda\n函數\n會 事先 訓練\nyolo\n模型 圖片\nyolo\n推估\ninference\niam\n角色\nb\n身分 偵測 物件 畫出 方塊 框 存\n儲存 貯體\nb 使用者\n圖\n1 s3\n驅動\nlambda\n函數\nyolo\n辨識 架構圖\n這份 專案 中 提供\nopencv\n\nyolo\n推論 案例 試著將 案例 佈署\naws\nlambda\n測試 前期 工作\n上傳\nyolo\n相關 檔案\ns3\n訓練 權重 檔\nyolov3 backup\n推論 圖片\n02 frame 608x608 0090 jpg\n建立\niam\n角色 執行\naws\nlambda 並有 存取\ns3\n許可\n建立\naws\nlambda\n函數 設定 環境 變數\n\naws\nlambda\n建立\nopencv\n層\n撰寫\naws\nlambda\n函數 測試\n步驟\n1\n上傳\nyolo\n相關 檔案\ns3\n\naws\nlambda\n函數 大小\n256\nmb\nyolo\n權重 檔\nyolov3 backup\n推論 圖片\n02 frame 608x608 0090 jpg\n存\ns3\n中 下圖 所示\n圖\n2 上傳\nyolo\n相關 檔案\ns3\n步驟\n2\n建立\niam\n角色\n建立\niam\n角色 執行\naws\nlambda 並有 存取\ns3\n許可\niam\n管理 控制台 選擇 新增 角色 接下來 下圖 所示 選擇\nlambda\n案例 點擊\n許可\n按鈕\n圖\n3 建立 角色 選擇\nlambda\n案例\n搜尋 文字 框中 輸入\nbasic\n找到\nawslambdabasicexecutionrole\n連接 這將 角色 寫入\ncloudwatch\n記錄 檔 全縣 程式 除錯 之用 下圖 所示\n圖\n4 連接 基礎\ncloudwatch\n除錯 許可 政策\n先前 設定 後並 輸入 角色 名稱 建立 角色 下圖 所示\n圖\n5 檢閱 設定 建立 角色\n編輯 新 政策 內容 下圖 所示 給定 讀取\ngetobject\n儲存 貯體\na\n寫入 物件\nputobject\n權限\nputobjectacl\n儲存 貯體\nb\n圖\n6 新增 政策\n角色 設定 畫面 新建 政策 連接 角色 下圖 所示\n圖\n7 新增 政策 連接 先前 角色\n步驟\n3\n建立\naws\nlambda\n函數\n\naws\nlambda\n管理 控制台 選擇 建立\nlambda\n函數 設定 內容 下圖 所示 執行 時間 務必 選擇\npython\n3.7\nopencv\n函式 庫層 執行 角色 記得 選擇 步驟 設定 角色\n選擇 選項 建立 函式\n從頭開始 撰寫\n函式 名稱\nopencv45func\n執行 時間\npython\n3.7\n架構\nx86 64\n執行 角色\n現有 角色\n圖\n8 建立\nlambda\n函數 設定 畫面\n\nlambda\n函數 中 點擊\n組態\n頁 籤 點擊\n環境變量 新增 三個 環境變量 所示\nmodelbucket\n存放 權重 儲存 貯體 儲存 貯體\nb\n儲存 貯體\na\n做 寫入 會 引發 驅動\nlambda\n事件\nmodelweight yolov4cfg yolov3 backup\nputbucket\n儲存 貯體\nb\n圖\n9 新增\nlambda\n函數 組態 中 環境變量\n步驟\n4\naws\nlambda\n建立\nopencv\n層\n建立\nlambda\n函數 選擇\naws\nlambda\n函數 設定 畫面 畫面 底端 為本 函數\n新建\nlayer 下圖 所示\n圖\n10\nlambda\n函數 新增\nlayer\n新增\nlayer\n畫面 選擇 層 來源\n自訂\nlayer 選擇 先前 建立\nopencv45\n函式 庫層 下圖 所示\n圖\n11 選擇\nopencv45\n函式 庫層\n步驟\n5\n撰寫\naws\nlambda\n函數 測試\n先 建立 目錄\ncfg 目錄 內 新增 檔案\nyolov3 cfg\n檔案 內容 參考\n推論 程式\nservice py 內容\nservice py\n圖\n12 aws\nlambda\n程式碼\n建立 新 測試 事件 事件 範本 選擇\nhello world 事件 名稱 輸入\nfroms3bucket 內容 下圖 所示 這是 用來 模擬\ns3\n觸發\nlambda\n函數 傳過來 參數 內容 記得\ninput bucket\n改成 輸入 儲存 貯體 名稱 input object 確保 檔案\n圖\n13 設定\nlambda\n函數 測試 事件\n拉 畫面 下方 修改\n執行 時間 設定\n常式\n指定\nservice handler 下圖 所示\n圖\n14 修改 執行 時間 設定 中 常式\n點擊\ntest\n測試 下圖 所示 推論 時間 約\n1.75\n秒 需 記憶體\n990\nmb\n圖\n15\nopencv\n\nyolo\n推論\n接受 解決方案 表\n1 列出 為止\nyolo\n辨識 部署 解決方案\n表\n1\n\nec2 lambda sagemaker\n\nyolo\n辨識\n\nec2\n\nlambda\ndarknet\n\nsagemaker\n\nlambda\nopencv\n成本 usd\n0.736 hour\n0\n1.0304 hour\n0\n時間 秒\n\n0.1\n秒\n\n60\n秒\n1 秒\n\n1 3\n秒\n可用性\n較差\naws\n托管\naws\n托管\naws\n托管\n參考資料\nsimple\ninference\nscripts\n\nyolo\n\nopencv\nday\n34\n\n實作\ns3\n驅動\nlambda\n函數\nyolo\n物件 辨識\nday\n35\n\namazon\nsagemaker\n簡介\nday\n36\n\n\ncontainer\n建立\namazon\nsagemaker\n端點\nday\n37\n\n\naws\nlambda\n建立\nopencv\nlayer\nyolov4 sagemaker\npytorch yolov4\nyolo\nv4 v3\ncpu\ninference\napi\n\nwindows\n\nlinux\npytorch yolo openvino demo\nreal time\nobject\ndetection\n\ncpu",
        "extracted_keywords": [
            "yolo",
            "yolov4",
            "推估",
            "yolov3",
            "yolov4cfg"
        ],
        "extracted_keywords_phrases": [
            "inference yolo",
            "yolo 推估",
            "yolo 辨識",
            "yolo 模型",
            "函數 yolo"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282533": {
        "href": "https://ithelp.ithome.com.tw/articles/10282533",
        "title": "Day 37 - 在 AWS Lambda 建立 OpenCV Layer",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>Day 37 - 在 AWS Lambda 建立 OpenCV Layer</h1>\n<p>因為 OpenCV 在影像視覺中時常需要用到，所以現在嘗試在 AWS Lambda 中建立一層 OpenCV ，並將 <a href=\"https://ithelp.ithome.com.tw/articles/10263004\" target=\"_blank\" rel=\"noreferrer noopener\">Day 12 - 標籤圖片的方法與實作</a> 這個練習，在 AWS Lambda 上完成。操作的流程如下：</p>\n<ol>\n<li>打包 Python 的 OpenCV 函式庫</li>\n<li>在 AWS Lambda 建立 OpenCV 層</li>\n<li>打包程式以及圖片上傳到 S3</li>\n<li>在 AWS Lambda 執行</li>\n</ol>\n<p><strong>步驟 1.打包 Python 的 OpenCV 函式庫</strong></p>\n<p>這個動作很重要，務必要在 Linux 環境下完成這個操作，不可以在 Windows/macOS，因為都會執行失敗，推論可能是因為 AWS Lambda 上執行 OpenCV 的 Container 是 Linux-based，但是這又很奇怪的是，其他 Python 的函式不會有這個問題。</p>\n<p>登錄 Amazon Linux 2 的主機，執行下列程式，主要的操作內容是：</p>\n<ul>\n<li>創建一個新的 Python 虛擬環境</li>\n<li>檢查 Python 版本</li>\n<li>更新 pip</li>\n<li>安裝 opencv</li>\n<li>將安裝好的套件壓縮到 python 這個目錄下</li>\n<li>檢視壓縮內容</li>\n</ul>\n<pre><code>python3 -m venv opencv\ncd opencv\n. bin/activate\npython -V\npip install pip -U\npip install opencv-python\ncd lib/python3.7/\nln -s site-packages/ python\nzip -r opencv37-45.zip python/\nunzip -l opencv37-45.zip\n</code></pre>\n<p>目前這個壓縮包是針對 Python 3.7 且 opencv 的版本是 4.5.3.56，numpy 是 opencv 的相依包，所以會一併被安裝進來，整個檔案的大小是 72 MB左右</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510OL7z4hFP8b.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510OL7z4hFP8b.png\"><br>\n圖 1、Python OpenCV 壓縮包的相關版本</p>\n<p>接著直接上傳壓縮檔到 S3，記得需要先完成 <code>aws configure</code> 的使用者認證。</p>\n<pre><code>aws s3 cp opencv37-45.zip s3://[S3存儲桶的名稱]\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510qBf7Jsu4wB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510qBf7Jsu4wB.png\"><br>\n圖 2、Python OpenCV 壓縮包上傳到 S3</p>\n<p><strong>步驟 2.在 AWS Lambda 建立 OpenCV 層</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Layer，輸入 Layer 名稱，並上傳先前建立的壓縮檔，在選擇相容架構 <em>x86_64</em>，而相容的執行時間指的是希望可以在哪些版本的 python 中執行，只能選擇 <strong>Python 3.7</strong> ，選其他版本會出錯，確定後按下 <strong>建立</strong> 鍵即完成建立 Layer，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510L6uMJwZR6O.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510L6uMJwZR6O.png\"><br>\n圖 3、建立 OpenCV Layer 設定畫面</p>\n<p><strong>步驟 3.打包程式以及圖片上傳到 S3</strong></p>\n<p>登錄 EC2 ，創建一個目錄，並將相關檔案放入該目錄中，壓縮後上傳到 S3 存儲桶內，相關指令如下， <em>yoloDrawLabel.py</em> 這個程式碼請參考 <a href=\"https://ithelp.ithome.com.tw/articles/10263004\" target=\"_blank\" rel=\"noreferrer noopener\">Day 12 - 標籤圖片的方法與實作</a> ：</p>\n<pre><code># 建立 lambda 專屬目錄，目錄名稱沒有強制要求\nmkdir lambda \ncd lambda \n# 產生使用 opencv 的程式碼\nvi yoloDrawLabel.py\nmkdir labels images\n# 上傳標籤所需要的圖片與標籤檔\naws s3 cp s3://[S3存儲桶的名稱]/00-frame-608x608-0001.jpg ./images\naws s3 cp s3://[S3存儲桶的名稱]/00-frame-0001.txt ./labels\n# 執行程式，確保可以在虛擬環境中執行\npython yoloDrawLabel.py\n# 將所需要檔案壓縮並上傳到 S3\nzip -r lambda.zip .\naws s3 cp lambda.zip s3://[S3存儲桶的名稱]\n</code></pre>\n<p>下圖為 EC2 執行畫面。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510QmCuLb5Bmp.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510QmCuLb5Bmp.png\"><br>\n圖 4、在 EC2 中建立 Lambda 壓縮檔</p>\n<p><em>./yoloDrawLabel.py</em></p>\n<pre><code>import cv2\n\n# 設定輸入與輸出\ninputLabelPath = './labels/00-frame-0001.txt'\ninputImgPath = './images/00-frame-608x608-0001.jpg'\noutputImgPath = './labels/00-frame-608x608-0001.jpg'\n# 圖片大小固定為 608＊608\nimg_w= img_h = 608\n# 載入圖片\ncv2image = cv2.imread(inputImgPath)\n\nwith open(inputLabelPath) as f:\n  for line in f:\n    line = line.strip() # 刪除多餘的空白\n    data = line.split() # 將 YOLO 一列的內容轉成一維陣列\n    # 將 YOLO 格式轉換為邊界框的左上角和右下角座標\n    bbox_width = float(data[3]) * img_w\n    bbox_height = float(data[4]) * img_h\n    center_x = float(data[1]) * img_w\n    center_y = float(data[2]) * img_h\n    min_x, min_y = center_x - (bbox_width / 2), center_y - (bbox_height / 2)\n    max_x, max_y = center_x + (bbox_width / 2), center_y + (bbox_height / 2)\n    print(min_x,min_y,max_x,max_y)\n    # 在圖片上寫上物件名稱\n    cv2.putText(cv2image, 'Altolamprologus compressiceps', (int(min_x), int(min_y-6)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1, cv2.LINE_AA)\n    # 畫出邊界框\n    cv2.rectangle(cv2image, (int(min_x),int(min_y)), (int(max_x),int(max_y)), (0,255,255), 2)\n    # 將檔案另存新圖片檔\n    cv2.imwrite(r'{}'.format(outputImgPath), cv2image)\n  f.close()\n</code></pre>\n<p><strong>步驟 4.在 AWS Lambda 執行</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。</p>\n<ul>\n<li>選擇下列選項之一來建立您的函式： <em>從頭開始撰寫</em>\n</li>\n<li>函式名稱： <em>opencv45Func</em>\n</li>\n<li>執行時間： <em>Python 3.7</em> <strong>（注意：這個選項不能選其他的 Python 版本，會出現錯誤的）</strong>\n</li>\n<li>架構： <em>x86_64</em>\n</li>\n<li>執行角色： <em>建立具備基本 Lambda 許可的新角色</em>\n</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510OCxuBShTVU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510OCxuBShTVU.png\"><br>\n圖 5、建立 Lambda 函數設定畫面</p>\n<p>建立 Lambda 函數後，選擇進入 <strong>opencv45Func</strong> 函數的設定畫面，在畫面的最底端，為本函數新建 Layer，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510C3XYKqa0lB.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510C3XYKqa0lB.png\"><br>\n圖 6、為 Lambda 函數新增 Layer</p>\n<p>進入新增 Layer 畫面後，選擇層來源為 <em>自訂 Layer</em>，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510UqYLHALQ0k.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510UqYLHALQ0k.png\"><br>\n圖 7、選擇 opencv45 函式庫層</p>\n<p>上傳程式碼<br>\n我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 <strong>上傳於</strong> 按鈕，點擊後選擇 <strong>Amazon S3 位置</strong>，就可以指定位置，如 <em><a href=\"https://%5BS3%E5%AD%98%E5%84%B2%E6%A1%B6%E7%9A%84%E5%90%8D%E7%A8%B1\" target=\"_blank\" rel=\"noreferrer noopener\">https://[S3存儲桶的名稱</a>].s3.ap-southeast-1.amazonaws.com/lambda.zip</em>，畫面如下所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510mbbjoBs5vV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510mbbjoBs5vV.png\"><br>\n圖 8、使用 S3 壓縮檔建立 Lambda 函數</p>\n<p>打開 <em>yoloDrawLabel.py</em> 檔案，插入 AWS Lambda 的呼叫函數 <em>handler</em> ，修改完畢後記得點擊 <strong>Deploy</strong>，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ITzz6d92e0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510ITzz6d92e0.png\"><br>\n圖 9、修改 Lambda 函數</p>\n<p>拉到畫面下方，修改 <strong>執行時間設定</strong>，將 <em>處理常式</em> 指定為 <em>yoloDrawLabel.handler</em>，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510FA2QvC53c5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510FA2QvC53c5.png\"><br>\n圖 10、修改執行時間設定中的處理常式</p>\n<p>透過點擊 <strong>Test</strong> 來執行 AWS Lambda 函數，第一次執行需要設定測試組態，不需任何更改，只需給定名稱即可。接著再點擊後，就會出現執行結果，輸出結果與在 EC2 上相同，輸出方塊框的左上角與右下角座標，如下圖所示。證明了 OpenCV 層已經正常運作。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510mtKcmn8KJ8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211110/20129510mtKcmn8KJ8.png\"><br>\n圖 11、執行 AWS Lambda 函數</p>\n<h2>參考資料</h2>\n<ul>\n<li>建立和共用 Lambda 層，<a href=\"https://docs.aws.amazon.com/zh_tw/lambda/latest/dg/configuration-layers.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.aws.amazon.com/zh_tw/lambda/latest/dg/configuration-layers.html</a>\n</li>\n<li>使用 .zip 封存檔部署 Python Lambda 函數，<a href=\"https://docs.aws.amazon.com/zh_tw/lambda/latest/dg/python-package.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.aws.amazon.com/zh_tw/lambda/latest/dg/python-package.html</a>\n</li>\n<li>Day 33 - 實作 S3 驅動 Lambda 函數進行鏡像, <a href=\"https://ithelp.ithome.com.tw/articles/10278812\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10278812</a>\n</li>\n<li>Day 12 - 標籤圖片的方法與實作, <a href=\"https://ithelp.ithome.com.tw/articles/10263004\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10263004</a>\n</li>\n<li>AWS S3 CP Examples – How to Copy Files with S3 CLI, <a href=\"https://www.middlewareinventory.com/blog/aws-s3-cp-examples-how-to-copy-files-with-s3-cli-devops-junction/\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.middlewareinventory.com/blog/aws-s3-cp-examples-how-to-copy-files-with-s3-cli-devops-junction/</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,opencv,aws lambda",
        "genre": "AI & Data",
        "published_at": "2021-11-10 10:30:27",
        "author_href": "https://ithelp.ithome.com.tw/users/20129510/ironman",
        "author_name": "yehchitsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20129510/ironman/4385",
        "series_name": "觀賞魚辨識的YOLO全餐",
        "series_num": "37",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>Day 37 - 在 AWS Lambda 建立 OpenCV Layer</h1>\n<p>因為 OpenCV 在影像視覺中時常需要用到，所以現在嘗試在 AWS Lambda 中建立一層 OpenCV ，並將  這個練習，在 AWS Lambda 上完成。操作的流程如下：</p>\n<ol>\n<li>打包 Python 的 OpenCV 函式庫</li>\n<li>在 AWS Lambda 建立 OpenCV 層</li>\n<li>打包程式以及圖片上傳到 S3</li>\n<li>在 AWS Lambda 執行</li>\n</ol>\n<p><strong>步驟 1.打包 Python 的 OpenCV 函式庫</strong></p>\n<p>這個動作很重要，務必要在 Linux 環境下完成這個操作，不可以在 Windows/macOS，因為都會執行失敗，推論可能是因為 AWS Lambda 上執行 OpenCV 的 Container 是 Linux-based，但是這又很奇怪的是，其他 Python 的函式不會有這個問題。</p>\n<p>登錄 Amazon Linux 2 的主機，執行下列程式，主要的操作內容是：</p>\n<ul>\n<li>創建一個新的 Python 虛擬環境</li>\n<li>檢查 Python 版本</li>\n<li>更新 pip</li>\n<li>安裝 opencv</li>\n<li>將安裝好的套件壓縮到 python 這個目錄下</li>\n<li>檢視壓縮內容</li>\n</ul>\n<pre></pre>\n<p>目前這個壓縮包是針對 Python 3.7 且 opencv 的版本是 4.5.3.56，numpy 是 opencv 的相依包，所以會一併被安裝進來，整個檔案的大小是 72 MB左右</p>\n<p><br/>\n圖 1、Python OpenCV 壓縮包的相關版本</p>\n<p>接著直接上傳壓縮檔到 S3，記得需要先完成 <code>aws configure</code> 的使用者認證。</p>\n<pre></pre>\n<p><br/>\n圖 2、Python OpenCV 壓縮包上傳到 S3</p>\n<p><strong>步驟 2.在 AWS Lambda 建立 OpenCV 層</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Layer，輸入 Layer 名稱，並上傳先前建立的壓縮檔，在選擇相容架構 <em>x86_64</em>，而相容的執行時間指的是希望可以在哪些版本的 python 中執行，只能選擇 <strong>Python 3.7</strong> ，選其他版本會出錯，確定後按下 <strong>建立</strong> 鍵即完成建立 Layer，如下圖所示。</p>\n<p><br/>\n圖 3、建立 OpenCV Layer 設定畫面</p>\n<p><strong>步驟 3.打包程式以及圖片上傳到 S3</strong></p>\n<p>登錄 EC2 ，創建一個目錄，並將相關檔案放入該目錄中，壓縮後上傳到 S3 存儲桶內，相關指令如下， <em>yoloDrawLabel.py</em> 這個程式碼請參考  ：</p>\n<pre></pre>\n<p>下圖為 EC2 執行畫面。</p>\n<p><br/>\n圖 4、在 EC2 中建立 Lambda 壓縮檔</p>\n<p><em>./yoloDrawLabel.py</em></p>\n<pre></pre>\n<p><strong>步驟 4.在 AWS Lambda 執行</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。</p>\n<ul>\n<li>選擇下列選項之一來建立您的函式： <em>從頭開始撰寫</em>\n</li>\n<li>函式名稱： <em>opencv45Func</em>\n</li>\n<li>執行時間： <em>Python 3.7</em> <strong>（注意：這個選項不能選其他的 Python 版本，會出現錯誤的）</strong>\n</li>\n<li>架構： <em>x86_64</em>\n</li>\n<li>執行角色： <em>建立具備基本 Lambda 許可的新角色</em>\n</li>\n</ul>\n<p><br/>\n圖 5、建立 Lambda 函數設定畫面</p>\n<p>建立 Lambda 函數後，選擇進入 <strong>opencv45Func</strong> 函數的設定畫面，在畫面的最底端，為本函數新建 Layer，如下圖所示。</p>\n<p><br/>\n圖 6、為 Lambda 函數新增 Layer</p>\n<p>進入新增 Layer 畫面後，選擇層來源為 <em>自訂 Layer</em>，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。</p>\n<p><br/>\n圖 7、選擇 opencv45 函式庫層</p>\n<p>上傳程式碼<br/>\n我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 <strong>上傳於</strong> 按鈕，點擊後選擇 <strong>Amazon S3 位置</strong>，就可以指定位置，如 <em>].s3.ap-southeast-1.amazonaws.com/lambda.zip</em>，畫面如下所示。</p>\n<p><br/>\n圖 8、使用 S3 壓縮檔建立 Lambda 函數</p>\n<p>打開 <em>yoloDrawLabel.py</em> 檔案，插入 AWS Lambda 的呼叫函數 <em>handler</em> ，修改完畢後記得點擊 <strong>Deploy</strong>，如下圖所示。</p>\n<p><br/>\n圖 9、修改 Lambda 函數</p>\n<p>拉到畫面下方，修改 <strong>執行時間設定</strong>，將 <em>處理常式</em> 指定為 <em>yoloDrawLabel.handler</em>，如下圖所示。</p>\n<p><br/>\n圖 10、修改執行時間設定中的處理常式</p>\n<p>透過點擊 <strong>Test</strong> 來執行 AWS Lambda 函數，第一次執行需要設定測試組態，不需任何更改，只需給定名稱即可。接著再點擊後，就會出現執行結果，輸出結果與在 EC2 上相同，輸出方塊框的左上角與右下角座標，如下圖所示。證明了 OpenCV 層已經正常運作。</p>\n<p><br/>\n圖 11、執行 AWS Lambda 函數</p>\n<h2>參考資料</h2>\n<ul>\n<li>建立和共用 Lambda 層，\n</li>\n<li>使用 .zip 封存檔部署 Python Lambda 函數，\n</li>\n<li>Day 33 - 實作 S3 驅動 Lambda 函數進行鏡像, \n</li>\n<li>Day 12 - 標籤圖片的方法與實作, \n</li>\n<li>AWS S3 CP Examples – How to Copy Files with S3 CLI, \n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Day 37 - 在 AWS Lambda 建立 OpenCV Layer\n因為 OpenCV 在影像視覺中時常需要用到，所以現在嘗試在 AWS Lambda 中建立一層 OpenCV ，並將  這個練習，在 AWS Lambda 上完成。操作的流程如下：\n\n打包 Python 的 OpenCV 函式庫\n在 AWS Lambda 建立 OpenCV 層\n打包程式以及圖片上傳到 S3\n在 AWS Lambda 執行\n\n步驟 1.打包 Python 的 OpenCV 函式庫\n這個動作很重要，務必要在 Linux 環境下完成這個操作，不可以在 Windows/macOS，因為都會執行失敗，推論可能是因為 AWS Lambda 上執行 OpenCV 的 Container 是 Linux-based，但是這又很奇怪的是，其他 Python 的函式不會有這個問題。\n登錄 Amazon Linux 2 的主機，執行下列程式，主要的操作內容是：\n\n創建一個新的 Python 虛擬環境\n檢查 Python 版本\n更新 pip\n安裝 opencv\n將安裝好的套件壓縮到 python 這個目錄下\n檢視壓縮內容\n\n\n目前這個壓縮包是針對 Python 3.7 且 opencv 的版本是 4.5.3.56，numpy 是 opencv 的相依包，所以會一併被安裝進來，整個檔案的大小是 72 MB左右\n\n圖 1、Python OpenCV 壓縮包的相關版本\n接著直接上傳壓縮檔到 S3，記得需要先完成 aws configure 的使用者認證。\n\n\n圖 2、Python OpenCV 壓縮包上傳到 S3\n步驟 2.在 AWS Lambda 建立 OpenCV 層\n進入 AWS Lambda 管理控制台，選擇建立 Layer，輸入 Layer 名稱，並上傳先前建立的壓縮檔，在選擇相容架構 x86_64，而相容的執行時間指的是希望可以在哪些版本的 python 中執行，只能選擇 Python 3.7 ，選其他版本會出錯，確定後按下 建立 鍵即完成建立 Layer，如下圖所示。\n\n圖 3、建立 OpenCV Layer 設定畫面\n步驟 3.打包程式以及圖片上傳到 S3\n登錄 EC2 ，創建一個目錄，並將相關檔案放入該目錄中，壓縮後上傳到 S3 存儲桶內，相關指令如下， yoloDrawLabel.py 這個程式碼請參考  ：\n\n下圖為 EC2 執行畫面。\n\n圖 4、在 EC2 中建立 Lambda 壓縮檔\n./yoloDrawLabel.py\n\n步驟 4.在 AWS Lambda 執行\n進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。\n\n選擇下列選項之一來建立您的函式： 從頭開始撰寫\n\n函式名稱： opencv45Func\n\n執行時間： Python 3.7 （注意：這個選項不能選其他的 Python 版本，會出現錯誤的）\n\n架構： x86_64\n\n執行角色： 建立具備基本 Lambda 許可的新角色\n\n\n\n圖 5、建立 Lambda 函數設定畫面\n建立 Lambda 函數後，選擇進入 opencv45Func 函數的設定畫面，在畫面的最底端，為本函數新建 Layer，如下圖所示。\n\n圖 6、為 Lambda 函數新增 Layer\n進入新增 Layer 畫面後，選擇層來源為 自訂 Layer，接著選擇先前建立的 opencv45 函式庫層，如下圖所示。\n\n圖 7、選擇 opencv45 函式庫層\n上傳程式碼\n我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 上傳於 按鈕，點擊後選擇 Amazon S3 位置，就可以指定位置，如 ].s3.ap-southeast-1.amazonaws.com/lambda.zip，畫面如下所示。\n\n圖 8、使用 S3 壓縮檔建立 Lambda 函數\n打開 yoloDrawLabel.py 檔案，插入 AWS Lambda 的呼叫函數 handler ，修改完畢後記得點擊 Deploy，如下圖所示。\n\n圖 9、修改 Lambda 函數\n拉到畫面下方，修改 執行時間設定，將 處理常式 指定為 yoloDrawLabel.handler，如下圖所示。\n\n圖 10、修改執行時間設定中的處理常式\n透過點擊 Test 來執行 AWS Lambda 函數，第一次執行需要設定測試組態，不需任何更改，只需給定名稱即可。接著再點擊後，就會出現執行結果，輸出結果與在 EC2 上相同，輸出方塊框的左上角與右下角座標，如下圖所示。證明了 OpenCV 層已經正常運作。\n\n圖 11、執行 AWS Lambda 函數\n參考資料\n\n建立和共用 Lambda 層，\n\n使用 .zip 封存檔部署 Python Lambda 函數，\n\nDay 33 - 實作 S3 驅動 Lambda 函數進行鏡像, \n\nDay 12 - 標籤圖片的方法與實作, \n\nAWS S3 CP Examples – How to Copy Files with S3 CLI,",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "python3 -m venv opencv\ncd opencv\n. bin/activate\npython -V\npip install pip -U\npip install opencv-python\ncd lib/python3.7/\nln -s site-packages/ python\nzip -r opencv37-45.zip python/\nunzip -l opencv37-45.zip\n"
            },
            {
                "language": "unknown",
                "content": "aws s3 cp opencv37-45.zip s3://[S3存儲桶的名稱]\n"
            },
            {
                "language": "unknown",
                "content": "# 建立 lambda 專屬目錄，目錄名稱沒有強制要求\nmkdir lambda \ncd lambda \n# 產生使用 opencv 的程式碼\nvi yoloDrawLabel.py\nmkdir labels images\n# 上傳標籤所需要的圖片與標籤檔\naws s3 cp s3://[S3存儲桶的名稱]/00-frame-608x608-0001.jpg ./images\naws s3 cp s3://[S3存儲桶的名稱]/00-frame-0001.txt ./labels\n# 執行程式，確保可以在虛擬環境中執行\npython yoloDrawLabel.py\n# 將所需要檔案壓縮並上傳到 S3\nzip -r lambda.zip .\naws s3 cp lambda.zip s3://[S3存儲桶的名稱]\n"
            },
            {
                "language": "unknown",
                "content": "import cv2\n\n# 設定輸入與輸出\ninputLabelPath = './labels/00-frame-0001.txt'\ninputImgPath = './images/00-frame-608x608-0001.jpg'\noutputImgPath = './labels/00-frame-608x608-0001.jpg'\n# 圖片大小固定為 608＊608\nimg_w= img_h = 608\n# 載入圖片\ncv2image = cv2.imread(inputImgPath)\n\nwith open(inputLabelPath) as f:\n  for line in f:\n    line = line.strip() # 刪除多餘的空白\n    data = line.split() # 將 YOLO 一列的內容轉成一維陣列\n    # 將 YOLO 格式轉換為邊界框的左上角和右下角座標\n    bbox_width = float(data[3]) * img_w\n    bbox_height = float(data[4]) * img_h\n    center_x = float(data[1]) * img_w\n    center_y = float(data[2]) * img_h\n    min_x, min_y = center_x - (bbox_width / 2), center_y - (bbox_height / 2)\n    max_x, max_y = center_x + (bbox_width / 2), center_y + (bbox_height / 2)\n    print(min_x,min_y,max_x,max_y)\n    # 在圖片上寫上物件名稱\n    cv2.putText(cv2image, 'Altolamprologus compressiceps', (int(min_x), int(min_y-6)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1, cv2.LINE_AA)\n    # 畫出邊界框\n    cv2.rectangle(cv2image, (int(min_x),int(min_y)), (int(max_x),int(max_y)), (0,255,255), 2)\n    # 將檔案另存新圖片檔\n    cv2.imwrite(r'{}'.format(outputImgPath), cv2image)\n  f.close()\n"
            }
        ],
        "programming_languages": [
            "python"
        ],
        "word_seg_content_text": "Day\n37\n-\n在\nAWS\nLambda\n建立\nOpenCV\nLayer\n因為\nOpenCV\n在 影像 視覺 中 時常 需要 用到 ， 所以 現在 嘗試 在\nAWS\nLambda\n中 建立 一層\nOpenCV\n， 並將\n這個 練習 ， 在\nAWS\nLambda\n上 完成 。 操作 的 流程 如下 ：\n打包\nPython\n的\nOpenCV\n函式 庫\n在\nAWS\nLambda\n建立\nOpenCV\n層\n打包 程式 以及 圖片 上 傳到\nS3\n在\nAWS\nLambda\n執行\n步驟\n1 . 打包\nPython\n的\nOpenCV\n函式 庫\n這個 動作 很 重要 ， 務必 要 在\nLinux\n環境 下 完成 這個 操作 ， 不 可以 在\nWindows / macOS ， 因為 都 會 執行 失敗 ， 推論 可能 是 因為\nAWS\nLambda\n上 執行\nOpenCV\n的\nContainer\n是\nLinux - based ， 但是 這又 很 奇怪的是 ， 其他\nPython\n的 函式 不會 有 這個 問題 。\n登錄\nAmazon\nLinux\n2\n的 主機 ， 執行 下列 程式 ， 主要 的 操作 內容 是 ：\n創建 一個 新 的\nPython\n虛擬環境\n檢查\nPython\n版本\n更新\npip\n安裝\nopencv\n將 安裝 好 的 套件 壓縮 到\npython\n這個 目錄 下\n檢視 壓縮 內容\n目前 這個 壓縮包 是 針對\nPython\n3.7\n且\nopencv\n的 版本 是\n4.5 . 3.56 ， numpy\n是\nopencv\n的 相依 包 ， 所以 會 一併 被 安裝 進來 ， 整個 檔案 的 大小 是\n72\nMB 左右\n圖\n1 、 Python\nOpenCV\n壓縮包 的 相關 版本\n接著 直接 上傳 壓縮 檔到\nS3 ， 記得 需要 先 完成\naws\nconfigure\n的 使用者 認證 。\n圖\n2 、 Python\nOpenCV\n壓縮包 上 傳到\nS3\n步驟\n2 . 在\nAWS\nLambda\n建立\nOpenCV\n層\n進入\nAWS\nLambda\n管理 控制台 ， 選擇 建立\nLayer ， 輸入\nLayer\n名稱 ， 並 上傳 先前 建立 的 壓縮 檔 ， 在 選擇 相容 架構\nx86 _ 64 ， 而 相容 的 執行 時間 指 的 是 希望 可以 在 哪些 版本 的\npython\n中 執行 ， 只能 選擇\nPython\n3.7\n， 選 其他 版本 會 出錯 ， 確定 後 按 下\n建立\n鍵 即 完成 建立\nLayer ， 如 下圖 所示 。\n圖\n3 、 建立\nOpenCV\nLayer\n設定 畫面\n步驟\n3 . 打包 程式 以及 圖片 上 傳到\nS3\n登錄\nEC2\n， 創建 一個 目錄 ， 並 將相 關 檔案 放入 該 目錄 中 ， 壓縮 後 上 傳到\nS3\n存儲 桶 內 ， 相關 指令 如下 ，\nyoloDrawLabel . py\n這個 程式碼 請 參考\n：\n下圖 為\nEC2\n執行 畫面 。\n圖\n4 、 在\nEC2\n中 建立\nLambda\n壓縮 檔\n. / yoloDrawLabel . py\n步驟\n4 . 在\nAWS\nLambda\n執行\n進入\nAWS\nLambda\n管理 控制台 ， 選擇 建立\nLambda\n函數 ， 設定 內容 如 下圖 所示 。\n選擇 下列 選項 之 一來 建立 您 的 函式 ：\n從頭開始 撰寫\n函式 名稱 ：\nopencv45Func\n執行 時間 ：\nPython\n3.7\n（ 注意 ： 這個 選項 不能 選 其他 的\nPython\n版本 ， 會 出現 錯誤 的 ）\n架構 ：\nx86 _ 64\n執行 角色 ：\n建立 具備 基本\nLambda\n許可 的 新 角色\n圖\n5 、 建立\nLambda\n函數 設定 畫面\n建立\nLambda\n函數 後 ， 選擇 進入\nopencv45Func\n函數 的 設定 畫面 ， 在 畫面 的 最 底端 ， 為本 函數 新建\nLayer ， 如 下圖 所示 。\n圖\n6 、 為\nLambda\n函數 新增\nLayer\n進入 新增\nLayer\n畫面 後 ， 選擇 層 來源 為\n自訂\nLayer ， 接著 選擇 先前 建立 的\nopencv45\n函式 庫層 ， 如 下圖 所示 。\n圖\n7 、 選擇\nopencv45\n函式 庫層\n上傳 程式碼\n我們 已經 把\nLambda\n函數 代碼 上 傳到\nS3\n， 只 需 在 函數 設定 主 畫面 的 右邊 ， 可以 找到 一個\n上傳 於\n按鈕 ， 點擊 後 選擇\nAmazon\nS3\n位置 ， 就 可以 指定 位置 ， 如\n] . s3 . ap - southeast - 1 . amazonaws . com / lambda . zip ， 畫面 如下 所示 。\n圖\n8 、 使用\nS3\n壓縮 檔 建立\nLambda\n函數\n打開\nyoloDrawLabel . py\n檔案 ， 插入\nAWS\nLambda\n的 呼叫 函數\nhandler\n， 修改 完畢 後 記得 點擊\nDeploy ， 如 下圖 所示 。\n圖\n9 、 修改\nLambda\n函數\n拉 到 畫面 下方 ， 修改\n執行 時間 設定 ， 將\n處理 常式\n指定 為\nyoloDrawLabel . handler ， 如 下圖 所示 。\n圖\n10 、 修改 執行 時間 設定 中 的 處理 常式\n透過 點擊\nTest\n來 執行\nAWS\nLambda\n函數 ， 第一次 執行 需要 設定 測試 組態 ， 不需 任何 更改 ， 只 需 給定 名稱 即可 。 接著 再 點擊 後 ， 就 會 出現 執行 結果 ， 輸出 結果 與 在\nEC2\n上 相同 ， 輸出 方塊 框 的 左上角 與 右下角 座標 ， 如 下圖 所示 。 證明 了\nOpenCV\n層 已經 正常 運作 。\n圖\n11 、 執行\nAWS\nLambda\n函數\n參考資料\n建立 和 共用\nLambda\n層 ，\n使用\n. zip\n封存 檔 部署\nPython\nLambda\n函數 ，\nDay\n33\n-\n實作\nS3\n驅動\nLambda\n函數 進行 鏡像 ,\nDay\n12\n-\n標籤 圖片 的 方法 與 實作 ,\nAWS\nS3\nCP\nExamples\n–\nHow\nto\nCopy\nFiles\nwith\nS3\nCLI ,",
        "word_seg_processed_content_text": "day\n37\n\n\naws\nlambda\n建立\nopencv\nlayer\n\nopencv\n影像 視覺 中 時常 用到 嘗試\naws\nlambda\n中 建立 一層\nopencv\n並將\n\naws\nlambda\n操作 流程\n打包\npython\n\nopencv\n函式 庫\n\naws\nlambda\n建立\nopencv\n層\n打包 程式 圖片 傳到\ns3\n\naws\nlambda\n執行\n步驟\n1 打包\npython\n\nopencv\n函式 庫\n動作 務必\nlinux\n環境 操作\nwindows macos 會 執行 失敗 推論\naws\nlambda\n執行\nopencv\n\ncontainer\n\nlinux based 這又 奇怪的是\npython\n函式\n登錄\namazon\nlinux\n2\n主機 執行 程式 操作 內容\n創建 新\npython\n虛擬環境\n檢查\npython\n版本\n更新\npip\n安裝\nopencv\n安裝 套件 壓縮\npython\n目錄\n檢視 壓縮 內容\n壓縮包 針對\npython\n3.7\n\nopencv\n版本\n4.5 3.56 numpy\n\nopencv\n相依 包 會 一併 安裝 進來 檔案 大小\n72\nmb\n圖\n1 python\nopencv\n壓縮包 相關 版本\n上傳 壓縮 檔到\ns3 記得 先\naws\nconfigure\n使用者 認證\n圖\n2 python\nopencv\n壓縮包 傳到\ns3\n步驟\n2\naws\nlambda\n建立\nopencv\n層\n\naws\nlambda\n管理 控制台 選擇 建立\nlayer 輸入\nlayer\n名稱 上傳 先前 建立 壓縮 檔 選擇 相容 架構\nx86 64 相容 執行 時間 指 希望 版本\npython\n中 執行 只能 選擇\npython\n3.7\n選 版本 會 出錯\n建立\n鍵 建立\nlayer 下圖 所示\n圖\n3 建立\nopencv\nlayer\n設定 畫面\n步驟\n3 打包 程式 圖片 傳到\ns3\n登錄\nec2\n創建 目錄 將相 關 檔案 放入 目錄 中 壓縮 傳到\ns3\n存儲 桶 內 相關 指令\nyolodrawlabel py\n程式碼 請 參考\n\n下圖\nec2\n執行 畫面\n圖\n4\nec2\n中 建立\nlambda\n壓縮 檔\nyolodrawlabel py\n步驟\n4\naws\nlambda\n執行\n\naws\nlambda\n管理 控制台 選擇 建立\nlambda\n函數 設定 內容 下圖 所示\n選擇 選項 建立 函式\n從頭開始 撰寫\n函式 名稱\nopencv45func\n執行 時間\npython\n3.7\n選項 選\npython\n版本 會 錯誤\n架構\nx86 64\n執行 角色\n建立 具備\nlambda\n許可 新 角色\n圖\n5 建立\nlambda\n函數 設定 畫面\n建立\nlambda\n函數 選擇\nopencv45func\n函數 設定 畫面 畫面 底端 為本 函數 新建\nlayer 下圖 所示\n圖\n6\nlambda\n函數 新增\nlayer\n新增\nlayer\n畫面 選擇 層 來源\n自訂\nlayer 選擇 先前 建立\nopencv45\n函式 庫層 下圖 所示\n圖\n7 選擇\nopencv45\n函式 庫層\n上傳 程式碼\n\nlambda\n函數 代碼 傳到\ns3\n需 函數 設定 主 畫面 右邊 找到\n上傳\n按鈕 點擊 選擇\namazon\ns3\n位置 指定 位置\ns3 ap southeast 1 amazonaws com lambda zip 畫面 所示\n圖\n8\ns3\n壓縮 檔 建立\nlambda\n函數\n打開\nyolodrawlabel py\n檔案 插入\naws\nlambda\n呼叫 函數\nhandler\n修改 完畢 記得 點擊\ndeploy 下圖 所示\n圖\n9 修改\nlambda\n函數\n拉 畫面 下方 修改\n執行 時間 設定\n常式\n指定\nyolodrawlabel handler 下圖 所示\n圖\n10 修改 執行 時間 設定 中 常式\n透過 點擊\ntest\n執行\naws\nlambda\n函數 第一次 執行 設定 測試 組態 不需 更改 需 給定 名稱 即可 點擊 會 執行 輸出\nec2\n輸出 方塊 框 左上角 右下角 座標 下圖 所示 證明\nopencv\n層 運作\n圖\n11 執行\naws\nlambda\n函數\n參考資料\n建立 共用\nlambda\n層\n\nzip\n封存 檔 部署\npython\nlambda\n函數\nday\n33\n\n實作\ns3\n驅動\nlambda\n函數 鏡像\nday\n12\n\n標籤 圖片 方法 實作\naws\ns3\ncp\nexamples\n–\nhow\n\ncopy\nfiles\n\ns3\ncli",
        "extracted_keywords": [
            "opencv",
            "opencv45func",
            "opencv45",
            "虛擬環境",
            "layer"
        ],
        "extracted_keywords_phrases": [
            "建立 opencv",
            "opencv layer",
            "python opencv",
            "opencv 影像",
            "建立 opencv45"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282519": {
        "href": "https://ithelp.ithome.com.tw/articles/10282519",
        "title": "Day 36 - 使用 Container 建立 Amazon SageMaker 端點",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>Day 36 - 使用 Container 建立 Amazon SageMaker 端點</h1>\n<p>今天的任務是將 <a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">Day 16 - 進行影像辨識訓練</a> 所訓練好的 YOLO 權重，轉為 SageMaker 的節點，可以使用 Lambda 來進行調用，需要用到的 AWS 資源為：</p>\n<ul>\n<li>Amazon EC2</li>\n<li>Amazon Simple Storage Service (S3)</li>\n<li>Amazon Elastic Container Registry (ECR)</li>\n<li>AWS Lambda</li>\n<li>Amazon SageMaker</li>\n<li>Identity and Access Management (IAM)</li>\n</ul>\n<p>彼此之間的關係如下圖所示，使用者透過 API Gateway 上傳 (PUT) 圖片到 S3，這個事件會驅動 AWS Lambda ，而在 AWS Lambda 中會呼叫 Amazon SageMaker 的端點 (endpoint) 來使用事先訓練好的 YOLO 模型，而這個 YOLO 模型是在 EC2 中被製作好的容器映像檔 (Container Image)，並上傳到 Amazon Elastic Container Registry 中儲存。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510hVGECXbxVv.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510hVGECXbxVv.png\"><br>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p>建立 Amazon SageMaker 端點的步驟為：</p>\n<ol>\n<li>在 EC2 中建立容器映像檔，上傳容器映像檔到 ECR。</li>\n<li>在 Amazon SageMaker 筆記本中建立 Amazon SageMaker 端點。</li>\n<li>在 AWS Lambda 中進行 Amazon SageMaker 端點呼叫。</li>\n</ol>\n<p><strong>步驟 1.在 EC2 中建立容器映像檔</strong></p>\n<p>這個專案 <a href=\"https://github.com/jackie930/yolov4-SageMaker\" target=\"_blank\" rel=\"noreferrer noopener\">yolov4-SageMaker</a> 已經有建立好的容器設定，只要將這個專案下載到 EC2 上，就可以建立一個 YOLOv4 的推論容器映像檔。首先登錄到事先建立好的 EC2 個體上 (g4dn.2xlarge)，可以參考 <a href=\"https://ithelp.ithome.com.tw/articles/10259162\" target=\"_blank\" rel=\"noreferrer noopener\">Day 02 - 選擇具有 GPU 的 EC2 並完成配置</a> 這篇文章，並將事先訓練好的權重檔複製到指定目錄即可，可以參考 <a href=\"https://ithelp.ithome.com.tw/articles/10264575\" target=\"_blank\" rel=\"noreferrer noopener\">Day 15 - 說明 YOLO 相關設定</a>，相關指令可以參考以下操作。</p>\n<pre><code># 下載 yolov4-SageMaker 專案\ngit https://github.com/jackie930/yolov4-SageMaker.git \ncd yolov4-SageMaker\n# 用來存放事先設定好的參數檔以及訓練好的權重檔的目錄\nmkdir source/yolov4_endpoint/pretrained_model\n\n# 事先設定好的參數檔以及訓練好的權重檔\ncp ./darknet/cfg/yolov3.cfg ./source/yolov4_endpoint/pretrained_model/\ncp ./darknet/cfg/obj.names ./source/yolov4_endpoint/pretrained_model/\ncp ./darknet/weights/yolov3.backup  ./source/yolov4_endpoint/pretrained_model/\n</code></pre>\n<p>確認 yolov4-SageMaker 目錄結構，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510fZSHhCkM4N.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510fZSHhCkM4N.png\"><br>\n圖 2、yolov4-SageMaker 目錄結構</p>\n<p>修改推論程式 predictor.py ，這個是容器內主要用來進行圖片辨識的程式，需要把預設的參數修改成自定義的參數，需要修改的在 94 - 96 行。</p>\n<p><em>source/yolov4_endpoint/predictor.py</em></p>\n<pre><code># 原先的設定\nweight = './yolov4.weights'\nnames = './coco.names'\ncfg = './yolov4.cfg'\n# 自定的設定\nweight = './yolov3.backup'\nnames = './obj.names'\ncfg = './yolov3.cfg'\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510D2it46cjqQ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510D2it46cjqQ.png\"><br>\n圖 3、修改為自行定義的圖片辨識的程式</p>\n<p>接下來把建立容器映像檔的組態改成以 GPU 為基礎的，這樣等一下在建立映像檔的時候就會是編輯成可以使用 GPU 的版本，只是建立過程會十分緩慢，大概要數個小時。因為會建立一個 Docker Image，並將這個 image 放到 ECR 中，所以需要進行 AWS CLI 的認證，這一部分可以參考 <a href=\"https://ithelp.ithome.com.tw/articles/10241350\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Elastic Container Registry (ECR) - Day21</a> 這一篇文章。</p>\n<pre><code># 將 Docker 的建立設定改成針對 GPU 的\ncd source/yolov4_endpoint/\nmv Dockerfile Dockerfile.cpu\nmv Dockerfile.gpu Dockerfile\n# AWS CLI 的認證\naws configure\n# 建立一個 docker image 並上傳到 ECR ，名稱為 yolov4-gpu\nsh build_and_push.sh yolov4-gpu\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510JTliemrszh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510JTliemrszh.png\"><br>\n圖 4、建立 YOLOv4 容器所需要的檔案</p>\n<p>建立成功後可以在 Amazon Elastic Container Registry (ECR) 中，看到建立好的容器映像檔，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295105O0v6hmfUh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295105O0v6hmfUh.png\"><br>\n圖 5、建立好的容器映像檔</p>\n<p><strong>步驟 2. 建立 Amazon SageMaker 端點</strong></p>\n<p>在專案中有一個 create_endpoint.py 的檔案，就是用來建立 Amazon SageMaker 端點的代碼，將這些代碼利用 Amazon SageMaker 筆記本來運行，並觀察運行結果，首先修改 <em>get_arguments()</em> 這個方法，指定端點名稱、目前的容器映像檔、以及指定端點運行的機型等，代碼如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510VdpzC8M9Di.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510VdpzC8M9Di.png\"><br>\n圖 6、建立 Amazon SageMaker 端點 yolov4-gpu</p>\n<p><strong>步驟 3. AWS Lambda 中進行 Amazon SageMaker 端點呼叫</strong></p>\n<p>需要建立一個角色需要由 Lambda 函數來執行，且具有執行 Amazon SageMaker 端點的許可授權。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。在 <strong>Attach 許可政策</strong> 中輸入 sagemaker 接著選 <strong>AmazonSageMakerFullAccess</strong> 這個政策，以確保這個角色可以透過 AWS Lambda 來執行  Amazon SageMaker 端點。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295109fDBMU7qOo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295109fDBMU7qOo.png\"><br>\n圖 7、建立一個角色選擇 Lambda 的使用案例</p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。輸入函數名稱，執行時間選擇 <strong>Python 3.8</strong>，最重要的是執行角色，務必選擇上一個畫面中的角色。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510Y22WPh3rrK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510Y22WPh3rrK.png\"><br>\n圖 8、建立 Lambda 函數設定畫面</p>\n<p>接著輸入程式碼如下所示，bucket 跟 image_uri 這兩個變數需要改成自己環境中的對應值：</p>\n<pre><code>import json\nfrom boto3.session import Session\nimport time\n\ndef lambda_handler(event, context):\n    bucket = 'S3-BUCKET' # 存放辨識圖片的 S3 存儲桶\n    image_uri = '00-frame-608x608-0007-new.jpg' # 待辨識圖片\n    test_data = {\n        'bucket' : bucket,\n        'image_uri' : image_uri,\n        'content_type': \"application/json\",\n    }\n    payload = json.dumps(test_data)\n\n\n    session = Session()\n\n    runtime = session.client(\"runtime.sagemaker\")\n    prev_time = time.time()\n    response = runtime.invoke_endpoint(\n        EndpointName='yolov4-gpu',\n        ContentType=\"application/json\",\n        Body=payload)\n    print('internal predicting time: ' , (time.time() - prev_time))\n    result = json.loads(response[\"Body\"].read())\n    print (result)\n    return {\n        'statusCode': 200,\n        'body': json.dumps(result)\n    }\n</code></pre>\n<p>測試結果如下圖所示，使用與 <a href=\"https://ithelp.ithome.com.tw/articles/10282495\" target=\"_blank\" rel=\"noreferrer noopener\">Day 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識</a> 相同的圖片，得到的結果一樣，而辨識結果為 0.8 秒。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510PGcvUfKDms.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510PGcvUfKDms.png\"><br>\n圖 9、建立 Lambda 函數設定畫面</p>\n<p>這樣的結果似乎就是我們想要的，但事實上，Amazon SageMaker 端點一樣是要建立在實體之上，而這個實體也是一樣要計費的，而且比 EC2 相同規格的還要貴，以下是 g4dn.xlarge 實體類型每小時端點跟 EC2 的計價。</p>\n<ul>\n<li>$1.0304 for Endpoint ml.g4dn.xlarge</li>\n<li>$0.736 per On Demand Linux g4dn.xlarge</li>\n</ul>\n<p>務必記得關閉 Amazon SageMaker 端點，如下圖所示，同時也要關閉 Amazon SageMaker 筆記本，因為這也是在實體上運行。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295105jLN9ZjLbG.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/201295105jLN9ZjLbG.png\"><br>\n圖 10、關閉 Amazon SageMaker 端點</p>\n<p>以下是這三個方案的比較表，成本與推論時間都是可以明確從實驗中得知，而系統還在乎的是可用性，因為 EC2 內的服務都是開發者自行建置，所以比較會有維運上的問題，或是系統無法負荷導致無法服務的問題。</p>\n<p>表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較</p>\n<table>\n<thead>\n<tr>\n<th>&nbsp;</th>\n<th>使用 EC2</th>\n<th>使用 Lambda</th>\n<th>使用 SageMaker</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成本(USD)</td>\n<td>0.736</td>\n<td>0</td>\n<td>1.0304</td>\n</tr>\n<tr>\n<td>時間(秒)</td>\n<td>~ 0.1 秒</td>\n<td>&gt; 60 秒</td>\n<td>1秒 左右</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>較差</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n</tr>\n</tbody>\n</table>\n<h2>參考資料</h2>\n<ul>\n<li>yolov4-SageMaker, <a href=\"https://github.com/jackie930/yolov4-SageMaker\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/jackie930/yolov4-SageMaker</a>\n</li>\n<li>How to run a python file inside a aws sagemaker using dockerfile, <a href=\"https://stackoverflow.com/questions/58300841/how-to-run-a-python-file-inside-a-aws-sagemaker-using-dockerfile\" target=\"_blank\" rel=\"noreferrer noopener\">https://stackoverflow.com/questions/58300841/how-to-run-a-python-file-inside-a-aws-sagemaker-using-dockerfile</a>\n</li>\n<li>Day 16 - 進行影像辨識訓練, <a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10265534</a>\n</li>\n<li>Real-time Object Detection API using Amazon SageMaker and Amazon API Gateway, <a href=\"https://medium.com/hackernoon/building-realtime-object-detection-api-with-amazon-sagemaker-and-amazon-api-gateway-c9f62a9fd69a\" target=\"_blank\" rel=\"noreferrer noopener\">https://medium.com/hackernoon/building-realtime-object-detection-api-with-amazon-sagemaker-and-amazon-api-gateway-c9f62a9fd69a</a>\n</li>\n<li>Call an Amazon SageMaker model endpoint using Amazon API Gateway and AWS Lambda, <a href=\"https://aws.amazon.com/tw/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/\" target=\"_blank\" rel=\"noreferrer noopener\">https://aws.amazon.com/tw/blogs/machine-learning/call-an-amazon-sagemaker-model-endpoint-using-amazon-api-gateway-and-aws-lambda/</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,yolov4,sagemaker,ecr,container",
        "genre": "AI & Data",
        "published_at": "2021-11-08 20:52:14",
        "author_href": "https://ithelp.ithome.com.tw/users/20129510/ironman",
        "author_name": "yehchitsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20129510/ironman/4385",
        "series_name": "觀賞魚辨識的YOLO全餐",
        "series_num": "36",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>Day 36 - 使用 Container 建立 Amazon SageMaker 端點</h1>\n<p>今天的任務是將  所訓練好的 YOLO 權重，轉為 SageMaker 的節點，可以使用 Lambda 來進行調用，需要用到的 AWS 資源為：</p>\n<ul>\n<li>Amazon EC2</li>\n<li>Amazon Simple Storage Service (S3)</li>\n<li>Amazon Elastic Container Registry (ECR)</li>\n<li>AWS Lambda</li>\n<li>Amazon SageMaker</li>\n<li>Identity and Access Management (IAM)</li>\n</ul>\n<p>彼此之間的關係如下圖所示，使用者透過 API Gateway 上傳 (PUT) 圖片到 S3，這個事件會驅動 AWS Lambda ，而在 AWS Lambda 中會呼叫 Amazon SageMaker 的端點 (endpoint) 來使用事先訓練好的 YOLO 模型，而這個 YOLO 模型是在 EC2 中被製作好的容器映像檔 (Container Image)，並上傳到 Amazon Elastic Container Registry 中儲存。</p>\n<p><br/>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p>建立 Amazon SageMaker 端點的步驟為：</p>\n<ol>\n<li>在 EC2 中建立容器映像檔，上傳容器映像檔到 ECR。</li>\n<li>在 Amazon SageMaker 筆記本中建立 Amazon SageMaker 端點。</li>\n<li>在 AWS Lambda 中進行 Amazon SageMaker 端點呼叫。</li>\n</ol>\n<p><strong>步驟 1.在 EC2 中建立容器映像檔</strong></p>\n<p>這個專案  已經有建立好的容器設定，只要將這個專案下載到 EC2 上，就可以建立一個 YOLOv4 的推論容器映像檔。首先登錄到事先建立好的 EC2 個體上 (g4dn.2xlarge)，可以參考  這篇文章，並將事先訓練好的權重檔複製到指定目錄即可，可以參考 ，相關指令可以參考以下操作。</p>\n<pre></pre>\n<p>確認 yolov4-SageMaker 目錄結構，如下圖所示。</p>\n<p><br/>\n圖 2、yolov4-SageMaker 目錄結構</p>\n<p>修改推論程式 predictor.py ，這個是容器內主要用來進行圖片辨識的程式，需要把預設的參數修改成自定義的參數，需要修改的在 94 - 96 行。</p>\n<p><em>source/yolov4_endpoint/predictor.py</em></p>\n<pre></pre>\n<p><br/>\n圖 3、修改為自行定義的圖片辨識的程式</p>\n<p>接下來把建立容器映像檔的組態改成以 GPU 為基礎的，這樣等一下在建立映像檔的時候就會是編輯成可以使用 GPU 的版本，只是建立過程會十分緩慢，大概要數個小時。因為會建立一個 Docker Image，並將這個 image 放到 ECR 中，所以需要進行 AWS CLI 的認證，這一部分可以參考  這一篇文章。</p>\n<pre></pre>\n<p><br/>\n圖 4、建立 YOLOv4 容器所需要的檔案</p>\n<p>建立成功後可以在 Amazon Elastic Container Registry (ECR) 中，看到建立好的容器映像檔，如下圖所示。</p>\n<p><br/>\n圖 5、建立好的容器映像檔</p>\n<p><strong>步驟 2. 建立 Amazon SageMaker 端點</strong></p>\n<p>在專案中有一個 create_endpoint.py 的檔案，就是用來建立 Amazon SageMaker 端點的代碼，將這些代碼利用 Amazon SageMaker 筆記本來運行，並觀察運行結果，首先修改 <em>get_arguments()</em> 這個方法，指定端點名稱、目前的容器映像檔、以及指定端點運行的機型等，代碼如下圖所示。</p>\n<p><br/>\n圖 6、建立 Amazon SageMaker 端點 yolov4-gpu</p>\n<p><strong>步驟 3. AWS Lambda 中進行 Amazon SageMaker 端點呼叫</strong></p>\n<p>需要建立一個角色需要由 Lambda 函數來執行，且具有執行 Amazon SageMaker 端點的許可授權。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。在 <strong>Attach 許可政策</strong> 中輸入 sagemaker 接著選 <strong>AmazonSageMakerFullAccess</strong> 這個政策，以確保這個角色可以透過 AWS Lambda 來執行  Amazon SageMaker 端點。</p>\n<p><br/>\n圖 7、建立一個角色選擇 Lambda 的使用案例</p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。輸入函數名稱，執行時間選擇 <strong>Python 3.8</strong>，最重要的是執行角色，務必選擇上一個畫面中的角色。</p>\n<p><br/>\n圖 8、建立 Lambda 函數設定畫面</p>\n<p>接著輸入程式碼如下所示，bucket 跟 image_uri 這兩個變數需要改成自己環境中的對應值：</p>\n<pre></pre>\n<p>測試結果如下圖所示，使用與  相同的圖片，得到的結果一樣，而辨識結果為 0.8 秒。</p>\n<p><br/>\n圖 9、建立 Lambda 函數設定畫面</p>\n<p>這樣的結果似乎就是我們想要的，但事實上，Amazon SageMaker 端點一樣是要建立在實體之上，而這個實體也是一樣要計費的，而且比 EC2 相同規格的還要貴，以下是 g4dn.xlarge 實體類型每小時端點跟 EC2 的計價。</p>\n<ul>\n<li>$1.0304 for Endpoint ml.g4dn.xlarge</li>\n<li>$0.736 per On Demand Linux g4dn.xlarge</li>\n</ul>\n<p>務必記得關閉 Amazon SageMaker 端點，如下圖所示，同時也要關閉 Amazon SageMaker 筆記本，因為這也是在實體上運行。</p>\n<p><br/>\n圖 10、關閉 Amazon SageMaker 端點</p>\n<p>以下是這三個方案的比較表，成本與推論時間都是可以明確從實驗中得知，而系統還在乎的是可用性，因為 EC2 內的服務都是開發者自行建置，所以比較會有維運上的問題，或是系統無法負荷導致無法服務的問題。</p>\n<p>表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較</p>\n<table>\n<thead>\n<tr>\n<th> </th>\n<th>使用 EC2</th>\n<th>使用 Lambda</th>\n<th>使用 SageMaker</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>成本(USD)</td>\n<td>0.736</td>\n<td>0</td>\n<td>1.0304</td>\n</tr>\n<tr>\n<td>時間(秒)</td>\n<td>~ 0.1 秒</td>\n<td>&gt; 60 秒</td>\n<td>1秒 左右</td>\n</tr>\n<tr>\n<td>可用性</td>\n<td>較差</td>\n<td>AWS 托管</td>\n<td>AWS 托管</td>\n</tr>\n</tbody>\n</table>\n<h2>參考資料</h2>\n<ul>\n<li>yolov4-SageMaker, \n</li>\n<li>How to run a python file inside a aws sagemaker using dockerfile, \n</li>\n<li>Day 16 - 進行影像辨識訓練, \n</li>\n<li>Real-time Object Detection API using Amazon SageMaker and Amazon API Gateway, \n</li>\n<li>Call an Amazon SageMaker model endpoint using Amazon API Gateway and AWS Lambda, \n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Day 36 - 使用 Container 建立 Amazon SageMaker 端點\n今天的任務是將  所訓練好的 YOLO 權重，轉為 SageMaker 的節點，可以使用 Lambda 來進行調用，需要用到的 AWS 資源為：\n\nAmazon EC2\nAmazon Simple Storage Service (S3)\nAmazon Elastic Container Registry (ECR)\nAWS Lambda\nAmazon SageMaker\nIdentity and Access Management (IAM)\n\n彼此之間的關係如下圖所示，使用者透過 API Gateway 上傳 (PUT) 圖片到 S3，這個事件會驅動 AWS Lambda ，而在 AWS Lambda 中會呼叫 Amazon SageMaker 的端點 (endpoint) 來使用事先訓練好的 YOLO 模型，而這個 YOLO 模型是在 EC2 中被製作好的容器映像檔 (Container Image)，並上傳到 Amazon Elastic Container Registry 中儲存。\n\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖\n建立 Amazon SageMaker 端點的步驟為：\n\n在 EC2 中建立容器映像檔，上傳容器映像檔到 ECR。\n在 Amazon SageMaker 筆記本中建立 Amazon SageMaker 端點。\n在 AWS Lambda 中進行 Amazon SageMaker 端點呼叫。\n\n步驟 1.在 EC2 中建立容器映像檔\n這個專案  已經有建立好的容器設定，只要將這個專案下載到 EC2 上，就可以建立一個 YOLOv4 的推論容器映像檔。首先登錄到事先建立好的 EC2 個體上 (g4dn.2xlarge)，可以參考  這篇文章，並將事先訓練好的權重檔複製到指定目錄即可，可以參考 ，相關指令可以參考以下操作。\n\n確認 yolov4-SageMaker 目錄結構，如下圖所示。\n\n圖 2、yolov4-SageMaker 目錄結構\n修改推論程式 predictor.py ，這個是容器內主要用來進行圖片辨識的程式，需要把預設的參數修改成自定義的參數，需要修改的在 94 - 96 行。\nsource/yolov4_endpoint/predictor.py\n\n\n圖 3、修改為自行定義的圖片辨識的程式\n接下來把建立容器映像檔的組態改成以 GPU 為基礎的，這樣等一下在建立映像檔的時候就會是編輯成可以使用 GPU 的版本，只是建立過程會十分緩慢，大概要數個小時。因為會建立一個 Docker Image，並將這個 image 放到 ECR 中，所以需要進行 AWS CLI 的認證，這一部分可以參考  這一篇文章。\n\n\n圖 4、建立 YOLOv4 容器所需要的檔案\n建立成功後可以在 Amazon Elastic Container Registry (ECR) 中，看到建立好的容器映像檔，如下圖所示。\n\n圖 5、建立好的容器映像檔\n步驟 2. 建立 Amazon SageMaker 端點\n在專案中有一個 create_endpoint.py 的檔案，就是用來建立 Amazon SageMaker 端點的代碼，將這些代碼利用 Amazon SageMaker 筆記本來運行，並觀察運行結果，首先修改 get_arguments() 這個方法，指定端點名稱、目前的容器映像檔、以及指定端點運行的機型等，代碼如下圖所示。\n\n圖 6、建立 Amazon SageMaker 端點 yolov4-gpu\n步驟 3. AWS Lambda 中進行 Amazon SageMaker 端點呼叫\n需要建立一個角色需要由 Lambda 函數來執行，且具有執行 Amazon SageMaker 端點的許可授權。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 下一個：許可 按鈕。在 Attach 許可政策 中輸入 sagemaker 接著選 AmazonSageMakerFullAccess 這個政策，以確保這個角色可以透過 AWS Lambda 來執行  Amazon SageMaker 端點。\n\n圖 7、建立一個角色選擇 Lambda 的使用案例\n進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。輸入函數名稱，執行時間選擇 Python 3.8，最重要的是執行角色，務必選擇上一個畫面中的角色。\n\n圖 8、建立 Lambda 函數設定畫面\n接著輸入程式碼如下所示，bucket 跟 image_uri 這兩個變數需要改成自己環境中的對應值：\n\n測試結果如下圖所示，使用與  相同的圖片，得到的結果一樣，而辨識結果為 0.8 秒。\n\n圖 9、建立 Lambda 函數設定畫面\n這樣的結果似乎就是我們想要的，但事實上，Amazon SageMaker 端點一樣是要建立在實體之上，而這個實體也是一樣要計費的，而且比 EC2 相同規格的還要貴，以下是 g4dn.xlarge 實體類型每小時端點跟 EC2 的計價。\n\n$1.0304 for Endpoint ml.g4dn.xlarge\n$0.736 per On Demand Linux g4dn.xlarge\n\n務必記得關閉 Amazon SageMaker 端點，如下圖所示，同時也要關閉 Amazon SageMaker 筆記本，因為這也是在實體上運行。\n\n圖 10、關閉 Amazon SageMaker 端點\n以下是這三個方案的比較表，成本與推論時間都是可以明確從實驗中得知，而系統還在乎的是可用性，因為 EC2 內的服務都是開發者自行建置，所以比較會有維運上的問題，或是系統無法負荷導致無法服務的問題。\n表 1、 使用 EC2/Lambda/SageMaker 進行 YOLO 辨識比較\n\n\n\n \n使用 EC2\n使用 Lambda\n使用 SageMaker\n\n\n\n\n成本(USD)\n0.736\n0\n1.0304\n\n\n時間(秒)\n~ 0.1 秒\n> 60 秒\n1秒 左右\n\n\n可用性\n較差\nAWS 托管\nAWS 托管\n\n\n\n參考資料\n\nyolov4-SageMaker, \n\nHow to run a python file inside a aws sagemaker using dockerfile, \n\nDay 16 - 進行影像辨識訓練, \n\nReal-time Object Detection API using Amazon SageMaker and Amazon API Gateway, \n\nCall an Amazon SageMaker model endpoint using Amazon API Gateway and AWS Lambda,",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "# 下載 yolov4-SageMaker 專案\ngit https://github.com/jackie930/yolov4-SageMaker.git \ncd yolov4-SageMaker\n# 用來存放事先設定好的參數檔以及訓練好的權重檔的目錄\nmkdir source/yolov4_endpoint/pretrained_model\n\n# 事先設定好的參數檔以及訓練好的權重檔\ncp ./darknet/cfg/yolov3.cfg ./source/yolov4_endpoint/pretrained_model/\ncp ./darknet/cfg/obj.names ./source/yolov4_endpoint/pretrained_model/\ncp ./darknet/weights/yolov3.backup  ./source/yolov4_endpoint/pretrained_model/\n"
            },
            {
                "language": "unknown",
                "content": "# 原先的設定\nweight = './yolov4.weights'\nnames = './coco.names'\ncfg = './yolov4.cfg'\n# 自定的設定\nweight = './yolov3.backup'\nnames = './obj.names'\ncfg = './yolov3.cfg'\n"
            },
            {
                "language": "unknown",
                "content": "# 將 Docker 的建立設定改成針對 GPU 的\ncd source/yolov4_endpoint/\nmv Dockerfile Dockerfile.cpu\nmv Dockerfile.gpu Dockerfile\n# AWS CLI 的認證\naws configure\n# 建立一個 docker image 並上傳到 ECR ，名稱為 yolov4-gpu\nsh build_and_push.sh yolov4-gpu\n"
            },
            {
                "language": "unknown",
                "content": "import json\nfrom boto3.session import Session\nimport time\n\ndef lambda_handler(event, context):\n    bucket = 'S3-BUCKET' # 存放辨識圖片的 S3 存儲桶\n    image_uri = '00-frame-608x608-0007-new.jpg' # 待辨識圖片\n    test_data = {\n        'bucket' : bucket,\n        'image_uri' : image_uri,\n        'content_type': \"application/json\",\n    }\n    payload = json.dumps(test_data)\n\n\n    session = Session()\n\n    runtime = session.client(\"runtime.sagemaker\")\n    prev_time = time.time()\n    response = runtime.invoke_endpoint(\n        EndpointName='yolov4-gpu',\n        ContentType=\"application/json\",\n        Body=payload)\n    print('internal predicting time: ' , (time.time() - prev_time))\n    result = json.loads(response[\"Body\"].read())\n    print (result)\n    return {\n        'statusCode': 200,\n        'body': json.dumps(result)\n    }\n"
            }
        ],
        "programming_languages": [
            "python"
        ],
        "word_seg_content_text": "Day\n36\n-\n使用\nContainer\n建立\nAmazon\nSageMaker\n端點\n今天 的 任務 是將\n所 訓練 好 的\nYOLO\n權重 ， 轉為\nSageMaker\n的 節點 ， 可以 使用\nLambda\n來 進行 調用 ， 需要 用到 的\nAWS\n資源 為 ：\nAmazon\nEC2\nAmazon\nSimple\nStorage\nService\n( S3 )\nAmazon\nElastic\nContainer\nRegistry\n( ECR )\nAWS\nLambda\nAmazon\nSageMaker\nIdentity\nand\nAccess\nManagement\n( IAM )\n彼此之間 的 關係 如 下圖 所示 ， 使用者 透過\nAPI\nGateway\n上傳\n( PUT )\n圖片 到\nS3 ， 這個 事件 會 驅動\nAWS\nLambda\n， 而 在\nAWS\nLambda\n中 會 呼叫\nAmazon\nSageMaker\n的 端點\n( endpoint )\n來 使用 事先 訓練 好 的\nYOLO\n模型 ， 而 這個\nYOLO\n模型 是 在\nEC2\n中 被 製作 好 的 容器 映像 檔\n( Container\nImage ) ， 並上 傳到\nAmazon\nElastic\nContainer\nRegistry\n中 儲存 。\n圖\n1 、 S3\n驅動\nLambda\n函數 進行\nYOLO\n辨識 架構圖\n建立\nAmazon\nSageMaker\n端點 的 步驟 為 ：\n在\nEC2\n中 建立 容器 映像 檔 ， 上傳 容器 映像 檔到\nECR 。\n在\nAmazon\nSageMaker\n筆記本 中 建立\nAmazon\nSageMaker\n端點 。\n在\nAWS\nLambda\n中 進行\nAmazon\nSageMaker\n端點 呼叫 。\n步驟\n1 . 在\nEC2\n中 建立 容器 映像 檔\n這個 專案\n已經 有 建立 好 的 容器 設定 ， 只要 將 這個 專案 下載 到\nEC2\n上 ， 就 可以 建立 一個\nYOLOv4\n的 推論 容器 映像 檔 。 首先 登錄 到 事先 建立 好 的\nEC2\n個體 上\n( g4dn.2 xlarge ) ， 可以 參考\n這 篇文章 ， 並將 事先 訓練 好 的 權重 檔 複製到 指定 目錄 即可 ， 可以 參考\n， 相關 指令 可以 參考 以下 操作 。\n確認\nyolov4 - SageMaker\n目錄 結構 ， 如 下圖 所示 。\n圖\n2 、 yolov4 - SageMaker\n目錄 結構\n修改 推論 程式\npredictor . py\n， 這個 是 容器 內 主要 用來 進行 圖片 辨識 的 程式 ， 需要 把 預設 的 參數 修改 成 自定義 的 參數 ， 需要 修改 的 在\n94\n-\n96\n行 。\nsource / yolov4 _ endpoint / predictor . py\n圖\n3 、 修改 為 自行 定義 的 圖片 辨識 的 程式\n接下來 把 建立 容器 映像 檔 的 組態 改成 以\nGPU\n為 基礎 的 ， 這樣 等 一下 在 建立 映像 檔 的 時候 就 會 是 編輯 成 可以 使用\nGPU\n的 版本 ， 只是 建立 過程 會 十分 緩慢 ， 大概 要 數個 小時 。 因為 會 建立 一個\nDocker\nImage ， 並將 這個\nimage\n放到\nECR\n中 ， 所以 需要 進行\nAWS\nCLI\n的 認證 ， 這 一部分 可以 參考\n這 一篇 文章 。\n圖\n4 、 建立\nYOLOv4\n容器 所 需要 的 檔案\n建立 成功 後 可以 在\nAmazon\nElastic\nContainer\nRegistry\n( ECR )\n中 ， 看到 建立 好 的 容器 映像 檔 ， 如 下圖 所示 。\n圖\n5 、 建立 好 的 容器 映像 檔\n步驟\n2 .\n建立\nAmazon\nSageMaker\n端點\n在 專案 中有 一個\ncreate _ endpoint . py\n的 檔案 ， 就是 用來 建立\nAmazon\nSageMaker\n端點 的 代碼 ， 將 這些 代碼 利用\nAmazon\nSageMaker\n筆記 本來 運行 ， 並 觀察 運行 結果 ， 首先 修改\nget _ arguments ( )\n這個 方法 ， 指定 端點 名稱 、 目前 的 容器 映像 檔 、 以及 指定 端點 運行 的 機型 等 ， 代碼 如 下圖 所示 。\n圖\n6 、 建立\nAmazon\nSageMaker\n端點\nyolov4 - gpu\n步驟\n3 .\nAWS\nLambda\n中 進行\nAmazon\nSageMaker\n端點 呼叫\n需要 建立 一個 角色 需要 由\nLambda\n函數 來 執行 ， 且 具有 執行\nAmazon\nSageMaker\n端點 的 許可 授權 。 進入\nIAM\n管理 控制台 ， 選擇 新增 角色 ， 接下來 如 下圖 所示 ， 選擇\nLambda\n的 使用 案例 後 點擊\n下 一個 ： 許可\n按鈕 。 在\nAttach\n許可 政策\n中 輸入\nsagemaker\n接著選\nAmazonSageMakerFullAccess\n這個 政策 ， 以 確保 這個 角色 可以 透過\nAWS\nLambda\n來 執行\nAmazon\nSageMaker\n端點 。\n圖\n7 、 建立 一個 角色 選擇\nLambda\n的 使用 案例\n進入\nAWS\nLambda\n管理 控制台 ， 選擇 建立\nLambda\n函數 ， 設定 內容 如 下圖 所示 。 輸入 函數 名稱 ， 執行 時間 選擇\nPython\n3.8 ， 最 重要 的 是 執行 角色 ， 務必 選擇 上 一個 畫面 中 的 角色 。\n圖\n8 、 建立\nLambda\n函數 設定 畫面\n接著 輸入 程式碼 如下 所示 ， bucket\n跟\nimage _ uri\n這 兩個 變數 需要 改成 自己 環境 中 的 對應 值 ：\n測試 結果 如 下圖 所示 ， 使用 與\n相同 的 圖片 ， 得到 的 結果 一樣 ， 而 辨識 結果 為\n0.8\n秒 。\n圖\n9 、 建立\nLambda\n函數 設定 畫面\n這樣 的 結果 似乎 就是 我們 想要 的 ， 但 事實上 ， Amazon\nSageMaker\n端點 一樣 是 要 建立 在 實體 之上 ， 而 這個 實體 也 是 一樣 要 計費 的 ， 而且 比\nEC2\n相同 規格 的 還要 貴 ， 以下 是\ng4dn . xlarge\n實體 類型 每 小時 端點 跟\nEC2\n的 計價 。\n$ 1.0304\nfor\nEndpoint\nml . g4dn . xlarge\n$ 0.736\nper\nOn\nDemand\nLinux\ng4dn . xlarge\n務必 記得 關閉\nAmazon\nSageMaker\n端點 ， 如 下圖 所示 ， 同時 也 要 關閉\nAmazon\nSageMaker\n筆記本 ， 因為 這也 是 在 實體 上 運行 。\n圖\n10 、 關閉\nAmazon\nSageMaker\n端點\n以下 是 這 三個 方案 的 比較 表 ， 成本 與 推論 時間 都 是 可以 明確 從 實驗 中 得知 ， 而 系統 還 在乎 的 是 可用性 ， 因為\nEC2\n內 的 服務 都 是 開發者 自行 建置 ， 所以 比較 會有 維運上 的 問題 ， 或是 系統 無法 負荷 導致 無法 服務 的 問題 。\n表\n1 、\n使用\nEC2 / Lambda / SageMaker\n進行\nYOLO\n辨識 比較\n使用\nEC2\n使用\nLambda\n使用\nSageMaker\n成本 ( USD )\n0.736\n0\n1.0304\n時間 ( 秒 )\n~\n0.1\n秒\n>\n60\n秒\n1 秒\n左右\n可用性\n較差\nAWS\n托管\nAWS\n托管\n參考資料\nyolov4 - SageMaker ,\nHow\nto\nrun\na\npython\nfile\ninside\na\naws\nsagemaker\nusing\ndockerfile ,\nDay\n16\n-\n進行 影像 辨識 訓練 ,\nReal - time\nObject\nDetection\nAPI\nusing\nAmazon\nSageMaker\nand\nAmazon\nAPI\nGateway ,\nCall\nan\nAmazon\nSageMaker\nmodel\nendpoint\nusing\nAmazon\nAPI\nGateway\nand\nAWS\nLambda ,",
        "word_seg_processed_content_text": "day\n36\n\n\ncontainer\n建立\namazon\nsagemaker\n端點\n是將\n訓練\nyolo\n權重 轉為\nsagemaker\n節點\nlambda\n調用 用到\naws\n資源\namazon\nec2\namazon\nsimple\nstorage\nservice\ns3\namazon\nelastic\ncontainer\nregistry\necr\naws\nlambda\namazon\nsagemaker\nidentity\n\naccess\nmanagement\niam\n彼此之間 關係 下圖 所示 使用者 透過\napi\ngateway\n上傳\nput\n圖片\ns3 事件 會 驅動\naws\nlambda\n\naws\nlambda\n中 會 呼叫\namazon\nsagemaker\n端點\nendpoint\n事先 訓練\nyolo\n模型\nyolo\n模型\nec2\n中 製作 容器 映像 檔\ncontainer\nimage 並上 傳到\namazon\nelastic\ncontainer\nregistry\n中 儲存\n圖\n1 s3\n驅動\nlambda\n函數\nyolo\n辨識 架構圖\n建立\namazon\nsagemaker\n端點 步驟\n\nec2\n中 建立 容器 映像 檔 上傳 容器 映像 檔到\necr\n\namazon\nsagemaker\n筆記本 中 建立\namazon\nsagemaker\n端點\n\naws\nlambda\n中\namazon\nsagemaker\n端點 呼叫\n步驟\n1\nec2\n中 建立 容器 映像 檔\n專案\n建立 容器 設定 專案 下載\nec2\n建立\nyolov4\n推論 容器 映像 檔 登錄 事先 建立\nec2\n個體\ng4dn.2 xlarge 參考\n篇文章 並將 事先 訓練 權重 檔 複製到 指定 目錄 即可 參考\n相關 指令 參考 操作\n確認\nyolov4 sagemaker\n目錄 結構 下圖 所示\n圖\n2 yolov4 sagemaker\n目錄 結構\n修改 推論 程式\npredictor py\n容器 內 用來 圖片 辨識 程式 預設 參數 修改 成 自定義 參數 修改\n94\n\n96\n行\nsource yolov4 endpoint predictor py\n圖\n3 修改 自行 定義 圖片 辨識 程式\n接下來 建立 容器 映像 檔 組態 改成\ngpu\n基礎 建立 映像 檔 會 編輯 成\ngpu\n版本 建立 過程 會 緩慢 大概 數個 小時 會 建立\ndocker\nimage 並將\nimage\n放到\necr\n中\naws\ncli\n認證 一部分 參考\n一篇 文章\n圖\n4 建立\nyolov4\n容器 檔案\n建立 成功\namazon\nelastic\ncontainer\nregistry\necr\n中 建立 容器 映像 檔 下圖 所示\n圖\n5 建立 容器 映像 檔\n步驟\n2\n建立\namazon\nsagemaker\n端點\n專案 中有\ncreate endpoint py\n檔案 用來 建立\namazon\nsagemaker\n端點 代碼 代碼 利用\namazon\nsagemaker\n筆記 本來 運行 觀察 運行 修改\nget arguments\n方法 指定 端點 名稱 容器 映像 檔 指定 端點 運行 機型 代碼 下圖 所示\n圖\n6 建立\namazon\nsagemaker\n端點\nyolov4 gpu\n步驟\n3\naws\nlambda\n中\namazon\nsagemaker\n端點 呼叫\n建立 角色\nlambda\n函數 執行 執行\namazon\nsagemaker\n端點 許可 授權\niam\n管理 控制台 選擇 新增 角色 接下來 下圖 所示 選擇\nlambda\n案例 點擊\n許可\n按鈕\nattach\n許可 政策\n中 輸入\nsagemaker\n接著選\namazonsagemakerfullaccess\n政策 確保 角色 透過\naws\nlambda\n執行\namazon\nsagemaker\n端點\n圖\n7 建立 角色 選擇\nlambda\n案例\n\naws\nlambda\n管理 控制台 選擇 建立\nlambda\n函數 設定 內容 下圖 所示 輸入 函數 名稱 執行 時間 選擇\npython\n3.8 執行 角色 務必 選擇 畫面 中 角色\n圖\n8 建立\nlambda\n函數 設定 畫面\n輸入 程式碼 所示 bucket\n\nimage uri\n兩個 變數 改成 環境 中 值\n測試 下圖 所示\n圖片 辨識\n0.8\n秒\n圖\n9 建立\nlambda\n函數 設定 畫面\n想要 事實上 amazon\nsagemaker\n端點 建立 實體 之上 實體 計費\nec2\n規格 還要 貴\ng4dn xlarge\n實體 類型 小時 端點\nec2\n計價\n1.0304\n\nendpoint\nml g4dn xlarge\n0.736\nper\n\ndemand\nlinux\ng4dn xlarge\n務必 記得 關閉\namazon\nsagemaker\n端點 下圖 所示 關閉\namazon\nsagemaker\n筆記本 這也 實體 運行\n圖\n10 關閉\namazon\nsagemaker\n端點\n三個 方案 表 成本 推論 時間 實驗 中 得知 系統 在乎 可用性\nec2\n內 服務 開發者 自行 建置 會有 維運上 系統 負荷 導致 服務\n表\n1\n\nec2 lambda sagemaker\n\nyolo\n辨識\n\nec2\n\nlambda\n\nsagemaker\n成本 usd\n0.736\n0\n1.0304\n時間 秒\n\n0.1\n秒\n\n60\n秒\n1 秒\n\n可用性\n較差\naws\n托管\naws\n托管\n參考資料\nyolov4 sagemaker\nhow\n\nrun\na\npython\nfile\ninside\na\naws\nsagemaker\nusing\ndockerfile\nday\n16\n\n影像 辨識 訓練\nreal time\nobject\ndetection\napi\nusing\namazon\nsagemaker\n\namazon\napi\ngateway\ncall\n\namazon\nsagemaker\nmodel\nendpoint\nusing\namazon\napi\ngateway\n\naws\nlambda",
        "extracted_keywords": [
            "amazonsagemakerfullaccess",
            "amazon",
            "sagemaker",
            "dockerfile",
            "目錄"
        ],
        "extracted_keywords_phrases": [
            "amazon sagemaker",
            "sagemaker amazon",
            "lambda amazon",
            "執行 amazon",
            "建立 amazon"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282504": {
        "href": "https://ithelp.ithome.com.tw/articles/10282504",
        "title": "Day 35 - Amazon SageMaker 簡介",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>Day 35 - Amazon SageMaker 簡介</h1>\n<p>在 <a href=\"https://ithelp.ithome.com.tw/articles/10282495\" target=\"_blank\" rel=\"noreferrer noopener\">Day 34 - 實作 S3 驅動 Lambda 函數進行 Yolo 物件辨識</a>中，我們使用 AWS Lambda 來進行物件辨識，結果辨識時間長達一分鐘左右，與 <a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">Day 16 - 進行影像辨識訓練</a> 中使用 g4dn 類型的 EC2 來進行辨識，時間不到 0.1 秒比較，差距太大，且不適合作為線上辨識觀賞魚的應用，於是我們試著在 AWS 的服務中來找尋其他節省成本又可以達到要求的服務。</p>\n<p>對於人工智慧 (AI) 在雲端的的使用，AWS 已經提供了很多這方面的服務，簡列如下表：</p>\n<ul>\n<li>電腦視覺 – <a href=\"https://aws.amazon.com/tw/rekognition/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Rekognition</a> 為圖像和影片提供物體和臉部識別；<a href=\"https://aws.amazon.com/tw/textract/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Textract</a> 可以從圖像中提取文字。</li>\n<li>語音 - <a href=\"https://aws.amazon.com/tw/polly/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Polly</a> 可以將文字轉換成語音；<a href=\"https://aws.amazon.com/tw/transcribe\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Transcribe</a> 則是可以將錄音檔轉換成文字。</li>\n<li>語言 - <a href=\"https://aws.amazon.com/tw/comprehend/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Comprehend</a> 利用 NLP 技術找到文字中的意義以及相關性；<a href=\"https://aws.amazon.com/tw/translate/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Translate</a> 則是可以翻譯多種不同語言。</li>\n<li>對話機器人 - <a href=\"https://aws.amazon.com/tw/lex/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Lex</a> 是一項幫助構建使用語音或文字的交互式對話應用程序服務。</li>\n<li>預測 - <a href=\"https://aws.amazon.com/tw/forecast/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Forecast</a> 使用機器學習將時間序列數據與附加變量相結合來構建預測。</li>\n<li>推薦 - <a href=\"https://aws.amazon.com/tw/personalize/\" target=\"_blank\" rel=\"noreferrer noopener\">Amazon Personalize</a> 是利用機器學習來幫助客戶創建個性化的推薦服務。</li>\n</ul>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/2012951010mdDFiRHC.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/2012951010mdDFiRHC.png\"><br>\n圖 1、AWS 所提供的人工智慧服務</p>\n<p>而以上這些服務都是針對需求明確，沒有資料分析人員的使用者而言，如果使用者打算建立自己的機器學習模型，並將其部署在雲端的話，AWS 推出了 Amazon SageMaker 這項服務來滿足使用者的需求。根據 AWS 官方網站，對於 Amazon SageMaker 的服務是這樣定義的：Amazon SageMaker 透過整合專門為 ML 建置的一組廣泛的功能，協助資料科學家和開發人員快速準備、建置、培訓和部署高品質的機器學習 (ML) 模型。下圖是 Amazon SageMaker 的登錄畫面首頁，可以看出 Amazon SageMaker 的服務包含了資料準備、建置、訓練與調整以及最後的部署與管理</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510gvZ7dQLjJ0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510gvZ7dQLjJ0.png\"><br>\n圖 2、Amazon SageMaker 服務概覽</p>\n<p>因為我們已經在訓練好的資料，所以現在需要的就只是進行佈署，而最好的入口就是透過 Amazon SageMaker Studio，這是 AWS 於 2020 年 re:invent 推出適用於機器學習的整合式開發環境(IDE)，讓使用者可以輕鬆建立、訓練、偵錯、部署並監控機器學習模型 ，並專注於開發機器學習模型，而非環境的設置與開發工具的轉換。</p>\n<p>包含了以下功能：</p>\n<ul>\n<li>在 Jupyter 筆記本中編寫和執行程式碼</li>\n<li>建立和訓練機器學習模型</li>\n<li>部署模型並監控模型預測的性能</li>\n<li>調校並改進機器學習模型成效</li>\n</ul>\n<p>而 Amazon SageMaker Studio Notebooks 操作起來就是平時我們常用的 Jupyter Notebook 或是 Jupyter lab，但請注意的是它需要運行在一個實體之上，所以一但啟用 Amazon SageMaker Studio Notebooks 就要收費的，觀念就跟 EC2 是一樣的，開著不用還是要收錢的，下圖是我在 2021/10 所使用的 Amazon SageMaker Studio Notebooks 的收費情形。主機是位於新加坡地區 (ap-southeast-1)，使用的機型是 ml.t2.medium，開了 138.77 小時，每小時收費 0.0584 美元，很多時候都是忘了關機，其實真正使用時間遠少於 138 個小時，不過從帳單來看，它應該是以分鐘來算的，所以才會有小數點；而因為把權重檔案也放在 Studio Notebooks 中，所以才會出現第一筆使用硬碟空間的錢，每個月 1G 的使用費是 0.168 美元。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510apU5mbAgbY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510apU5mbAgbY.png\"><br>\n圖 3、Amazon SageMaker Studio Notebooks 收費</p>\n<p>接下來操作一次如何使用 Amazon SageMaker Studio Notebooks ，主要是參考 <a href=\"https://aws.amazon.com/tw/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/\" target=\"_blank\" rel=\"noreferrer noopener\">AWS 官方教學 建立、訓練和部署機器學習模型 - 使用 Amazon SageMaker</a>，內容為：</p>\n<ol>\n<li>建立筆記本執行個體</li>\n<li>操作筆記本</li>\n</ol>\n<p>接下來這句話很重要：<strong>在本教學建立和使用的資源符合 AWS 免費方案資格，請記得終止您的資源。不然 AWS 將向您帳戶收取費用</strong>。</p>\n<p><strong>步驟 1.建立筆記本執行個體</strong></p>\n<p>進入 Amazon SageMaker 主控台，並在左邊功能列中點擊 <strong>筆記本</strong>-&gt;<strong>筆記本執行個體</strong>，右邊主畫面中點擊 <strong>建立筆記本執行個體</strong>，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510cW5wrgY28u.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510cW5wrgY28u.png\"><br>\n圖 4、啟動 Amazon SageMaker 筆記本</p>\n<p>在建立筆記本執行個體頁面上，在 <strong>筆記本執行個體名稱</strong> 欄位中輸入名稱。本教學使用 <em>ithomeSM</em> 做為執行個體名稱，不過如有需要，您可以選擇其他名稱。<strong>筆記本執行個體類型</strong> 保留 <em>ml.t2.medium</em> 的預設。</p>\n<p>在 <strong>IAM 角色</strong>欄位中，選擇建立 <em>新角色</em>，在 <strong>建立 IAM 角色</strong> 視窗中，使用預設值，不需改變，直接點擊 <strong>建立角色</strong> 按鈕，讓 Amazon SageMaker 建立的角色具有必要的許可並將其分配給您的執行個體，或者，也可以為此在帳戶中選擇一個現有的 IAM 角色，最後點擊 <strong>建立筆記本執行個體</strong> 按鈕。如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510AaxF8Dwjtt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510AaxF8Dwjtt.png\"><br>\n圖 5、建立筆記本執行個體</p>\n<p>新建的筆記本執行個體需要等待數分鐘才會從待處理 (pending) 轉換到服務中 (InService) 狀態。當狀態變為服務中後，選取 <em>ithomeSM</em> 並使用 <strong>動作</strong> 下拉式功能表將其開啟，或選擇服務中狀態旁的 <strong>開啟 Jupyter</strong>。如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510bYlXpZV0lm.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510bYlXpZV0lm.png\"><br>\n圖 6、透過 Jupyter 進入筆記本執行個體</p>\n<p>開啟 Jupyter 後，在畫面右手邊單擊 <strong>New</strong> 按鈕，出現下拉選單，選擇 <strong>conda_python3</strong>。如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510ktJc8T3Sk9.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510ktJc8T3Sk9.png\"><br>\n圖 7、透過 Jupyter 進入筆記本執行個體</p>\n<p><strong>步驟 2.操作筆記本</strong></p>\n<p>這裡使用簡單的一個 KNN 近臨的案例，只是要體驗一下 Amazon SageMaker 筆記本的操作，而相關於觀賞魚辨識模型的操作，將於下一篇文章中示範。</p>\n<p>這是一個使用KNN算法實現對一組電影的分類，電影數據包含 10 條數據集的測試集和 2 條數據的訓練集，這批電影共有兩個畫面：動作鏡頭數和接吻鏡頭數，這兩個特徵，每部電影都對應一個分類標籤值，共有“動作”，“愛情”兩個類別。程式碼與運行結果如下。</p>\n<pre><code># 引入函式庫\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# 準備資料\nX_train=np.array([[19,1],[2,18],[25,1],[24,3],[3,17],[5,10],[7,8],[5,4],[5,3]])\nY_train=np.array(['動作','愛情','動作','動作','愛情','愛情','愛情','動作','動作'])\nX_test=np.array([[13,10],[5,10]])\n\n# 進行模型訓練\nknnclf=KNeighborsClassifier(n_neighbors=5)\nknnclf.fit(X_train,Y_train)\n\n# 測試、推估\nknnclf.predict(X_test)\n</code></pre>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510jyUCJAFU4d.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510jyUCJAFU4d.png\"><br>\n圖 8、在筆記本執行個體中使用 Jupyter</p>\n<p>AWS 提供很多 Amazon SageMaker 筆記本的範例，可以在頁簽中 <strong>Amazon SageMaker Examples</strong> 中找到，開發者其實可以試著找到相關案例來參考。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510C7C1ZJ8EN5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211108/20129510C7C1ZJ8EN5.png\"><br>\n圖 9、Amazon SageMaker 筆記本範例的集合</p>\n<h2>參考資料</h2>\n<ul>\n<li>Amazon SageMaker， <a href=\"https://aws.amazon.com/tw/sagemaker/\" target=\"_blank\" rel=\"noreferrer noopener\">https://aws.amazon.com/tw/sagemaker/</a>\n</li>\n<li>CreateEndpointConfig， <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html</a>\n</li>\n<li>AWS Pricing Calculator, <a href=\"https://calculator.aws/\" target=\"_blank\" rel=\"noreferrer noopener\">https://calculator.aws/</a>\n</li>\n<li>建立、訓練和部署機器學習模型 - 使用 Amazon SageMaker，<a href=\"https://aws.amazon.com/tw/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/\" target=\"_blank\" rel=\"noreferrer noopener\">https://aws.amazon.com/tw/getting-started/hands-on/build-train-deploy-machine-learning-model-sagemaker/</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,sagemaker",
        "genre": "AI & Data",
        "published_at": "2021-11-08 07:41:08",
        "author_href": "https://ithelp.ithome.com.tw/users/20129510/ironman",
        "author_name": "yehchitsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20129510/ironman/4385",
        "series_name": "觀賞魚辨識的YOLO全餐",
        "series_num": "35",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>Day 35 - Amazon SageMaker 簡介</h1>\n<p>在 中，我們使用 AWS Lambda 來進行物件辨識，結果辨識時間長達一分鐘左右，與  中使用 g4dn 類型的 EC2 來進行辨識，時間不到 0.1 秒比較，差距太大，且不適合作為線上辨識觀賞魚的應用，於是我們試著在 AWS 的服務中來找尋其他節省成本又可以達到要求的服務。</p>\n<p>對於人工智慧 (AI) 在雲端的的使用，AWS 已經提供了很多這方面的服務，簡列如下表：</p>\n<ul>\n<li>電腦視覺 –  為圖像和影片提供物體和臉部識別； 可以從圖像中提取文字。</li>\n<li>語音 -  可以將文字轉換成語音； 則是可以將錄音檔轉換成文字。</li>\n<li>語言 -  利用 NLP 技術找到文字中的意義以及相關性； 則是可以翻譯多種不同語言。</li>\n<li>對話機器人 -  是一項幫助構建使用語音或文字的交互式對話應用程序服務。</li>\n<li>預測 -  使用機器學習將時間序列數據與附加變量相結合來構建預測。</li>\n<li>推薦 -  是利用機器學習來幫助客戶創建個性化的推薦服務。</li>\n</ul>\n<p><br/>\n圖 1、AWS 所提供的人工智慧服務</p>\n<p>而以上這些服務都是針對需求明確，沒有資料分析人員的使用者而言，如果使用者打算建立自己的機器學習模型，並將其部署在雲端的話，AWS 推出了 Amazon SageMaker 這項服務來滿足使用者的需求。根據 AWS 官方網站，對於 Amazon SageMaker 的服務是這樣定義的：Amazon SageMaker 透過整合專門為 ML 建置的一組廣泛的功能，協助資料科學家和開發人員快速準備、建置、培訓和部署高品質的機器學習 (ML) 模型。下圖是 Amazon SageMaker 的登錄畫面首頁，可以看出 Amazon SageMaker 的服務包含了資料準備、建置、訓練與調整以及最後的部署與管理</p>\n<p><br/>\n圖 2、Amazon SageMaker 服務概覽</p>\n<p>因為我們已經在訓練好的資料，所以現在需要的就只是進行佈署，而最好的入口就是透過 Amazon SageMaker Studio，這是 AWS 於 2020 年 re:invent 推出適用於機器學習的整合式開發環境(IDE)，讓使用者可以輕鬆建立、訓練、偵錯、部署並監控機器學習模型 ，並專注於開發機器學習模型，而非環境的設置與開發工具的轉換。</p>\n<p>包含了以下功能：</p>\n<ul>\n<li>在 Jupyter 筆記本中編寫和執行程式碼</li>\n<li>建立和訓練機器學習模型</li>\n<li>部署模型並監控模型預測的性能</li>\n<li>調校並改進機器學習模型成效</li>\n</ul>\n<p>而 Amazon SageMaker Studio Notebooks 操作起來就是平時我們常用的 Jupyter Notebook 或是 Jupyter lab，但請注意的是它需要運行在一個實體之上，所以一但啟用 Amazon SageMaker Studio Notebooks 就要收費的，觀念就跟 EC2 是一樣的，開著不用還是要收錢的，下圖是我在 2021/10 所使用的 Amazon SageMaker Studio Notebooks 的收費情形。主機是位於新加坡地區 (ap-southeast-1)，使用的機型是 ml.t2.medium，開了 138.77 小時，每小時收費 0.0584 美元，很多時候都是忘了關機，其實真正使用時間遠少於 138 個小時，不過從帳單來看，它應該是以分鐘來算的，所以才會有小數點；而因為把權重檔案也放在 Studio Notebooks 中，所以才會出現第一筆使用硬碟空間的錢，每個月 1G 的使用費是 0.168 美元。</p>\n<p><br/>\n圖 3、Amazon SageMaker Studio Notebooks 收費</p>\n<p>接下來操作一次如何使用 Amazon SageMaker Studio Notebooks ，主要是參考 ，內容為：</p>\n<ol>\n<li>建立筆記本執行個體</li>\n<li>操作筆記本</li>\n</ol>\n<p>接下來這句話很重要：<strong>在本教學建立和使用的資源符合 AWS 免費方案資格，請記得終止您的資源。不然 AWS 將向您帳戶收取費用</strong>。</p>\n<p><strong>步驟 1.建立筆記本執行個體</strong></p>\n<p>進入 Amazon SageMaker 主控台，並在左邊功能列中點擊 <strong>筆記本</strong>-&gt;<strong>筆記本執行個體</strong>，右邊主畫面中點擊 <strong>建立筆記本執行個體</strong>，如下圖所示。</p>\n<p><br/>\n圖 4、啟動 Amazon SageMaker 筆記本</p>\n<p>在建立筆記本執行個體頁面上，在 <strong>筆記本執行個體名稱</strong> 欄位中輸入名稱。本教學使用 <em>ithomeSM</em> 做為執行個體名稱，不過如有需要，您可以選擇其他名稱。<strong>筆記本執行個體類型</strong> 保留 <em>ml.t2.medium</em> 的預設。</p>\n<p>在 <strong>IAM 角色</strong>欄位中，選擇建立 <em>新角色</em>，在 <strong>建立 IAM 角色</strong> 視窗中，使用預設值，不需改變，直接點擊 <strong>建立角色</strong> 按鈕，讓 Amazon SageMaker 建立的角色具有必要的許可並將其分配給您的執行個體，或者，也可以為此在帳戶中選擇一個現有的 IAM 角色，最後點擊 <strong>建立筆記本執行個體</strong> 按鈕。如下圖所示。</p>\n<p><br/>\n圖 5、建立筆記本執行個體</p>\n<p>新建的筆記本執行個體需要等待數分鐘才會從待處理 (pending) 轉換到服務中 (InService) 狀態。當狀態變為服務中後，選取 <em>ithomeSM</em> 並使用 <strong>動作</strong> 下拉式功能表將其開啟，或選擇服務中狀態旁的 <strong>開啟 Jupyter</strong>。如下圖所示。</p>\n<p><br/>\n圖 6、透過 Jupyter 進入筆記本執行個體</p>\n<p>開啟 Jupyter 後，在畫面右手邊單擊 <strong>New</strong> 按鈕，出現下拉選單，選擇 <strong>conda_python3</strong>。如下圖所示。</p>\n<p><br/>\n圖 7、透過 Jupyter 進入筆記本執行個體</p>\n<p><strong>步驟 2.操作筆記本</strong></p>\n<p>這裡使用簡單的一個 KNN 近臨的案例，只是要體驗一下 Amazon SageMaker 筆記本的操作，而相關於觀賞魚辨識模型的操作，將於下一篇文章中示範。</p>\n<p>這是一個使用KNN算法實現對一組電影的分類，電影數據包含 10 條數據集的測試集和 2 條數據的訓練集，這批電影共有兩個畫面：動作鏡頭數和接吻鏡頭數，這兩個特徵，每部電影都對應一個分類標籤值，共有“動作”，“愛情”兩個類別。程式碼與運行結果如下。</p>\n<pre></pre>\n<p><br/>\n圖 8、在筆記本執行個體中使用 Jupyter</p>\n<p>AWS 提供很多 Amazon SageMaker 筆記本的範例，可以在頁簽中 <strong>Amazon SageMaker Examples</strong> 中找到，開發者其實可以試著找到相關案例來參考。</p>\n<p><br/>\n圖 9、Amazon SageMaker 筆記本範例的集合</p>\n<h2>參考資料</h2>\n<ul>\n<li>Amazon SageMaker， \n</li>\n<li>CreateEndpointConfig， \n</li>\n<li>AWS Pricing Calculator, \n</li>\n<li>建立、訓練和部署機器學習模型 - 使用 Amazon SageMaker，\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Day 35 - Amazon SageMaker 簡介\n在 中，我們使用 AWS Lambda 來進行物件辨識，結果辨識時間長達一分鐘左右，與  中使用 g4dn 類型的 EC2 來進行辨識，時間不到 0.1 秒比較，差距太大，且不適合作為線上辨識觀賞魚的應用，於是我們試著在 AWS 的服務中來找尋其他節省成本又可以達到要求的服務。\n對於人工智慧 (AI) 在雲端的的使用，AWS 已經提供了很多這方面的服務，簡列如下表：\n\n電腦視覺 –  為圖像和影片提供物體和臉部識別； 可以從圖像中提取文字。\n語音 -  可以將文字轉換成語音； 則是可以將錄音檔轉換成文字。\n語言 -  利用 NLP 技術找到文字中的意義以及相關性； 則是可以翻譯多種不同語言。\n對話機器人 -  是一項幫助構建使用語音或文字的交互式對話應用程序服務。\n預測 -  使用機器學習將時間序列數據與附加變量相結合來構建預測。\n推薦 -  是利用機器學習來幫助客戶創建個性化的推薦服務。\n\n\n圖 1、AWS 所提供的人工智慧服務\n而以上這些服務都是針對需求明確，沒有資料分析人員的使用者而言，如果使用者打算建立自己的機器學習模型，並將其部署在雲端的話，AWS 推出了 Amazon SageMaker 這項服務來滿足使用者的需求。根據 AWS 官方網站，對於 Amazon SageMaker 的服務是這樣定義的：Amazon SageMaker 透過整合專門為 ML 建置的一組廣泛的功能，協助資料科學家和開發人員快速準備、建置、培訓和部署高品質的機器學習 (ML) 模型。下圖是 Amazon SageMaker 的登錄畫面首頁，可以看出 Amazon SageMaker 的服務包含了資料準備、建置、訓練與調整以及最後的部署與管理\n\n圖 2、Amazon SageMaker 服務概覽\n因為我們已經在訓練好的資料，所以現在需要的就只是進行佈署，而最好的入口就是透過 Amazon SageMaker Studio，這是 AWS 於 2020 年 re:invent 推出適用於機器學習的整合式開發環境(IDE)，讓使用者可以輕鬆建立、訓練、偵錯、部署並監控機器學習模型 ，並專注於開發機器學習模型，而非環境的設置與開發工具的轉換。\n包含了以下功能：\n\n在 Jupyter 筆記本中編寫和執行程式碼\n建立和訓練機器學習模型\n部署模型並監控模型預測的性能\n調校並改進機器學習模型成效\n\n而 Amazon SageMaker Studio Notebooks 操作起來就是平時我們常用的 Jupyter Notebook 或是 Jupyter lab，但請注意的是它需要運行在一個實體之上，所以一但啟用 Amazon SageMaker Studio Notebooks 就要收費的，觀念就跟 EC2 是一樣的，開著不用還是要收錢的，下圖是我在 2021/10 所使用的 Amazon SageMaker Studio Notebooks 的收費情形。主機是位於新加坡地區 (ap-southeast-1)，使用的機型是 ml.t2.medium，開了 138.77 小時，每小時收費 0.0584 美元，很多時候都是忘了關機，其實真正使用時間遠少於 138 個小時，不過從帳單來看，它應該是以分鐘來算的，所以才會有小數點；而因為把權重檔案也放在 Studio Notebooks 中，所以才會出現第一筆使用硬碟空間的錢，每個月 1G 的使用費是 0.168 美元。\n\n圖 3、Amazon SageMaker Studio Notebooks 收費\n接下來操作一次如何使用 Amazon SageMaker Studio Notebooks ，主要是參考 ，內容為：\n\n建立筆記本執行個體\n操作筆記本\n\n接下來這句話很重要：在本教學建立和使用的資源符合 AWS 免費方案資格，請記得終止您的資源。不然 AWS 將向您帳戶收取費用。\n步驟 1.建立筆記本執行個體\n進入 Amazon SageMaker 主控台，並在左邊功能列中點擊 筆記本->筆記本執行個體，右邊主畫面中點擊 建立筆記本執行個體，如下圖所示。\n\n圖 4、啟動 Amazon SageMaker 筆記本\n在建立筆記本執行個體頁面上，在 筆記本執行個體名稱 欄位中輸入名稱。本教學使用 ithomeSM 做為執行個體名稱，不過如有需要，您可以選擇其他名稱。筆記本執行個體類型 保留 ml.t2.medium 的預設。\n在 IAM 角色欄位中，選擇建立 新角色，在 建立 IAM 角色 視窗中，使用預設值，不需改變，直接點擊 建立角色 按鈕，讓 Amazon SageMaker 建立的角色具有必要的許可並將其分配給您的執行個體，或者，也可以為此在帳戶中選擇一個現有的 IAM 角色，最後點擊 建立筆記本執行個體 按鈕。如下圖所示。\n\n圖 5、建立筆記本執行個體\n新建的筆記本執行個體需要等待數分鐘才會從待處理 (pending) 轉換到服務中 (InService) 狀態。當狀態變為服務中後，選取 ithomeSM 並使用 動作 下拉式功能表將其開啟，或選擇服務中狀態旁的 開啟 Jupyter。如下圖所示。\n\n圖 6、透過 Jupyter 進入筆記本執行個體\n開啟 Jupyter 後，在畫面右手邊單擊 New 按鈕，出現下拉選單，選擇 conda_python3。如下圖所示。\n\n圖 7、透過 Jupyter 進入筆記本執行個體\n步驟 2.操作筆記本\n這裡使用簡單的一個 KNN 近臨的案例，只是要體驗一下 Amazon SageMaker 筆記本的操作，而相關於觀賞魚辨識模型的操作，將於下一篇文章中示範。\n這是一個使用KNN算法實現對一組電影的分類，電影數據包含 10 條數據集的測試集和 2 條數據的訓練集，這批電影共有兩個畫面：動作鏡頭數和接吻鏡頭數，這兩個特徵，每部電影都對應一個分類標籤值，共有“動作”，“愛情”兩個類別。程式碼與運行結果如下。\n\n\n圖 8、在筆記本執行個體中使用 Jupyter\nAWS 提供很多 Amazon SageMaker 筆記本的範例，可以在頁簽中 Amazon SageMaker Examples 中找到，開發者其實可以試著找到相關案例來參考。\n\n圖 9、Amazon SageMaker 筆記本範例的集合\n參考資料\n\nAmazon SageMaker， \n\nCreateEndpointConfig， \n\nAWS Pricing Calculator, \n\n建立、訓練和部署機器學習模型 - 使用 Amazon SageMaker，",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "# 引入函式庫\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# 準備資料\nX_train=np.array([[19,1],[2,18],[25,1],[24,3],[3,17],[5,10],[7,8],[5,4],[5,3]])\nY_train=np.array(['動作','愛情','動作','動作','愛情','愛情','愛情','動作','動作'])\nX_test=np.array([[13,10],[5,10]])\n\n# 進行模型訓練\nknnclf=KNeighborsClassifier(n_neighbors=5)\nknnclf.fit(X_train,Y_train)\n\n# 測試、推估\nknnclf.predict(X_test)\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "Day\n35\n-\nAmazon\nSageMaker\n簡介\n在\n中 ， 我們 使用\nAWS\nLambda\n來 進行 物件 辨識 ， 結果 辨識 時間 長達 一分鐘 左右 ， 與\n中 使用\ng4dn\n類型 的\nEC2\n來 進行 辨識 ， 時間 不到\n0.1\n秒 比較 ， 差距 太 大 ， 且 不適 合作 為線 上 辨識 觀賞魚 的 應用 ， 於是 我們 試著 在\nAWS\n的 服務 中來 找尋 其他 節省成本 又 可以 達到 要求 的 服務 。\n對於 人工智慧\n( AI )\n在 雲端 的 的 使用 ， AWS\n已經 提供 了 很多 這方面 的 服務 ， 簡列 如下 表 ：\n電腦 視覺\n–\n為 圖像 和 影片 提供 物體 和 臉部 識別 ；\n可以 從 圖像 中 提取 文字 。\n語音\n-\n可以 將 文字 轉換成 語音 ；\n則是 可以 將 錄音 檔 轉換成 文字 。\n語言\n-\n利用\nNLP\n技術 找到 文字 中 的 意義 以及 相關性 ；\n則是 可以 翻譯 多種不同 語言 。\n對話 機器人\n-\n是 一項 幫助 構建 使用 語音 或 文字 的 交互式 對話 應用程序 服務 。\n預測\n-\n使用 機器 學習 將 時間 序列 數據 與 附加 變量 相結合 來 構建 預測 。\n推薦\n-\n是 利用 機器 學習 來 幫助 客戶 創建 個性化 的 推薦 服務 。\n圖\n1 、 AWS\n所 提供 的 人工智慧 服務\n而 以上 這些 服務 都 是 針對 需求 明確 ， 沒有 資料 分析 人員 的 使用者 而言 ， 如果 使用者 打算 建立 自己 的 機器 學習 模型 ， 並將 其 部署 在 雲端 的話 ， AWS\n推出 了\nAmazon\nSageMaker\n這項 服務 來 滿足 使用者 的 需求 。 根據\nAWS\n官方網站 ， 對於\nAmazon\nSageMaker\n的 服務 是 這樣 定義 的 ： Amazon\nSageMaker\n透過 整合 專門 為\nML\n建置 的 一組 廣泛 的 功能 ， 協助 資料 科學家 和 開發人員 快速 準備 、 建置 、 培訓 和 部署 高品質 的 機器 學習\n( ML )\n模型 。 下圖 是\nAmazon\nSageMaker\n的 登錄 畫面 首頁 ， 可以 看出\nAmazon\nSageMaker\n的 服務 包含 了 資料 準備 、 建置 、 訓練 與 調整 以及 最後 的 部署 與 管理\n圖\n2 、 Amazon\nSageMaker\n服務 概覽\n因為 我們 已經 在 訓練 好 的 資料 ， 所以 現在 需要 的 就 只是 進行 佈署 ， 而 最好 的 入口 就是 透過\nAmazon\nSageMaker\nStudio ， 這是\nAWS\n於\n2020\n年\nre : invent\n推出 適用於 機器 學習 的 整合式 開發 環境 ( IDE ) ， 讓 使用者 可以 輕鬆 建立 、 訓練 、 偵錯 、 部署 並 監控 機器 學習 模型\n， 並 專注 於 開發 機器 學習 模型 ， 而 非 環境 的 設置 與 開發工具 的 轉換 。\n包含 了 以下 功能 ：\n在\nJupyter\n筆記本 中 編寫 和 執行 程式碼\n建立 和 訓練 機器 學習 模型\n部署 模型 並 監控 模型 預測 的 性能\n調校 並 改進 機器 學習 模型 成效\n而\nAmazon\nSageMaker\nStudio\nNotebooks\n操作 起來 就是 平時 我們 常用 的\nJupyter\nNotebook\n或是\nJupyter\nlab ， 但 請 注意 的 是 它 需要 運行 在 一個 實體 之上 ， 所以 一 但 啟用\nAmazon\nSageMaker\nStudio\nNotebooks\n就要 收費 的 ， 觀念 就 跟\nEC2\n是 一樣 的 ， 開著 不用 還是 要 收錢 的 ， 下圖 是 我 在\n2021 / 10\n所 使用 的\nAmazon\nSageMaker\nStudio\nNotebooks\n的 收費 情形 。 主機 是 位於 新加坡 地區\n( ap - southeast - 1 ) ， 使用 的 機型 是\nml . t2 . medium ， 開 了\n138.77\n小時 ， 每 小時 收費\n0.0584\n美元 ， 很多 時候 都 是 忘 了 關機 ， 其實 真正 使用 時間 遠 少於\n138\n個 小時 ， 不過 從 帳單 來看 ， 它 應該 是 以 分鐘 來算 的 ， 所以 才 會 有 小數點 ； 而 因為 把 權重 檔案 也 放在\nStudio\nNotebooks\n中 ， 所以 才 會 出現 第一筆 使用 硬碟 空間 的 錢 ， 每個 月\n1G\n的 使用費 是\n0.168\n美元 。\n圖\n3 、 Amazon\nSageMaker\nStudio\nNotebooks\n收費\n接下來 操作 一次 如何 使用\nAmazon\nSageMaker\nStudio\nNotebooks\n， 主要 是 參考\n， 內容 為 ：\n建立 筆記本 執行 個體\n操作 筆記本\n接下來 這句 話 很 重要 ： 在 本 教學 建立 和 使用 的 資源 符合\nAWS\n免費 方案 資格 ， 請 記得 終止 您 的 資源 。 不然\nAWS\n將向 您 帳戶 收取 費用 。\n步驟\n1 . 建立 筆記本 執行 個體\n進入\nAmazon\nSageMaker\n主控台 ， 並在 左邊 功能 列中 點擊\n筆記本 - > 筆記本 執行 個體 ， 右邊 主 畫面 中 點擊\n建立 筆記本 執行 個體 ， 如 下圖 所示 。\n圖\n4 、 啟動\nAmazon\nSageMaker\n筆記本\n在 建立 筆記本 執行 個體 頁面 上 ， 在\n筆記本 執行 個體 名稱\n欄位 中 輸入 名稱 。 本 教學 使用\nithomeSM\n做 為 執行 個體 名稱 ， 不過 如 有 需要 ， 您 可以 選擇 其他 名稱 。 筆記本 執行 個體 類型\n保留\nml . t2 . medium\n的 預設 。\n在\nIAM\n角色 欄位 中 ， 選擇 建立\n新 角色 ， 在\n建立\nIAM\n角色\n視窗 中 ， 使用 預設值 ， 不需 改變 ， 直接 點擊\n建立 角色\n按鈕 ， 讓\nAmazon\nSageMaker\n建立 的 角色 具有 必要 的 許可 並將 其 分配 給 您 的 執行 個體 ， 或者 ， 也 可以 為 此 在 帳戶 中 選擇 一個 現有 的\nIAM\n角色 ， 最後 點擊\n建立 筆記本 執行 個體\n按鈕 。 如 下圖 所示 。\n圖\n5 、 建立 筆記本 執行 個體\n新建 的 筆記本 執行 個體 需要 等待 數分鐘 才 會 從 待處理\n( pending )\n轉換 到 服務 中\n( InService )\n狀態 。 當 狀態 變為 服務 中 後 ， 選取\nithomeSM\n並 使用\n動作\n下拉 式 功能表 將其 開啟 ， 或 選擇 服務 中 狀態 旁 的\n開啟\nJupyter 。 如 下圖 所示 。\n圖\n6 、 透過\nJupyter\n進入 筆記本 執行 個體\n開啟\nJupyter\n後 ， 在 畫面 右手邊 單擊\nNew\n按鈕 ， 出現 下拉 選單 ， 選擇\nconda _ python3 。 如 下圖 所示 。\n圖\n7 、 透過\nJupyter\n進入 筆記本 執行 個體\n步驟\n2 . 操作 筆記本\n這裡 使用 簡單 的 一個\nKNN\n近臨 的 案例 ， 只是 要 體驗 一下\nAmazon\nSageMaker\n筆記本 的 操作 ， 而 相 關於 觀賞魚 辨識 模型 的 操作 ， 將於下 一篇 文章 中 示範 。\n這是 一個 使用 KNN 算法 實現 對 一組 電影 的 分類 ， 電影 數據 包含\n10\n條數 據集 的 測試 集 和\n2\n條數 據 的 訓練 集 ， 這批 電影 共有 兩個 畫面 ： 動作 鏡 頭數 和 接吻 鏡 頭數 ， 這 兩個 特徵 ， 每部 電影 都 對應 一個 分類 標籤 值 ， 共有 “ 動作 ” ， “ 愛情 ” 兩個 類別 。 程式碼 與 運行 結果 如下 。\n圖\n8 、 在 筆記本 執行 個體 中 使用\nJupyter\nAWS\n提供 很多\nAmazon\nSageMaker\n筆記本 的 範例 ， 可以 在 頁 簽中\nAmazon\nSageMaker\nExamples\n中 找到 ， 開發者 其實 可以 試著 找到 相關 案例 來 參考 。\n圖\n9 、 Amazon\nSageMaker\n筆記本 範例 的 集合\n參考資料\nAmazon\nSageMaker ，\nCreateEndpointConfig ，\nAWS\nPricing\nCalculator ,\n建立 、 訓練 和 部署 機器 學習 模型\n-\n使用\nAmazon\nSageMaker ，",
        "word_seg_processed_content_text": "day\n35\n\namazon\nsagemaker\n簡介\n\n中\naws\nlambda\n物件 辨識 辨識 時間 長達 一分鐘\n中\ng4dn\n類型\nec2\n辨識 時間 不到\n0.1\n秒 差距 太 大 不適 合作 為線 辨識 觀賞魚 試著\naws\n服務 中來 找尋 節省成本 服務\n人工智慧\nai\n雲端 aws\n提供 很多 這方面 服務 簡列 表\n電腦 視覺\n–\n圖像 影片 提供 物體 臉部 識別\n圖像 中 提取 文字\n語音\n\n文字 轉換成 語音\n則是 錄音 檔 轉換成 文字\n語言\n\n利用\nnlp\n技術 找到 文字 中 意義 相關性\n則是 翻譯 多種不同 語言\n對話 機器人\n\n一項 構建 語音 文字 交互式 對話 應用程序 服務\n預測\n\n機器 學習 時間 序列 數據 附加 變量 相結合 構建 預測\n推薦\n\n利用 機器 學習 客戶 創建 個性化 推薦 服務\n圖\n1 aws\n提供 人工智慧 服務\n服務 針對 需求 資料 分析 人員 使用者 使用者 打算 建立 機器 學習 模型 並將 部署 雲端 aws\n推出\namazon\nsagemaker\n這項 服務 使用者 需求\naws\n官方網站\namazon\nsagemaker\n服務 定義 amazon\nsagemaker\n透過 整合\nml\n建置 一組 功能 協助 資料 科學家 開發人員 快速 建置 培訓 部署 高品質 機器 學習\nml\n模型 下圖\namazon\nsagemaker\n登錄 畫面 首頁\namazon\nsagemaker\n服務 包含 資料 建置 訓練 調整 部署 管理\n圖\n2 amazon\nsagemaker\n服務 概覽\n訓練 資料 佈署 入口 透過\namazon\nsagemaker\nstudio 這是\naws\n\n2020\n年\nre invent\n推出 適用於 機器 學習 整合式 開發 環境 ide 使用者 輕鬆 建立 訓練 偵錯 部署 監控 機器 學習 模型\n專注 開發 機器 學習 模型 非 環境 設置 開發工具 轉換\n包含 功能\n\njupyter\n筆記本 中 編寫 執行 程式碼\n建立 訓練 機器 學習 模型\n部署 模型 監控 模型 預測 性能\n調校 改進 機器 學習 模型 成效\n\namazon\nsagemaker\nstudio\nnotebooks\n操作 平時 常用\njupyter\nnotebook\n\njupyter\nlab 請 運行 實體 之上 啟用\namazon\nsagemaker\nstudio\nnotebooks\n就要 收費 觀念\nec2\n開著 不用 收錢 下圖\n2021 10\n\namazon\nsagemaker\nstudio\nnotebooks\n收費 情形 主機 位於 新加坡 地區\nap southeast 1 機型\nml t2 medium 開\n138.77\n小時 小時 收費\n0.0584\n美元 很多 忘 關機 時間 遠 少於\n138\n小時 帳單 來看 分鐘 來算 才 會 小數點 權重 檔案 放在\nstudio\nnotebooks\n中 才 會 第一筆 硬碟 空間 錢 月\n1g\n使用費\n0.168\n美元\n圖\n3 amazon\nsagemaker\nstudio\nnotebooks\n收費\n接下來 操作\namazon\nsagemaker\nstudio\nnotebooks\n參考\n內容\n建立 筆記本 執行 個體\n操作 筆記本\n接下來 這句 話 教學 建立 資源 符合\naws\n免費 方案 資格 請 記得 終止 資源\naws\n將向 帳戶 收取 費用\n步驟\n1 建立 筆記本 執行 個體\n\namazon\nsagemaker\n主控台 並在 左邊 功能 列中 點擊\n筆記本 筆記本 執行 個體 右邊 主 畫面 中 點擊\n建立 筆記本 執行 個體 下圖 所示\n圖\n4 啟動\namazon\nsagemaker\n筆記本\n建立 筆記本 執行 個體 頁面\n筆記本 執行 個體 名稱\n欄位 中 輸入 名稱 教學\nithomesm\n做 執行 個體 名稱 選擇 名稱 筆記本 執行 個體 類型\n保留\nml t2 medium\n預設\n\niam\n角色 欄位 中 選擇 建立\n新 角色\n建立\niam\n角色\n視窗 中 預設值 不需 改變 點擊\n建立 角色\n按鈕\namazon\nsagemaker\n建立 角色 許可 並將 分配 執行 個體 帳戶 中 選擇 現有\niam\n角色 點擊\n建立 筆記本 執行 個體\n按鈕 下圖 所示\n圖\n5 建立 筆記本 執行 個體\n新建 筆記本 執行 個體 等待 數分鐘 才 會 待處理\npending\n轉換 服務 中\ninservice\n狀態 狀態 變為 服務 中 選取\nithomesm\n\n動作\n下拉 式 功能表 將其 開啟 選擇 服務 中 狀態 旁\n開啟\njupyter 下圖 所示\n圖\n6 透過\njupyter\n筆記本 執行 個體\n開啟\njupyter\n畫面 右手邊 單擊\nnew\n按鈕 下拉 選單 選擇\nconda python3 下圖 所示\n圖\n7 透過\njupyter\n筆記本 執行 個體\n步驟\n2 操作 筆記本\n簡單\nknn\n近臨 案例 體驗\namazon\nsagemaker\n筆記本 操作 相 觀賞魚 辨識 模型 操作 將於下 一篇 文章 中 示範\n這是 knn 算法 一組 電影 分類 電影 數據 包含\n10\n條數 據集 測試 集\n2\n條數 訓練 集 這批 電影 共有 兩個 畫面 動作 鏡 頭數 接吻 鏡 頭數 兩個 特徵 每部 電影 分類 標籤 值 共有 “ 動作 ” “ 愛情 ” 兩個 類別 程式碼 運行\n圖\n8 筆記本 執行 個體 中\njupyter\naws\n提供 很多\namazon\nsagemaker\n筆記本 範例 頁 簽中\namazon\nsagemaker\nexamples\n中 找到 開發者 試著 找到 相關 案例 參考\n圖\n9 amazon\nsagemaker\n筆記本 範例 集合\n參考資料\namazon\nsagemaker\ncreateendpointconfig\naws\npricing\ncalculator\n建立 訓練 部署 機器 學習 模型\n\n\namazon\nsagemaker",
        "extracted_keywords": [
            "人工智慧",
            "辨識",
            "amazon",
            "識別",
            "算法"
        ],
        "extracted_keywords_phrases": [
            "amazon sagemaker",
            "參考資料 amazon",
            "35 amazon",
            "體驗 amazon",
            "提供 人工智慧"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282502": {
        "href": "https://ithelp.ithome.com.tw/articles/10282502",
        "title": "今天來瞄一眼龍與雀的科技：知覺共享技術 Body-sharing",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>嘿<br>\n前天去看了龍與雀斑公主，音樂真的很好聽，劇情烘托的還不錯。但每當遇到這種網路分身的題材時，我總是會很有興趣每個作者是如何根據他們搜集的資訊來描述他們的裝置。</p>\n<p>　</p>\n<p>我近期看的兩個動漫：《86，不存在的戰區》、《龍與雀斑公主》，都有說到關於知覺共享。說起來，日本其實人很多，所以很多技術也可能他們都自己玩很多了，只是我礙於語言的障礙，沒有辦法觸及到相關的最新資訊。</p>\n<p>　</p>\n<p>86的作者我找不到太多訊息，但是龍與雀的話，看了採訪，細田守有去找這相關技術的研究人員：他訪問了有關制定5G網路的主要人員永田聰，以及Human-Computer Interaction研究人員玉城繪美(Emi Tamaki)。<br>\n<iframe width=\"560\" height=\"315\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" src=\"https://www.youtube.com/embed/4RkFIkwRjWg\"></iframe></p>\n<p>　<br>\n　<br>\n我一直覺得說，要做到更進階的VR，除了視覺聽覺之外，還要有觸覺模擬，也就是要把所有受器能感覺到的訊號，都能夠用電腦模擬號，經電刺激轉給人體，而玉城繪美他們公司所開發的產品，除了實現基本的手部互動之外，貌似還有將虛擬物體會給予人體的感覺進行模擬。</p>\n<p>產品連結：<a href=\"https://mag.sendenkaigi.com/brain/201905/projec-design-creativity/016077.php\" target=\"_blank\" rel=\"noreferrer noopener\">https://mag.sendenkaigi.com/brain/201905/projec-design-creativity/016077.php</a> (不確定是已經發售與否)</p>\n<p>　<br>\n　<br>\n我要先把他的兩個論文先放在這裡，之後有空看：</p>\n<ul>\n<li>\n<a href=\"https://dl.acm.org/doi/pdf/10.1145/1978942.1979018\" target=\"_blank\" rel=\"noreferrer noopener\">PossessedHand: techniques for controlling human hands using electrical muscles stimuli</a>\n</li>\n<li>\n<a href=\"https://dl.acm.org/doi/pdf/10.1145/2984751.2985743\" target=\"_blank\" rel=\"noreferrer noopener\">UnlimitedHand: Input and Output Hand Gestures with Less Calibration Time</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-08 01:06:09",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3904",
        "series_name": "來解數學跟刷圖論跟幾何程式題或者我突然想研究的主題",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>嘿<br/>\n前天去看了龍與雀斑公主，音樂真的很好聽，劇情烘托的還不錯。但每當遇到這種網路分身的題材時，我總是會很有興趣每個作者是如何根據他們搜集的資訊來描述他們的裝置。</p>\n<p>　</p>\n<p>我近期看的兩個動漫：《86，不存在的戰區》、《龍與雀斑公主》，都有說到關於知覺共享。說起來，日本其實人很多，所以很多技術也可能他們都自己玩很多了，只是我礙於語言的障礙，沒有辦法觸及到相關的最新資訊。</p>\n<p>　</p>\n<p>86的作者我找不到太多訊息，但是龍與雀的話，看了採訪，細田守有去找這相關技術的研究人員：他訪問了有關制定5G網路的主要人員永田聰，以及Human-Computer Interaction研究人員玉城繪美(Emi Tamaki)。<br/>\n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/4RkFIkwRjWg\" width=\"560\"></iframe></p>\n<p>　<br/>\n　<br/>\n我一直覺得說，要做到更進階的VR，除了視覺聽覺之外，還要有觸覺模擬，也就是要把所有受器能感覺到的訊號，都能夠用電腦模擬號，經電刺激轉給人體，而玉城繪美他們公司所開發的產品，除了實現基本的手部互動之外，貌似還有將虛擬物體會給予人體的感覺進行模擬。</p>\n<p>產品連結： (不確定是已經發售與否)</p>\n<p>　<br/>\n　<br/>\n我要先把他的兩個論文先放在這裡，之後有空看：</p>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "嘿\n前天去看了龍與雀斑公主，音樂真的很好聽，劇情烘托的還不錯。但每當遇到這種網路分身的題材時，我總是會很有興趣每個作者是如何根據他們搜集的資訊來描述他們的裝置。\n　\n我近期看的兩個動漫：《86，不存在的戰區》、《龍與雀斑公主》，都有說到關於知覺共享。說起來，日本其實人很多，所以很多技術也可能他們都自己玩很多了，只是我礙於語言的障礙，沒有辦法觸及到相關的最新資訊。\n　\n86的作者我找不到太多訊息，但是龍與雀的話，看了採訪，細田守有去找這相關技術的研究人員：他訪問了有關制定5G網路的主要人員永田聰，以及Human-Computer Interaction研究人員玉城繪美(Emi Tamaki)。\n\n　\n　\n我一直覺得說，要做到更進階的VR，除了視覺聽覺之外，還要有觸覺模擬，也就是要把所有受器能感覺到的訊號，都能夠用電腦模擬號，經電刺激轉給人體，而玉城繪美他們公司所開發的產品，除了實現基本的手部互動之外，貌似還有將虛擬物體會給予人體的感覺進行模擬。\n產品連結： (不確定是已經發售與否)\n　\n　\n我要先把他的兩個論文先放在這裡，之後有空看：",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "嘿\n前天 去 看 了 龍 與 雀斑 公主 ， 音樂 真的 很 好聽 ， 劇情 烘托 的還 不錯 。 但 每當 遇到 這種 網路 分身 的 題材 時 ， 我 總是 會 很 有 興趣 每個 作者 是 如何 根據 他們 搜集 的 資訊 來 描述 他們 的 裝置 。\n我 近期 看 的 兩個 動漫 ： 《 86 ， 不 存在 的 戰區 》 、 《 龍 與 雀斑 公主 》 ， 都 有 說 到 關於 知覺 共享 。 說 起來 ， 日本 其實 人 很多 ， 所以 很多 技術 也 可能 他們 都 自己 玩 很多 了 ， 只是 我 礙於 語言 的 障礙 ， 沒有 辦法 觸及 到 相關 的 最新 資訊 。\n86 的 作者 我 找 不到 太 多 訊息 ， 但是 龍 與 雀 的話 ， 看 了 採訪 ， 細田守 有 去 找 這 相關 技術 的 研究 人員 ： 他 訪問 了 有關 制定 5G 網路 的 主要 人員 永田 聰 ， 以及 Human - Computer\nInteraction 研究 人員 玉城繪 美 ( Emi\nTamaki ) 。\n我 一直 覺得 說 ， 要 做到 更 進階 的 VR ， 除了 視覺 聽覺 之外 ， 還要 有 觸覺 模擬 ， 也 就是 要 把 所有 受器 能 感覺 到 的 訊號 ， 都 能夠 用 電腦 模擬 號 ， 經電 刺激 轉給 人體 ， 而玉城 繪美 他們 公司 所 開發 的 產品 ， 除了 實現 基本 的 手部 互動 之外 ， 貌似 還有 將 虛擬 物體 會 給予 人體 的 感覺 進行 模擬 。\n產品 連結 ：\n( 不 確定 是 已經 發售 與否 )\n我要 先 把 他 的 兩個 論文 先 放在 這裡 ， 之後 有空 看 ：",
        "word_seg_processed_content_text": "\n前天 龍 雀斑 公主 音樂 真的 好聽 劇情 烘托 的還 不錯 網路 分身 題材 時 會 興趣 作者 搜集 資訊 描述 裝置\n近期 兩個 動漫 86 戰區 龍 雀斑 公主 說 知覺 共享 說 日本 很多 很多 技術 玩 很多 礙於 語言 障礙 辦法 觸及 相關 最新 資訊\n86 作者 找 不到 太 訊息 龍 雀 採訪 細田守 找 相關 技術 研究 人員 訪問 制定 5g 網路 人員 永田 聰 human computer\ninteraction 研究 人員 玉城繪 美 emi\ntamaki\n說 更 進階 vr 視覺 聽覺 之外 還要 觸覺 模擬 受器 感覺 訊號 電腦 模擬 號 經電 刺激 轉給 人體 而玉城 繪美 公司 開發 產品 手部 互動 之外 貌似 虛擬 物體 會 給予 人體 感覺 模擬\n產品 連結\n發售\n我要 先 兩個 論文 先 放在 有空",
        "extracted_keywords": [
            "語言",
            "永田",
            "日本",
            "動漫",
            "繪美"
        ],
        "extracted_keywords_phrases": [
            "語言",
            "公主 音樂",
            "動漫 86",
            "語言 障礙",
            "礙於 語言"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282500": {
        "href": "https://ithelp.ithome.com.tw/articles/10282500",
        "title": "更新網格交易機器人",
        "content_html": "<div class=\"markdown__style\">\n                                                            <ol>\n<li>使用存到文字檔的log取代print</li>\n<li>解決相對網格裡面，分母部位過小的問題</li>\n</ol>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-11-07 16:39:39",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "37",
        "processed_content_html": "<div class=\"markdown__style\">\n<ol>\n<li>使用存到文字檔的log取代print</li>\n<li>解決相對網格裡面，分母部位過小的問題</li>\n</ol>\n<br/>\n</div>",
        "content_text": "使用存到文字檔的log取代print\n解決相對網格裡面，分母部位過小的問題",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "使用 存 到 文字 檔 的 log 取代 print\n解決 相對 網格 裡面 ， 分母 部位 過小 的 問題",
        "word_seg_processed_content_text": "存 文字 檔 log 取代 print\n解決 網格 分母 部位 過小",
        "extracted_keywords": [
            "print",
            "log",
            "過小",
            "文字",
            "取代"
        ],
        "extracted_keywords_phrases": [
            "log 取代",
            "文字 log",
            "print 解決",
            "取代 print",
            "print"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282495": {
        "href": "https://ithelp.ithome.com.tw/articles/10282495",
        "title": "Day 34 - 實作 S3 驅動 Lambda 函數進行 YOLO 物件辨識",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>Day 34 - 實作 S3 驅動 Lambda 函數進行 YOLO 物件辨識</h1>\n<p>根據 <a href=\"https://ithelp.ithome.com.tw/articles/10278812\" target=\"_blank\" rel=\"noreferrer noopener\">Day 33 - 實作 S3 驅動 Lambda 函數進行鏡像</a>，這是一個微服務的架構，只需將 AWS Lambda 函數改變成 YOLO 物件辨識的模型，就可以達成 YOLO 物件辨識的功能。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510M9pHR2QktV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510M9pHR2QktV.png\"><br>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p>在 github 找到一個這樣的專案 <a href=\"https://github.com/fmacrae/YOLO-on-Lambda\" target=\"_blank\" rel=\"noreferrer noopener\">YOLO-on-Lambda</a>，使用上非常簡單，只要上傳事先壓縮好的 darknetmin.zip 到 Lambda 函數中就可以運行，這個專案事實上是將事先在LInux環境編譯好的 YOLOv3 執行檔 <strong>darknet</strong>，以及一些相關的參數檔壓縮在 darknetmin.zip 中，流程如下所示，我們實際操作一遍。</p>\n<ol>\n<li>下載程式碼。</li>\n<li>上傳相關檔案到 S3。</li>\n<li>建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。</li>\n<li>建立 AWS Lambda 函數。</li>\n<li>修改佈署程式並完成測試。</li>\n</ol>\n<p><strong>步驟一、下載程式碼</strong></p>\n<p>到 <a href=\"https://github.com/fmacrae/YOLO-on-Lambda\" target=\"_blank\" rel=\"noreferrer noopener\">YOLO-on-Lambda</a> 網站中下載 darknetmin.zip，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510tYSzGK4y6G.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510tYSzGK4y6G.png\"><br>\n圖 2、下載 darknetmin.zip</p>\n<p><strong>步驟二、上傳 YOLO 相關檔案到 S3</strong></p>\n<p>因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔存到 S3 中，在 <a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">Day 16 - 進行影像辨識訓練</a>已經根據自己給定的數據集，完成的權重的訓練，所以可以將這個檔案上傳到 S3，以及先前下載的 Lambda 程式碼和圖片，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510bDiNiEBIkR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510bDiNiEBIkR.png\"><br>\n圖 3、上傳 YOLO 相關檔案到 S3</p>\n<p><strong>步驟三、建立 IAM 角色</strong></p>\n<p>建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510fEpUyCY8BQ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510fEpUyCY8BQ.png\"><br>\n圖 4、建立一個角色選擇 Lambda 的使用案例</p>\n<p>在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510scJpPGSUNo.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510scJpPGSUNo.png\"><br>\n圖 5、連接基礎的 CloudWatch 除錯用的許可政策</p>\n<p>最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510dyUeJxgHxV.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510dyUeJxgHxV.png\"><br>\n圖 6、檢閱設定並建立角色</p>\n<p>編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295109BY3loOE9L.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295109BY3loOE9L.png\"><br>\n圖 7、新增政策</p>\n<p>接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295107W4qzR2ZRt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295107W4qzR2ZRt.png\"><br>\n圖 8、將新增的政策連接到先前的角色</p>\n<p><strong>步驟四、建立 AWS Lambda 函數</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇<em>Python 3.8</em>，這是那個 github 專案的要求；而執行角色要也要記得選擇上一個步驟設定的角色。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510wSRPxHwakY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510wSRPxHwakY.png\"><br>\n圖 9、建立 Lambda 函數設定畫面</p>\n<p>建立 Lambda 函數可以自行撰寫，也可以上傳壓縮檔，在第二個步驟中，我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 <strong>上傳於</strong> 按鈕，點擊後選擇 <strong>Amazon S3 位置</strong>，就可以指定位置，如 <em><a href=\"https://%5BBUCKETNAME\" target=\"_blank\" rel=\"noreferrer noopener\">https://[BUCKETNAME</a>].s3.ap-southeast-1.amazonaws.com/darknetmin.zip</em>，畫面如下所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510m0Mof4ylfh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510m0Mof4ylfh.png\"><br>\n圖 10、建立 Lambda 函數設定畫面</p>\n<p><strong>步驟五、修改、佈署程式並進行測試</strong></p>\n<p>需要修改的地方有：</p>\n<ol>\n<li>自建資料集相關檔案：物件檔(obj.data, obj.names)，用來說明辨識後的物件名稱的；組態檔 (yolov3.cfg)，需將原來的組態檔改名，放入新的組態檔。</li>\n<li>Lambda 函數執行環境：需要進行必要調整。</li>\n<li>Lambda 函數本身：需要根據需求進行調整。</li>\n</ol>\n<p><strong>自建資料集相關檔案</strong><br>\n相關的三個檔案都是純文件檔，所以只需在 AWS Lambda 操作畫面中進行新增檔案的操作就可以，檔案內容請參照 <a href=\"https://ithelp.ithome.com.tw/articles/10264575\" target=\"_blank\" rel=\"noreferrer noopener\">Day 15 - 說明 YOLO 相關設定</a>，完成後畫面如下。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510t5I0asOcEd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510t5I0asOcEd.png\"><br>\n圖 11、在 Lambda 函數中新增自建資料集相關檔案</p>\n<p><strong>Lambda 函數執行環境</strong></p>\n<p>在 <strong>程式碼</strong> 頁簽中，下方有一個 <strong>執行時間設定</strong> 的選項需要進行設定，從上圖中可以知道整個 Lambda 函數的主要函數進入點是 service.py，所以需要在 <strong>執行時間設定</strong> 中，設定處理常式為 <strong>service.handler</strong>，完成後畫面如下。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510yzPqg3QaDE.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510yzPqg3QaDE.png\"><br>\n圖 12、在執行時間設定中，設定處理常式</p>\n<p>接著在 <strong>組態</strong> 頁簽中，選擇 <strong>一般組態</strong>，將 <em>記憶體 (MB)</em> 設定為 2048 ～ 5120 M，<em>逾時</em> 設定為 2 分鐘，完成後畫面如下。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510qNdSCmApER.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510qNdSCmApER.png\"><br>\n圖 13、在組態頁簽中，設定一般組態</p>\n<p><strong>Lambda 函數本身</strong></p>\n<p>需要修改的是要指定權重檔與待測試圖片的所在位置，並將原本的執行命令改成<code>./darknet detector test cfg/obj.data cfg/yolov3.cfg {} {}</code>，這樣才不會使用到預設的 coco.data 的標籤。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510lscsU7YUYR.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510lscsU7YUYR.png\"><br>\n圖 14、修改 service.py 的內容</p>\n<p>修改完畢後，進行佈署(Deploy)後，可以設定一個測試(test)計畫，不需要內容，直接測試即可。確認後會需要約 60 幾秒才會完成影像的辨識，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295106vr2qqDfvZ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/201295106vr2qqDfvZ.png\"><br>\n圖 15、執行 YOLO Lambda 辨識功能</p>\n<p>因為輸出是一整行，所以把這個輸出複製到一般編輯器中，比較方便看到辨識結果，如下圖所示。</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510K01lGjxr8M.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211106/20129510K01lGjxr8M.png\"><br>\n圖 16、YOLO 辨識結果</p>\n<p>而這樣的反應速度，如果是批次處理還可以，但是即時處理的話，反應速度太慢，可能需要再找其他工具來滿足這個需求。</p>\n<h2>參考資料</h2>\n<ul>\n<li>YOLO-on-Lambda, <a href=\"https://github.com/fmacrae/YOLO-on-Lambda\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/fmacrae/YOLO-on-Lambda</a>\n</li>\n<li>Day 15 - 說明 YOLO 相關設定，<a href=\"https://ithelp.ithome.com.tw/articles/10264575\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10264575</a>\n</li>\n<li>Day 16 - 進行影像辨識訓練，<a href=\"https://ithelp.ithome.com.tw/articles/10265534\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10265534</a>\n</li>\n<li>Day 33 - 實作 S3 驅動 Lambda 函數進行鏡像，<a href=\"https://ithelp.ithome.com.tw/articles/10278812\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10278812</a>\n</li>\n</ul>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,yolov3,aws lambda",
        "genre": "AI & Data",
        "published_at": "2021-11-06 21:06:18",
        "author_href": "https://ithelp.ithome.com.tw/users/20129510/ironman",
        "author_name": "yehchitsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20129510/ironman/4385",
        "series_name": "觀賞魚辨識的YOLO全餐",
        "series_num": "34",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>Day 34 - 實作 S3 驅動 Lambda 函數進行 YOLO 物件辨識</h1>\n<p>根據 ，這是一個微服務的架構，只需將 AWS Lambda 函數改變成 YOLO 物件辨識的模型，就可以達成 YOLO 物件辨識的功能。</p>\n<p><br/>\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖</p>\n<p>在 github 找到一個這樣的專案 ，使用上非常簡單，只要上傳事先壓縮好的 darknetmin.zip 到 Lambda 函數中就可以運行，這個專案事實上是將事先在LInux環境編譯好的 YOLOv3 執行檔 <strong>darknet</strong>，以及一些相關的參數檔壓縮在 darknetmin.zip 中，流程如下所示，我們實際操作一遍。</p>\n<ol>\n<li>下載程式碼。</li>\n<li>上傳相關檔案到 S3。</li>\n<li>建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。</li>\n<li>建立 AWS Lambda 函數。</li>\n<li>修改佈署程式並完成測試。</li>\n</ol>\n<p><strong>步驟一、下載程式碼</strong></p>\n<p>到  網站中下載 darknetmin.zip，如下圖所示。</p>\n<p><br/>\n圖 2、下載 darknetmin.zip</p>\n<p><strong>步驟二、上傳 YOLO 相關檔案到 S3</strong></p>\n<p>因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔存到 S3 中，在 已經根據自己給定的數據集，完成的權重的訓練，所以可以將這個檔案上傳到 S3，以及先前下載的 Lambda 程式碼和圖片，如下圖所示。</p>\n<p><br/>\n圖 3、上傳 YOLO 相關檔案到 S3</p>\n<p><strong>步驟三、建立 IAM 角色</strong></p>\n<p>建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 <strong>下一個：許可</strong> 按鈕。</p>\n<p><br/>\n圖 4、建立一個角色選擇 Lambda 的使用案例</p>\n<p>在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。</p>\n<p><br/>\n圖 5、連接基礎的 CloudWatch 除錯用的許可政策</p>\n<p>最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。</p>\n<p><br/>\n圖 6、檢閱設定並建立角色</p>\n<p>編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。</p>\n<p><br/>\n圖 7、新增政策</p>\n<p>接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。</p>\n<p><br/>\n圖 8、將新增的政策連接到先前的角色</p>\n<p><strong>步驟四、建立 AWS Lambda 函數</strong></p>\n<p>進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇<em>Python 3.8</em>，這是那個 github 專案的要求；而執行角色要也要記得選擇上一個步驟設定的角色。</p>\n<p><br/>\n圖 9、建立 Lambda 函數設定畫面</p>\n<p>建立 Lambda 函數可以自行撰寫，也可以上傳壓縮檔，在第二個步驟中，我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 <strong>上傳於</strong> 按鈕，點擊後選擇 <strong>Amazon S3 位置</strong>，就可以指定位置，如 <em>].s3.ap-southeast-1.amazonaws.com/darknetmin.zip</em>，畫面如下所示。</p>\n<p><br/>\n圖 10、建立 Lambda 函數設定畫面</p>\n<p><strong>步驟五、修改、佈署程式並進行測試</strong></p>\n<p>需要修改的地方有：</p>\n<ol>\n<li>自建資料集相關檔案：物件檔(obj.data, obj.names)，用來說明辨識後的物件名稱的；組態檔 (yolov3.cfg)，需將原來的組態檔改名，放入新的組態檔。</li>\n<li>Lambda 函數執行環境：需要進行必要調整。</li>\n<li>Lambda 函數本身：需要根據需求進行調整。</li>\n</ol>\n<p><strong>自建資料集相關檔案</strong><br/>\n相關的三個檔案都是純文件檔，所以只需在 AWS Lambda 操作畫面中進行新增檔案的操作就可以，檔案內容請參照 ，完成後畫面如下。</p>\n<p><br/>\n圖 11、在 Lambda 函數中新增自建資料集相關檔案</p>\n<p><strong>Lambda 函數執行環境</strong></p>\n<p>在 <strong>程式碼</strong> 頁簽中，下方有一個 <strong>執行時間設定</strong> 的選項需要進行設定，從上圖中可以知道整個 Lambda 函數的主要函數進入點是 service.py，所以需要在 <strong>執行時間設定</strong> 中，設定處理常式為 <strong>service.handler</strong>，完成後畫面如下。</p>\n<p><br/>\n圖 12、在執行時間設定中，設定處理常式</p>\n<p>接著在 <strong>組態</strong> 頁簽中，選擇 <strong>一般組態</strong>，將 <em>記憶體 (MB)</em> 設定為 2048 ～ 5120 M，<em>逾時</em> 設定為 2 分鐘，完成後畫面如下。</p>\n<p><br/>\n圖 13、在組態頁簽中，設定一般組態</p>\n<p><strong>Lambda 函數本身</strong></p>\n<p>需要修改的是要指定權重檔與待測試圖片的所在位置，並將原本的執行命令改成<code>./darknet detector test cfg/obj.data cfg/yolov3.cfg {} {}</code>，這樣才不會使用到預設的 coco.data 的標籤。</p>\n<p><br/>\n圖 14、修改 service.py 的內容</p>\n<p>修改完畢後，進行佈署(Deploy)後，可以設定一個測試(test)計畫，不需要內容，直接測試即可。確認後會需要約 60 幾秒才會完成影像的辨識，如下圖所示。</p>\n<p><br/>\n圖 15、執行 YOLO Lambda 辨識功能</p>\n<p>因為輸出是一整行，所以把這個輸出複製到一般編輯器中，比較方便看到辨識結果，如下圖所示。</p>\n<p><br/>\n圖 16、YOLO 辨識結果</p>\n<p>而這樣的反應速度，如果是批次處理還可以，但是即時處理的話，反應速度太慢，可能需要再找其他工具來滿足這個需求。</p>\n<h2>參考資料</h2>\n<ul>\n<li>YOLO-on-Lambda, \n</li>\n<li>Day 15 - 說明 YOLO 相關設定，\n</li>\n<li>Day 16 - 進行影像辨識訓練，\n</li>\n<li>Day 33 - 實作 S3 驅動 Lambda 函數進行鏡像，\n</li>\n</ul>\n<br/>\n</div>",
        "content_text": "Day 34 - 實作 S3 驅動 Lambda 函數進行 YOLO 物件辨識\n根據 ，這是一個微服務的架構，只需將 AWS Lambda 函數改變成 YOLO 物件辨識的模型，就可以達成 YOLO 物件辨識的功能。\n\n圖 1、S3 驅動 Lambda 函數進行 YOLO 辨識架構圖\n在 github 找到一個這樣的專案 ，使用上非常簡單，只要上傳事先壓縮好的 darknetmin.zip 到 Lambda 函數中就可以運行，這個專案事實上是將事先在LInux環境編譯好的 YOLOv3 執行檔 darknet，以及一些相關的參數檔壓縮在 darknetmin.zip 中，流程如下所示，我們實際操作一遍。\n\n下載程式碼。\n上傳相關檔案到 S3。\n建立 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。\n建立 AWS Lambda 函數。\n修改佈署程式並完成測試。\n\n步驟一、下載程式碼\n到  網站中下載 darknetmin.zip，如下圖所示。\n\n圖 2、下載 darknetmin.zip\n步驟二、上傳 YOLO 相關檔案到 S3\n因為 AWS Lambda 函數的大小限制為 256 MB，所以需要把 YOLO 的權重檔存到 S3 中，在 已經根據自己給定的數據集，完成的權重的訓練，所以可以將這個檔案上傳到 S3，以及先前下載的 Lambda 程式碼和圖片，如下圖所示。\n\n圖 3、上傳 YOLO 相關檔案到 S3\n步驟三、建立 IAM 角色\n建立一個 IAM 角色，允許執行 AWS Lambda，並有存取 S3 的許可。進入 IAM 管理控制台，選擇新增角色，接下來如下圖所示，選擇 Lambda 的使用案例後點擊 下一個：許可 按鈕。\n\n圖 4、建立一個角色選擇 Lambda 的使用案例\n在搜尋文字框中輸入 basic 找到 AWSLambdaBasicExecutionRole 進行連接，這將允許這個角色有寫入 CloudWatch 記錄檔的全縣，方便程式除錯之用，如下圖所示。\n\n圖 5、連接基礎的 CloudWatch 除錯用的許可政策\n最後確定先前的設定後並輸入角色名稱後，就可以建立角色，如下圖所示。\n\n圖 6、檢閱設定並建立角色\n編輯一個新的政策，內容如下圖所示，給定讀取 (GetObject) 儲存貯體 A 與寫入物件 (PutObject) 與權限 (PutObjectAcl) 到儲存貯體 B。\n\n圖 7、新增政策\n接著到角色設定畫面，將新建政策連接到角色上，如下圖所示。\n\n圖 8、將新增的政策連接到先前的角色\n步驟四、建立 AWS Lambda 函數\n進入 AWS Lambda 管理控制台，選擇建立 Lambda 函數，設定內容如下圖所示。比較需要注意的是執行時間務必選擇Python 3.8，這是那個 github 專案的要求；而執行角色要也要記得選擇上一個步驟設定的角色。\n\n圖 9、建立 Lambda 函數設定畫面\n建立 Lambda 函數可以自行撰寫，也可以上傳壓縮檔，在第二個步驟中，我們已經把 Lambda 函數代碼上傳到 S3 ，只需在函數設定主畫面的右邊，可以找到一個 上傳於 按鈕，點擊後選擇 Amazon S3 位置，就可以指定位置，如 ].s3.ap-southeast-1.amazonaws.com/darknetmin.zip，畫面如下所示。\n\n圖 10、建立 Lambda 函數設定畫面\n步驟五、修改、佈署程式並進行測試\n需要修改的地方有：\n\n自建資料集相關檔案：物件檔(obj.data, obj.names)，用來說明辨識後的物件名稱的；組態檔 (yolov3.cfg)，需將原來的組態檔改名，放入新的組態檔。\nLambda 函數執行環境：需要進行必要調整。\nLambda 函數本身：需要根據需求進行調整。\n\n自建資料集相關檔案\n相關的三個檔案都是純文件檔，所以只需在 AWS Lambda 操作畫面中進行新增檔案的操作就可以，檔案內容請參照 ，完成後畫面如下。\n\n圖 11、在 Lambda 函數中新增自建資料集相關檔案\nLambda 函數執行環境\n在 程式碼 頁簽中，下方有一個 執行時間設定 的選項需要進行設定，從上圖中可以知道整個 Lambda 函數的主要函數進入點是 service.py，所以需要在 執行時間設定 中，設定處理常式為 service.handler，完成後畫面如下。\n\n圖 12、在執行時間設定中，設定處理常式\n接著在 組態 頁簽中，選擇 一般組態，將 記憶體 (MB) 設定為 2048 ～ 5120 M，逾時 設定為 2 分鐘，完成後畫面如下。\n\n圖 13、在組態頁簽中，設定一般組態\nLambda 函數本身\n需要修改的是要指定權重檔與待測試圖片的所在位置，並將原本的執行命令改成./darknet detector test cfg/obj.data cfg/yolov3.cfg {} {}，這樣才不會使用到預設的 coco.data 的標籤。\n\n圖 14、修改 service.py 的內容\n修改完畢後，進行佈署(Deploy)後，可以設定一個測試(test)計畫，不需要內容，直接測試即可。確認後會需要約 60 幾秒才會完成影像的辨識，如下圖所示。\n\n圖 15、執行 YOLO Lambda 辨識功能\n因為輸出是一整行，所以把這個輸出複製到一般編輯器中，比較方便看到辨識結果，如下圖所示。\n\n圖 16、YOLO 辨識結果\n而這樣的反應速度，如果是批次處理還可以，但是即時處理的話，反應速度太慢，可能需要再找其他工具來滿足這個需求。\n參考資料\n\nYOLO-on-Lambda, \n\nDay 15 - 說明 YOLO 相關設定，\n\nDay 16 - 進行影像辨識訓練，\n\nDay 33 - 實作 S3 驅動 Lambda 函數進行鏡像，",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "Day\n34\n-\n實作\nS3\n驅動\nLambda\n函數 進行\nYOLO\n物件 辨識\n根據\n， 這是 一個 微 服務 的 架構 ， 只 需將\nAWS\nLambda\n函數 改變 成\nYOLO\n物件 辨識 的 模型 ， 就 可以 達成\nYOLO\n物件 辨識 的 功能 。\n圖\n1 、 S3\n驅動\nLambda\n函數 進行\nYOLO\n辨識 架構圖\n在\ngithub\n找到 一個 這樣 的 專案\n， 使用 上 非常簡單 ， 只要 上傳 事先 壓縮 好 的\ndarknetmin . zip\n到\nLambda\n函數 中 就 可以 運行 ， 這個 專案 事實上 是將 事先 在 LInux 環境 編譯 好 的\nYOLOv3\n執行 檔\ndarknet ， 以及 一些 相關 的 參數 檔 壓縮 在\ndarknetmin . zip\n中 ， 流程 如下 所示 ， 我們 實際操作 一遍 。\n下載 程式碼 。\n上傳 相關 檔案 到\nS3 。\n建立\nIAM\n角色 ， 允許 執行\nAWS\nLambda ， 並有 存取\nS3\n的 許可 。\n建立\nAWS\nLambda\n函數 。\n修改 佈署 程式 並 完成 測試 。\n步驟 一 、 下載 程式碼\n到\n網站 中 下載\ndarknetmin . zip ， 如 下圖 所示 。\n圖\n2 、 下載\ndarknetmin . zip\n步驟 二 、 上傳\nYOLO\n相關 檔案 到\nS3\n因為\nAWS\nLambda\n函數 的 大小 限制 為\n256\nMB ， 所以 需要 把\nYOLO\n的 權重 檔存 到\nS3\n中 ， 在\n已經 根據 自己 給定 的 數據 集 ， 完成 的 權重 的 訓練 ， 所以 可以 將 這個 檔案 上 傳到\nS3 ， 以及 先前 下載 的\nLambda\n程式碼 和 圖片 ， 如 下圖 所示 。\n圖\n3 、 上傳\nYOLO\n相關 檔案 到\nS3\n步驟 三 、 建立\nIAM\n角色\n建立 一個\nIAM\n角色 ， 允許 執行\nAWS\nLambda ， 並有 存取\nS3\n的 許可 。 進入\nIAM\n管理 控制台 ， 選擇 新增 角色 ， 接下來 如 下圖 所示 ， 選擇\nLambda\n的 使用 案例 後 點擊\n下 一個 ： 許可\n按鈕 。\n圖\n4 、 建立 一個 角色 選擇\nLambda\n的 使用 案例\n在 搜尋 文字 框中 輸入\nbasic\n找到\nAWSLambdaBasicExecutionRole\n進行 連接 ， 這將 允許 這個 角色 有 寫入\nCloudWatch\n記錄 檔 的 全縣 ， 方便 程式 除錯 之用 ， 如 下圖 所示 。\n圖\n5 、 連接 基礎 的\nCloudWatch\n除錯 用 的 許可 政策\n最後 確定 先前 的 設定 後並 輸入 角色 名稱 後 ， 就 可以 建立 角色 ， 如 下圖 所示 。\n圖\n6 、 檢閱 設定 並 建立 角色\n編輯 一個 新 的 政策 ， 內容 如 下圖 所示 ， 給定 讀取\n( GetObject )\n儲存 貯體\nA\n與 寫入 物件\n( PutObject )\n與 權限\n( PutObjectAcl )\n到 儲存 貯體\nB 。\n圖\n7 、 新增 政策\n接著 到 角色 設定 畫面 ， 將 新建 政策 連接 到 角色 上 ， 如 下圖 所示 。\n圖\n8 、 將 新增 的 政策 連接 到 先前 的 角色\n步驟 四 、 建立\nAWS\nLambda\n函數\n進入\nAWS\nLambda\n管理 控制台 ， 選擇 建立\nLambda\n函數 ， 設定 內容 如 下圖 所示 。 比較 需要 注意 的 是 執行 時間 務必 選擇 Python\n3.8 ， 這是 那個\ngithub\n專案 的 要求 ； 而 執行 角色 要 也 要 記得 選擇 上 一個 步驟 設定 的 角色 。\n圖\n9 、 建立\nLambda\n函數 設定 畫面\n建立\nLambda\n函數 可以 自行 撰寫 ， 也 可以 上傳 壓縮 檔 ， 在 第二個 步驟 中 ， 我們 已經 把\nLambda\n函數 代碼 上 傳到\nS3\n， 只 需 在 函數 設定 主 畫面 的 右邊 ， 可以 找到 一個\n上傳 於\n按鈕 ， 點擊 後 選擇\nAmazon\nS3\n位置 ， 就 可以 指定 位置 ， 如\n] . s3 . ap - southeast - 1 . amazonaws . com / darknetmin . zip ， 畫面 如下 所示 。\n圖\n10 、 建立\nLambda\n函數 設定 畫面\n步驟 五 、 修改 、 佈署 程式 並 進行 測試\n需要 修改 的 地方 有 ：\n自 建 資料集 相關 檔案 ： 物件 檔 ( obj . data ,\nobj . names ) ， 用來 說明 辨識 後 的 物件 名稱 的 ； 組態 檔\n( yolov3 . cfg ) ， 需將 原來 的 組態 檔 改名 ， 放入 新 的 組態 檔 。\nLambda\n函數 執行 環境 ： 需要 進行 必要 調整 。\nLambda\n函數 本身 ： 需要 根據 需求 進行 調整 。\n自 建 資料集 相關 檔案\n相關 的 三個 檔案 都 是 純 文件 檔 ， 所以 只 需 在\nAWS\nLambda\n操作 畫面 中 進行 新增 檔案 的 操作 就 可以 ， 檔案 內容 請 參照\n， 完成 後 畫面 如下 。\n圖\n11 、 在\nLambda\n函數 中 新增 自 建 資料集 相關 檔案\nLambda\n函數 執行 環境\n在\n程式碼\n頁 簽中 ， 下方 有 一個\n執行 時間 設定\n的 選項 需要 進行 設定 ， 從 上圖 中 可以 知道 整個\nLambda\n函數 的 主要 函數 進入 點是\nservice . py ， 所以 需要 在\n執行 時間 設定\n中 ， 設定 處理 常式 為\nservice . handler ， 完成 後 畫面 如下 。\n圖\n12 、 在 執行 時間 設定 中 ， 設定 處理 常式\n接著 在\n組態\n頁 簽中 ， 選擇\n一般 組態 ， 將\n記憶體\n( MB )\n設定 為\n2048\n～\n5120\nM ， 逾時\n設定 為\n2\n分鐘 ， 完成 後 畫面 如下 。\n圖\n13 、 在 組態 頁 簽中 ， 設定 一般 組態\nLambda\n函數 本身\n需要 修改 的 是 要 指定 權重 檔 與 待 測試 圖片 的 所在位置 ， 並將 原本 的 執行命令 改成 . / darknet\ndetector\ntest\ncfg / obj . data\ncfg / yolov3 . cfg\n{ }\n{ } ， 這樣 才 不會 使用 到 預設 的\ncoco . data\n的 標籤 。\n圖\n14 、 修改\nservice . py\n的 內容\n修改 完畢 後 ， 進行 佈署 ( Deploy ) 後 ， 可以 設定 一個 測試 ( test ) 計畫 ， 不 需要 內容 ， 直接 測試 即可 。 確認 後 會 需要 約\n60\n幾秒 才 會 完成 影像 的 辨識 ， 如 下圖 所示 。\n圖\n15 、 執行\nYOLO\nLambda\n辨識 功能\n因為 輸出 是 一 整行 ， 所以 把 這個 輸出 複製到 一般 編輯器 中 ， 比較 方便 看到 辨識 結果 ， 如 下圖 所示 。\n圖\n16 、 YOLO\n辨識 結果\n而 這樣 的 反應速度 ， 如果 是 批次 處理 還 可以 ， 但是 即時 處理 的話 ， 反應速度 太慢 ， 可能 需要 再 找 其他 工具 來 滿足 這個 需求 。\n參考資料\nYOLO - on - Lambda ,\nDay\n15\n-\n說明\nYOLO\n相關 設定 ，\nDay\n16\n-\n進行 影像 辨識 訓練 ，\nDay\n33\n-\n實作\nS3\n驅動\nLambda\n函數 進行 鏡像 ，",
        "word_seg_processed_content_text": "day\n34\n\n實作\ns3\n驅動\nlambda\n函數\nyolo\n物件 辨識\n\n這是 微 服務 架構 需將\naws\nlambda\n函數 改變 成\nyolo\n物件 辨識 模型 達成\nyolo\n物件 辨識 功能\n圖\n1 s3\n驅動\nlambda\n函數\nyolo\n辨識 架構圖\n\ngithub\n找到 專案\n非常簡單 上傳 事先 壓縮\ndarknetmin zip\n\nlambda\n函數 中 運行 專案 事實上 是將 事先 linux 環境 編譯\nyolov3\n執行 檔\ndarknet 相關 參數 檔 壓縮\ndarknetmin zip\n中 流程 所示 實際操作 一遍\n下載 程式碼\n上傳 相關 檔案\ns3\n建立\niam\n角色 執行\naws\nlambda 並有 存取\ns3\n許可\n建立\naws\nlambda\n函數\n修改 佈署 程式 測試\n步驟 下載 程式碼\n\n網站 中 下載\ndarknetmin zip 下圖 所示\n圖\n2 下載\ndarknetmin zip\n步驟 二 上傳\nyolo\n相關 檔案\ns3\n\naws\nlambda\n函數 大小\n256\nmb\nyolo\n權重 檔存\ns3\n中\n給定 數據 集 權重 訓練 檔案 傳到\ns3 先前 下載\nlambda\n程式碼 圖片 下圖 所示\n圖\n3 上傳\nyolo\n相關 檔案\ns3\n步驟 三 建立\niam\n角色\n建立\niam\n角色 執行\naws\nlambda 並有 存取\ns3\n許可\niam\n管理 控制台 選擇 新增 角色 接下來 下圖 所示 選擇\nlambda\n案例 點擊\n許可\n按鈕\n圖\n4 建立 角色 選擇\nlambda\n案例\n搜尋 文字 框中 輸入\nbasic\n找到\nawslambdabasicexecutionrole\n連接 這將 角色 寫入\ncloudwatch\n記錄 檔 全縣 程式 除錯 之用 下圖 所示\n圖\n5 連接 基礎\ncloudwatch\n除錯 許可 政策\n先前 設定 後並 輸入 角色 名稱 建立 角色 下圖 所示\n圖\n6 檢閱 設定 建立 角色\n編輯 新 政策 內容 下圖 所示 給定 讀取\ngetobject\n儲存 貯體\na\n寫入 物件\nputobject\n權限\nputobjectacl\n儲存 貯體\nb\n圖\n7 新增 政策\n角色 設定 畫面 新建 政策 連接 角色 下圖 所示\n圖\n8 新增 政策 連接 先前 角色\n步驟 四 建立\naws\nlambda\n函數\n\naws\nlambda\n管理 控制台 選擇 建立\nlambda\n函數 設定 內容 下圖 所示 執行 時間 務必 選擇 python\n3.8 這是\ngithub\n專案 執行 角色 記得 選擇 步驟 設定 角色\n圖\n9 建立\nlambda\n函數 設定 畫面\n建立\nlambda\n函數 自行 撰寫 上傳 壓縮 檔 第二個 步驟 中\nlambda\n函數 代碼 傳到\ns3\n需 函數 設定 主 畫面 右邊 找到\n上傳\n按鈕 點擊 選擇\namazon\ns3\n位置 指定 位置\ns3 ap southeast 1 amazonaws com darknetmin zip 畫面 所示\n圖\n10 建立\nlambda\n函數 設定 畫面\n步驟 五 修改 佈署 程式 測試\n修改 地方\n建 資料集 相關 檔案 物件 檔 obj data\nobj names 用來 辨識 物件 名稱 組態 檔\nyolov3 cfg 需將 組態 檔 改名 放入 新 組態 檔\nlambda\n函數 執行 環境 調整\nlambda\n函數 本身 需求 調整\n建 資料集 相關 檔案\n相關 三個 檔案 純 文件 檔 需\naws\nlambda\n操作 畫面 中 新增 檔案 操作 檔案 內容 請 參照\n畫面\n圖\n11\nlambda\n函數 中 新增 建 資料集 相關 檔案\nlambda\n函數 執行 環境\n\n程式碼\n頁 簽中 下方\n執行 時間 設定\n選項 設定 上圖 中\nlambda\n函數 函數 點是\nservice py\n執行 時間 設定\n中 設定 常式\nservice handler 畫面\n圖\n12 執行 時間 設定 中 設定 常式\n\n組態\n頁 簽中 選擇\n組態\n記憶體\nmb\n設定\n2048\n\n5120\nm 逾時\n設定\n2\n分鐘 畫面\n圖\n13 組態 頁 簽中 設定 組態\nlambda\n函數 本身\n修改 指定 權重 檔 測試 圖片 所在位置 並將 原本 執行命令 改成 darknet\ndetector\ntest\ncfg obj data\ncfg yolov3 cfg\n\n才 預設\ncoco data\n標籤\n圖\n14 修改\nservice py\n內容\n修改 完畢 佈署 deploy 設定 測試 test 計畫 內容 測試 即可 確認 會 約\n60\n幾秒 才 會 影像 辨識 下圖 所示\n圖\n15 執行\nyolo\nlambda\n辨識 功能\n輸出 整行 輸出 複製到 編輯器 中 辨識 下圖 所示\n圖\n16 yolo\n辨識\n反應速度 批次 即時 反應速度 太慢 找 工具 需求\n參考資料\nyolo lambda\nday\n15\n\n\nyolo\n相關 設定\nday\n16\n\n影像 辨識 訓練\nday\n33\n\n實作\ns3\n驅動\nlambda\n函數 鏡像",
        "extracted_keywords": [
            "yolov3",
            "yolo",
            "s3",
            "辨識",
            "lambda"
        ],
        "extracted_keywords_phrases": [
            "yolo 辨識",
            "參考資料 yolo",
            "編譯 yolov3",
            "yolov3",
            "函數 yolo"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282486": {
        "href": "https://ithelp.ithome.com.tw/articles/10282486",
        "title": "建立第一個RESTful api server(設定環境變數篇) (Day19)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>在上篇的內容中，我們將資料庫的連線字串放進程式碼中，並寫死在裡面，但在常規的程式開發中，這樣是非常不安全，因為你不會知道你的程式會被誰看到，因此需要將這個連線的內容放到環境變數中，讓程式碼中不要出現這類的帳號密碼<br>\n而且當如果你的程式需要被放到很多不一樣的環境時，才能在不改動程式的情況下，修正環境變數來達到快速將程式部署到不同環境中<br>\n而這個環境變數是整體電腦的，因此也可以在同一台電腦中透過修改變數，將所有部署在同一個電腦環境的變數一同改掉</p>\n<p>而在這次會使用到的套件如下<br>\n<a href=\"https://github.com/joho/godotenv\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/joho/godotenv</a></p>\n<p>這個套件可以幫助我們在檔案中設定環境變數，就不用先將環境變數設定到電腦中了<br>\n這個套件裡面有提供一個功能是，只要將他的autoload放在import，並使用他的init功能，就能預設將.env載入</p>\n<p>而最後，將.env放到.gitignore裡面，並且再建立一個.env.example，這樣未來在建立檔案的時候，就可以先從.env.example裡面找到需要的環境變數來設定，也可以透過.env檔來設定了</p>\n<p>操作步驟跟git連結放在這邊<br>\n<a href=\"https://www.youtube.com/watch?v=53r2V9A2Vco\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=53r2V9A2Vco</a><br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.2.1\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.2.1</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-06 11:13:36",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "19",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>在上篇的內容中，我們將資料庫的連線字串放進程式碼中，並寫死在裡面，但在常規的程式開發中，這樣是非常不安全，因為你不會知道你的程式會被誰看到，因此需要將這個連線的內容放到環境變數中，讓程式碼中不要出現這類的帳號密碼<br/>\n而且當如果你的程式需要被放到很多不一樣的環境時，才能在不改動程式的情況下，修正環境變數來達到快速將程式部署到不同環境中<br/>\n而這個環境變數是整體電腦的，因此也可以在同一台電腦中透過修改變數，將所有部署在同一個電腦環境的變數一同改掉</p>\n<p>而在這次會使用到的套件如下<br/>\n</p>\n<p>這個套件可以幫助我們在檔案中設定環境變數，就不用先將環境變數設定到電腦中了<br/>\n這個套件裡面有提供一個功能是，只要將他的autoload放在import，並使用他的init功能，就能預設將.env載入</p>\n<p>而最後，將.env放到.gitignore裡面，並且再建立一個.env.example，這樣未來在建立檔案的時候，就可以先從.env.example裡面找到需要的環境變數來設定，也可以透過.env檔來設定了</p>\n<p>操作步驟跟git連結放在這邊<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "在上篇的內容中，我們將資料庫的連線字串放進程式碼中，並寫死在裡面，但在常規的程式開發中，這樣是非常不安全，因為你不會知道你的程式會被誰看到，因此需要將這個連線的內容放到環境變數中，讓程式碼中不要出現這類的帳號密碼\n而且當如果你的程式需要被放到很多不一樣的環境時，才能在不改動程式的情況下，修正環境變數來達到快速將程式部署到不同環境中\n而這個環境變數是整體電腦的，因此也可以在同一台電腦中透過修改變數，將所有部署在同一個電腦環境的變數一同改掉\n而在這次會使用到的套件如下\n\n這個套件可以幫助我們在檔案中設定環境變數，就不用先將環境變數設定到電腦中了\n這個套件裡面有提供一個功能是，只要將他的autoload放在import，並使用他的init功能，就能預設將.env載入\n而最後，將.env放到.gitignore裡面，並且再建立一個.env.example，這樣未來在建立檔案的時候，就可以先從.env.example裡面找到需要的環境變數來設定，也可以透過.env檔來設定了\n操作步驟跟git連結放在這邊",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "在 上 篇 的 內容 中 ， 我們 將 資料庫 的 連線 字串 放進 程式碼 中 ， 並寫 死 在 裡面 ， 但 在 常規 的 程式 開發 中 ， 這樣 是 非常 不 安全 ， 因為 你 不會 知道 你 的 程式 會 被 誰 看到 ， 因此 需要 將 這個 連線 的 內容 放到 環境 變數 中 ， 讓 程式碼 中 不要 出現 這類 的 帳號密碼\n而且 當 如果 你 的 程式 需要 被 放到 很多 不 一樣 的 環境 時 ， 才能 在 不 改動 程式 的 情況 下 ， 修正 環境 變數 來 達到 快 速將 程式 部署 到 不同 環境 中\n而 這個 環境 變數 是 整體 電腦 的 ， 因此 也 可以 在 同一 台 電腦 中 透過 修改 變數 ， 將 所有 部署 在 同一個 電腦 環境 的 變數 一同 改掉\n而 在 這次 會 使用 到 的 套件 如下\n這個 套件 可以 幫助 我們 在 檔案 中 設定 環境 變數 ， 就 不用 先將 環境 變數 設定 到 電腦 中 了\n這個 套件 裡面 有 提供 一個 功能 是 ， 只要 將他 的 autoload 放在 import ， 並 使用 他 的 init 功能 ， 就 能 預設 將 . env 載入\n而 最後 ， 將 . env 放到 . gitignore 裡面 ， 並且 再 建立 一個 . env . example ， 這樣 未來 在 建立 檔案 的 時候 ， 就 可以 先 從 . env . example 裡面 找到 需要 的 環境 變數 來 設定 ， 也 可以 透過 . env 檔來 設定 了\n操作步驟 跟 git 連結 放在 這邊",
        "word_seg_processed_content_text": "篇 內容 中 資料庫 連線 字串 放進 程式碼 中 並寫 死 常規 程式 開發 中 程式 會 連線 內容 放到 環境 變數 中 程式碼 中 這類 帳號密碼\n程式 放到 很多 環境 時 才能 改動 程式 情況 修正 環境 變數 快 速將 程式 部署 環境 中\n環境 變數 整體 電腦 台 電腦 中 透過 修改 變數 部署 同一個 電腦 環境 變數 一同 改掉\n這次 會 套件\n套件 檔案 中 設定 環境 變數 不用 先將 環境 變數 設定 電腦 中\n套件 提供 功能 將他 autoload 放在 import init 功能 預設 env 載入\nenv 放到 gitignore 建立 env example 未來 建立 檔案 先 env example 找到 環境 變數 設定 透過 env 檔來 設定\n操作步驟 git 連結 放在",
        "extracted_keywords": [
            "程式碼",
            "程式",
            "資料庫",
            "電腦",
            "字串"
        ],
        "extracted_keywords_phrases": [
            "程式碼 這類",
            "程式 連線",
            "放進 程式碼",
            "內容 資料庫",
            "程式碼 並寫"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282443": {
        "href": "https://ithelp.ithome.com.tw/articles/10282443",
        "title": "Day 48. 下載個範例ios app來試著build",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>繼前天吧，我把新創apple id加入developer，然後沒付費的狀態，這個時候好像是叫做personal team的狀態。</p>\n<p>　</p>\n<p>在github找到個<a href=\"https://github.com/jogendra/example-ios-apps\" target=\"_blank\" rel=\"noreferrer noopener\">ios示範APP來源</a>，我先選了計算機小程式<a href=\"https://github.com/jogendra/Calculator-iOS\" target=\"_blank\" rel=\"noreferrer noopener\">jogendra/Calculator-iOS</a>試試看。</p>\n<p><img src=\"https://i.imgur.com/jSBmfCI.png\" alt=\"\"></p>\n<p>　</p>\n<p>我把程式下載下來，按照<a href=\"https://mrmad.com.tw/xcode-code-app\" target=\"_blank\" rel=\"noreferrer noopener\">【教學】免年費開發者帳號 透過Xcode編譯APP實體裝置執行</a> 說的做。</p>\n<p><img src=\"https://i.imgur.com/neSMAhZ.png\" alt=\"\"><br>\n<img src=\"https://i.imgur.com/3z4kwvU.png\" alt=\"\"><br>\n<img src=\"https://i.imgur.com/qzUpo8Q.png\" alt=\"\"></p>\n<p><code>所做的差別</code>：</p>\n<ul>\n<li>\n<p>因為這個示範App，他製作的時候是ios13，而我的ios版本已經到15了，所以我有修改這個。</p>\n</li>\n<li>\n<p>改完ios版本後，不知道為什麼就跳出讓我<code>修正AppIcon</code>的指示：<strong>少了1024x1024的軟體圖示</strong>，所以我就很簡單的把原本就存在的60x60的圖示，用預覽程式調整大小另存，並且修正資料夾內的contents.json。</p>\n</li>\n</ul>\n<p>　<br>\n　</p>\n<p>就這樣，<code>所有的驚嘆號</code>都被修正了，之後我開始嘗試直接將APP build進我的i7手機裡，但是結果不行。</p>\n<blockquote>\n<p><strong>Unable to prepare iPhone for development</strong><br>\nPlease check the connection to the device, and review all errors in the Devices and Simulators window.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/F5fbJkC.png\" alt=\"\"></p>\n<p>我的手機是iPhone 7，我本來以為，是xcode 13跟i7不合，但之後改成先使用simulator，i8跟i7都行，<del>就是app只能看到介面，按按鍵計算機沒反應</del>(是本來App就只有做介面的樣子)。</p>\n<p>　<br>\n　<br>\n　</p>\n<p>我當時就有幾個懷疑：</p>\n<ol>\n<li>我的<code>usbTypeA母 轉 usbTypeC公</code> 不支援數據傳輸，但這不可能，因為我有用這個轉接頭傳輸資料進隨身碟過</li>\n<li>iPhone 7就是不支援，但是Simulator可以，所以先放著</li>\n<li>\n<strong>我Xcode是登入新的apple id(而且已登記為developer personal team)，但是我的手機是我原本的apple id，需要改成新的apple id，才能寫入</strong>\n</li>\n<li>我手機ios現在有15.1的版本可更新，需要更新才能使用</li>\n</ol>\n<p>　</p>\n<p>我的打算是先把手機的apple id登出，改成新的apple id試。如果這步不行的話，我就會先改回apple id，然後執行ios版本更新，再分別在原本apple id與新apple id再各試一次。</p>\n<p>　</p>\n<hr>\n<p>　</p>\n<p><strong>ok，結論是apple id 的問題，我做了3.的更動後，就可以順利的把APP build進手機了。</strong></p>\n<p>　<br>\n　</p>\n<p>但是打開程式遇到一個問題：</p>\n<blockquote>\n<p>尚未信任開發者</p>\n</blockquote>\n<p>他說我可以在設定中允許使用這些APP，我根據Apple官網的教學 <a href=\"https://support.apple.com/zh-tw/HT204460\" target=\"_blank\" rel=\"noreferrer noopener\">https://support.apple.com/zh-tw/HT204460</a> 指示操作，</p>\n<blockquote>\n<p>如果你沒有在手機裡看到<code>描述檔</code>的選項，應該跟我一樣是寫<code>VPN與裝置管理</code>，點進去按信任就行。</p>\n</blockquote>\n<p>　<br>\n　</p>\n<p>最後一個補充：</p>\n<ul>\n<li>我本身手機之前就有按照別的教學安裝developer，並且有把這個APP登入新創的apple id，所以如果像我上面那樣做還是寫不進去，可以試試看這個</li>\n<li>我中途有遇到APP寫不進去手機，是因為有程式卡住它，我重新開機手機後就解決這個問題。</li>\n</ul>\n<p>　<br>\n　</p>\n<p><em>Bug幸運5會持續為大家帶來充滿bug的解決方式</em></p>\n<p>　</p>\n<p>參考：<br>\n<a href=\"https://mrmad.com.tw/xcode-code-app\" target=\"_blank\" rel=\"noreferrer noopener\">【教學】免年費開發者帳號 透過Xcode編譯APP實體裝置執行</a> by 瘋先生<br>\n<a href=\"https://support.apple.com/zh-tw/HT204460\" target=\"_blank\" rel=\"noreferrer noopener\">https://support.apple.com/zh-tw/HT204460</a><br>\n<a href=\"https://developer.apple.com/forums/thread/654407\" target=\"_blank\" rel=\"noreferrer noopener\">https://developer.apple.com/forums/thread/654407</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-05 23:45:01",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3902",
        "series_name": "從零開始了解Unity或Unreal Engine應用於VR軟體開發",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>繼前天吧，我把新創apple id加入developer，然後沒付費的狀態，這個時候好像是叫做personal team的狀態。</p>\n<p>　</p>\n<p>在github找到個，我先選了計算機小程式試試看。</p>\n<p></p>\n<p>　</p>\n<p>我把程式下載下來，按照 說的做。</p>\n<p><br/>\n<br/>\n</p>\n<p><code>所做的差別</code>：</p>\n<ul>\n<li>\n<p>因為這個示範App，他製作的時候是ios13，而我的ios版本已經到15了，所以我有修改這個。</p>\n</li>\n<li>\n<p>改完ios版本後，不知道為什麼就跳出讓我<code>修正AppIcon</code>的指示：<strong>少了1024x1024的軟體圖示</strong>，所以我就很簡單的把原本就存在的60x60的圖示，用預覽程式調整大小另存，並且修正資料夾內的contents.json。</p>\n</li>\n</ul>\n<p>　<br/>\n　</p>\n<p>就這樣，<code>所有的驚嘆號</code>都被修正了，之後我開始嘗試直接將APP build進我的i7手機裡，但是結果不行。</p>\n<blockquote>\n<p><strong>Unable to prepare iPhone for development</strong><br/>\nPlease check the connection to the device, and review all errors in the Devices and Simulators window.</p>\n</blockquote>\n<p></p>\n<p>我的手機是iPhone 7，我本來以為，是xcode 13跟i7不合，但之後改成先使用simulator，i8跟i7都行，<del>就是app只能看到介面，按按鍵計算機沒反應</del>(是本來App就只有做介面的樣子)。</p>\n<p>　<br/>\n　<br/>\n　</p>\n<p>我當時就有幾個懷疑：</p>\n<ol>\n<li>我的<code>usbTypeA母 轉 usbTypeC公</code> 不支援數據傳輸，但這不可能，因為我有用這個轉接頭傳輸資料進隨身碟過</li>\n<li>iPhone 7就是不支援，但是Simulator可以，所以先放著</li>\n<li>\n<strong>我Xcode是登入新的apple id(而且已登記為developer personal team)，但是我的手機是我原本的apple id，需要改成新的apple id，才能寫入</strong>\n</li>\n<li>我手機ios現在有15.1的版本可更新，需要更新才能使用</li>\n</ol>\n<p>　</p>\n<p>我的打算是先把手機的apple id登出，改成新的apple id試。如果這步不行的話，我就會先改回apple id，然後執行ios版本更新，再分別在原本apple id與新apple id再各試一次。</p>\n<p>　</p>\n<hr/>\n<p>　</p>\n<p><strong>ok，結論是apple id 的問題，我做了3.的更動後，就可以順利的把APP build進手機了。</strong></p>\n<p>　<br/>\n　</p>\n<p>但是打開程式遇到一個問題：</p>\n<blockquote>\n<p>尚未信任開發者</p>\n</blockquote>\n<p>他說我可以在設定中允許使用這些APP，我根據Apple官網的教學  指示操作，</p>\n<blockquote>\n<p>如果你沒有在手機裡看到<code>描述檔</code>的選項，應該跟我一樣是寫<code>VPN與裝置管理</code>，點進去按信任就行。</p>\n</blockquote>\n<p>　<br/>\n　</p>\n<p>最後一個補充：</p>\n<ul>\n<li>我本身手機之前就有按照別的教學安裝developer，並且有把這個APP登入新創的apple id，所以如果像我上面那樣做還是寫不進去，可以試試看這個</li>\n<li>我中途有遇到APP寫不進去手機，是因為有程式卡住它，我重新開機手機後就解決這個問題。</li>\n</ul>\n<p>　<br/>\n　</p>\n<p><em>Bug幸運5會持續為大家帶來充滿bug的解決方式</em></p>\n<p>　</p>\n<p>參考：<br/>\n by 瘋先生<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "繼前天吧，我把新創apple id加入developer，然後沒付費的狀態，這個時候好像是叫做personal team的狀態。\n　\n在github找到個，我先選了計算機小程式試試看。\n\n　\n我把程式下載下來，按照 說的做。\n\n\n\n所做的差別：\n\n\n因為這個示範App，他製作的時候是ios13，而我的ios版本已經到15了，所以我有修改這個。\n\n\n改完ios版本後，不知道為什麼就跳出讓我修正AppIcon的指示：少了1024x1024的軟體圖示，所以我就很簡單的把原本就存在的60x60的圖示，用預覽程式調整大小另存，並且修正資料夾內的contents.json。\n\n\n　\n　\n就這樣，所有的驚嘆號都被修正了，之後我開始嘗試直接將APP build進我的i7手機裡，但是結果不行。\n\nUnable to prepare iPhone for development\nPlease check the connection to the device, and review all errors in the Devices and Simulators window.\n\n\n我的手機是iPhone 7，我本來以為，是xcode 13跟i7不合，但之後改成先使用simulator，i8跟i7都行，就是app只能看到介面，按按鍵計算機沒反應(是本來App就只有做介面的樣子)。\n　\n　\n　\n我當時就有幾個懷疑：\n\n我的usbTypeA母 轉 usbTypeC公 不支援數據傳輸，但這不可能，因為我有用這個轉接頭傳輸資料進隨身碟過\niPhone 7就是不支援，但是Simulator可以，所以先放著\n\n我Xcode是登入新的apple id(而且已登記為developer personal team)，但是我的手機是我原本的apple id，需要改成新的apple id，才能寫入\n\n我手機ios現在有15.1的版本可更新，需要更新才能使用\n\n　\n我的打算是先把手機的apple id登出，改成新的apple id試。如果這步不行的話，我就會先改回apple id，然後執行ios版本更新，再分別在原本apple id與新apple id再各試一次。\n　\n\n　\nok，結論是apple id 的問題，我做了3.的更動後，就可以順利的把APP build進手機了。\n　\n　\n但是打開程式遇到一個問題：\n\n尚未信任開發者\n\n他說我可以在設定中允許使用這些APP，我根據Apple官網的教學  指示操作，\n\n如果你沒有在手機裡看到描述檔的選項，應該跟我一樣是寫VPN與裝置管理，點進去按信任就行。\n\n　\n　\n最後一個補充：\n\n我本身手機之前就有按照別的教學安裝developer，並且有把這個APP登入新創的apple id，所以如果像我上面那樣做還是寫不進去，可以試試看這個\n我中途有遇到APP寫不進去手機，是因為有程式卡住它，我重新開機手機後就解決這個問題。\n\n　\n　\nBug幸運5會持續為大家帶來充滿bug的解決方式\n　\n參考：\n by 瘋先生",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "繼 前天 吧 ， 我 把 新創 apple\nid 加入 developer ， 然後 沒 付費 的 狀態 ， 這個 時候 好像 是 叫做 personal\nteam 的 狀態 。\n在 github 找到 個 ， 我 先選 了 計算機 小 程式 試試看 。\n我 把 程式 下載 下來 ， 按照\n說 的 做 。\n所 做 的 差別 ：\n因為 這個 示範 App ， 他 製作 的 時候 是 ios13 ， 而 我 的 ios 版本 已經 到 15 了 ， 所以 我 有 修改 這個 。\n改完 ios 版本 後 ， 不 知道 為 什麼 就 跳出 讓 我 修正 AppIcon 的 指示 ： 少 了 1024x1024 的 軟體 圖示 ， 所以 我 就 很 簡單 的 把 原本 就 存在 的 60x60 的 圖示 ， 用 預覽 程式 調整 大小 另存 ， 並且 修正 資料夾 內 的 contents . json 。\n就 這樣 ， 所有 的 驚嘆號 都 被 修正 了 ， 之後 我 開始 嘗試 直接 將 APP\nbuild 進 我 的 i7 手機 裡 ， 但是 結果 不行 。\nUnable\nto\nprepare\niPhone\nfor\ndevelopment\nPlease\ncheck\nthe\nconnection\nto\nthe\ndevice ,\nand\nreview\nall\nerrors\nin\nthe\nDevices\nand\nSimulators\nwindow .\n我 的 手機 是 iPhone\n7 ， 我 本來 以為 ， 是 xcode\n13 跟 i7 不合 ， 但 之後 改成 先 使用 simulator ， i8 跟 i7 都行 ， 就是 app 只能 看到 介面 ， 按 按鍵 計算機 沒 反應 ( 是 本來 App 就 只有 做 介面 的 樣子 ) 。\n我 當時 就 有 幾個 懷疑 ：\n我 的 usbTypeA 母\n轉\nusbTypeC 公\n不 支援 數據傳輸 ， 但 這不 可能 ， 因為 我 有用 這個 轉接頭 傳輸 資料 進 隨身 碟過\niPhone\n7 就是 不 支援 ， 但是 Simulator 可以 ， 所以 先放著\n我 Xcode 是 登入 新 的 apple\nid ( 而且 已登記 為 developer\npersonal\nteam ) ， 但是 我 的 手機 是 我 原本 的 apple\nid ， 需要 改成 新 的 apple\nid ， 才能 寫入\n我 手機 ios 現在 有 15.1 的 版本 可 更新 ， 需要 更新 才能 使用\n我 的 打算 是 先 把 手機 的 apple\nid 登出 ， 改成 新 的 apple\nid 試 。 如果 這步 不行 的話 ， 我 就 會 先 改回 apple\nid ， 然後 執行 ios 版本 更新 ， 再 分別 在 原本 apple\nid 與 新 apple\nid 再 各試 一次 。\nok ， 結論 是 apple\nid\n的 問題 ， 我 做 了 3 . 的 更動 後 ， 就 可以 順利 的 把 APP\nbuild 進 手機 了 。\n但是 打開 程式 遇到 一個 問題 ：\n尚未 信任 開發者\n他 說 我 可以 在 設定 中 允許 使用 這些 APP ， 我 根據 Apple 官網 的 教學\n指示 操作 ，\n如果 你 沒有 在 手機 裡 看到 描述 檔 的 選項 ， 應該 跟 我 一樣 是 寫 VPN 與 裝置 管理 ， 點 進去 按 信任 就行 。\n最後 一個 補充 ：\n我 本身 手機 之前 就 有 按照 別的 教學 安裝 developer ， 並且 有 把 這個 APP 登入 新創 的 apple\nid ， 所以 如果 像 我 上面 那樣 做 還是 寫 不 進去 ， 可以 試試看 這個\n我 中途 有 遇到 APP 寫 不 進去 手機 ， 是 因為 有 程式 卡住 它 ， 我 重新 開機 手機 後 就 解決 這個 問題 。\nBug 幸運 5 會 持續 為 大家 帶來 充滿 bug 的 解決 方式\n參考 ：\nby\n瘋 先生",
        "word_seg_processed_content_text": "繼 前天 新創 apple\nid developer 沒 付費 狀態 好像 personal\nteam 狀態\ngithub 找到 先選 計算機 程式 試試看\n程式 下載\n說 做\n做 差別\n示範 app 製作 ios13 ios 版本 15 修改\n改完 ios 版本 跳出 修正 appicon 指示 少 1024x1024 軟體 圖示 簡單 原本 60x60 圖示 預覽 程式 調整 大小 另存 修正 資料夾 內 contents json\n驚嘆號 修正 嘗試 app\nbuild 進 i7 手機 裡 不行\nunable\n\nprepare\niphone\n\ndevelopment\nplease\ncheck\n\nconnection\n\n\ndevice\n\nreview\n\nerrors\n\n\ndevices\n\nsimulators\nwindow\n手機 iphone\n7 本來 xcode\n13 i7 不合 改成 先 simulator i8 i7 都行 app 只能 介面 按鍵 計算機 沒 本來 app 做 介面 樣子\n幾個 懷疑\nusbtypea 母\n轉\nusbtypec 公\n支援 數據傳輸 這不 有用 轉接頭 傳輸 資料 進 隨身 碟過\niphone\n7 支援 simulator 先放著\nxcode 登入 新 apple\nid 已登記 developer\npersonal\nteam 手機 原本 apple\nid 改成 新 apple\nid 才能 寫入\n手機 ios 15.1 版本 更新 更新 才能\n打算 先 手機 apple\nid 登出 改成 新 apple\nid 試 這步 不行 會 先 改回 apple\nid 執行 ios 版本 更新 原本 apple\nid 新 apple\nid 各試\nok 結論 apple\nid\n做 3 更動 順利 app\nbuild 進 手機\n打開 程式\n尚未 信任 開發者\n說 設定 中 app apple 官網 教學\n指示 操作\n手機 裡 描述 檔 選項 寫 vpn 裝置 管理 點 進去 信任 就行\n補充\n本身 手機 教學 安裝 developer app 登入 新創 apple\nid 做 寫 進去 試試看\n中途 app 寫 進去 手機 程式 卡住 開機 手機 解決\nbug 幸運 5 會 持續 帶來 充滿 bug 解決 方式\n參考\n\n瘋",
        "extracted_keywords": [
            "apple",
            "app",
            "appicon",
            "iphone",
            "軟體"
        ],
        "extracted_keywords_phrases": [
            "app apple",
            "id apple",
            "apple id",
            "本來 app",
            "apple 官網"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282469": {
        "href": "https://ithelp.ithome.com.tw/articles/10282469",
        "title": "原來Arduino開發板的 腳位與程式內數字的對應 會隨著開發商不同而改變?",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>我本來參考的Nano腳位(<a href=\"https://www.makerguides.com/arduino-nano/#Arduino%20Nano%20pinout\" target=\"_blank\" rel=\"noreferrer noopener\">連結</a>)，他板子上寫的跟程式內的數字差了3號，也就是說如果板子上是D8的腳位，那程式裡要寫11。</p>\n<p>　<br>\n　</p>\n<p>然後這張圖是我<code>目前用我買的副廠板所試出來的腳位</code>，目前我知道板子上的digital<strong>腳位</strong>名稱跟程式內要寫的<strong>數字</strong>是相對應的<br>\n<img src=\"https://i.imgur.com/TtICzrx.png\" alt=\"\"></p>\n<blockquote>\n<p>可以說跟我原本參考的腳位完全不同，只能說我前幾天試成功的那次是蝦成功的，剛好插到對應的腳位囧。</p>\n</blockquote>\n<p>　<br>\n　<br>\n　</p>\n<p>我下面附個副廠板說明書，這些就是我能從說明書上得到的訊息:</p>\n<p><img src=\"https://i.imgur.com/9QrGVg8.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/P7vK59V.jpg\" alt=\"\"></p>\n<ul>\n<li>\n<p>現在能看懂<code>Pin 13 LED (Yellow)</code>的意思，就是我上面<strong>自己紀錄的腳位圖最下面</strong>所說的，它的訊號跟D13是相同的。但是這邊我抓到個小Bug(?)，在我的板子上的這個燈號是Red的，不是Yellow。</p>\n</li>\n<li>\n<p>我本來想試試看<code>RX0</code>、<code>TX1</code>是不是能等於D0跟D1，但我剛插上去:</p>\n<ul>\n<li>RX0會讓麵包板上的LED常亮，且板子上4個LED的最右邊也寫著RX的燈號也是常亮</li>\n<li>TX1則是會讓麵包板上的LED閃爍，然後板子上右2的LED也會閃爍</li>\n<li>\n<em>因為這樣看不出Blink能不能成功，所以我就先放棄了</em>\n</li>\n</ul>\n</li>\n</ul>\n<p>　<br>\n　</p>\n<p>搞得我現在也不知道，究竟是我參考的那個文章，他也是副廠板，然後設定很奇怪，還是我買的這個副廠板跟一般的不同@@但總而言之，試出來就好。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-05 01:05:27",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3904",
        "series_name": "來解數學跟刷圖論跟幾何程式題或者我突然想研究的主題",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>我本來參考的Nano腳位()，他板子上寫的跟程式內的數字差了3號，也就是說如果板子上是D8的腳位，那程式裡要寫11。</p>\n<p>　<br/>\n　</p>\n<p>然後這張圖是我<code>目前用我買的副廠板所試出來的腳位</code>，目前我知道板子上的digital<strong>腳位</strong>名稱跟程式內要寫的<strong>數字</strong>是相對應的<br/>\n</p>\n<blockquote>\n<p>可以說跟我原本參考的腳位完全不同，只能說我前幾天試成功的那次是蝦成功的，剛好插到對應的腳位囧。</p>\n</blockquote>\n<p>　<br/>\n　<br/>\n　</p>\n<p>我下面附個副廠板說明書，這些就是我能從說明書上得到的訊息:</p>\n<p></p>\n<p></p>\n<ul>\n<li>\n<p>現在能看懂<code>Pin 13 LED (Yellow)</code>的意思，就是我上面<strong>自己紀錄的腳位圖最下面</strong>所說的，它的訊號跟D13是相同的。但是這邊我抓到個小Bug(?)，在我的板子上的這個燈號是Red的，不是Yellow。</p>\n</li>\n<li>\n<p>我本來想試試看<code>RX0</code>、<code>TX1</code>是不是能等於D0跟D1，但我剛插上去:</p>\n<ul>\n<li>RX0會讓麵包板上的LED常亮，且板子上4個LED的最右邊也寫著RX的燈號也是常亮</li>\n<li>TX1則是會讓麵包板上的LED閃爍，然後板子上右2的LED也會閃爍</li>\n<li>\n<em>因為這樣看不出Blink能不能成功，所以我就先放棄了</em>\n</li>\n</ul>\n</li>\n</ul>\n<p>　<br/>\n　</p>\n<p>搞得我現在也不知道，究竟是我參考的那個文章，他也是副廠板，然後設定很奇怪，還是我買的這個副廠板跟一般的不同@@但總而言之，試出來就好。</p>\n<br/>\n</div>",
        "content_text": "我本來參考的Nano腳位()，他板子上寫的跟程式內的數字差了3號，也就是說如果板子上是D8的腳位，那程式裡要寫11。\n　\n　\n然後這張圖是我目前用我買的副廠板所試出來的腳位，目前我知道板子上的digital腳位名稱跟程式內要寫的數字是相對應的\n\n\n可以說跟我原本參考的腳位完全不同，只能說我前幾天試成功的那次是蝦成功的，剛好插到對應的腳位囧。\n\n　\n　\n　\n我下面附個副廠板說明書，這些就是我能從說明書上得到的訊息:\n\n\n\n\n現在能看懂Pin 13 LED (Yellow)的意思，就是我上面自己紀錄的腳位圖最下面所說的，它的訊號跟D13是相同的。但是這邊我抓到個小Bug(?)，在我的板子上的這個燈號是Red的，不是Yellow。\n\n\n我本來想試試看RX0、TX1是不是能等於D0跟D1，但我剛插上去:\n\nRX0會讓麵包板上的LED常亮，且板子上4個LED的最右邊也寫著RX的燈號也是常亮\nTX1則是會讓麵包板上的LED閃爍，然後板子上右2的LED也會閃爍\n\n因為這樣看不出Blink能不能成功，所以我就先放棄了\n\n\n\n\n　\n　\n搞得我現在也不知道，究竟是我參考的那個文章，他也是副廠板，然後設定很奇怪，還是我買的這個副廠板跟一般的不同@@但總而言之，試出來就好。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "我 本來 參考 的 Nano 腳位 ( ) ， 他 板子 上 寫 的 跟 程式 內 的 數字 差 了 3 號 ， 也就是說 如果 板子 上 是 D8 的 腳位 ， 那 程式 裡要 寫 11 。\n然後 這張 圖 是 我 目前 用 我 買 的 副 廠板 所 試出來 的 腳位 ， 目前 我 知道 板子 上 的 digital 腳位 名稱 跟 程式 內要 寫 的 數字 是 相對 應 的\n可以 說 跟 我 原本 參考 的 腳位 完全 不同 ， 只能 說 我 前 幾天 試 成功 的 那次 是 蝦 成功 的 ， 剛好 插 到 對應 的 腳位 囧 。\n我 下面 附個 副 廠板 說明書 ， 這些 就是 我能 從 說明書 上 得到 的 訊息 :\n現在 能看懂 Pin\n13\nLED\n( Yellow ) 的 意思 ， 就是 我 上面 自己 紀錄 的 腳 位圖 最 下面 所說 的 ， 它 的 訊號 跟 D13 是 相同 的 。 但是 這邊 我 抓 到 個 小 Bug ( ? ) ， 在 我 的 板子 上 的 這個 燈號 是 Red 的 ， 不是 Yellow 。\n我 本來 想 試試看 RX0 、 TX1 是不是 能 等於 D0 跟 D1 ， 但 我剛 插上去 :\nRX0 會 讓 麵 包板 上 的 LED 常亮 ， 且 板子 上 4 個 LED 的 最 右邊 也 寫 著 RX 的 燈號 也 是 常亮\nTX1 則是 會 讓 麵 包板 上 的 LED 閃爍 ， 然後 板子 上右 2 的 LED 也 會 閃爍\n因為 這樣 看不出 Blink 能 不能 成功 ， 所以 我 就 先 放棄 了\n搞 得 我 現在 也 不 知道 ， 究竟 是 我 參考 的 那個 文章 ， 他 也 是 副 廠板 ， 然後 設定 很 奇怪 ， 還是 我 買 的 這個 副 廠板 跟 一般 的 不同 @ @ 但 總而言之 ， 試出來 就 好 。",
        "word_seg_processed_content_text": "本來 參考 nano 腳位 板子 寫 程式 內 數字 差 3 號 也就是說 板子 d8 腳位 程式 裡要 寫 11\n這張 圖 買 副 廠板 試出來 腳位 板子 digital 腳位 名稱 程式 內要 寫 數字 應\n說 原本 參考 腳位 只能 說 前 幾天 試 成功 那次 蝦 成功 剛好 插 腳位 囧\n附個 副 廠板 說明書 我能 說明書 訊息\n能看懂 pin\n13\nled\nyellow 紀錄 腳 位圖 所說 訊號 d13 抓 bug 板子 燈號 red yellow\n本來 想 試試看 rx0 tx1 等於 d0 d1 我剛 插上去\nrx0 會 麵 包板 led 常亮 板子 4 led 右邊 寫 rx 燈號 常亮\ntx1 則是 會 麵 包板 led 閃爍 板子 上右 2 led 會 閃爍\n看不出 blink 成功 先 放棄\n搞 究竟 參考 文章 副 廠板 設定 奇怪 買 副 廠板 試出來",
        "extracted_keywords": [
            "腳位",
            "廠板",
            "nano",
            "板子",
            "包板"
        ],
        "extracted_keywords_phrases": [
            "nano 腳位",
            "腳位 程式",
            "腳位 板子",
            "d8 腳位",
            "參考 腳位"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282450": {
        "href": "https://ithelp.ithome.com.tw/articles/10282450",
        "title": "EP 32: TopStore App with .NET Multi-platform App UI (MAUI)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>Hello, 各位 <strong>iT邦幫忙</strong> 的粉絲們大家好~~~</p>\n<p>本篇是 <strong>Re: 從零開始用 Xamarin 技術來複刻過去開發的一個 App: TopStore</strong> 系列文的 EP32。</p>\n<p>而本篇 EP32 要來介紹前面整個 EP1~EP21 所完成的雙平台 TopStore App 在利用 Xamarin.Forms 所完成的部分，轉換成目前接下來在 .NET 開發技術中頗受矚目 .NET Multi-platform App UI (MAUI) 的撰寫方式唷!</p>\n<p><img src=\"https://docs.microsoft.com/en-us/dotnet/maui/media/what-is-maui/maui.png\" alt=\"MAUI\"></p>\n<p>首先若要將 Xamarin.Forms 轉換成 .NET MAUI 的撰寫，有幾個需考量的條件:</p>\n<ol>\n<li>App 開發中利用到的 Xamarin.Forms 第三方套件是否已經支援 <strong>.NET 6 / MAUI</strong>。</li>\n<li>其 App 成長性是否需要遷移至 MAUI 之必要性來做發展。</li>\n</ol>\n<p>.NET 6 是微軟接下來<a href=\"https://dotnet.microsoft.com/platform/support/policy\" target=\"_blank\" rel=\"noreferrer noopener\">長期支援的開發技術(LTS)</a> 的 .NET 版本，而 .NET MAUI 並不會隨著 .NET 6 正式釋出的(2021/11/8) 時間點而正式釋出，而是可能在 2022 年的 Q2 才有機會正式釋出(有興趣的朋友可以參考 <a href=\"https://github.com/dotnet/maui/projects/11\" target=\"_blank\" rel=\"noreferrer noopener\">GitHub 的 Projects</a>)。</p>\n<p>但若在這個時間點要完成 Xamarin.Forms 專案遷移至 .NET MAUI 的話，那本篇就來介紹介紹該怎麼個處理法囉~~~</p>\n<hr>\n<p>如果以撰寫本篇 EP32 的時間點來看，最新釋出的是 \"<a href=\"https://docs.microsoft.com/en-us/visualstudio/releases/2022/release-notes-preview#17.0.0-pre.7.0\" target=\"_blank\" rel=\"noreferrer noopener\">Visual Studio 2022 version 17.0 RC3 and Preview 7</a>\" 而 <a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9\" target=\"_blank\" rel=\"noreferrer noopener\">MAUI 則為 \"Preview 9\"</a>。</p>\n<p>而或許有捧友會問，那怎只有 EP1~EP21 呢?</p>\n<p>如果去看看 EP22 就會知道從這篇開始在介紹的是使用了 <a href=\"https://www.nuget.org/packages/sqlite-net-pcl\" target=\"_blank\" rel=\"noreferrer noopener\">sqlite-net-pcl 這個 Nuget 套件</a> 處理 SQLite 的介紹，而 <strong>sqlite-net-pcl</strong> 套件作者有在 GitHub 上<a href=\"https://github.com/praeclarum/sqlite-net/issues/1056\" target=\"_blank\" rel=\"noreferrer noopener\">說明會在 .NET MAUI 正式釋出時支援</a>。</p>\n<blockquote>\n<p>2021/11/13 補充更新:</p>\n<p>若是要在 MAUI 專案當中使用 SQLite，可以考慮微軟官方伴隨 .NET 6 所釋出的 EF Core for SQLite。</p>\n<p>參考文件:</p>\n<ol>\n<li>[微軟文件] 在 Xamarin 當中使用 EFCore: <a href=\"https://docs.microsoft.com/en-us/ef/core/get-started/xamarin\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://docs.microsoft.com/en-us/ef/core/get-started/xamarin\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.microsoft.com/en-us/ef/core/get-started/xamarin</a>\n</li>\n<li>EF Core 的 GitHub: <a href=\"https://github.com/dotnet/efcore\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://github.com/dotnet/efcore\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/dotnet/efcore</a>\n</li>\n<li>EF Core for SQLite 的 Nuget:  <a href=\"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Sqlite</a>\n</li>\n</ol>\n</blockquote>\n<p>若如果已經裝好 Visual Stuido 2022 version 17.0 RC3 and Preview 7 的版本，理論上記得再透過 Visual Studio Installer 安裝的時候，記得要勾選 .NET MAUI 的 \"個別元件\" 安裝，就可以在 Visual Studio 2022 當中選擇到 MAUI 的專案範本。</p>\n<p><img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/01-1_watermark.jpg\" alt=\"01-1\"></p>\n<p>新增專案。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/01-2_watermark.jpg\" alt=\"01-2\"></p>\n<p>在專案範本中搜尋 \"MAUI\"。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/02-1_watermark.jpg\" alt=\"02-1\"></p>\n<p><img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/02-2_watermark.jpg\" alt=\"02-2\"></p>\n<p>建立 \"MAUI\" 行動應用設定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/03_watermark.jpg\" alt=\"03\"></p>\n<p>Visual Studio 2022 建立好 MAUI 的專案範本。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/04_watermark.jpg\" alt=\"04\"></p>\n<p>在預設的空白專案範本當中會有 MainPage.xaml 的預設頁面。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/05-1_watermark.jpg\" alt=\"05-1\"></p>\n<p>要把 TopStore App 的 XAML 放進來，所以將這個 MainPage.xaml 刪除。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/05-2_watermark.jpg\" alt=\"05-2\"></p>\n<p>\"刪除\" 完畢。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/05-3_watermark.jpg\" alt=\"05-3\"></p>\n<p>接著把 EP21 的 TopStore App 在 Xamarin.Forms 專案中的程式 \"複製\"(除了 *.csproj、App.xaml/.cs、AssemblyInfo.cs <strong>不複製</strong>，其他皆複選後複製)。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/06-1_watermark.jpg\" alt=\"06-1\"></p>\n<p>在 MAUI 的專案資料夾當中直接 \"貼上\"。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/06-2_watermark.jpg\" alt=\"06-2\"></p>\n<p>\"貼上\" 完成後檔案總管的呈現。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/06-3_watermark.jpg\" alt=\"06-3\"></p>\n<p>\"貼上\" 完成後 Visaul Studio 2022 的方案總管呈現。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/06-4_watermark.jpg\" alt=\"06-4\"></p>\n<p>開啟文字替換窗格，並將替換範圍設定為整個方案。</p>\n<p>在文字替換窗格當中將 **「xmlns=\"<a href=\"http://xamarin.com/schemas/2014/forms%22%E3%80%8D**\" target=\"_blank\" rel=\"noreferrer noopener\">http://xamarin.com/schemas/2014/forms\"」**</a> 點選 \"全部取代\" 替換成 **「xmlns=\"<a href=\"http://schemas.microsoft.com/dotnet/2021/maui%22%E3%80%8D**%E3%80%82\" target=\"_blank\" rel=\"noreferrer noopener\">http://schemas.microsoft.com/dotnet/2021/maui\"」**。</a><br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-1-1_watermark.jpg\" alt=\"07-1-1\"></p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 6 個替換，確定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-1-2_watermark.jpg\" alt=\"07-1-2\"></p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Forms.Xaml」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Controls.Xaml\"」</strong>。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-2-1_watermark.jpg\" alt=\"07-2-1\"></p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 4 個替換，確定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-2-2_watermark.jpg\" alt=\"07-2-2\"></p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Forms」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Controls」</strong>。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-3-1_watermark.jpg\" alt=\"07-3-1\"></p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 13 個替換，確定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-3-2_watermark.jpg\" alt=\"07-3-2\"><br>\n(其中有兩個替換是在 OrdersPage 與 SettingsPage 的 XAML 標記當中，有使用到 Label 標記所設定 Text 的顯示文字，最後記得再去改一下。)</p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Essentials」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Essentials」</strong>。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-4-1_watermark.jpg\" alt=\"07-4-1\"></p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 1 個替換，確定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/07-4-2_watermark.jpg\" alt=\"07-4-2\"></p>\n<p>接著打開 App.xaml 將原本 ResourceDictionary 的 XAML 標記內部包含的 XAML 標記圈選後刪除。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-1_watermark.jpg\" alt=\"08-1\"></p>\n<p>並貼上原本在 TopStore App 的 Xamarin.Forms 當中的 App.xaml 所撰寫的 Resource，並且補上其所需引用的 XAML 命名空間。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-2_watermark.jpg\" alt=\"08-2\"></p>\n<p>繼續在 Application.Resources 的 XAML 標記之後，撰寫 Application.MainPage 的 XAML 標記，並且在其中設計 Shell 的 XAML 標記。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-3_watermark.jpg\" alt=\"08-3\"></p>\n<p>完成後，打開 AppShell.xaml 並將當中撰寫 TabBar 的 XAML 標記複製。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-4-1_watermark.jpg\" alt=\"08-4-1\"></p>\n<p>貼入剛剛在 App.xaml 中所設計的 Shell 的 XAML 標記當中。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-4-2_watermark.jpg\" alt=\"08-4-2\"></p>\n<p>並補上其所需引用的 XAML 命名空間。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/08-4-3_watermark.jpg\" alt=\"08-4-3\"></p>\n<p>打開 App.xaml.cs 將其中的 MainPage 指定 MainPage 產生的程式碼給移除。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/09-1_watermark.jpg\" alt=\"09-1\"></p>\n<p>將原本 AppShell.xaml.cs 當中的路由指定，設定到此。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/09-2_watermark.jpg\" alt=\"09-2\"></p>\n<p>接著在 Visual Studio 的方案總管當中，把 Assets 資料夾當中的 FontAwesome5.otf 檔案搬移到 Resources 底下的 Fonts 資料夾。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/10-1_watermark.jpg\" alt=\"10-1\"></p>\n<p>搬移完成。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/10-2_watermark.jpg\" alt=\"10-2\"></p>\n<p>若確定沒問題，就可以把 Assets 資料夾與 AppShell.xaml 檔案刪除。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/10-3_watermark.jpg\" alt=\"10-3\"></p>\n<p>再打開 MauiProgram.cs 檔案，並找到其中 .ConfigureFonts() 的部分。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/10-4-1_watermark.jpg\" alt=\"10-4-1\"></p>\n<p>將其原本設定的字型檔，換成 TopStore App 當中所用的 FontAwesome5.otf。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/10-4-2_watermark.jpg\" alt=\"10-4-2\"></p>\n<p>接著在相容性當中透過右鍵選單選取 \"新增參考\"。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/11-1_watermark.jpg\" alt=\"11-1\"></p>\n<p>選取 Maui.Plugin.BaseBindingLibrary 的 dll。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/11-2_watermark.jpg\" alt=\"11-2\"></p>\n<p>把先前透過 Nuget 安裝使用的 Xam.Plugin.BaseBindingLibrary 替換成 Maui.Plugin.BaseBindingLibrary。加入該 dll 的參考後，會看到在各個平台下的組件都增加了 \"Maui.Plugin.BaseBindingLibrary\"。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/11-3_watermark.jpg\" alt=\"11-3\"><br>\n(之後會另外發布此 DLL 透過 Nuget 安裝的版本)</p>\n<p>在文字替換窗格當中將 <strong>Xam.Plugin</strong> 點選 \"全部取代\" 替換成 <strong>Maui.Plugin</strong>。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/11-4-1_watermark.jpg\" alt=\"11-4-1\"></p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 2 個替換，確定。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/11-4-2_watermark.jpg\" alt=\"11-4-2\"></p>\n<p>以上完成所以編輯後，會因為編譯快取的問題而無法讓 XAML 跟 .cs 順利整合，目前的作法是關閉 Visual Studio 並重新開啟專案。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-1_watermark.jpg\" alt=\"12-1\"></p>\n<p>關閉 Visual Studio 時記得儲存所有變更。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-2_watermark.jpg\" alt=\"12-2\"></p>\n<p>再次重新開啟此 TopStore App 的 MAUI 專案，就沒有相關的錯誤訊息發生。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-3_watermark.jpg\" alt=\"12-3\"></p>\n<p>在方案總管當中透過選取右鍵選單的 \"重建方案\" 選項。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-4-1_watermark.jpg\" alt=\"12-4-1\"></p>\n<p>等待一段時間後，全部建置成功。<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-4-2_watermark.jpg\" alt=\"12-4-2\"></p>\n<p>在上圖的截圖當中，眼尖的捧友應該會注意到 Visual Studio 是有跟 Mac 做連線的，所以按照目前 MAUI 的官方預設建置的平台，會建置 iOS、Android、macOS、Windows 的應用程式。</p>\n<p><strong>iOS Simulator</strong>:<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-1_MAUI-iOS-Simulator_watermark.jpg\" alt=\"12-5-1\"></p>\n<p><strong>Android Emulator</strong>:<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-2_MAUI-Android-Emulator_watermark.jpg\" alt=\"12-5-2 Android-Emulator\"><br>\n(看來.NET MAUI for Android 還有待微軟官方努力改進)</p>\n<blockquote>\n<p>2022/02/13 補充更新:<br>\n在 MAUI Preview 12 當中已能正常顯示 List 的客製化項目內容:<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-2_MAUI-Android-Emulator_watermark_20220213.jpg\" alt=\"12-5-2 Android-Emulator\"></p>\n</blockquote>\n<blockquote>\n<p>2022/04/16 補充更新:<br>\n在 MAUI Preview 14 當中已能正常顯示 App Title 的 MenuItem 內容與操作(但 ListView 的項目在沒有調整過去的撰寫的 XAML 下跑版了?):<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-2_MAUI-Android-Emulator_watermark_20220416.jpg\" alt=\"12-5-2 Android-Emulator\"></p>\n</blockquote>\n<p><strong>macOS MacCatalys</strong>:<br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-3_MAUI-MacCatalyst_watermark.jpg\" alt=\"12-5-3 MacCatalys\"></p>\n<p><strong>Windows 10</strong><br>\n<img src=\"https://jamestsaitwstorage.blob.core.windows.net/ithome/2021ironman/EP32/12-5-3_MAUI-Windows10_watermark.jpg\" alt=\"12-5-3 Windows 10\"></p>\n<hr>\n<p>參考文件:</p>\n<ol>\n<li>\n<p>Announcing .NET MAUI Preview 9:<br>\n<a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9/\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9/\" target=\"_blank\" rel=\"noreferrer noopener\">https://devblogs.microsoft.com/dotnet/announcing-net-maui-preview-9/</a></p>\n</li>\n<li>\n<p>Migrate your app from Xamarin.Forms:<br>\n<a href=\"https://docs.microsoft.com/en-us/dotnet/maui/get-started/migrate\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://docs.microsoft.com/en-us/dotnet/maui/get-started/migrate\" target=\"_blank\" rel=\"noreferrer noopener\">https://docs.microsoft.com/en-us/dotnet/maui/get-started/migrate</a></p>\n</li>\n<li>\n<p>Xamarin.Essentials 1.7 and introducing .NET MAUI Essentials:<br>\n<a href=\"https://devblogs.microsoft.com/xamarin/xamarin-essentials-1-7-and-introducing-net-maui-essentials/\" target=\"_blank\" rel=\"noreferrer noopener\"></a><a href=\"https://devblogs.microsoft.com/xamarin/xamarin-essentials-1-7-and-introducing-net-maui-essentials/\" target=\"_blank\" rel=\"noreferrer noopener\">https://devblogs.microsoft.com/xamarin/xamarin-essentials-1-7-and-introducing-net-maui-essentials/</a></p>\n</li>\n</ol>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,xamarin,xamarin.forms,maui,visual studio",
        "genre": "Mobile Development",
        "published_at": "2021-11-04 00:27:30",
        "author_href": "https://ithelp.ithome.com.tw/users/20126714/ironman",
        "author_name": "James Tsai",
        "series_href": "https://ithelp.ithome.com.tw/users/20126714/ironman/4369",
        "series_name": "Re: 從零開始用 Xamarin 技術來復刻過去開發的一個 App : TopStore",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>Hello, 各位 <strong>iT邦幫忙</strong> 的粉絲們大家好~~~</p>\n<p>本篇是 <strong>Re: 從零開始用 Xamarin 技術來複刻過去開發的一個 App: TopStore</strong> 系列文的 EP32。</p>\n<p>而本篇 EP32 要來介紹前面整個 EP1~EP21 所完成的雙平台 TopStore App 在利用 Xamarin.Forms 所完成的部分，轉換成目前接下來在 .NET 開發技術中頗受矚目 .NET Multi-platform App UI (MAUI) 的撰寫方式唷!</p>\n<p></p>\n<p>首先若要將 Xamarin.Forms 轉換成 .NET MAUI 的撰寫，有幾個需考量的條件:</p>\n<ol>\n<li>App 開發中利用到的 Xamarin.Forms 第三方套件是否已經支援 <strong>.NET 6 / MAUI</strong>。</li>\n<li>其 App 成長性是否需要遷移至 MAUI 之必要性來做發展。</li>\n</ol>\n<p>.NET 6 是微軟接下來 的 .NET 版本，而 .NET MAUI 並不會隨著 .NET 6 正式釋出的(2021/11/8) 時間點而正式釋出，而是可能在 2022 年的 Q2 才有機會正式釋出(有興趣的朋友可以參考 )。</p>\n<p>但若在這個時間點要完成 Xamarin.Forms 專案遷移至 .NET MAUI 的話，那本篇就來介紹介紹該怎麼個處理法囉~~~</p>\n<hr/>\n<p>如果以撰寫本篇 EP32 的時間點來看，最新釋出的是 \"\" 而 。</p>\n<p>而或許有捧友會問，那怎只有 EP1~EP21 呢?</p>\n<p>如果去看看 EP22 就會知道從這篇開始在介紹的是使用了  處理 SQLite 的介紹，而 <strong>sqlite-net-pcl</strong> 套件作者有在 GitHub 上。</p>\n<blockquote>\n<p>2021/11/13 補充更新:</p>\n<p>若是要在 MAUI 專案當中使用 SQLite，可以考慮微軟官方伴隨 .NET 6 所釋出的 EF Core for SQLite。</p>\n<p>參考文件:</p>\n<ol>\n<li>[微軟文件] 在 Xamarin 當中使用 EFCore: \n</li>\n<li>EF Core 的 GitHub: \n</li>\n<li>EF Core for SQLite 的 Nuget:  \n</li>\n</ol>\n</blockquote>\n<p>若如果已經裝好 Visual Stuido 2022 version 17.0 RC3 and Preview 7 的版本，理論上記得再透過 Visual Studio Installer 安裝的時候，記得要勾選 .NET MAUI 的 \"個別元件\" 安裝，就可以在 Visual Studio 2022 當中選擇到 MAUI 的專案範本。</p>\n<p></p>\n<p>新增專案。<br/>\n</p>\n<p>在專案範本中搜尋 \"MAUI\"。<br/>\n</p>\n<p></p>\n<p>建立 \"MAUI\" 行動應用設定。<br/>\n</p>\n<p>Visual Studio 2022 建立好 MAUI 的專案範本。<br/>\n</p>\n<p>在預設的空白專案範本當中會有 MainPage.xaml 的預設頁面。<br/>\n</p>\n<p>要把 TopStore App 的 XAML 放進來，所以將這個 MainPage.xaml 刪除。<br/>\n</p>\n<p>\"刪除\" 完畢。<br/>\n</p>\n<p>接著把 EP21 的 TopStore App 在 Xamarin.Forms 專案中的程式 \"複製\"(除了 *.csproj、App.xaml/.cs、AssemblyInfo.cs <strong>不複製</strong>，其他皆複選後複製)。<br/>\n</p>\n<p>在 MAUI 的專案資料夾當中直接 \"貼上\"。<br/>\n</p>\n<p>\"貼上\" 完成後檔案總管的呈現。<br/>\n</p>\n<p>\"貼上\" 完成後 Visaul Studio 2022 的方案總管呈現。<br/>\n</p>\n<p>開啟文字替換窗格，並將替換範圍設定為整個方案。</p>\n<p>在文字替換窗格當中將 **「xmlns=\" 點選 \"全部取代\" 替換成 **「xmlns=\"<br/>\n</p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 6 個替換，確定。<br/>\n</p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Forms.Xaml」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Controls.Xaml\"」</strong>。<br/>\n</p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 4 個替換，確定。<br/>\n</p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Forms」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Controls」</strong>。<br/>\n</p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 13 個替換，確定。<br/>\n<br/>\n(其中有兩個替換是在 OrdersPage 與 SettingsPage 的 XAML 標記當中，有使用到 Label 標記所設定 Text 的顯示文字，最後記得再去改一下。)</p>\n<p>繼續在文字替換窗格當中將 <strong>「Xamarin.Essentials」</strong> 點選 \"全部取代\" 替換成 <strong>「Microsoft.Maui.Essentials」</strong>。<br/>\n</p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 1 個替換，確定。<br/>\n</p>\n<p>接著打開 App.xaml 將原本 ResourceDictionary 的 XAML 標記內部包含的 XAML 標記圈選後刪除。<br/>\n</p>\n<p>並貼上原本在 TopStore App 的 Xamarin.Forms 當中的 App.xaml 所撰寫的 Resource，並且補上其所需引用的 XAML 命名空間。<br/>\n</p>\n<p>繼續在 Application.Resources 的 XAML 標記之後，撰寫 Application.MainPage 的 XAML 標記，並且在其中設計 Shell 的 XAML 標記。<br/>\n</p>\n<p>完成後，打開 AppShell.xaml 並將當中撰寫 TabBar 的 XAML 標記複製。<br/>\n</p>\n<p>貼入剛剛在 App.xaml 中所設計的 Shell 的 XAML 標記當中。<br/>\n</p>\n<p>並補上其所需引用的 XAML 命名空間。<br/>\n</p>\n<p>打開 App.xaml.cs 將其中的 MainPage 指定 MainPage 產生的程式碼給移除。<br/>\n</p>\n<p>將原本 AppShell.xaml.cs 當中的路由指定，設定到此。<br/>\n</p>\n<p>接著在 Visual Studio 的方案總管當中，把 Assets 資料夾當中的 FontAwesome5.otf 檔案搬移到 Resources 底下的 Fonts 資料夾。<br/>\n</p>\n<p>搬移完成。<br/>\n</p>\n<p>若確定沒問題，就可以把 Assets 資料夾與 AppShell.xaml 檔案刪除。<br/>\n</p>\n<p>再打開 MauiProgram.cs 檔案，並找到其中 .ConfigureFonts() 的部分。<br/>\n</p>\n<p>將其原本設定的字型檔，換成 TopStore App 當中所用的 FontAwesome5.otf。<br/>\n</p>\n<p>接著在相容性當中透過右鍵選單選取 \"新增參考\"。<br/>\n</p>\n<p>選取 Maui.Plugin.BaseBindingLibrary 的 dll。<br/>\n</p>\n<p>把先前透過 Nuget 安裝使用的 Xam.Plugin.BaseBindingLibrary 替換成 Maui.Plugin.BaseBindingLibrary。加入該 dll 的參考後，會看到在各個平台下的組件都增加了 \"Maui.Plugin.BaseBindingLibrary\"。<br/>\n<br/>\n(之後會另外發布此 DLL 透過 Nuget 安裝的版本)</p>\n<p>在文字替換窗格當中將 <strong>Xam.Plugin</strong> 點選 \"全部取代\" 替換成 <strong>Maui.Plugin</strong>。<br/>\n</p>\n<p>在此次 TopStore App 的專案中的文字替換，共有 2 個替換，確定。<br/>\n</p>\n<p>以上完成所以編輯後，會因為編譯快取的問題而無法讓 XAML 跟 .cs 順利整合，目前的作法是關閉 Visual Studio 並重新開啟專案。<br/>\n</p>\n<p>關閉 Visual Studio 時記得儲存所有變更。<br/>\n</p>\n<p>再次重新開啟此 TopStore App 的 MAUI 專案，就沒有相關的錯誤訊息發生。<br/>\n</p>\n<p>在方案總管當中透過選取右鍵選單的 \"重建方案\" 選項。<br/>\n</p>\n<p>等待一段時間後，全部建置成功。<br/>\n</p>\n<p>在上圖的截圖當中，眼尖的捧友應該會注意到 Visual Studio 是有跟 Mac 做連線的，所以按照目前 MAUI 的官方預設建置的平台，會建置 iOS、Android、macOS、Windows 的應用程式。</p>\n<p><strong>iOS Simulator</strong>:<br/>\n</p>\n<p><strong>Android Emulator</strong>:<br/>\n<br/>\n(看來.NET MAUI for Android 還有待微軟官方努力改進)</p>\n<blockquote>\n<p>2022/02/13 補充更新:<br/>\n在 MAUI Preview 12 當中已能正常顯示 List 的客製化項目內容:<br/>\n</p>\n</blockquote>\n<blockquote>\n<p>2022/04/16 補充更新:<br/>\n在 MAUI Preview 14 當中已能正常顯示 App Title 的 MenuItem 內容與操作(但 ListView 的項目在沒有調整過去的撰寫的 XAML 下跑版了?):<br/>\n</p>\n</blockquote>\n<p><strong>macOS MacCatalys</strong>:<br/>\n</p>\n<p><strong>Windows 10</strong><br/>\n</p>\n<hr/>\n<p>參考文件:</p>\n<ol>\n<li>\n<p>Announcing .NET MAUI Preview 9:<br/>\n</p>\n</li>\n<li>\n<p>Migrate your app from Xamarin.Forms:<br/>\n</p>\n</li>\n<li>\n<p>Xamarin.Essentials 1.7 and introducing .NET MAUI Essentials:<br/>\n</p>\n</li>\n</ol>\n<br/>\n</div>",
        "content_text": "Hello, 各位 iT邦幫忙 的粉絲們大家好~~~\n本篇是 Re: 從零開始用 Xamarin 技術來複刻過去開發的一個 App: TopStore 系列文的 EP32。\n而本篇 EP32 要來介紹前面整個 EP1~EP21 所完成的雙平台 TopStore App 在利用 Xamarin.Forms 所完成的部分，轉換成目前接下來在 .NET 開發技術中頗受矚目 .NET Multi-platform App UI (MAUI) 的撰寫方式唷!\n\n首先若要將 Xamarin.Forms 轉換成 .NET MAUI 的撰寫，有幾個需考量的條件:\n\nApp 開發中利用到的 Xamarin.Forms 第三方套件是否已經支援 .NET 6 / MAUI。\n其 App 成長性是否需要遷移至 MAUI 之必要性來做發展。\n\n.NET 6 是微軟接下來 的 .NET 版本，而 .NET MAUI 並不會隨著 .NET 6 正式釋出的(2021/11/8) 時間點而正式釋出，而是可能在 2022 年的 Q2 才有機會正式釋出(有興趣的朋友可以參考 )。\n但若在這個時間點要完成 Xamarin.Forms 專案遷移至 .NET MAUI 的話，那本篇就來介紹介紹該怎麼個處理法囉~~~\n\n如果以撰寫本篇 EP32 的時間點來看，最新釋出的是 \"\" 而 。\n而或許有捧友會問，那怎只有 EP1~EP21 呢?\n如果去看看 EP22 就會知道從這篇開始在介紹的是使用了  處理 SQLite 的介紹，而 sqlite-net-pcl 套件作者有在 GitHub 上。\n\n2021/11/13 補充更新:\n若是要在 MAUI 專案當中使用 SQLite，可以考慮微軟官方伴隨 .NET 6 所釋出的 EF Core for SQLite。\n參考文件:\n\n[微軟文件] 在 Xamarin 當中使用 EFCore: \n\nEF Core 的 GitHub: \n\nEF Core for SQLite 的 Nuget:  \n\n\n\n若如果已經裝好 Visual Stuido 2022 version 17.0 RC3 and Preview 7 的版本，理論上記得再透過 Visual Studio Installer 安裝的時候，記得要勾選 .NET MAUI 的 \"個別元件\" 安裝，就可以在 Visual Studio 2022 當中選擇到 MAUI 的專案範本。\n\n新增專案。\n\n在專案範本中搜尋 \"MAUI\"。\n\n\n建立 \"MAUI\" 行動應用設定。\n\nVisual Studio 2022 建立好 MAUI 的專案範本。\n\n在預設的空白專案範本當中會有 MainPage.xaml 的預設頁面。\n\n要把 TopStore App 的 XAML 放進來，所以將這個 MainPage.xaml 刪除。\n\n\"刪除\" 完畢。\n\n接著把 EP21 的 TopStore App 在 Xamarin.Forms 專案中的程式 \"複製\"(除了 *.csproj、App.xaml/.cs、AssemblyInfo.cs 不複製，其他皆複選後複製)。\n\n在 MAUI 的專案資料夾當中直接 \"貼上\"。\n\n\"貼上\" 完成後檔案總管的呈現。\n\n\"貼上\" 完成後 Visaul Studio 2022 的方案總管呈現。\n\n開啟文字替換窗格，並將替換範圍設定為整個方案。\n在文字替換窗格當中將 **「xmlns=\" 點選 \"全部取代\" 替換成 **「xmlns=\"\n\n在此次 TopStore App 的專案中的文字替換，共有 6 個替換，確定。\n\n繼續在文字替換窗格當中將 「Xamarin.Forms.Xaml」 點選 \"全部取代\" 替換成 「Microsoft.Maui.Controls.Xaml\"」。\n\n在此次 TopStore App 的專案中的文字替換，共有 4 個替換，確定。\n\n繼續在文字替換窗格當中將 「Xamarin.Forms」 點選 \"全部取代\" 替換成 「Microsoft.Maui.Controls」。\n\n在此次 TopStore App 的專案中的文字替換，共有 13 個替換，確定。\n\n(其中有兩個替換是在 OrdersPage 與 SettingsPage 的 XAML 標記當中，有使用到 Label 標記所設定 Text 的顯示文字，最後記得再去改一下。)\n繼續在文字替換窗格當中將 「Xamarin.Essentials」 點選 \"全部取代\" 替換成 「Microsoft.Maui.Essentials」。\n\n在此次 TopStore App 的專案中的文字替換，共有 1 個替換，確定。\n\n接著打開 App.xaml 將原本 ResourceDictionary 的 XAML 標記內部包含的 XAML 標記圈選後刪除。\n\n並貼上原本在 TopStore App 的 Xamarin.Forms 當中的 App.xaml 所撰寫的 Resource，並且補上其所需引用的 XAML 命名空間。\n\n繼續在 Application.Resources 的 XAML 標記之後，撰寫 Application.MainPage 的 XAML 標記，並且在其中設計 Shell 的 XAML 標記。\n\n完成後，打開 AppShell.xaml 並將當中撰寫 TabBar 的 XAML 標記複製。\n\n貼入剛剛在 App.xaml 中所設計的 Shell 的 XAML 標記當中。\n\n並補上其所需引用的 XAML 命名空間。\n\n打開 App.xaml.cs 將其中的 MainPage 指定 MainPage 產生的程式碼給移除。\n\n將原本 AppShell.xaml.cs 當中的路由指定，設定到此。\n\n接著在 Visual Studio 的方案總管當中，把 Assets 資料夾當中的 FontAwesome5.otf 檔案搬移到 Resources 底下的 Fonts 資料夾。\n\n搬移完成。\n\n若確定沒問題，就可以把 Assets 資料夾與 AppShell.xaml 檔案刪除。\n\n再打開 MauiProgram.cs 檔案，並找到其中 .ConfigureFonts() 的部分。\n\n將其原本設定的字型檔，換成 TopStore App 當中所用的 FontAwesome5.otf。\n\n接著在相容性當中透過右鍵選單選取 \"新增參考\"。\n\n選取 Maui.Plugin.BaseBindingLibrary 的 dll。\n\n把先前透過 Nuget 安裝使用的 Xam.Plugin.BaseBindingLibrary 替換成 Maui.Plugin.BaseBindingLibrary。加入該 dll 的參考後，會看到在各個平台下的組件都增加了 \"Maui.Plugin.BaseBindingLibrary\"。\n\n(之後會另外發布此 DLL 透過 Nuget 安裝的版本)\n在文字替換窗格當中將 Xam.Plugin 點選 \"全部取代\" 替換成 Maui.Plugin。\n\n在此次 TopStore App 的專案中的文字替換，共有 2 個替換，確定。\n\n以上完成所以編輯後，會因為編譯快取的問題而無法讓 XAML 跟 .cs 順利整合，目前的作法是關閉 Visual Studio 並重新開啟專案。\n\n關閉 Visual Studio 時記得儲存所有變更。\n\n再次重新開啟此 TopStore App 的 MAUI 專案，就沒有相關的錯誤訊息發生。\n\n在方案總管當中透過選取右鍵選單的 \"重建方案\" 選項。\n\n等待一段時間後，全部建置成功。\n\n在上圖的截圖當中，眼尖的捧友應該會注意到 Visual Studio 是有跟 Mac 做連線的，所以按照目前 MAUI 的官方預設建置的平台，會建置 iOS、Android、macOS、Windows 的應用程式。\niOS Simulator:\n\nAndroid Emulator:\n\n(看來.NET MAUI for Android 還有待微軟官方努力改進)\n\n2022/02/13 補充更新:\n在 MAUI Preview 12 當中已能正常顯示 List 的客製化項目內容:\n\n\n\n2022/04/16 補充更新:\n在 MAUI Preview 14 當中已能正常顯示 App Title 的 MenuItem 內容與操作(但 ListView 的項目在沒有調整過去的撰寫的 XAML 下跑版了?):\n\n\nmacOS MacCatalys:\n\nWindows 10\n\n\n參考文件:\n\n\nAnnouncing .NET MAUI Preview 9:\n\n\n\nMigrate your app from Xamarin.Forms:\n\n\n\nXamarin.Essentials 1.7 and introducing .NET MAUI Essentials:",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "Hello ,\n各位\niT 邦 幫忙\n的 粉絲 們 大家 好 ~ ~ ~\n本篇 是\nRe :\n從零開始 用\nXamarin\n技術 來複 刻過去 開發 的 一個\nApp :\nTopStore\n系列 文 的\nEP32 。\n而 本篇\nEP32\n要來 介紹 前面 整個\nEP1 ~ EP21\n所 完成 的雙 平台\nTopStore\nApp\n在 利用\nXamarin . Forms\n所 完成 的 部分 ， 轉換成 目前 接下來 在\n. NET\n開發技術 中 頗受 矚目\n. NET\nMulti - platform\nApp\nUI\n( MAUI )\n的 撰寫 方式 唷 !\n首先 若 要將\nXamarin . Forms\n轉換成\n. NET\nMAUI\n的 撰寫 ， 有 幾個 需 考量 的 條件 :\nApp\n開發 中 利用 到 的\nXamarin . Forms\n第三方 套件 是否 已經 支援\n. NET\n6\n/\nMAUI 。\n其\nApp\n成長性 是否 需要 遷移 至\nMAUI\n之 必要性 來 做 發展 。\n. NET\n6\n是 微軟 接下來\n的\n. NET\n版本 ， 而\n. NET\nMAUI\n並 不會 隨著\n. NET\n6\n正式 釋出 的 ( 2021 / 11 / 8 )\n時間 點而 正式 釋出 ， 而是 可能 在\n2022\n年 的\nQ2\n才 有 機會 正式 釋出 ( 有 興趣 的 朋友 可以 參考\n) 。\n但 若 在 這個 時間 點要 完成\nXamarin . Forms\n專案 遷移 至\n. NET\nMAUI\n的話 ， 那 本篇 就 來 介紹 介紹 該 怎麼 個 處理 法 囉 ~ ~ ~\n如果 以 撰寫 本篇\nEP32\n的 時間 點 來看 ， 最新 釋出 的 是\n\" \"\n而\n。\n而 或許 有 捧 友會問 ， 那 怎 只有\nEP1 ~ EP21\n呢 ?\n如果 去 看看\nEP22\n就 會 知道 從 這篇 開始 在 介紹 的 是 使用 了\n處理\nSQLite\n的 介紹 ， 而\nsqlite - net - pcl\n套件 作者 有 在\nGitHub\n上 。\n2021 / 11 / 13\n補充 更新 :\n若 是 要 在\nMAUI\n專案 當中 使用\nSQLite ， 可以 考慮 微軟 官方 伴隨\n. NET\n6\n所 釋出 的\nEF\nCore\nfor\nSQLite 。\n參考 文件 :\n[ 微軟 文件 ]\n在\nXamarin\n當中 使用\nEFCore :\nEF\nCore\n的\nGitHub :\nEF\nCore\nfor\nSQLite\n的\nNuget :\n若 如果 已經 裝 好\nVisual\nStuido\n2022\nversion\n17.0\nRC3\nand\nPreview\n7\n的 版本 ， 理論 上 記得 再 透過\nVisual\nStudio\nInstaller\n安裝 的 時候 ， 記得 要 勾選\n. NET\nMAUI\n的\n\" 個別 元件 \"\n安裝 ， 就 可以 在\nVisual\nStudio\n2022\n當中 選擇 到\nMAUI\n的 專案 範本 。\n新增 專案 。\n在 專案 範本 中 搜尋\n\" MAUI \" 。\n建立\n\" MAUI \"\n行動 應用 設定 。\nVisual\nStudio\n2022\n建立 好\nMAUI\n的 專案 範本 。\n在 預設 的 空白 專案 範本 當中 會 有\nMainPage . xaml\n的 預設 頁面 。\n要 把\nTopStore\nApp\n的\nXAML\n放進來 ， 所以 將 這個\nMainPage . xaml\n刪除 。\n\" 刪除 \"\n完畢 。\n接著 把\nEP21\n的\nTopStore\nApp\n在\nXamarin . Forms\n專案 中 的 程式\n\" 複製 \" ( 除了\n* . csproj 、 App . xaml / . cs 、 AssemblyInfo . cs\n不 複製 ， 其他 皆 複選 後 複製 ) 。\n在\nMAUI\n的 專案 資料夾 當中 直接\n\" 貼 上 \" 。\n\" 貼 上 \"\n完成 後 檔案 總管 的 呈現 。\n\" 貼 上 \"\n完成 後\nVisaul\nStudio\n2022\n的 方案 總管 呈現 。\n開啟 文字 替換 窗格 ， 並將 替換 範圍 設定 為 整個 方案 。\n在 文字 替換 窗格 當 中將\n* * 「 xmlns = \"\n點選\n\" 全部 取代 \"\n替換成\n* * 「 xmlns = \"\n在 此次\nTopStore\nApp\n的 專案 中 的 文字 替換 ， 共有\n6\n個 替換 ， 確定 。\n繼續 在 文字 替換 窗格 當 中將\n「 Xamarin . Forms . Xaml 」\n點選\n\" 全部 取代 \"\n替換成\n「 Microsoft . Maui . Controls . Xaml \" 」 。\n在 此次\nTopStore\nApp\n的 專案 中 的 文字 替換 ， 共有\n4\n個 替換 ， 確定 。\n繼續 在 文字 替換 窗格 當 中將\n「 Xamarin . Forms 」\n點選\n\" 全部 取代 \"\n替換成\n「 Microsoft . Maui . Controls 」 。\n在 此次\nTopStore\nApp\n的 專案 中 的 文字 替換 ， 共有\n13\n個 替換 ， 確定 。\n( 其中 有 兩個 替換 是 在\nOrdersPage\n與\nSettingsPage\n的\nXAML\n標記 當中 ， 有 使用 到\nLabel\n標記 所 設定\nText\n的 顯示 文字 ， 最後 記得 再 去 改 一下 。 )\n繼續 在 文字 替換 窗格 當 中將\n「 Xamarin . Essentials 」\n點選\n\" 全部 取代 \"\n替換成\n「 Microsoft . Maui . Essentials 」 。\n在 此次\nTopStore\nApp\n的 專案 中 的 文字 替換 ， 共有\n1\n個 替換 ， 確定 。\n接著 打開\nApp . xaml\n將 原本\nResourceDictionary\n的\nXAML\n標記 內部 包含 的\nXAML\n標記 圈選 後 刪除 。\n並貼 上 原本 在\nTopStore\nApp\n的\nXamarin . Forms\n當中 的\nApp . xaml\n所 撰寫 的\nResource ， 並且 補上 其所 需 引用 的\nXAML\n命名 空間 。\n繼續 在\nApplication . Resources\n的\nXAML\n標記 之後 ， 撰寫\nApplication . MainPage\n的\nXAML\n標記 ， 並且 在 其中 設計\nShell\n的\nXAML\n標記 。\n完成 後 ， 打開\nAppShell . xaml\n並將 當中 撰寫\nTabBar\n的\nXAML\n標記 複製 。\n貼入 剛剛 在\nApp . xaml\n中 所 設計 的\nShell\n的\nXAML\n標記 當中 。\n並 補上 其所 需 引用 的\nXAML\n命名 空間 。\n打開\nApp . xaml . cs\n將 其中 的\nMainPage\n指定\nMainPage\n產生 的 程式碼 給 移除 。\n將 原本\nAppShell . xaml . cs\n當中 的 路由 指定 ， 設定 到 此 。\n接著 在\nVisual\nStudio\n的 方案 總管 當中 ， 把\nAssets\n資料夾 當中 的\nFontAwesome5 . otf\n檔案 搬移到\nResources\n底下 的\nFonts\n資料夾 。\n搬移 完成 。\n若 確定 沒 問題 ， 就 可以 把\nAssets\n資料夾 與\nAppShell . xaml\n檔案 刪除 。\n再 打開\nMauiProgram . cs\n檔案 ， 並 找到 其中\n. ConfigureFonts ( )\n的 部分 。\n將其 原本 設定 的 字型 檔 ， 換成\nTopStore\nApp\n當中 所用 的\nFontAwesome5 . otf 。\n接著 在 相容性 當中 透過 右鍵 選單 選取\n\" 新增 參考 \" 。\n選取\nMaui . Plugin . BaseBindingLibrary\n的\ndll 。\n把 先前 透過\nNuget\n安裝 使用 的\nXam . Plugin . BaseBindingLibrary\n替換成\nMaui . Plugin . BaseBindingLibrary 。 加入 該\ndll\n的 參考 後 ， 會 看到 在 各個 平台 下 的 組件 都 增加 了\n\" Maui . Plugin . BaseBindingLibrary \" 。\n( 之後 會 另外 發布此\nDLL\n透過\nNuget\n安裝 的 版本 )\n在 文字 替換 窗格 當 中將\nXam . Plugin\n點選\n\" 全部 取代 \"\n替換成\nMaui . Plugin 。\n在 此次\nTopStore\nApp\n的 專案 中 的 文字 替換 ， 共有\n2\n個 替換 ， 確定 。\n以上 完成 所以 編輯 後 ， 會 因為 編譯 快取 的 問題 而 無法 讓\nXAML\n跟\n. cs\n順利 整合 ， 目前 的 作法 是 關閉\nVisual\nStudio\n並 重新 開啟 專案 。\n關閉\nVisual\nStudio\n時 記得 儲存 所有 變更 。\n再次 重新 開啟 此\nTopStore\nApp\n的\nMAUI\n專案 ， 就 沒有 相關 的 錯誤 訊息 發生 。\n在 方案 總管 當中 透過 選取 右鍵 選單 的\n\" 重建 方案 \"\n選項 。\n等待 一段時間 後 ， 全部 建置 成功 。\n在 上圖 的 截圖 當中 ， 眼尖 的 捧友 應該 會 注意 到\nVisual\nStudio\n是 有 跟\nMac\n做 連線 的 ， 所以 按照 目前\nMAUI\n的 官方 預設 建置 的 平台 ， 會 建置\niOS 、 Android 、 macOS 、 Windows\n的 應用程式 。\niOS\nSimulator :\nAndroid\nEmulator :\n( 看來 . NET\nMAUI\nfor\nAndroid\n還有 待 微軟 官方 努力 改進 )\n2022 / 02 / 13\n補充 更新 :\n在\nMAUI\nPreview\n12\n當中 已能 正常 顯示\nList\n的 客 製 化 項目 內容 :\n2022 / 04 / 16\n補充 更新 :\n在\nMAUI\nPreview\n14\n當中 已能 正常 顯示\nApp\nTitle\n的\nMenuItem\n內容 與 操作 ( 但\nListView\n的 項目 在 沒有 調整 過去 的 撰寫 的\nXAML\n下 跑 版 了 ? ) :\nmacOS\nMacCatalys :\nWindows\n10\n參考 文件 :\nAnnouncing\n. NET\nMAUI\nPreview\n9 :\nMigrate\nyour\napp\nfrom\nXamarin . Forms :\nXamarin . Essentials\n1.7\nand\nintroducing\n. NET\nMAUI\nEssentials :",
        "word_seg_processed_content_text": "hello\n\n邦 幫忙\n粉絲\n本篇\nre\n從零開始\nxamarin\n技術 來複 刻過去 開發\napp\ntopstore\n系列 文\nep32\n本篇\nep32\n要來 介紹\nep1 ep21\n的雙 平台\ntopstore\napp\n利用\nxamarin forms\n轉換成 接下來\nnet\n開發技術 中 頗受 矚目\nnet\nmulti platform\napp\nui\nmaui\n撰寫 方式 唷\n要將\nxamarin forms\n轉換成\nnet\nmaui\n撰寫 幾個 需 考量 條件\napp\n開發 中 利用\nxamarin forms\n第三方 套件 支援\nnet\n6\n\nmaui\n\napp\n成長性 遷移\nmaui\n必要性 做 發展\nnet\n6\n微軟 接下來\n\nnet\n版本\nnet\nmaui\n\nnet\n6\n正式 釋出 2021 11 8\n時間 點而 正式 釋出\n2022\n年\nq2\n才 機會 正式 釋出 興趣 朋友 參考\n\n時間 點要\nxamarin forms\n專案 遷移\nnet\nmaui\n本篇 介紹 介紹 法 囉\n撰寫 本篇\nep32\n時間 點 來看 最新 釋出\n\n\n\n或許 捧 友會問\nep1 ep21\n\n\nep22\n會 這篇 介紹\n\nsqlite\n介紹\nsqlite net pcl\n套件 作者\ngithub\n\n2021 11 13\n補充 更新\n\nmaui\n專案 當中\nsqlite 微軟 官方 伴隨\nnet\n6\n釋出\nef\ncore\n\nsqlite\n參考 文件\n微軟 文件\n\nxamarin\n當中\nefcore\nef\ncore\n\ngithub\nef\ncore\n\nsqlite\n\nnuget\n裝\nvisual\nstuido\n2022\nversion\n17.0\nrc3\n\npreview\n7\n版本 理論 記得 透過\nvisual\nstudio\ninstaller\n安裝 記得 勾選\nnet\nmaui\n\n元件\n安裝\nvisual\nstudio\n2022\n當中 選擇\nmaui\n專案 範本\n新增 專案\n專案 範本 中 搜尋\nmaui\n建立\nmaui\n設定\nvisual\nstudio\n2022\n建立\nmaui\n專案 範本\n預設 空白 專案 範本 當中 會\nmainpage xaml\n預設 頁面\n\ntopstore\napp\n\nxaml\n放進來\nmainpage xaml\n刪除\n刪除\n完畢\n\nep21\n\ntopstore\napp\n\nxamarin forms\n專案 中 程式\n複製\ncsproj app xaml cs assemblyinfo cs\n複製 皆 複選 複製\n\nmaui\n專案 資料夾 當中\n貼\n貼\n檔案 總管 呈現\n貼\n\nvisaul\nstudio\n2022\n方案 總管 呈現\n開啟 文字 替換 窗格 並將 替換 設定 方案\n文字 替換 窗格 中將\nxmlns\n點選\n取代\n替換成\nxmlns\n此次\ntopstore\napp\n專案 中 文字 替換 共有\n6\n替換\n文字 替換 窗格 中將\nxamarin forms xaml\n點選\n取代\n替換成\nmicrosoft maui controls xaml\n此次\ntopstore\napp\n專案 中 文字 替換 共有\n4\n替換\n文字 替換 窗格 中將\nxamarin forms\n點選\n取代\n替換成\nmicrosoft maui controls\n此次\ntopstore\napp\n專案 中 文字 替換 共有\n13\n替換\n兩個 替換\norderspage\n\nsettingspage\n\nxaml\n標記 當中\nlabel\n標記 設定\ntext\n顯示 文字 記得 改\n文字 替換 窗格 中將\nxamarin essentials\n點選\n取代\n替換成\nmicrosoft maui essentials\n此次\ntopstore\napp\n專案 中 文字 替換 共有\n1\n替換\n打開\napp xaml\n原本\nresourcedictionary\n\nxaml\n標記 內部 包含\nxaml\n標記 圈選 刪除\n並貼 原本\ntopstore\napp\n\nxamarin forms\n當中\napp xaml\n撰寫\nresource 補上 其所 需 引用\nxaml\n命名 空間\n\napplication resources\n\nxaml\n標記 撰寫\napplication mainpage\n\nxaml\n標記 設計\nshell\n\nxaml\n標記\n打開\nappshell xaml\n並將 當中 撰寫\ntabbar\n\nxaml\n標記 複製\n貼入 剛剛\napp xaml\n中 設計\nshell\n\nxaml\n標記 當中\n補上 其所 需 引用\nxaml\n命名 空間\n打開\napp xaml cs\n\nmainpage\n指定\nmainpage\n程式碼 移除\n原本\nappshell xaml cs\n當中 路由 指定 設定\n\nvisual\nstudio\n方案 總管 當中\nassets\n資料夾 當中\nfontawesome5 otf\n檔案 搬移到\nresources\n底下\nfonts\n資料夾\n搬移\n沒\nassets\n資料夾\nappshell xaml\n檔案 刪除\n打開\nmauiprogram cs\n檔案 找到\nconfigurefonts\n\n將其 原本 設定 字型 檔 換成\ntopstore\napp\n當中 所用\nfontawesome5 otf\n相容性 當中 透過 右鍵 選單 選取\n新增 參考\n選取\nmaui plugin basebindinglibrary\n\ndll\n先前 透過\nnuget\n安裝\nxam plugin basebindinglibrary\n替換成\nmaui plugin basebindinglibrary\ndll\n參考 會 平台 組件 增加\nmaui plugin basebindinglibrary\n會 發布此\ndll\n透過\nnuget\n安裝 版本\n文字 替換 窗格 中將\nxam plugin\n點選\n取代\n替換成\nmaui plugin\n此次\ntopstore\napp\n專案 中 文字 替換 共有\n2\n替換\n編輯 會 編譯 快取\nxaml\n\ncs\n順利 整合 作法 關閉\nvisual\nstudio\n開啟 專案\n關閉\nvisual\nstudio\n時 記得 儲存 變更\n再次 開啟\ntopstore\napp\n\nmaui\n專案 相關 錯誤 訊息 發生\n方案 總管 當中 透過 選取 右鍵 選單\n重建 方案\n選項\n等待 一段時間 建置 成功\n上圖 截圖 當中 眼尖 捧友 會\nvisual\nstudio\n\nmac\n做 連線\nmaui\n官方 預設 建置 平台 會 建置\nios android macos windows\n應用程式\nios\nsimulator\nandroid\nemulator\nnet\nmaui\n\nandroid\n微軟 官方 努力 改進\n2022 02 13\n補充 更新\n\nmaui\npreview\n12\n當中 已能 顯示\nlist\n客 製 化 項目 內容\n2022 04 16\n補充 更新\n\nmaui\npreview\n14\n當中 已能 顯示\napp\ntitle\n\nmenuitem\n內容 操作\nlistview\n項目 調整 撰寫\nxaml\n跑 版\nmacos\nmaccatalys\nwindows\n10\n參考 文件\nannouncing\nnet\nmaui\npreview\n9\nmigrate\nyour\napp\n\nxamarin forms\nxamarin essentials\n1.7\n\nintroducing\nnet\nmaui\nessentials",
        "extracted_keywords": [
            "應用程式",
            "app",
            "ep32",
            "ep21",
            "application"
        ],
        "extracted_keywords_phrases": [
            "app 當中",
            "當中 app",
            "應用程式 ios",
            "app 開發",
            "app maui"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282227": {
        "href": "https://ithelp.ithome.com.tw/articles/10282227",
        "title": "[Day32] Hexo - 修改主題樣式及一些問題排除",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>雖然 Hexo 要完成架設 Blog 僅僅是幾秒鐘的時間就完成，但是在細部調整時還是會遇到不少困難，以下記錄了一些問題排除，也簡介該如何運用 Hexo 的主題做出個人化的配置修改。</p>\n<hr>\n<h2>1. 啟動本地伺服器（hexo server）時出現告警</h2>\n<ul>\n<li>\n<p>使用版本：<br>\nHexo: 5.4.0</p>\n</li>\n<li>\n<p>錯誤訊息：</p>\n<pre><code>$ hexo -s                              \n(node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency\n</code></pre>\n</li>\n<li>\n<p>參考資料：爬了一些文章，大概從 2020 年起就有相關的資訊，後續改版會不會修正不得而知，最後參考<a href=\"https://www.haoyizebo.com/posts/710984d0/\" target=\"_blank\" rel=\"noreferrer noopener\">好一則博部落格的文章</a>解決。</p>\n</li>\n<li>\n<p>發生原因：Hexo 依賴的 nib@1.1.2 套件指定使用較舊版本的 stylus，這個套件已經停止維護，所以需要自己修改解決。</p>\n</li>\n<li>\n<p>解決方式：</p>\n<ol>\n<li>編輯 package.json 專案設定檔，加入以下設定指定最新的 stylus 版本：</li>\n</ol>\n<pre><code>\"resolutions\": {\n  \"stylus\": \"^0.54.8\"\n}\n</code></pre>\n<ol start=\"2\">\n<li>執行指令 <code>yarn install</code> 安裝完就完成了。（** npm install 無效 **）</li>\n</ol>\n</li>\n<li>\n<p>注意事項：如果透過指令安裝了其他的主題，該設定可能會被覆蓋，再次出現告警，只要再次執行 <code>yarn install</code> 應該就能修復。</p>\n</li>\n</ul>\n<hr>\n<h2>2. 讓 Hexo 在 Github Page 專案中與其他檔案共存</h2>\n<ul>\n<li>\n<p>問題說明：在 Hexo 發佈到 Github 時會覆蓋掉整個專案目錄，如果想要在裡面放自己寫好的其他靜態頁面，或是專案根目錄存放 README.md 來打造華麗的頁面（可以參考<a href=\"https://github.com/doggy8088\" target=\"_blank\" rel=\"noreferrer noopener\">Will 保哥 的 Github</a>）都會因為 deploy 這個動作被蓋掉。</p>\n</li>\n<li>\n<p>解決方式：</p>\n<ol>\n<li>先將要跟著一起部署到 Github 的檔案放到 source 資料夾裡面。</li>\n<li>修改 <code>_config.yml</code> 設定檔，找到 skip_render 這個字眼，並加入檔名或是資料夾名稱</li>\n</ol>\n<pre><code>skip_render: \n  # 單檔案\n  - README.md\n  # 整個資料夾（包含底下所有檔案）\n  - mypage/*\n</code></pre>\n</li>\n</ul>\n<hr>\n<h2>3. Hexo 套用主題</h2>\n<ol>\n<li>\n<p>到 <a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noreferrer noopener\">Hexo Themes</a> 尋找喜歡的版型。<br>\n(如果點進去發現連結已經失效，就換一個吧！)</p>\n</li>\n<li>\n<p>範例頁面通常有這個主題的 Github 連結，本次以 Hueman 這個主題為例，找到小貓的圖示就可以順利到達他的 <a href=\"https://github.com/ppoffice/hexo-theme-hueman\" target=\"_blank\" rel=\"noreferrer noopener\">Github 專案</a>。</p>\n</li>\n<li>\n<p>接著就來找他的說明文件（Hueman 是放在 Github 首頁的最底下），每個主題因為撰寫人不同，擺放位置都不太一樣。</p>\n</li>\n<li>\n<p>找到安裝方式（有些主題可能放在首頁，有些是寫在文件裡）。</p>\n</li>\n<li>\n<p>開始安裝，有些主題是用 git clone 的方式讓你將專案複製下來，有些可以使用 npm install 的方式安裝，就看文件怎麼寫，還要注意以下幾點：</p>\n<ul>\n<li>使用 git clone 的方法可能會需要在終端機切換當前目錄位置，需看清楚文件說明。</li>\n<li>安裝步驟可能還有其他的額外設定，請將文件看完確保沒有遺漏。</li>\n</ul>\n</li>\n<li>\n<p>修改 Hexo 裡面的 <code>_config.yml</code> 設定檔，把 theme 的內容改成主題的名稱。</p>\n<pre><code>thene: hueman\n</code></pre>\n</li>\n<li>\n<p>完成修改後可以先執行一次 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code> 來重建頁面並啟動本地伺服器檢查是否成功。</p>\n</li>\n</ol>\n<hr>\n<h2>4. Hexo 個人化樣式設定</h2>\n<ol>\n<li>\n<p>佈景主題的設定方式大致有兩種：</p>\n<ul>\n<li>編輯在 themes/主題名稱 的 <code>_config.yml</code> 檔案（通常是使用 git clone 下載的主題）。</li>\n<li>在網站根目錄建置 <code>_config.主題名稱.yml</code> 來編輯（部分使用 npm 安裝的主題），這種類型的主題在安裝完後網站資料夾不會新增任何檔案，而是整個套件都被放在 node_modules 裡面，可以到裡面找到主題的<code>_config.yml</code> 檔案，複製到自己網站根目錄，並變更檔名為 <code>_config.主題名稱.yml</code> 來做修改。</li>\n</ul>\n</li>\n<li>\n<p>本次介紹的 Hueman 主題屬於前者，所以可以開啟 <code>themes/hueman/_config.yml</code> 這個檔案來修改，至於修改方式當然就是參考<a href=\"https://github.com/ppoffice/hexo-theme-hueman/wiki/Configuration\" target=\"_blank\" rel=\"noreferrer noopener\">專案文件</a>啦！</p>\n</li>\n<li>\n<p>如果有些顏色想改掉，但是配置裡面沒有，可以在主題的資料夾裡面搜尋關鍵字 <code>variable</code>，通常會用這個名稱來存放各種顏色、單位樣式，以 Hueman 為例，可以找到 <code>_variables.styl</code> 這個檔案，應該大部分的顏色都能在這邊更改了！</p>\n</li>\n<li>\n<p>如果是版面配置想要做顏色以外的調整，可以搜尋關鍵字 <code>style</code>，以 Hueman 為例，可以找到 <code>style.styl</code> 這個檔案，來加入自己想設定的樣式了（需要具備自行撰寫 css 的能力）。</p>\n</li>\n</ol>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-11-03 16:42:40",
        "author_href": "https://ithelp.ithome.com.tw/users/20129729/ironman",
        "author_name": "Genos",
        "series_href": "https://ithelp.ithome.com.tw/users/20129729/ironman/3905",
        "series_name": "MacOS新手操作指令學習紀錄，成為裝B前端工程師之路",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>雖然 Hexo 要完成架設 Blog 僅僅是幾秒鐘的時間就完成，但是在細部調整時還是會遇到不少困難，以下記錄了一些問題排除，也簡介該如何運用 Hexo 的主題做出個人化的配置修改。</p>\n<hr/>\n<h2>1. 啟動本地伺服器（hexo server）時出現告警</h2>\n<ul>\n<li>\n<p>使用版本：<br/>\nHexo: 5.4.0</p>\n</li>\n<li>\n<p>錯誤訊息：</p>\n<pre></pre>\n</li>\n<li>\n<p>參考資料：爬了一些文章，大概從 2020 年起就有相關的資訊，後續改版會不會修正不得而知，最後參考解決。</p>\n</li>\n<li>\n<p>發生原因：Hexo 依賴的 nib@1.1.2 套件指定使用較舊版本的 stylus，這個套件已經停止維護，所以需要自己修改解決。</p>\n</li>\n<li>\n<p>解決方式：</p>\n<ol>\n<li>編輯 package.json 專案設定檔，加入以下設定指定最新的 stylus 版本：</li>\n</ol>\n<pre></pre>\n<ol start=\"2\">\n<li>執行指令 <code>yarn install</code> 安裝完就完成了。（** npm install 無效 **）</li>\n</ol>\n</li>\n<li>\n<p>注意事項：如果透過指令安裝了其他的主題，該設定可能會被覆蓋，再次出現告警，只要再次執行 <code>yarn install</code> 應該就能修復。</p>\n</li>\n</ul>\n<hr/>\n<h2>2. 讓 Hexo 在 Github Page 專案中與其他檔案共存</h2>\n<ul>\n<li>\n<p>問題說明：在 Hexo 發佈到 Github 時會覆蓋掉整個專案目錄，如果想要在裡面放自己寫好的其他靜態頁面，或是專案根目錄存放 README.md 來打造華麗的頁面（可以參考）都會因為 deploy 這個動作被蓋掉。</p>\n</li>\n<li>\n<p>解決方式：</p>\n<ol>\n<li>先將要跟著一起部署到 Github 的檔案放到 source 資料夾裡面。</li>\n<li>修改 <code>_config.yml</code> 設定檔，找到 skip_render 這個字眼，並加入檔名或是資料夾名稱</li>\n</ol>\n<pre></pre>\n</li>\n</ul>\n<hr/>\n<h2>3. Hexo 套用主題</h2>\n<ol>\n<li>\n<p>到  尋找喜歡的版型。<br/>\n(如果點進去發現連結已經失效，就換一個吧！)</p>\n</li>\n<li>\n<p>範例頁面通常有這個主題的 Github 連結，本次以 Hueman 這個主題為例，找到小貓的圖示就可以順利到達他的 。</p>\n</li>\n<li>\n<p>接著就來找他的說明文件（Hueman 是放在 Github 首頁的最底下），每個主題因為撰寫人不同，擺放位置都不太一樣。</p>\n</li>\n<li>\n<p>找到安裝方式（有些主題可能放在首頁，有些是寫在文件裡）。</p>\n</li>\n<li>\n<p>開始安裝，有些主題是用 git clone 的方式讓你將專案複製下來，有些可以使用 npm install 的方式安裝，就看文件怎麼寫，還要注意以下幾點：</p>\n<ul>\n<li>使用 git clone 的方法可能會需要在終端機切換當前目錄位置，需看清楚文件說明。</li>\n<li>安裝步驟可能還有其他的額外設定，請將文件看完確保沒有遺漏。</li>\n</ul>\n</li>\n<li>\n<p>修改 Hexo 裡面的 <code>_config.yml</code> 設定檔，把 theme 的內容改成主題的名稱。</p>\n<pre></pre>\n</li>\n<li>\n<p>完成修改後可以先執行一次 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</code> 來重建頁面並啟動本地伺服器檢查是否成功。</p>\n</li>\n</ol>\n<hr/>\n<h2>4. Hexo 個人化樣式設定</h2>\n<ol>\n<li>\n<p>佈景主題的設定方式大致有兩種：</p>\n<ul>\n<li>編輯在 themes/主題名稱 的 <code>_config.yml</code> 檔案（通常是使用 git clone 下載的主題）。</li>\n<li>在網站根目錄建置 <code>_config.主題名稱.yml</code> 來編輯（部分使用 npm 安裝的主題），這種類型的主題在安裝完後網站資料夾不會新增任何檔案，而是整個套件都被放在 node_modules 裡面，可以到裡面找到主題的<code>_config.yml</code> 檔案，複製到自己網站根目錄，並變更檔名為 <code>_config.主題名稱.yml</code> 來做修改。</li>\n</ul>\n</li>\n<li>\n<p>本次介紹的 Hueman 主題屬於前者，所以可以開啟 <code>themes/hueman/_config.yml</code> 這個檔案來修改，至於修改方式當然就是參考啦！</p>\n</li>\n<li>\n<p>如果有些顏色想改掉，但是配置裡面沒有，可以在主題的資料夾裡面搜尋關鍵字 <code>variable</code>，通常會用這個名稱來存放各種顏色、單位樣式，以 Hueman 為例，可以找到 <code>_variables.styl</code> 這個檔案，應該大部分的顏色都能在這邊更改了！</p>\n</li>\n<li>\n<p>如果是版面配置想要做顏色以外的調整，可以搜尋關鍵字 <code>style</code>，以 Hueman 為例，可以找到 <code>style.styl</code> 這個檔案，來加入自己想設定的樣式了（需要具備自行撰寫 css 的能力）。</p>\n</li>\n</ol>\n<br/>\n</div>",
        "content_text": "雖然 Hexo 要完成架設 Blog 僅僅是幾秒鐘的時間就完成，但是在細部調整時還是會遇到不少困難，以下記錄了一些問題排除，也簡介該如何運用 Hexo 的主題做出個人化的配置修改。\n\n1. 啟動本地伺服器（hexo server）時出現告警\n\n\n使用版本：\nHexo: 5.4.0\n\n\n錯誤訊息：\n\n\n\n參考資料：爬了一些文章，大概從 2020 年起就有相關的資訊，後續改版會不會修正不得而知，最後參考解決。\n\n\n發生原因：Hexo 依賴的 nib@1.1.2 套件指定使用較舊版本的 stylus，這個套件已經停止維護，所以需要自己修改解決。\n\n\n解決方式：\n\n編輯 package.json 專案設定檔，加入以下設定指定最新的 stylus 版本：\n\n\n\n執行指令 yarn install 安裝完就完成了。（** npm install 無效 **）\n\n\n\n注意事項：如果透過指令安裝了其他的主題，該設定可能會被覆蓋，再次出現告警，只要再次執行 yarn install 應該就能修復。\n\n\n\n2. 讓 Hexo 在 Github Page 專案中與其他檔案共存\n\n\n問題說明：在 Hexo 發佈到 Github 時會覆蓋掉整個專案目錄，如果想要在裡面放自己寫好的其他靜態頁面，或是專案根目錄存放 README.md 來打造華麗的頁面（可以參考）都會因為 deploy 這個動作被蓋掉。\n\n\n解決方式：\n\n先將要跟著一起部署到 Github 的檔案放到 source 資料夾裡面。\n修改 _config.yml 設定檔，找到 skip_render 這個字眼，並加入檔名或是資料夾名稱\n\n\n\n\n\n3. Hexo 套用主題\n\n\n到  尋找喜歡的版型。\n(如果點進去發現連結已經失效，就換一個吧！)\n\n\n範例頁面通常有這個主題的 Github 連結，本次以 Hueman 這個主題為例，找到小貓的圖示就可以順利到達他的 。\n\n\n接著就來找他的說明文件（Hueman 是放在 Github 首頁的最底下），每個主題因為撰寫人不同，擺放位置都不太一樣。\n\n\n找到安裝方式（有些主題可能放在首頁，有些是寫在文件裡）。\n\n\n開始安裝，有些主題是用 git clone 的方式讓你將專案複製下來，有些可以使用 npm install 的方式安裝，就看文件怎麼寫，還要注意以下幾點：\n\n使用 git clone 的方法可能會需要在終端機切換當前目錄位置，需看清楚文件說明。\n安裝步驟可能還有其他的額外設定，請將文件看完確保沒有遺漏。\n\n\n\n修改 Hexo 裡面的 _config.yml 設定檔，把 theme 的內容改成主題的名稱。\n\n\n\n完成修改後可以先執行一次 hexo cl && hexo g && hexo s 來重建頁面並啟動本地伺服器檢查是否成功。\n\n\n\n4. Hexo 個人化樣式設定\n\n\n佈景主題的設定方式大致有兩種：\n\n編輯在 themes/主題名稱 的 _config.yml 檔案（通常是使用 git clone 下載的主題）。\n在網站根目錄建置 _config.主題名稱.yml 來編輯（部分使用 npm 安裝的主題），這種類型的主題在安裝完後網站資料夾不會新增任何檔案，而是整個套件都被放在 node_modules 裡面，可以到裡面找到主題的_config.yml 檔案，複製到自己網站根目錄，並變更檔名為 _config.主題名稱.yml 來做修改。\n\n\n\n本次介紹的 Hueman 主題屬於前者，所以可以開啟 themes/hueman/_config.yml 這個檔案來修改，至於修改方式當然就是參考啦！\n\n\n如果有些顏色想改掉，但是配置裡面沒有，可以在主題的資料夾裡面搜尋關鍵字 variable，通常會用這個名稱來存放各種顏色、單位樣式，以 Hueman 為例，可以找到 _variables.styl 這個檔案，應該大部分的顏色都能在這邊更改了！\n\n\n如果是版面配置想要做顏色以外的調整，可以搜尋關鍵字 style，以 Hueman 為例，可以找到 style.styl 這個檔案，來加入自己想設定的樣式了（需要具備自行撰寫 css 的能力）。",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "$ hexo -s                              \n(node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency\n(Use `node --trace-warnings ...` to show where the warning was created)\n(node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'column' of module exports inside circular dependency\n(node:87224) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency\n"
            },
            {
                "language": "unknown",
                "content": "\"resolutions\": {\n  \"stylus\": \"^0.54.8\"\n}\n"
            },
            {
                "language": "unknown",
                "content": "skip_render: \n  # 單檔案\n  - README.md\n  # 整個資料夾（包含底下所有檔案）\n  - mypage/*\n"
            },
            {
                "language": "unknown",
                "content": "thene: hueman\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "雖然\nHexo\n要 完成 架設\nBlog\n僅僅 是 幾秒鐘 的 時間 就 完成 ， 但是 在 細部 調整 時 還是 會 遇到 不少 困難 ， 以下 記錄 了 一些 問題 排除 ， 也 簡介 該 如何 運用\nHexo\n的 主題 做出 個人化 的 配置 修改 。\n1 .\n啟動 本地 伺服器 （ hexo\nserver ） 時 出現 告警\n使用 版本 ：\nHexo :\n5.4 . 0\n錯誤 訊息 ：\n參考資料 ： 爬 了 一些 文章 ， 大概 從\n2020\n年 起 就 有 相關 的 資訊 ， 後續 改版 會 不會 修正 不得而知 ， 最後 參考 解決 。\n發生 原因 ： Hexo\n依賴 的\nnib @ 1.1 . 2\n套件 指定 使用 較 舊版本 的\nstylus ， 這個 套件 已經 停止 維護 ， 所以 需要 自己 修改 解決 。\n解決 方式 ：\n編輯\npackage . json\n專案 設定 檔 ， 加入 以下 設定 指定 最新 的\nstylus\n版本 ：\n執行 指令\nyarn\ninstall\n安裝 完 就 完成 了 。 （ * *\nnpm\ninstall\n無效\n* * ）\n注意事項 ： 如果 透過 指令 安裝 了 其他 的 主題 ， 該 設定 可能 會 被 覆蓋 ， 再次出現 告警 ， 只要 再次 執行\nyarn\ninstall\n應該 就 能 修復 。\n2 .\n讓\nHexo\n在\nGithub\nPage\n專案 中 與其 他 檔案 共存\n問題 說明 ： 在\nHexo\n發佈 到\nGithub\n時會 覆蓋 掉 整個 專案 目錄 ， 如果 想要 在 裡面 放 自己 寫 好 的 其他 靜態 頁面 ， 或是 專案 根目錄 存放\nREADME . md\n來 打造 華麗 的 頁面 （ 可以 參考 ） 都 會 因為\ndeploy\n這個 動作 被 蓋掉 。\n解決 方式 ：\n先 將要 跟 著 一起 部署 到\nGithub\n的 檔案 放到\nsource\n資料夾 裡面 。\n修改\n_ config . yml\n設定 檔 ， 找到\nskip _ render\n這個 字眼 ， 並 加入 檔名 或是 資料夾 名稱\n3 .\nHexo\n套用 主題\n到\n尋找 喜歡 的 版型 。\n( 如果 點 進去 發現 連結 已經 失效 ， 就換 一個 吧 ！ )\n範例 頁面 通常 有 這個 主題 的\nGithub\n連結 ， 本次 以\nHueman\n這個 主題 為例 ， 找到 小貓 的 圖示 就 可以 順利 到達 他 的\n。\n接著 就 來 找 他 的 說明 文件 （ Hueman\n是 放在\nGithub\n首頁 的 最 底下 ） ， 每個 主題 因為 撰寫 人 不同 ， 擺放 位置 都 不 太 一樣 。\n找到 安裝 方式 （ 有些 主題 可能 放在 首頁 ， 有些 是 寫 在 文件 裡 ） 。\n開始 安裝 ， 有些 主題 是 用\ngit\nclone\n的 方式 讓 你將 專案 複製 下來 ， 有些 可以 使用\nnpm\ninstall\n的 方式 安裝 ， 就 看 文件 怎麼 寫 ， 還要 注意 以下幾點 ：\n使用\ngit\nclone\n的 方法 可能 會 需要 在 終端機 切換 當前目錄 位置 ， 需 看清楚 文件 說明 。\n安裝 步驟 可能 還有 其他 的 額外 設定 ， 請將 文件 看 完 確保 沒有 遺漏 。\n修改\nHexo\n裡面 的\n_ config . yml\n設定 檔 ， 把\ntheme\n的 內容 改成 主題 的 名稱 。\n完成 修改 後 可以 先 執行 一次\nhexo\ncl\n&&\nhexo\ng\n&&\nhexo\ns\n來 重建 頁面 並啟 動 本地 伺服器 檢查 是否 成功 。\n4 .\nHexo\n個人化 樣式 設定\n佈景 主題 的 設定 方式 大致 有 兩種 ：\n編輯 在\nthemes / 主題 名稱\n的\n_ config . yml\n檔案 （ 通常 是 使用\ngit\nclone\n下載 的 主題 ） 。\n在 網站 根目錄 建置\n_ config . 主題 名稱 . yml\n來 編輯 （ 部分 使用\nnpm\n安裝 的 主題 ） ， 這種 類型 的 主題 在 安裝 完 後 網站 資料夾 不會 新增 任何 檔案 ， 而是 整個 套件 都 被 放在\nnode _ modules\n裡面 ， 可以 到裡面 找到 主題 的 _ config . yml\n檔案 ， 複製到 自己 網站 根目錄 ， 並 變更 檔名 為\n_ config . 主題 名稱 . yml\n來 做 修改 。\n本次 介紹 的\nHueman\n主題 屬於 前者 ， 所以 可以 開啟\nthemes / hueman / _ config . yml\n這個 檔案 來 修改 ， 至於 修改 方式 當然 就是 參考 啦 ！\n如果 有些 顏色 想 改掉 ， 但是 配置 裡面 沒有 ， 可以 在 主題 的 資料夾 裡面 搜尋 關鍵字\nvariable ， 通常 會 用 這個 名稱 來 存放 各種 顏色 、 單位 樣式 ， 以\nHueman\n為例 ， 可以 找到\n_ variables . styl\n這個 檔案 ， 應該 大部分 的 顏色 都 能 在 這邊 更改 了 ！\n如果 是 版面 配置 想要 做 顏色 以外 的 調整 ， 可以 搜尋 關鍵字\nstyle ， 以\nHueman\n為例 ， 可以 找到\nstyle . styl\n這個 檔案 ， 來 加入 自己 想 設定 的 樣式 了 （ 需要 具備 自行 撰寫\ncss\n的 能力 ） 。",
        "word_seg_processed_content_text": "\nhexo\n架設\nblog\n僅僅 幾秒鐘 時間 細部 調整 時 會 不少 困難 記錄 排除 簡介\nhexo\n主題 做出 個人化 配置 修改\n1\n啟動 本地 伺服器 hexo\nserver 時 告警\n版本\nhexo\n5.4 0\n錯誤 訊息\n參考資料 爬 文章 大概\n2020\n年 相關 資訊 後續 改版 會 修正 不得而知 參考 解決\n發生 原因 hexo\n依賴\nnib 1.1 2\n套件 指定 舊版本\nstylus 套件 停止 維護 修改 解決\n解決 方式\n編輯\npackage json\n專案 設定 檔 設定 指定 最新\nstylus\n版本\n執行 指令\nyarn\ninstall\n安裝 完\nnpm\ninstall\n無效\n\n注意事項 透過 指令 安裝 主題 設定 會 覆蓋 再次出現 告警 再次 執行\nyarn\ninstall\n修復\n2\n\nhexo\n\ngithub\npage\n專案 中 檔案 共存\n\nhexo\n發佈\ngithub\n時會 覆蓋 掉 專案 目錄 想要 放 寫 靜態 頁面 專案 根目錄 存放\nreadme md\n打造 華麗 頁面 參考 會\ndeploy\n動作 蓋掉\n解決 方式\n先 將要 部署\ngithub\n檔案 放到\nsource\n資料夾\n修改\nconfig yml\n設定 檔 找到\nskip render\n字眼 檔名 資料夾 名稱\n3\nhexo\n套用 主題\n\n尋找 喜歡 版型\n點 進去 發現 連結 失效 就換\n範例 頁面 主題\ngithub\n連結 本次\nhueman\n主題 為例 找到 小貓 圖示 順利 到達\n\n找 文件 hueman\n放在\ngithub\n首頁 底下 主題 撰寫 擺放 位置 太\n找到 安裝 方式 主題 放在 首頁 寫 文件 裡\n安裝 主題\ngit\nclone\n方式 你將 專案 複製\nnpm\ninstall\n方式 安裝 文件 寫 還要 以下幾點\n\ngit\nclone\n方法 會 終端機 切換 當前目錄 位置 需 看清楚 文件\n安裝 步驟 額外 設定 請將 文件 完 確保 遺漏\n修改\nhexo\n\nconfig yml\n設定 檔\ntheme\n內容 改成 主題 名稱\n修改 先 執行\nhexo\ncl\n&&\nhexo\ng\n&&\nhexo\ns\n重建 頁面 並啟 動 本地 伺服器 檢查 成功\n4\nhexo\n個人化 樣式 設定\n佈景 主題 設定 方式 大致 兩種\n編輯\nthemes 主題 名稱\n\nconfig yml\n檔案\ngit\nclone\n下載 主題\n網站 根目錄 建置\nconfig 主題 名稱 yml\n編輯\nnpm\n安裝 主題 類型 主題 安裝 完 網站 資料夾 新增 檔案 套件 放在\nnode modules\n到裡面 找到 主題 config yml\n檔案 複製到 網站 根目錄 變更 檔名\nconfig 主題 名稱 yml\n做 修改\n本次 介紹\nhueman\n主題 開啟\nthemes hueman config yml\n檔案 修改 修改 方式 參考\n顏色 想 改掉 配置 主題 資料夾 搜尋 關鍵字\nvariable 會 名稱 存放 顏色 單位 樣式\nhueman\n為例 找到\nvariables styl\n檔案 大部分 顏色 更改\n版面 配置 想要 做 顏色 調整 搜尋 關鍵字\nstyle\nhueman\n為例 找到\nstyle styl\n檔案 想 設定 樣式 具備 自行 撰寫\ncss\n能力",
        "extracted_keywords": [
            "hexo",
            "編輯",
            "伺服器",
            "blog",
            "發佈"
        ],
        "extracted_keywords_phrases": [
            "hexo server",
            "hexo 發佈",
            "hexo config",
            "簡介 hexo",
            "修改 hexo"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282327": {
        "href": "https://ithelp.ithome.com.tw/articles/10282327",
        "title": "【第31天】番外篇-Windows + YOLOV4 本地端訓練",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h3>摘要</h3>\n<ol>\n<li>前言</li>\n<li>工具</li>\n<li>流程</li>\n</ol>\n<hr>\n<h3>前言</h3>\n<ol>\n<li>\n<a href=\"https://ithelp.ithome.com.tw/articles/10269483\" target=\"_blank\" rel=\"noreferrer noopener\">【第3天】資料前處理-YOLOv4與自動框選中文字</a>曾提及，Windows + YOLOV4在呼叫本地端GPU時出現異常，因而部署到Colab訓練。</li>\n<li>然而，使用免費Colab GPU訓練時，若訓練樣本數量超過3000張，上傳檔案耗費大量時間(40~60分鐘)，且可能訓練到一半Colab斷線，導致前功盡棄。(變相地限制了樣本數量)</li>\n<li>故近期參考網路上分享文章，嘗試在Windows編譯Darknet與本地端訓練YOLOV4模型，提高訓練樣本數與模型訓練效率。</li>\n<li>在YOLOV4 Darknet環境部署時BUG頻發，整整踩了2天的坑，想起來還是一陣後怕。此次撰文和大家分享YOLOV4部署到Windows本地端可能遭遇的問題與解決方法。同時，也是做個筆記，下次部署時，同樣的坑可不想踩第2次了。</li>\n</ol>\n<hr>\n<h3>工具</h3>\n<ol>\n<li>\n<p>更新顯卡驅動程式：詳細請參閱<a href=\"https://ithelp.ithome.com.tw/articles/10269483\" target=\"_blank\" rel=\"noreferrer noopener\">【第3天】資料前處理-YOLOv4與自動框選中文字</a></p>\n</li>\n<li>\n<p>Visual stutio 2019 與 Microsoft Visual C++ 2015-2019：建議先安裝Visual stutio 2019 與 Microsoft Visual C++ 2015-2019，再安裝CUDA與cuDNN。</p>\n<p>2.1 下載：請點擊<a href=\"https://visualstudio.microsoft.com/zh-hant/downloads/\" target=\"_blank\" rel=\"noreferrer noopener\">此處</a></p>\n<p><img src=\"https://i.imgur.com/jf3ZhWP.png\" alt=\"\"></p>\n<p>2.2 安裝：</p>\n<ul>\n<li>\n<p>點擊安裝Visual stutio 2019</p>\n</li>\n<li>\n<p>勾選使用C++的桌面開發</p>\n<p><img src=\"https://i.imgur.com/SODNXPq.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>CUDA與cuDNN：CUDA版本10.1、cuDNN版本7.6，詳細請參閱<a href=\"https://ithelp.ithome.com.tw/articles/10269483\" target=\"_blank\" rel=\"noreferrer noopener\">【第3天】資料前處理-YOLOv4與自動框選中文字</a></p>\n</li>\n<li>\n<p>OpenCV：版本4.5.4</p>\n<p>4.1 下載：請點擊<a href=\"https://opencv.org/releases/\" target=\"_blank\" rel=\"noreferrer noopener\">此處</a></p>\n<p><img src=\"https://i.imgur.com/Ct0aAcK.png\" alt=\"\"></p>\n<p>4.2 安裝並記下安裝路徑</p>\n<p><img src=\"https://i.imgur.com/JeUH3fg.png\" alt=\"\"></p>\n<p>4.3 新增環境變數(系統變數)</p>\n<ul>\n<li>\n<p>OpenDIR：<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build</code></p>\n<p><img src=\"https://i.imgur.com/gTIoid0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>Path：<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code></p>\n<p><img src=\"https://i.imgur.com/MiGjlaP.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cmake：請點擊<a href=\"https://cmake.org/download/\" target=\"_blank\" rel=\"noreferrer noopener\">此處</a>下載</p>\n<p><img src=\"https://i.imgur.com/vXGNchG.png\" alt=\"\"></p>\n</li>\n<li>\n<p>ZED SDK：請點擊<a href=\"https://www.stereolabs.com/developers/release/\" target=\"_blank\" rel=\"noreferrer noopener\">此處</a>下載</p>\n<p><img src=\"https://i.imgur.com/ePcHtBw.png\" alt=\"\"></p>\n</li>\n<li>\n<p>AlexeyAB/darknet：請點擊<a href=\"https://github.com/AlexeyAB/darknet\" target=\"_blank\" rel=\"noreferrer noopener\">此處</a>下載</p>\n<p><img src=\"https://i.imgur.com/lZvHXwO.png\" alt=\"\"></p>\n</li>\n</ol>\n<hr>\n<h3>流程</h3>\n<ol>\n<li>\n<p>建立專案</p>\n<p>1.1 開啟Visula Studio 2019，點擊建立新的專案。</p>\n<p><img src=\"https://i.imgur.com/HjLF90f.png\" alt=\"\"></p>\n<p>1.2 點擊空白專案。</p>\n<p><img src=\"https://i.imgur.com/qJcXuwE.png\" alt=\"\"></p>\n<p>1.3 點擊新增項目，並新增C++檔(.cpp)，供後續驗證OpenCV是否成功設定。</p>\n<p><img src=\"https://i.imgur.com/hONqa2d.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/vUSahQs.png\" alt=\"\"></p>\n</li>\n<li>\n<p>設定OpenCV路徑</p>\n<p>2.1 點擊左下方「屬性管理員」，右鍵點擊release X64，並點選「加入新的屬性專案工作表」。</p>\n<p><img src=\"https://i.imgur.com/ZbLjOVI.png\" alt=\"\"></p>\n<p>2.2 設定「屬性專案工作表」</p>\n<p><img src=\"https://i.imgur.com/OP1WUDN.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>點擊PropertySheet開啟屬性 → VC++目錄 → Include目錄 → 新增下列3個路徑。(上圖編號3)</p>\n<ul>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include</code>\n</li>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv</code>\n</li>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv2</code>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/9Zljr9v.png\" alt=\"\"></p>\n</li>\n<li>\n<p>VC++目錄 → 程式庫目錄 → 新增下列路徑。(上圖編號4)</p>\n<ul>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib</code>\n</li>\n</ul>\n<p>※ 注意：Visula Studio 2015選擇vc14；Visula Studio 2017、2019選擇vc15。</p>\n<p><img src=\"https://i.imgur.com/TFejVqB.png\" alt=\"\"></p>\n</li>\n<li>\n<p>連結器 → 輸入 → 其他相依性 → 新增下列路徑。</p>\n<ul>\n<li>\n<code>opencv_world454.lib</code>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/EdHr7f0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>驗證OpenCV正常啟用</p>\n<ul>\n<li>\n<p>將待驗證圖片放入Project2</p>\n<p><img src=\"https://i.imgur.com/xiTdX0p.png\" alt=\"\"></p>\n</li>\n<li>\n<p>程式碼：在剛剛新增的C++檔(.cpp)中輸入下列程式碼。</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">//Opencv 僅支援64位元處理器\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;iostream&gt;\n\nusing namespace std;\nusing namespace cv;\n\nint main() {\n\tMat img; //宣告一個儲存影像的矩陣\n    img = imread(\"123.jpg\"); //讀取影像\n\tif (img.empty())\n    {\n    \tcout &lt;&lt; \"請確認影像檔路徑正確\" &lt;&lt; endl;\n    \treturn -1;\n    }\n\timshow(\"test\", img); //印出圖片\n\twaitKey(0);\n    system(\"pause\");\n    return 0;\n}\n</code></pre>\n<ul>\n<li>\n<p>執行結果：選取Release與x64，點擊「本機Windows偵錯工具」，成功顯示影像。</p>\n<p><img src=\"https://i.imgur.com/USV8rYu.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>2.3 若執行後出現錯誤，解決方法如下。</p>\n<ul>\n<li>\n<p>找不到opencv_world454.lib：</p>\n<ul>\n<li>新增系統環境變數 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib</code>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/dNzWYW2.png\" alt=\"\"></p>\n</li>\n<li>\n<p>找不到opencv_world454.dll</p>\n<ul>\n<li>新增系統環境變數 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/ZdzzXw7.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>編譯Darknet</p>\n<p>3.1 將AlexeyAB/darknet下載的darknet-master.zip解壓縮。</p>\n<p><img src=\"https://i.imgur.com/s4l302c.png\" alt=\"\"></p>\n<p>3.2 開啟Cmake並設定路徑</p>\n<p><img src=\"https://i.imgur.com/YZckLoN.png\" alt=\"\"></p>\n<p>3.3 點擊ConFigure → 輸入x64 → 點擊finish</p>\n<p><img src=\"https://i.imgur.com/85SZQM3.png\" alt=\"\"></p>\n<p>3.4 若出現Looking for a CUDA compiler – NOTFOUND，解決方法如下。確認是否改善時，記得要重新開啟Cmake，Delete Cache後，再次點擊ConFigure → 輸入x64 → 點擊finish。</p>\n<ul>\n<li>\n<p>重新安裝：先安裝Visual Stutio再安裝CUDA</p>\n</li>\n<li>\n<p>到控制台 → 新增移除程式 → 查看是否有安裝到NVIDIA Tools Extension SDK(NVTX)</p>\n<p><img src=\"https://i.imgur.com/lrmRWvY.png\" alt=\"\"></p>\n</li>\n<li>\n<p>確認路徑中是否存在下列4個檔案，否則將路徑1的檔案複製到路徑2。</p>\n<ul>\n<li>\n<p>路徑1：<code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\extras\\visual_studio_integration\\MSBuildExtensions</code></p>\n<p><img src=\"https://i.imgur.com/v418LHI.png\" alt=\"\"></p>\n</li>\n<li>\n<p>路徑2：<code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations</code></p>\n<p><img src=\"https://i.imgur.com/I5wu42I.png\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>嘗試安裝不同版本的CUDA</p>\n</li>\n</ul>\n<p>3.5 點擊Generate(產出新的Darknet.sln) → Open Project</p>\n<p><img src=\"https://i.imgur.com/wTpRVbC.png\" alt=\"\"></p>\n<p>3.6 生成解決方案：選取Release與x64，點擊建置 → 建置方案</p>\n<p><img src=\"https://i.imgur.com/MEgMrXD.png\" alt=\"\"></p>\n<p>3.7 若生成解決方案時，出現拒絕存取。</p>\n<ul>\n<li>\n<p>點擊方案總管 → 分別點擊滑鼠右鍵建置ALL_BUILD與INSTALL。</p>\n<p><img src=\"https://i.imgur.com/GfC2URR.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>3.8 成功生成解方方案後，將 \\build\\darknet\\Release5 中5個檔案複製到 \\build\\darknet\\x64。</p>\n<p><img src=\"https://i.imgur.com/yS9HsNa.png\" alt=\"\"></p>\n</li>\n<li>\n<p>執行Darknet訓練模型</p>\n<p>4.1 事前準備</p>\n<ul>\n<li>\n<p>按此下載<a href=\"https://github.com/midnightla0710/Yolo_v4/blob/main/train.rar\" target=\"_blank\" rel=\"noreferrer noopener\">train.rar</a>，並解壓縮成train資料夾。</p>\n</li>\n<li>\n<p>將資料集放進train下的\\VOCdevkit\\VOC2021\\JPEGImages</p>\n<p><img src=\"https://i.imgur.com/KC0Y2AP.png\" alt=\"\"></p>\n</li>\n<li>\n<p>將LabelImg標記產生的XML檔，放進train底下\\VOCdevkit\\VOC2021\\Annotations</p>\n<p><img src=\"https://i.imgur.com/qDb0wNS.png\" alt=\"\"></p>\n</li>\n<li>\n<p>將train資料夾移到<code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code></p>\n<p><img src=\"https://i.imgur.com/WSyJy18.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>4.2 執行gen_train_val.py：分配訓練集與測試集。</p>\n<p><img src=\"https://i.imgur.com/Kk2aXds.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/Ozyo2mI.png\" alt=\"\"></p>\n<p>4.3 執行voc_label.py：datasets預處理，標記Train/Test/Val資料集。</p>\n<p><img src=\"https://i.imgur.com/rJnhnzu.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/ZhsiU1K.png\" alt=\"\"></p>\n<p>4.4 開啟obj.data，將路徑修改成絕對路徑。</p>\n<p><img src=\"https://i.imgur.com/B6sImou.png\" alt=\"\"></p>\n<p>4.5 開啟cmd視窗，輸入指令<code>cd C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code></p>\n<p><img src=\"https://i.imgur.com/mequ1qd.png\" alt=\"\"></p>\n<p>4.6 輸入指令<code>darknet detector train C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\obj.data C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny-myobj.cfg C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny.conv.29 -map</code></p>\n<p><img src=\"https://i.imgur.com/zwpizDA.png\" alt=\"\"></p>\n<p>4.7 若執行時出現錯誤，解決方法如下。</p>\n<ul>\n<li>\n<p>找不到 pthreadVC2.dll：</p>\n<ul>\n<li>前往 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\3rdparty\\pthreads\\bin</code> 複製pthreadVC2.dll。</li>\n<li>複製到<code>C:\\Windows\\System32</code> 和<code>C:\\Windows\\System64</code>資料夾內。</li>\n</ul>\n<p><img src=\"https://i.imgur.com/jJb47D0.png\" alt=\"\"></p>\n</li>\n<li>\n<p>找不到 opencv_world454.dll</p>\n<ul>\n<li>前往<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code>複製opencv_world454.dll</li>\n<li>複製到<code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code>資料夾</li>\n</ul>\n<p><img src=\"https://i.imgur.com/EUaVcI6.png\" alt=\"\"></p>\n</li>\n</ul>\n<p>4.8 YOLOV4模型訓練完成</p>\n<p><img src=\"https://i.imgur.com/FKhVne8.png\" alt=\"\"></p>\n<p>4.9 模型預測</p>\n<ul>\n<li>程式碼</li>\n</ul>\n<pre><code class=\"language-python\">import cv2\nimport numpy as np\nimport os\nimport shutil\n\n#讀取模型與訓練權重\ndef initNet():\n    CONFIG = './train_finished_1/yolov4-tiny-myobj.cfg'\n    WEIGHT = './yolov4-tiny-myobj_last.weights'\n    # WEIGHT = './train_finished/yolov4-tiny-myobj_last.weights'\n    net = cv2.dnn.readNet(CONFIG, WEIGHT)\n    model = cv2.dnn_DetectionModel(net)\n    model.setInputParams(size=(416, 416), scale=1/255.0)\n    model.setInputSwapRB(True)\n    return model\n\n#物件偵測\ndef nnProcess(image, model):\n    classes, confs, boxes = model.detect(image, 0.4, 0.1)\n    return classes, confs, boxes\n\n#框選偵測到的物件，並裁減\ndef drawBox(image, classes, confs, boxes):\n    new_image = image.copy()\n    for (classid, conf, box) in zip(classes, confs, boxes):\n        x, y, w, h = box\n        if x - 18 &lt; 0:\n            x = 18\n        if y - 18 &lt; 0:\n            y = 18\n        cv2.rectangle(new_image, (x - 18, y - 18), (x + w + 20, y + h + 24), (0, 255, 0), 3)\n    return new_image\n\n# 裁減圖片\ndef cut_img(image, classes, confs, boxes):\n    cut_img_list = []\n    for (classid, conf, box) in zip(classes, confs, boxes):\n        x, y, w, h = box\n        if x - 18 &lt; 0:\n            x = 18\n        if y - 18 &lt; 0:\n            y = 18\n        cut_img = image[y - 18:y + h + 20, x - 18:x + w + 25]\n        cut_img_list.append(cut_img)\n    return cut_img_list[0]\n\n# 儲存已完成前處理之圖檔(中文路徑)\ndef saveClassify(image, output):\n    cv2.imencode(ext='.jpg', img=image)[1].tofile(output)\n\nif __name__ == '__main__':\n    source = './public_training_data/public_training_data/'\n    # source = './public_training_data/public_testing_data/'\n    files = os.listdir(source)\n    print('※ 資料夾共有 {} 張圖檔'.format(len(files)))\n    print('※ 開始執行YOLOV4物件偵測...')\n    model = initNet()\n    success = fail = uptwo = 0\n    number = 1\n    for file in files:\n        print(' ▼ 第{}張'.format(number))\n        img = cv2.imdecode(np.fromfile(source+file, dtype=np.uint8), -1)\n        classes, confs, boxes = nnProcess(img, model)\n        if len(boxes) == 0:\n            # 儲存原始除檔照片\n            # saveClassify(img, './public_training_data/YOLOV4_pre/fail/' + file)\n            # saveClassify(img, './test123/fail/' + file)\n            fail += 1\n            print('  字元偵測失敗：{}'.format(file))\n            # cv2.imshow('img', img)\n        elif len(boxes) &gt;= 2:\n            print('  字元偵測超過2個')\n            box_img = drawBox(img, classes, confs, boxes)\n            # saveClassify(box_img, './public_training_data/YOLOV4_pre/uptwo/' + file)\n            # saveClassify(img, './test123/uptwo/' + file)\n            # cv2.imshow('img', img)\n            uptwo += 1\n        else:\n            # 框選後圖檔\n            frame = drawBox(img, classes, confs, boxes)\n            # 裁剪後圖檔\n            cut = cut_img(img, classes, confs, boxes)\n            # 儲存裁剪後圖檔\n            # saveClassify(cut, './public_training_data/YOLOV4_pre/success/' + file)\n            # saveClassify(img, './test123/success/' + file)\n            success += 1\n            print('  字元偵測成功：{}'.format(file))\n            # cv2.imshow('img', frame)\n            # cv2.imshow('cut', cut)\n        print('=' * 60)\n        # cv2.waitKey()\n        number += 1\n    print('※ 程式執行完畢')\n    print('※ 總計：成功 {} 張、失敗 {} 張'.format(success, fail))\n    print('※ 偵測超過兩個字元組 {} 張'.format(uptwo))\n</code></pre>\n<ul>\n<li>執行結果(成功框選字串)</li>\n</ul>\n<p><img src=\"https://i.imgur.com/UyMC7iP.png\" alt=\"\"></p>\n</li>\n</ol>\n<hr>\n<h3>小結</h3>\n<p>久違了大家，原以為這篇寫到一半就會偷懶擱置，畢竟Debug已經夠累了。出乎意料地，回過神就寫完了。我想：參加鐵人賽的一個月，讓我養成了學習與撰文分享的好習慣。</p>\n<p>讓我們繼續看下去...</p>\n<hr>\n<h3>參考資料</h3>\n<ol>\n<li>\n<a href=\"https://jianjiesun.medium.com/opencv-visual-studio%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8-3f33baf37e5b\" target=\"_blank\" rel=\"noreferrer noopener\">OpenCV Visual Studio安裝教學</a>\n</li>\n<li>\n<a href=\"https://iter01.com/583441.html\" target=\"_blank\" rel=\"noreferrer noopener\">YOLOv4 win10 配置 + 訓練自己的資料 + 測試</a>\n</li>\n<li>\n<a href=\"https://wings890109.pixnet.net/blog/post/68926387-yolov4%E5%BB%BA%E7%BD%AE%E6%B5%81%E7%A8%8B\" target=\"_blank\" rel=\"noreferrer noopener\">YOLOV4建置流程with within windows10 &amp; VS2019</a>\n</li>\n</ol>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "AI & Data",
        "published_at": "2021-11-03 15:44:32",
        "author_href": "https://ithelp.ithome.com.tw/users/20141810/ironman",
        "author_name": "midnightla",
        "series_href": "https://ithelp.ithome.com.tw/users/20141810/ironman/4759",
        "series_name": "手寫中文字之影像辨識",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<h3>摘要</h3>\n<ol>\n<li>前言</li>\n<li>工具</li>\n<li>流程</li>\n</ol>\n<hr/>\n<h3>前言</h3>\n<ol>\n<li>\n曾提及，Windows + YOLOV4在呼叫本地端GPU時出現異常，因而部署到Colab訓練。</li>\n<li>然而，使用免費Colab GPU訓練時，若訓練樣本數量超過3000張，上傳檔案耗費大量時間(40~60分鐘)，且可能訓練到一半Colab斷線，導致前功盡棄。(變相地限制了樣本數量)</li>\n<li>故近期參考網路上分享文章，嘗試在Windows編譯Darknet與本地端訓練YOLOV4模型，提高訓練樣本數與模型訓練效率。</li>\n<li>在YOLOV4 Darknet環境部署時BUG頻發，整整踩了2天的坑，想起來還是一陣後怕。此次撰文和大家分享YOLOV4部署到Windows本地端可能遭遇的問題與解決方法。同時，也是做個筆記，下次部署時，同樣的坑可不想踩第2次了。</li>\n</ol>\n<hr/>\n<h3>工具</h3>\n<ol>\n<li>\n<p>更新顯卡驅動程式：詳細請參閱</p>\n</li>\n<li>\n<p>Visual stutio 2019 與 Microsoft Visual C++ 2015-2019：建議先安裝Visual stutio 2019 與 Microsoft Visual C++ 2015-2019，再安裝CUDA與cuDNN。</p>\n<p>2.1 下載：請點擊</p>\n<p></p>\n<p>2.2 安裝：</p>\n<ul>\n<li>\n<p>點擊安裝Visual stutio 2019</p>\n</li>\n<li>\n<p>勾選使用C++的桌面開發</p>\n<p></p>\n</li>\n</ul>\n</li>\n<li>\n<p>CUDA與cuDNN：CUDA版本10.1、cuDNN版本7.6，詳細請參閱</p>\n</li>\n<li>\n<p>OpenCV：版本4.5.4</p>\n<p>4.1 下載：請點擊</p>\n<p></p>\n<p>4.2 安裝並記下安裝路徑</p>\n<p></p>\n<p>4.3 新增環境變數(系統變數)</p>\n<ul>\n<li>\n<p>OpenDIR：<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build</code></p>\n<p></p>\n</li>\n<li>\n<p>Path：<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code></p>\n<p></p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cmake：請點擊下載</p>\n<p></p>\n</li>\n<li>\n<p>ZED SDK：請點擊下載</p>\n<p></p>\n</li>\n<li>\n<p>AlexeyAB/darknet：請點擊下載</p>\n<p></p>\n</li>\n</ol>\n<hr/>\n<h3>流程</h3>\n<ol>\n<li>\n<p>建立專案</p>\n<p>1.1 開啟Visula Studio 2019，點擊建立新的專案。</p>\n<p></p>\n<p>1.2 點擊空白專案。</p>\n<p></p>\n<p>1.3 點擊新增項目，並新增C++檔(.cpp)，供後續驗證OpenCV是否成功設定。</p>\n<p></p>\n<p></p>\n</li>\n<li>\n<p>設定OpenCV路徑</p>\n<p>2.1 點擊左下方「屬性管理員」，右鍵點擊release X64，並點選「加入新的屬性專案工作表」。</p>\n<p></p>\n<p>2.2 設定「屬性專案工作表」</p>\n<p></p>\n<ul>\n<li>\n<p>點擊PropertySheet開啟屬性 → VC++目錄 → Include目錄 → 新增下列3個路徑。(上圖編號3)</p>\n<ul>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include</code>\n</li>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv</code>\n</li>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv2</code>\n</li>\n</ul>\n<p></p>\n</li>\n<li>\n<p>VC++目錄 → 程式庫目錄 → 新增下列路徑。(上圖編號4)</p>\n<ul>\n<li>\n<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib</code>\n</li>\n</ul>\n<p>※ 注意：Visula Studio 2015選擇vc14；Visula Studio 2017、2019選擇vc15。</p>\n<p></p>\n</li>\n<li>\n<p>連結器 → 輸入 → 其他相依性 → 新增下列路徑。</p>\n<ul>\n<li>\n<code>opencv_world454.lib</code>\n</li>\n</ul>\n<p></p>\n</li>\n<li>\n<p>驗證OpenCV正常啟用</p>\n<ul>\n<li>\n<p>將待驗證圖片放入Project2</p>\n<p></p>\n</li>\n<li>\n<p>程式碼：在剛剛新增的C++檔(.cpp)中輸入下列程式碼。</p>\n</li>\n</ul>\n<pre></pre>\n<ul>\n<li>\n<p>執行結果：選取Release與x64，點擊「本機Windows偵錯工具」，成功顯示影像。</p>\n<p></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>2.3 若執行後出現錯誤，解決方法如下。</p>\n<ul>\n<li>\n<p>找不到opencv_world454.lib：</p>\n<ul>\n<li>新增系統環境變數 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib</code>\n</li>\n</ul>\n<p></p>\n</li>\n<li>\n<p>找不到opencv_world454.dll</p>\n<ul>\n<li>新增系統環境變數 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code>\n</li>\n</ul>\n<p></p>\n</li>\n</ul>\n</li>\n<li>\n<p>編譯Darknet</p>\n<p>3.1 將AlexeyAB/darknet下載的darknet-master.zip解壓縮。</p>\n<p></p>\n<p>3.2 開啟Cmake並設定路徑</p>\n<p></p>\n<p>3.3 點擊ConFigure → 輸入x64 → 點擊finish</p>\n<p></p>\n<p>3.4 若出現Looking for a CUDA compiler – NOTFOUND，解決方法如下。確認是否改善時，記得要重新開啟Cmake，Delete Cache後，再次點擊ConFigure → 輸入x64 → 點擊finish。</p>\n<ul>\n<li>\n<p>重新安裝：先安裝Visual Stutio再安裝CUDA</p>\n</li>\n<li>\n<p>到控制台 → 新增移除程式 → 查看是否有安裝到NVIDIA Tools Extension SDK(NVTX)</p>\n<p></p>\n</li>\n<li>\n<p>確認路徑中是否存在下列4個檔案，否則將路徑1的檔案複製到路徑2。</p>\n<ul>\n<li>\n<p>路徑1：<code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\extras\\visual_studio_integration\\MSBuildExtensions</code></p>\n<p></p>\n</li>\n<li>\n<p>路徑2：<code>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations</code></p>\n<p></p>\n</li>\n</ul>\n</li>\n<li>\n<p>嘗試安裝不同版本的CUDA</p>\n</li>\n</ul>\n<p>3.5 點擊Generate(產出新的Darknet.sln) → Open Project</p>\n<p></p>\n<p>3.6 生成解決方案：選取Release與x64，點擊建置 → 建置方案</p>\n<p></p>\n<p>3.7 若生成解決方案時，出現拒絕存取。</p>\n<ul>\n<li>\n<p>點擊方案總管 → 分別點擊滑鼠右鍵建置ALL_BUILD與INSTALL。</p>\n<p></p>\n</li>\n</ul>\n<p>3.8 成功生成解方方案後，將 \\build\\darknet\\Release5 中5個檔案複製到 \\build\\darknet\\x64。</p>\n<p></p>\n</li>\n<li>\n<p>執行Darknet訓練模型</p>\n<p>4.1 事前準備</p>\n<ul>\n<li>\n<p>按此下載，並解壓縮成train資料夾。</p>\n</li>\n<li>\n<p>將資料集放進train下的\\VOCdevkit\\VOC2021\\JPEGImages</p>\n<p></p>\n</li>\n<li>\n<p>將LabelImg標記產生的XML檔，放進train底下\\VOCdevkit\\VOC2021\\Annotations</p>\n<p></p>\n</li>\n<li>\n<p>將train資料夾移到<code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code></p>\n<p></p>\n</li>\n</ul>\n<p>4.2 執行gen_train_val.py：分配訓練集與測試集。</p>\n<p></p>\n<p></p>\n<p>4.3 執行voc_label.py：datasets預處理，標記Train/Test/Val資料集。</p>\n<p></p>\n<p></p>\n<p>4.4 開啟obj.data，將路徑修改成絕對路徑。</p>\n<p></p>\n<p>4.5 開啟cmd視窗，輸入指令<code>cd C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code></p>\n<p></p>\n<p>4.6 輸入指令<code>darknet detector train C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\obj.data C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny-myobj.cfg C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny.conv.29 -map</code></p>\n<p></p>\n<p>4.7 若執行時出現錯誤，解決方法如下。</p>\n<ul>\n<li>\n<p>找不到 pthreadVC2.dll：</p>\n<ul>\n<li>前往 <code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\3rdparty\\pthreads\\bin</code> 複製pthreadVC2.dll。</li>\n<li>複製到<code>C:\\Windows\\System32</code> 和<code>C:\\Windows\\System64</code>資料夾內。</li>\n</ul>\n<p></p>\n</li>\n<li>\n<p>找不到 opencv_world454.dll</p>\n<ul>\n<li>前往<code>C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin</code>複製opencv_world454.dll</li>\n<li>複製到<code>C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64</code>資料夾</li>\n</ul>\n<p></p>\n</li>\n</ul>\n<p>4.8 YOLOV4模型訓練完成</p>\n<p></p>\n<p>4.9 模型預測</p>\n<ul>\n<li>程式碼</li>\n</ul>\n<pre></pre>\n<ul>\n<li>執行結果(成功框選字串)</li>\n</ul>\n<p></p>\n</li>\n</ol>\n<hr/>\n<h3>小結</h3>\n<p>久違了大家，原以為這篇寫到一半就會偷懶擱置，畢竟Debug已經夠累了。出乎意料地，回過神就寫完了。我想：參加鐵人賽的一個月，讓我養成了學習與撰文分享的好習慣。</p>\n<p>讓我們繼續看下去...</p>\n<hr/>\n<h3>參考資料</h3>\n<ol>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ol>\n<br/>\n</div>",
        "content_text": "摘要\n\n前言\n工具\n流程\n\n\n前言\n\n\n曾提及，Windows + YOLOV4在呼叫本地端GPU時出現異常，因而部署到Colab訓練。\n然而，使用免費Colab GPU訓練時，若訓練樣本數量超過3000張，上傳檔案耗費大量時間(40~60分鐘)，且可能訓練到一半Colab斷線，導致前功盡棄。(變相地限制了樣本數量)\n故近期參考網路上分享文章，嘗試在Windows編譯Darknet與本地端訓練YOLOV4模型，提高訓練樣本數與模型訓練效率。\n在YOLOV4 Darknet環境部署時BUG頻發，整整踩了2天的坑，想起來還是一陣後怕。此次撰文和大家分享YOLOV4部署到Windows本地端可能遭遇的問題與解決方法。同時，也是做個筆記，下次部署時，同樣的坑可不想踩第2次了。\n\n\n工具\n\n\n更新顯卡驅動程式：詳細請參閱\n\n\nVisual stutio 2019 與 Microsoft Visual C++ 2015-2019：建議先安裝Visual stutio 2019 與 Microsoft Visual C++ 2015-2019，再安裝CUDA與cuDNN。\n2.1 下載：請點擊\n\n2.2 安裝：\n\n\n點擊安裝Visual stutio 2019\n\n\n勾選使用C++的桌面開發\n\n\n\n\n\nCUDA與cuDNN：CUDA版本10.1、cuDNN版本7.6，詳細請參閱\n\n\nOpenCV：版本4.5.4\n4.1 下載：請點擊\n\n4.2 安裝並記下安裝路徑\n\n4.3 新增環境變數(系統變數)\n\n\nOpenDIR：C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\n\n\n\nPath：C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin\n\n\n\n\n\nCmake：請點擊下載\n\n\n\nZED SDK：請點擊下載\n\n\n\nAlexeyAB/darknet：請點擊下載\n\n\n\n\n流程\n\n\n建立專案\n1.1 開啟Visula Studio 2019，點擊建立新的專案。\n\n1.2 點擊空白專案。\n\n1.3 點擊新增項目，並新增C++檔(.cpp)，供後續驗證OpenCV是否成功設定。\n\n\n\n\n設定OpenCV路徑\n2.1 點擊左下方「屬性管理員」，右鍵點擊release X64，並點選「加入新的屬性專案工作表」。\n\n2.2 設定「屬性專案工作表」\n\n\n\n點擊PropertySheet開啟屬性 → VC++目錄 → Include目錄 → 新增下列3個路徑。(上圖編號3)\n\n\nC:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\n\n\nC:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv\n\n\nC:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\include\\opencv2\n\n\n\n\n\nVC++目錄 → 程式庫目錄 → 新增下列路徑。(上圖編號4)\n\n\nC:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib\n\n\n※ 注意：Visula Studio 2015選擇vc14；Visula Studio 2017、2019選擇vc15。\n\n\n\n連結器 → 輸入 → 其他相依性 → 新增下列路徑。\n\n\nopencv_world454.lib\n\n\n\n\n\n驗證OpenCV正常啟用\n\n\n將待驗證圖片放入Project2\n\n\n\n程式碼：在剛剛新增的C++檔(.cpp)中輸入下列程式碼。\n\n\n\n\n\n執行結果：選取Release與x64，點擊「本機Windows偵錯工具」，成功顯示影像。\n\n\n\n\n\n2.3 若執行後出現錯誤，解決方法如下。\n\n\n找不到opencv_world454.lib：\n\n新增系統環境變數 C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\lib\n\n\n\n\n\n找不到opencv_world454.dll\n\n新增系統環境變數 C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin\n\n\n\n\n\n\n\n編譯Darknet\n3.1 將AlexeyAB/darknet下載的darknet-master.zip解壓縮。\n\n3.2 開啟Cmake並設定路徑\n\n3.3 點擊ConFigure → 輸入x64 → 點擊finish\n\n3.4 若出現Looking for a CUDA compiler – NOTFOUND，解決方法如下。確認是否改善時，記得要重新開啟Cmake，Delete Cache後，再次點擊ConFigure → 輸入x64 → 點擊finish。\n\n\n重新安裝：先安裝Visual Stutio再安裝CUDA\n\n\n到控制台 → 新增移除程式 → 查看是否有安裝到NVIDIA Tools Extension SDK(NVTX)\n\n\n\n確認路徑中是否存在下列4個檔案，否則將路徑1的檔案複製到路徑2。\n\n\n路徑1：C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v10.1\\extras\\visual_studio_integration\\MSBuildExtensions\n\n\n\n路徑2：C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations\n\n\n\n\n\n嘗試安裝不同版本的CUDA\n\n\n3.5 點擊Generate(產出新的Darknet.sln) → Open Project\n\n3.6 生成解決方案：選取Release與x64，點擊建置 → 建置方案\n\n3.7 若生成解決方案時，出現拒絕存取。\n\n\n點擊方案總管 → 分別點擊滑鼠右鍵建置ALL_BUILD與INSTALL。\n\n\n\n3.8 成功生成解方方案後，將 \\build\\darknet\\Release5 中5個檔案複製到 \\build\\darknet\\x64。\n\n\n\n執行Darknet訓練模型\n4.1 事前準備\n\n\n按此下載，並解壓縮成train資料夾。\n\n\n將資料集放進train下的\\VOCdevkit\\VOC2021\\JPEGImages\n\n\n\n將LabelImg標記產生的XML檔，放進train底下\\VOCdevkit\\VOC2021\\Annotations\n\n\n\n將train資料夾移到C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\n\n\n\n4.2 執行gen_train_val.py：分配訓練集與測試集。\n\n\n4.3 執行voc_label.py：datasets預處理，標記Train/Test/Val資料集。\n\n\n4.4 開啟obj.data，將路徑修改成絕對路徑。\n\n4.5 開啟cmd視窗，輸入指令cd C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\n\n4.6 輸入指令darknet detector train C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\obj.data C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny-myobj.cfg C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64\\train\\yolov4-tiny.conv.29 -map\n\n4.7 若執行時出現錯誤，解決方法如下。\n\n\n找不到 pthreadVC2.dll：\n\n前往 C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\3rdparty\\pthreads\\bin 複製pthreadVC2.dll。\n複製到C:\\Windows\\System32 和C:\\Windows\\System64資料夾內。\n\n\n\n\n找不到 opencv_world454.dll\n\n前往C:\\Users\\88691\\Desktop\\YOLOV4\\opencv\\build\\x64\\vc15\\bin複製opencv_world454.dll\n複製到C:\\Users\\88691\\Desktop\\YOLOV4\\darknet-master\\build\\darknet\\x64資料夾\n\n\n\n\n4.8 YOLOV4模型訓練完成\n\n4.9 模型預測\n\n程式碼\n\n\n\n執行結果(成功框選字串)\n\n\n\n\n\n小結\n久違了大家，原以為這篇寫到一半就會偷懶擱置，畢竟Debug已經夠累了。出乎意料地，回過神就寫完了。我想：參加鐵人賽的一個月，讓我養成了學習與撰文分享的好習慣。\n讓我們繼續看下去...\n\n參考資料",
        "content_code_info": [
            {
                "language": "c++",
                "content": "//Opencv 僅支援64位元處理器\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nusing namespace std;\nusing namespace cv;\n\nint main() {\n\tMat img; //宣告一個儲存影像的矩陣\n    img = imread(\"123.jpg\"); //讀取影像\n\tif (img.empty())\n    {\n    \tcout << \"請確認影像檔路徑正確\" << endl;\n    \treturn -1;\n    }\n\timshow(\"test\", img); //印出圖片\n\twaitKey(0);\n    system(\"pause\");\n    return 0;\n}\n"
            },
            {
                "language": "python",
                "content": "import cv2\nimport numpy as np\nimport os\nimport shutil\n\n#讀取模型與訓練權重\ndef initNet():\n    CONFIG = './train_finished_1/yolov4-tiny-myobj.cfg'\n    WEIGHT = './yolov4-tiny-myobj_last.weights'\n    # WEIGHT = './train_finished/yolov4-tiny-myobj_last.weights'\n    net = cv2.dnn.readNet(CONFIG, WEIGHT)\n    model = cv2.dnn_DetectionModel(net)\n    model.setInputParams(size=(416, 416), scale=1/255.0)\n    model.setInputSwapRB(True)\n    return model\n\n#物件偵測\ndef nnProcess(image, model):\n    classes, confs, boxes = model.detect(image, 0.4, 0.1)\n    return classes, confs, boxes\n\n#框選偵測到的物件，並裁減\ndef drawBox(image, classes, confs, boxes):\n    new_image = image.copy()\n    for (classid, conf, box) in zip(classes, confs, boxes):\n        x, y, w, h = box\n        if x - 18 < 0:\n            x = 18\n        if y - 18 < 0:\n            y = 18\n        cv2.rectangle(new_image, (x - 18, y - 18), (x + w + 20, y + h + 24), (0, 255, 0), 3)\n    return new_image\n\n# 裁減圖片\ndef cut_img(image, classes, confs, boxes):\n    cut_img_list = []\n    for (classid, conf, box) in zip(classes, confs, boxes):\n        x, y, w, h = box\n        if x - 18 < 0:\n            x = 18\n        if y - 18 < 0:\n            y = 18\n        cut_img = image[y - 18:y + h + 20, x - 18:x + w + 25]\n        cut_img_list.append(cut_img)\n    return cut_img_list[0]\n\n# 儲存已完成前處理之圖檔(中文路徑)\ndef saveClassify(image, output):\n    cv2.imencode(ext='.jpg', img=image)[1].tofile(output)\n\nif __name__ == '__main__':\n    source = './public_training_data/public_training_data/'\n    # source = './public_training_data/public_testing_data/'\n    files = os.listdir(source)\n    print('※ 資料夾共有 {} 張圖檔'.format(len(files)))\n    print('※ 開始執行YOLOV4物件偵測...')\n    model = initNet()\n    success = fail = uptwo = 0\n    number = 1\n    for file in files:\n        print(' ▼ 第{}張'.format(number))\n        img = cv2.imdecode(np.fromfile(source+file, dtype=np.uint8), -1)\n        classes, confs, boxes = nnProcess(img, model)\n        if len(boxes) == 0:\n            # 儲存原始除檔照片\n            # saveClassify(img, './public_training_data/YOLOV4_pre/fail/' + file)\n            # saveClassify(img, './test123/fail/' + file)\n            fail += 1\n            print('  字元偵測失敗：{}'.format(file))\n            # cv2.imshow('img', img)\n        elif len(boxes) >= 2:\n            print('  字元偵測超過2個')\n            box_img = drawBox(img, classes, confs, boxes)\n            # saveClassify(box_img, './public_training_data/YOLOV4_pre/uptwo/' + file)\n            # saveClassify(img, './test123/uptwo/' + file)\n            # cv2.imshow('img', img)\n            uptwo += 1\n        else:\n            # 框選後圖檔\n            frame = drawBox(img, classes, confs, boxes)\n            # 裁剪後圖檔\n            cut = cut_img(img, classes, confs, boxes)\n            # 儲存裁剪後圖檔\n            # saveClassify(cut, './public_training_data/YOLOV4_pre/success/' + file)\n            # saveClassify(img, './test123/success/' + file)\n            success += 1\n            print('  字元偵測成功：{}'.format(file))\n            # cv2.imshow('img', frame)\n            # cv2.imshow('cut', cut)\n        print('=' * 60)\n        # cv2.waitKey()\n        number += 1\n    print('※ 程式執行完畢')\n    print('※ 總計：成功 {} 張、失敗 {} 張'.format(success, fail))\n    print('※ 偵測超過兩個字元組 {} 張'.format(uptwo))\n"
            }
        ],
        "programming_languages": [
            "c++",
            "python"
        ],
        "word_seg_content_text": "摘要\n前言\n工具\n流程\n前言\n曾 提及 ， Windows\n+\nYOLOV4 在 呼叫 本地 端 GPU 時 出現異常 ， 因而 部署 到 Colab 訓練 。\n然而 ， 使用 免費 Colab\nGPU 訓練 時 ， 若 訓練樣本 數量 超過 3000 張 ， 上傳 檔案 耗費 大量 時間 ( 40 ~ 60 分鐘 ) ， 且 可能 訓練 到 一半 Colab 斷線 ， 導致 前功盡棄 。 ( 變相 地 限制 了 樣本 數量 )\n故 近期 參考 網路上 分享 文章 ， 嘗試 在 Windows 編譯 Darknet 與 本地 端 訓練 YOLOV4 模型 ， 提高 訓練 樣本數 與 模型 訓練 效率 。\n在 YOLOV4\nDarknet 環境 部署 時 BUG 頻發 ， 整整 踩 了 2 天 的 坑 ， 想 起來 還是 一陣 後怕 。 此次 撰文 和 大家 分享 YOLOV4 部署 到 Windows 本地 端 可能 遭遇 的 問題 與 解決 方法 。 同時 ， 也 是 做 個 筆記 ， 下次 部署 時 ， 同樣 的 坑 可 不想 踩 第 2 次 了 。\n工具\n更新 顯卡 驅動程式 ： 詳細 請參閱\nVisual\nstutio\n2019\n與\nMicrosoft\nVisual\nC++\n2015 - 2019 ： 建議 先 安裝 Visual\nstutio\n2019\n與\nMicrosoft\nVisual\nC++\n2015 - 2019 ， 再 安裝 CUDA 與 cuDNN 。\n2.1\n下載 ： 請 點擊\n2.2\n安裝 ：\n點擊 安裝 Visual\nstutio\n2019\n勾選 使用 C++ 的 桌面開發\nCUDA 與 cuDNN ： CUDA 版本 10.1 、 cuDNN 版本 7.6 ， 詳細 請參閱\nOpenCV ： 版本 4.5 . 4\n4.1\n下載 ： 請 點擊\n4.2\n安裝 並 記下 安裝 路徑\n4.3\n新增 環境 變數 ( 系統 變數 )\nOpenDIR ： C : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build\nPath ： C : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ x64 \\ vc15 \\ bin\nCmake ： 請 點擊 下載\nZED\nSDK ： 請 點擊 下載\nAlexeyAB / darknet ： 請 點擊 下載\n流程\n建立 專案\n1.1\n開啟 Visula\nStudio\n2019 ， 點擊 建立 新 的 專案 。\n1.2\n點擊 空白 專案 。\n1.3\n點擊 新增 項目 ， 並 新增 C++ 檔 ( . cpp ) ， 供 後續 驗證 OpenCV 是否 成功 設定 。\n設定 OpenCV 路徑\n2.1\n點擊 左下方 「 屬性 管理員 」 ， 右鍵 點擊 release\nX64 ， 並 點選 「 加入 新 的 屬性 專案工作 表 」 。\n2.2\n設定 「 屬性 專案工作 表 」\n點擊 PropertySheet 開啟 屬性\n→\nV C++ 目錄\n→\nInclude 目錄\n→\n新增 下列 3 個 路徑 。 ( 上圖 編號 3 )\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ include\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ include \\ opencv\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ include \\ opencv2\nV C++ 目錄\n→\n程式庫 目錄\n→\n新增 下列 路徑 。 ( 上圖 編號 4 )\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ x64 \\ vc15 \\ lib\n※\n注意 ： Visula\nStudio\n2015 選擇 vc14 ； Visula\nStudio\n2017 、 2019 選擇 vc15 。\n連結 器\n→\n輸入\n→\n其他 相依 性\n→\n新增 下列 路徑 。\nopencv _ world454 . lib\n驗證 OpenCV 正常 啟用\n將待 驗證 圖片 放入 Project2\n程式碼 ： 在 剛剛 新增 的 C++ 檔 ( . cpp ) 中 輸入 下列 程式碼 。\n執行 結果 ： 選取 Release 與 x64 ， 點擊 「 本機 Windows 偵錯 工具 」 ， 成功 顯示 影像 。\n2.3\n若 執行 後 出現 錯誤 ， 解決 方法 如下 。\n找 不到 opencv _ world454 . lib ：\n新增 系統 環境 變數\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ x64 \\ vc15 \\ lib\n找 不到 opencv _ world454 . dll\n新增 系統 環境 變數\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ x64 \\ vc15 \\ bin\n編譯 Darknet\n3.1\n將 AlexeyAB / darknet 下載 的 darknet - master . zip 解壓縮 。\n3.2\n開啟 Cmake 並 設定 路徑\n3.3\n點擊 ConFigure\n→\n輸入 x64\n→\n點擊 finish\n3.4\n若 出現 Looking\nfor\na\nCUDA\ncompiler\n–\nNOTFOUND ， 解決 方法 如下 。 確認 是否 改善 時 ， 記得 要 重新 開啟 Cmake ， Delete\nCache 後 ， 再次 點擊 ConFigure\n→\n輸入 x64\n→\n點擊 finish 。\n重新安裝 ： 先 安裝 Visual\nStutio 再 安裝 CUDA\n到 控制台\n→\n新增 移除 程式\n→\n查看 是否 有 安裝 到 NVIDIA\nTools\nExtension\nSDK ( NVTX )\n確認 路徑 中 是否 存在 下列 4 個 檔案 ， 否則 將 路徑 1 的 檔案 複製到 路徑 2 。\n路徑 1 ： C : \\ Program\nFiles \\ NVIDIA\nGPU\nComputing\nToolkit \\ CUDA \\ v10.1 \\ extras \\ visual _ studio _ integration \\ MSBuildExtensions\n路徑 2 ： C : \\ Program\nFiles\n( x86 ) \\ Microsoft\nVisual\nStudio \\ 2019 \\ Community \\ MSBuild \\ Microsoft \\ VC \\ v160 \\ BuildCustomizations\n嘗試 安裝 不同 版本 的 CUDA\n3.5\n點擊 Generate ( 產出 新 的 Darknet . sln )\n→\nOpen\nProject\n3.6\n生成 解決方案 ： 選取 Release 與 x64 ， 點擊 建置\n→\n建置 方案\n3.7\n若 生成 解決方案 時 ， 出現 拒絕 存取 。\n點擊 方案 總管\n→\n分別 點擊 滑鼠 右鍵 建置 ALL _ BUILD 與 INSTALL 。\n3.8\n成功 生成 解方 方案 後 ， 將\n\\ build \\ darknet \\ Release5\n中 5 個 檔案 複製到\n\\ build \\ darknet \\ x64 。\n執行 Darknet 訓練 模型\n4.1\n事前 準備\n按此 下載 ， 並 解壓縮 成 train 資料夾 。\n將 資料集 放進 train 下 的 \\ VOCdevkit \\ VOC2021 \\ JPEGImages\n將 LabelImg 標記 產生 的 XML 檔 ， 放進 train 底下 \\ VOCdevkit \\ VOC2021 \\ Annotations\n將 train 資料夾 移到 C : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64\n4.2\n執行 gen _ train _ val . py ： 分配 訓練 集 與 測試 集 。\n4.3\n執行 voc _ label . py ： datasets 預處理 ， 標記 Train / Test / Val 資料集 。\n4.4\n開啟 obj . data ， 將 路徑 修改 成 絕對路徑 。\n4.5\n開啟 cmd 視窗 ， 輸入 指令 cd\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64\n4.6\n輸入 指令 darknet\ndetector\ntrain\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64 \\ train \\ obj . data\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64 \\ train \\ yolov4 - tiny - myobj . cfg\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64 \\ train \\ yolov4 - tiny . conv.29\n- map\n4.7\n若 執行 時 出現 錯誤 ， 解決 方法 如下 。\n找 不到\npthreadVC2 . dll ：\n前往\nC : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ 3rdparty \\ pthreads \\ bin\n複製 pthreadVC2 . dll 。\n複製到 C : \\ Windows \\ System32\n和 C : \\ Windows \\ System64 資料夾 內 。\n找 不到\nopencv _ world454 . dll\n前往 C : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ opencv \\ build \\ x64 \\ vc15 \\ bin 複製 opencv _ world454 . dll\n複製到 C : \\ Users \\ 88691 \\ Desktop \\ YOLOV4 \\ darknet - master \\ build \\ darknet \\ x64 資料夾\n4.8\nYOLOV4 模型 訓練 完成\n4.9\n模型 預測\n程式碼\n執行 結果 ( 成功 框選 字串 )\n小結\n久違 了 大家 ， 原以 為 這篇 寫到 一半 就 會 偷懶 擱置 ， 畢竟 Debug 已經 夠累 了 。 出乎意料 地 ， 回過 神 就 寫 完 了 。 我 想 ： 參加 鐵人 賽 的 一個月 ， 讓 我 養成 了 學習 與 撰文 分享 的 好 習慣 。\n讓 我們 繼續 看 下去 ...\n參考資料",
        "word_seg_processed_content_text": "摘要\n前言\n工具\n流程\n前言\n提及 windows\n\nyolov4 呼叫 本地 端 gpu 時 出現異常 部署 colab 訓練\n免費 colab\ngpu 訓練 時 訓練樣本 數量 超過 3000 張 上傳 檔案 耗費 時間 40 60 分鐘 訓練 一半 colab 斷線 導致 前功盡棄 變相 樣本 數量\n近期 參考 網路上 分享 文章 嘗試 windows 編譯 darknet 本地 端 訓練 yolov4 模型 提高 訓練 樣本數 模型 訓練 效率\nyolov4\ndarknet 環境 部署 時 bug 頻發 整整 踩 2 天 坑 想 一陣 後怕 此次 撰文 分享 yolov4 部署 windows 本地 端 遭遇 解決 方法 做 筆記 下次 部署 時 坑 不想 踩 2 次\n工具\n更新 顯卡 驅動程式 詳細 請參閱\nvisual\nstutio\n2019\n\nmicrosoft\nvisual\nc++\n2015 2019 建議 先 安裝 visual\nstutio\n2019\n\nmicrosoft\nvisual\nc++\n2015 2019 安裝 cuda cudnn\n2.1\n下載 請 點擊\n2.2\n安裝\n點擊 安裝 visual\nstutio\n2019\n勾選 c++ 桌面開發\ncuda cudnn cuda 版本 10.1 cudnn 版本 7.6 詳細 請參閱\nopencv 版本 4.5 4\n4.1\n下載 請 點擊\n4.2\n安裝 記下 安裝 路徑\n4.3\n新增 環境 變數 系統 變數\nopendir c users 88691 desktop yolov4 opencv build\npath c users 88691 desktop yolov4 opencv build x64 vc15 bin\ncmake 請 點擊 下載\nzed\nsdk 請 點擊 下載\nalexeyab darknet 請 點擊 下載\n流程\n建立 專案\n1.1\n開啟 visula\nstudio\n2019 點擊 建立 新 專案\n1.2\n點擊 空白 專案\n1.3\n點擊 新增 項目 新增 c++ 檔 cpp 供 後續 驗證 opencv 成功 設定\n設定 opencv 路徑\n2.1\n點擊 左下方 屬性 管理員 右鍵 點擊 release\nx64 點選 新 屬性 專案工作 表\n2.2\n設定 屬性 專案工作 表\n點擊 propertysheet 開啟 屬性\n→\nv c++ 目錄\n→\ninclude 目錄\n→\n新增 3 路徑 上圖 編號 3\nc users 88691 desktop yolov4 opencv build include\nc users 88691 desktop yolov4 opencv build include opencv\nc users 88691 desktop yolov4 opencv build include opencv2\nv c++ 目錄\n→\n程式庫 目錄\n→\n新增 路徑 上圖 編號 4\nc users 88691 desktop yolov4 opencv build x64 vc15 lib\n※\nvisula\nstudio\n2015 選擇 vc14 visula\nstudio\n2017 2019 選擇 vc15\n連結 器\n→\n輸入\n→\n相依 性\n→\n新增 路徑\nopencv world454 lib\n驗證 opencv 啟用\n將待 驗證 圖片 放入 project2\n程式碼 剛剛 新增 c++ 檔 cpp 中 輸入 程式碼\n執行 選取 release x64 點擊 本機 windows 偵錯 工具 成功 顯示 影像\n2.3\n執行 錯誤 解決 方法\n找 不到 opencv world454 lib\n新增 系統 環境 變數\nc users 88691 desktop yolov4 opencv build x64 vc15 lib\n找 不到 opencv world454 dll\n新增 系統 環境 變數\nc users 88691 desktop yolov4 opencv build x64 vc15 bin\n編譯 darknet\n3.1\nalexeyab darknet 下載 darknet master zip 解壓縮\n3.2\n開啟 cmake 設定 路徑\n3.3\n點擊 configure\n→\n輸入 x64\n→\n點擊 finish\n3.4\nlooking\n\na\ncuda\ncompiler\n–\nnotfound 解決 方法 確認 改善 時 記得 開啟 cmake delete\ncache 再次 點擊 configure\n→\n輸入 x64\n→\n點擊 finish\n重新安裝 先 安裝 visual\nstutio 安裝 cuda\n控制台\n→\n新增 移除 程式\n→\n查看 安裝 nvidia\ntools\nextension\nsdk nvtx\n確認 路徑 中 4 檔案 路徑 1 檔案 複製到 路徑 2\n路徑 1 c program\nfiles nvidia\ngpu\ncomputing\ntoolkit cuda v10.1 extras visual studio integration msbuildextensions\n路徑 2 c program\nfiles\nx86 microsoft\nvisual\nstudio 2019 community msbuild microsoft vc v160 buildcustomizations\n嘗試 安裝 版本 cuda\n3.5\n點擊 generate 產出 新 darknet sln\n→\nopen\nproject\n3.6\n生成 解決方案 選取 release x64 點擊 建置\n→\n建置 方案\n3.7\n生成 解決方案 時 拒絕 存取\n點擊 方案 總管\n→\n點擊 滑鼠 右鍵 建置 build install\n3.8\n成功 生成 解方 方案\nbuild darknet release5\n中 5 檔案 複製到\nbuild darknet x64\n執行 darknet 訓練 模型\n4.1\n事前\n按此 下載 解壓縮 成 train 資料夾\n資料集 放進 train vocdevkit voc2021 jpegimages\nlabelimg 標記 xml 檔 放進 train 底下 vocdevkit voc2021 annotations\ntrain 資料夾 移到 c users 88691 desktop yolov4 darknet master build darknet x64\n4.2\n執行 gen train val py 分配 訓練 集 測試 集\n4.3\n執行 voc label py datasets 預處理 標記 train test val 資料集\n4.4\n開啟 obj data 路徑 修改 成 絕對路徑\n4.5\n開啟 cmd 視窗 輸入 指令 cd\nc users 88691 desktop yolov4 darknet master build darknet x64\n4.6\n輸入 指令 darknet\ndetector\ntrain\nc users 88691 desktop yolov4 darknet master build darknet x64 train obj data\nc users 88691 desktop yolov4 darknet master build darknet x64 train yolov4 tiny myobj cfg\nc users 88691 desktop yolov4 darknet master build darknet x64 train yolov4 tiny conv.29\nmap\n4.7\n執行 時 錯誤 解決 方法\n找 不到\npthreadvc2 dll\n前往\nc users 88691 desktop yolov4 darknet master 3rdparty pthreads bin\n複製 pthreadvc2 dll\n複製到 c windows system32\nc windows system64 資料夾 內\n找 不到\nopencv world454 dll\n前往 c users 88691 desktop yolov4 opencv build x64 vc15 bin 複製 opencv world454 dll\n複製到 c users 88691 desktop yolov4 darknet master build darknet x64 資料夾\n4.8\nyolov4 模型 訓練\n4.9\n模型 預測\n程式碼\n執行 成功 框選 字串\n小結\n久違 原以 這篇 寫到 一半 會 偷懶 擱置 畢竟 debug 夠累 出乎意料 回過 神 寫 完 想 參加 鐵人 賽 一個月 養成 學習 撰文 分享 習慣\n...\n參考資料",
        "extracted_keywords": [
            "訓練樣本",
            "訓練",
            "程式庫",
            "gpu",
            "studio"
        ],
        "extracted_keywords_phrases": [
            "訓練 yolov4",
            "訓練樣本 數量",
            "gpu 訓練",
            "訓練 樣本數",
            "訓練 訓練樣本"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282427": {
        "href": "https://ithelp.ithome.com.tw/articles/10282427",
        "title": "Day 47. build a ios app in unity",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>我決定試試看做個簡單的手機遊戲，先把最重要的build流程理順了，再來決定怎麼開發。</p>\n<p>這次一樣有參考Unity Learn上的教程:<a href=\"https://learn.unity.com/tutorial/publishing-for-ios#5ecf9859edbc2a001f63c65b\" target=\"_blank\" rel=\"noreferrer noopener\">Publishing for iOS</a></p>\n<p>　<br>\n　</p>\n<h2>在Windows上安裝Unity(基於MacBook雙系統)</h2>\n<p>出現的錯誤我在mac雙系統的windows10上安裝unity，選擇dev tools+android build+ios build的時候沒辦法安裝unity 軟體，會出現錯誤，改成分批安裝，先安裝android build，再來ios build，再來visual studio就成功了0.0。</p>\n<p>　<br>\n　<br>\n　</p>\n<h2>註冊成為IOS開發者前，先建立一個Apple ID</h2>\n<p><a href=\"https://learn.unity.com/tutorial/publishing-for-ios#5ecf9859edbc2a001f63c65b\" target=\"_blank\" rel=\"noreferrer noopener\">Publishing for iOS</a>教程上直接叫你去開發者網頁拿certificate，但是要拿到這個東西，首先要有Apple ID，然後這個Apple ID要加入開發者才行。</p>\n<p>但加入IOS開發者，即使是作為個人開發者，也需要付年費...如果只是想嘗試開發的窮學生，我覺得代價有點高，還好好像有一個免費開發的方式，條件是要有Mac電腦(因為要用到Xcode)，然後最好創建一個新的Apple ID，不要跟自己個人的混用比較好。</p>\n<p>　<br>\n　</p>\n<p>如果是要走正規路的，可以看這部影片：<a href=\"https://www.youtube.com/watch?v=9xQw0p0w9Ac&amp;ab_channel=Epitome\" target=\"_blank\" rel=\"noreferrer noopener\">Building to iOS - Unity 2021 [Provisioning profile, App store, Apple Developer]</a></p>\n<p>免費開發路線走<a href=\"http://blog.applicationloader.net/blog/zh/1073.html\" target=\"_blank\" rel=\"noreferrer noopener\">這邊</a><br>\n走到Appuploader時換走<a href=\"https://www.twblogs.net/a/5b85688e2b71775d1cd2eb85\" target=\"_blank\" rel=\"noreferrer noopener\">這邊</a>或<a href=\"http://www.applicationloader.net/\" target=\"_blank\" rel=\"noreferrer noopener\">那邊</a></p>\n<p>我到這邊就先結束@@，總是要確認一下這個工具安不安全，還是有別的方法。<br>\n　<br>\n　</p>\n<p>　<br>\n　</p>\n<p>接下來就是是理論上要做的事了：</p>\n<ol>\n<li>如果在Windows上build好ios的project後</li>\n<li>再把project丟過來到mac上，用Xcode進行編譯...吧？</li>\n</ol>\n<p>或者另一條路：直接在mac嘗試我想做的project就好</p>\n<p>我覺得光是要讓iOS APP能編譯完成，上傳至手機中就要很費功夫的感覺，因為不想花每年7500元去成為正式開發員啊....</p>\n<p>參考：<br>\n<a href=\"https://learn.unity.com/tutorial/publishing-for-ios#5ecf9859edbc2a001f63c65b\" target=\"_blank\" rel=\"noreferrer noopener\">https://learn.unity.com/tutorial/publishing-for-ios#5ecf9859edbc2a001f63c65b</a><br>\n<a href=\"https://betacomputing.co.jp/development/\" target=\"_blank\" rel=\"noreferrer noopener\">https://betacomputing.co.jp/development/</a><br>\n<a href=\"http://blog.applicationloader.net/blog/zh/1073.html\" target=\"_blank\" rel=\"noreferrer noopener\">http://blog.applicationloader.net/blog/zh/1073.html</a><br>\n<a href=\"https://blog.csdn.net/handsome0916/article/details/108638643\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.csdn.net/handsome0916/article/details/108638643</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-11-03 04:14:27",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3902",
        "series_name": "從零開始了解Unity或Unreal Engine應用於VR軟體開發",
        "series_num": "30",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>我決定試試看做個簡單的手機遊戲，先把最重要的build流程理順了，再來決定怎麼開發。</p>\n<p>這次一樣有參考Unity Learn上的教程:</p>\n<p>　<br/>\n　</p>\n<h2>在Windows上安裝Unity(基於MacBook雙系統)</h2>\n<p>出現的錯誤我在mac雙系統的windows10上安裝unity，選擇dev tools+android build+ios build的時候沒辦法安裝unity 軟體，會出現錯誤，改成分批安裝，先安裝android build，再來ios build，再來visual studio就成功了0.0。</p>\n<p>　<br/>\n　<br/>\n　</p>\n<h2>註冊成為IOS開發者前，先建立一個Apple ID</h2>\n<p>教程上直接叫你去開發者網頁拿certificate，但是要拿到這個東西，首先要有Apple ID，然後這個Apple ID要加入開發者才行。</p>\n<p>但加入IOS開發者，即使是作為個人開發者，也需要付年費...如果只是想嘗試開發的窮學生，我覺得代價有點高，還好好像有一個免費開發的方式，條件是要有Mac電腦(因為要用到Xcode)，然後最好創建一個新的Apple ID，不要跟自己個人的混用比較好。</p>\n<p>　<br/>\n　</p>\n<p>如果是要走正規路的，可以看這部影片：</p>\n<p>免費開發路線走<br/>\n走到Appuploader時換走或</p>\n<p>我到這邊就先結束@@，總是要確認一下這個工具安不安全，還是有別的方法。<br/>\n　<br/>\n　</p>\n<p>　<br/>\n　</p>\n<p>接下來就是是理論上要做的事了：</p>\n<ol>\n<li>如果在Windows上build好ios的project後</li>\n<li>再把project丟過來到mac上，用Xcode進行編譯...吧？</li>\n</ol>\n<p>或者另一條路：直接在mac嘗試我想做的project就好</p>\n<p>我覺得光是要讓iOS APP能編譯完成，上傳至手機中就要很費功夫的感覺，因為不想花每年7500元去成為正式開發員啊....</p>\n<p>參考：<br/>\n<br/>\n<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "我決定試試看做個簡單的手機遊戲，先把最重要的build流程理順了，再來決定怎麼開發。\n這次一樣有參考Unity Learn上的教程:\n　\n　\n在Windows上安裝Unity(基於MacBook雙系統)\n出現的錯誤我在mac雙系統的windows10上安裝unity，選擇dev tools+android build+ios build的時候沒辦法安裝unity 軟體，會出現錯誤，改成分批安裝，先安裝android build，再來ios build，再來visual studio就成功了0.0。\n　\n　\n　\n註冊成為IOS開發者前，先建立一個Apple ID\n教程上直接叫你去開發者網頁拿certificate，但是要拿到這個東西，首先要有Apple ID，然後這個Apple ID要加入開發者才行。\n但加入IOS開發者，即使是作為個人開發者，也需要付年費...如果只是想嘗試開發的窮學生，我覺得代價有點高，還好好像有一個免費開發的方式，條件是要有Mac電腦(因為要用到Xcode)，然後最好創建一個新的Apple ID，不要跟自己個人的混用比較好。\n　\n　\n如果是要走正規路的，可以看這部影片：\n免費開發路線走\n走到Appuploader時換走或\n我到這邊就先結束@@，總是要確認一下這個工具安不安全，還是有別的方法。\n　\n　\n　\n　\n接下來就是是理論上要做的事了：\n\n如果在Windows上build好ios的project後\n再把project丟過來到mac上，用Xcode進行編譯...吧？\n\n或者另一條路：直接在mac嘗試我想做的project就好\n我覺得光是要讓iOS APP能編譯完成，上傳至手機中就要很費功夫的感覺，因為不想花每年7500元去成為正式開發員啊....\n參考：",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "我 決定 試試看 做個 簡單 的 手機遊戲 ， 先 把 最 重要 的 build 流程 理順 了 ， 再來 決定 怎麼 開發 。\n這次 一樣 有 參考 Unity\nLearn 上 的 教程 :\n在 Windows 上 安裝 Unity ( 基於 MacBook 雙系統 )\n出現 的 錯誤 我 在 mac 雙系統 的 windows10 上 安裝 unity ， 選擇 dev\ntools + android\nbuild + ios\nbuild 的 時候 沒 辦法 安裝 unity\n軟體 ， 會 出現 錯誤 ， 改成 分批 安裝 ， 先 安裝 android\nbuild ， 再來 ios\nbuild ， 再來 visual\nstudio 就 成功 了 0.0 。\n註冊 成為 IOS 開發者 前 ， 先 建立 一個 Apple\nID\n教程 上 直接 叫 你 去 開發者 網頁 拿 certificate ， 但是 要 拿到 這個 東西 ， 首先 要 有 Apple\nID ， 然後 這個 Apple\nID 要 加入 開發者 才行 。\n但 加入 IOS 開發者 ， 即使 是 作為 個人 開發者 ， 也 需要 付年費 ... 如果 只是 想 嘗試 開發 的 窮學生 ， 我 覺得 代價 有點 高 ， 還好 好像 有 一個 免費 開發 的 方式 ， 條件 是 要 有 Mac 電腦 ( 因為 要 用到 Xcode ) ， 然後 最好 創建 一個 新 的 Apple\nID ， 不要 跟 自己 個人 的 混用 比較 好 。\n如果 是 要 走 正規 路 的 ， 可以 看 這部 影片 ：\n免費 開發 路線 走\n走到 Appuploader 時換 走 或\n我 到 這邊 就 先 結束 @ @ ， 總是 要 確認 一下 這個 工具 安 不 安全 ， 還是 有 別的 方法 。\n接下來 就是 是 理論 上要 做 的 事 了 ：\n如果 在 Windows 上 build 好 ios 的 project 後\n再 把 project 丟 過來 到 mac 上 ， 用 Xcode 進行 編譯 ... 吧 ？\n或者 另 一條 路 ： 直接 在 mac 嘗試 我 想 做 的 project 就 好\n我 覺得 光是 要 讓 iOS\nAPP 能 編譯 完成 ， 上傳 至 手機 中 就要 很 費功夫 的 感覺 ， 因為 不想 花 每年 7500 元去 成為 正式 開發 員 啊 ....\n參考 ：",
        "word_seg_processed_content_text": "試試看 做個 簡單 手機遊戲 先 build 流程 理順 再來 開發\n這次 參考 unity\nlearn 教程\nwindows 安裝 unity 基於 macbook 雙系統\n錯誤 mac 雙系統 windows10 安裝 unity 選擇 dev\ntools android\nbuild ios\nbuild 沒 辦法 安裝 unity\n軟體 會 錯誤 改成 分批 安裝 先 安裝 android\nbuild 再來 ios\nbuild 再來 visual\nstudio 成功 0.0\n註冊 ios 開發者 前 先 建立 apple\nid\n教程 開發者 網頁 certificate 拿到 東西 apple\nid apple\nid 開發者 才行\nios 開發者 開發者 付年費 ... 想 嘗試 開發 窮學生 代價 高 還好 好像 免費 開發 方式 條件 mac 電腦 用到 xcode 創建 新 apple\nid 混用\n走 正規 路 這部 影片\n免費 開發 路線 走\n走到 appuploader 時換 走\n先 結束 確認 工具 安 方法\n接下來 理論 上要 做 事\nwindows build ios project\nproject 丟 mac xcode 編譯 ...\n一條 路 mac 嘗試 想 做 project\n光是 ios\napp 編譯 上傳 手機 中 就要 費功夫 感覺 不想 花 7500 元去 正式 開發 員 ....\n參考",
        "extracted_keywords": [
            "macbook",
            "app",
            "軟體",
            "開發者",
            "unity"
        ],
        "extracted_keywords_phrases": [
            "手機遊戲 build",
            "unity 軟體",
            "android build",
            "安裝 unity",
            "project mac"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282432": {
        "href": "https://ithelp.ithome.com.tw/articles/10282432",
        "title": "把Nano板run起來",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>先說，我是用mac雙系統的win10，本來想在mac os做，但是下載下來的說明書裡有個自己的驅動程式，是.exe結尾的，所以只好改用windows。</p>\n<p>　<br>\n　</p>\n<p>我是用副廠板，到這裡去下載說明書(<a href=\"http://www.pu-yang.com.tw/download.html)%EF%BC%8C%E7%84%B6%E5%BE%8C%E4%B8%8B%E8%BC%89%E4%B8%8B%E4%BE%86%E7%9A%84%E6%9C%89%E5%85%A9%E5%80%8B%EF%BC%8C%E4%B8%80%E5%80%8B%E6%98%AF%E8%AA%AA%E6%98%8E%E6%9B%B8%EF%BC%8C%E4%B8%80%E5%80%8B%E6%98%AF%E5%89%AF%E5%BB%A0%E6%9D%BF%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F%E3%80%82\" target=\"_blank\" rel=\"noreferrer noopener\">http://www.pu-yang.com.tw/download.html)，然後下載下來的有兩個，一個是說明書，一個是副廠板自己的驅動程式。</a><br>\n<img src=\"https://i.imgur.com/5cV7diQ.png\" alt=\"\"></p>\n<p>　<br>\n　</p>\n<p>接著到<a href=\"https://www.arduino.cc/en/software\" target=\"_blank\" rel=\"noreferrer noopener\">arduino官網</a>下載IDE安裝，接著打開IDE，把開發板選擇為\"Arduino Nano\"，並且調整序列埠。</p>\n<h3>如果序列埠是灰色的不能按怎麼辦?</h3>\n<p>我用說明書附帶的驅動程式安裝後，就找得到序列埠了～</p>\n<p>　</p>\n<h3>上傳空白程式失敗怎麼辦?</h3>\n<p>這個部分阿，我有遇到這個問題，嘗試重新插拔Nano跟關掉IDE都沒辦法，一直出現這個錯誤：</p>\n<pre><code>avrdude: stk500_recv(): programmer is not responding\n</code></pre>\n<p>最後我是把處理器切換成後面帶有(Old Bootloader)，就能上傳了。</p>\n<p>　<br>\n　</p>\n<p>接著就可以來讓LED亮亮看。</p>\n<p>可惜的是，我遵照<a href=\"https://blog.jmaker.com.tw/arduino-tutorials-3/\" target=\"_blank\" rel=\"noreferrer noopener\">https://blog.jmaker.com.tw/arduino-tutorials-3/</a> 的接法，先接5V，確定電路是正常的，也就是先確定LED阿，杜邦線是好的，有成功的話，LED就會常亮。</p>\n<p>接著就是用範例程式，我是用Blink，但是很悲傷的是，我只有曾經插pin腳D8(程式內寫11)，曾經成功讓LED閃爍，詭異的是之後都再也無法重現。<del>我pin腳是看<a href=\"https://www.makerguides.com/arduino-nano/\" target=\"_blank\" rel=\"noreferrer noopener\">這篇文章的</a></del></p>\n<p>我D2、D5、D8都試過，只有D8有成功那一次，之後洗掉後，怎麼樣都無法成功，期間我也有插回5V確認電路是運作正常的。</p>\n<p>但就是....Sad</p>\n<p>11052021更新:<br>\n<code>digital腳位找到了</code>，在<a href=\"https://ithelp.ithome.com.tw/articles/10282469\" target=\"_blank\" rel=\"noreferrer noopener\">下一篇</a>有。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-03 02:07:36",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3904",
        "series_name": "來解數學跟刷圖論跟幾何程式題或者我突然想研究的主題",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>先說，我是用mac雙系統的win10，本來想在mac os做，但是下載下來的說明書裡有個自己的驅動程式，是.exe結尾的，所以只好改用windows。</p>\n<p>　<br/>\n　</p>\n<p>我是用副廠板，到這裡去下載說明書(<br/>\n</p>\n<p>　<br/>\n　</p>\n<p>接著到下載IDE安裝，接著打開IDE，把開發板選擇為\"Arduino Nano\"，並且調整序列埠。</p>\n<h3>如果序列埠是灰色的不能按怎麼辦?</h3>\n<p>我用說明書附帶的驅動程式安裝後，就找得到序列埠了～</p>\n<p>　</p>\n<h3>上傳空白程式失敗怎麼辦?</h3>\n<p>這個部分阿，我有遇到這個問題，嘗試重新插拔Nano跟關掉IDE都沒辦法，一直出現這個錯誤：</p>\n<pre></pre>\n<p>最後我是把處理器切換成後面帶有(Old Bootloader)，就能上傳了。</p>\n<p>　<br/>\n　</p>\n<p>接著就可以來讓LED亮亮看。</p>\n<p>可惜的是，我遵照 的接法，先接5V，確定電路是正常的，也就是先確定LED阿，杜邦線是好的，有成功的話，LED就會常亮。</p>\n<p>接著就是用範例程式，我是用Blink，但是很悲傷的是，我只有曾經插pin腳D8(程式內寫11)，曾經成功讓LED閃爍，詭異的是之後都再也無法重現。<del>我pin腳是看</del></p>\n<p>我D2、D5、D8都試過，只有D8有成功那一次，之後洗掉後，怎麼樣都無法成功，期間我也有插回5V確認電路是運作正常的。</p>\n<p>但就是....Sad</p>\n<p>11052021更新:<br/>\n<code>digital腳位找到了</code>，在有。</p>\n<br/>\n</div>",
        "content_text": "先說，我是用mac雙系統的win10，本來想在mac os做，但是下載下來的說明書裡有個自己的驅動程式，是.exe結尾的，所以只好改用windows。\n　\n　\n我是用副廠板，到這裡去下載說明書(\n\n　\n　\n接著到下載IDE安裝，接著打開IDE，把開發板選擇為\"Arduino Nano\"，並且調整序列埠。\n如果序列埠是灰色的不能按怎麼辦?\n我用說明書附帶的驅動程式安裝後，就找得到序列埠了～\n　\n上傳空白程式失敗怎麼辦?\n這個部分阿，我有遇到這個問題，嘗試重新插拔Nano跟關掉IDE都沒辦法，一直出現這個錯誤：\n\n最後我是把處理器切換成後面帶有(Old Bootloader)，就能上傳了。\n　\n　\n接著就可以來讓LED亮亮看。\n可惜的是，我遵照 的接法，先接5V，確定電路是正常的，也就是先確定LED阿，杜邦線是好的，有成功的話，LED就會常亮。\n接著就是用範例程式，我是用Blink，但是很悲傷的是，我只有曾經插pin腳D8(程式內寫11)，曾經成功讓LED閃爍，詭異的是之後都再也無法重現。我pin腳是看\n我D2、D5、D8都試過，只有D8有成功那一次，之後洗掉後，怎麼樣都無法成功，期間我也有插回5V確認電路是運作正常的。\n但就是....Sad\n11052021更新:\ndigital腳位找到了，在有。",
        "content_code_info": [
            {
                "language": "unknown",
                "content": "avrdude: stk500_recv(): programmer is not responding\n"
            }
        ],
        "programming_languages": [],
        "word_seg_content_text": "先說 ， 我 是 用 mac 雙系統 的 win10 ， 本來 想 在 mac\nos 做 ， 但是 下載 下來 的 說明書 裡有 個 自己 的 驅動程式 ， 是 . exe 結尾 的 ， 所以 只好 改用 windows 。\n我 是 用 副 廠板 ， 到 這裡 去 下載 說明書 (\n接著 到 下載 IDE 安裝 ， 接著 打開 IDE ， 把 開發板 選擇 為 \" Arduino\nNano \" ， 並且 調整 序列 埠 。\n如果 序列 埠 是 灰色 的 不能 按 怎麼辦 ?\n我用 說明書 附帶 的 驅動程式 安裝 後 ， 就 找 得到 序列 埠 了 ～\n上傳 空白 程式 失敗 怎麼辦 ?\n這個 部分 阿 ， 我 有 遇到 這個 問題 ， 嘗試 重新 插拔 Nano 跟 關掉 IDE 都 沒 辦法 ， 一直 出現 這個 錯誤 ：\n最後 我 是 把 處理器 切換 成 後面 帶有 ( Old\nBootloader ) ， 就 能 上傳 了 。\n接著 就 可 以來 讓 LED 亮亮 看 。\n可惜 的 是 ， 我 遵照\n的 接法 ， 先接 5V ， 確定 電路 是 正常 的 ， 也 就是 先 確定 LED 阿 ， 杜邦 線 是 好 的 ， 有 成功 的話 ， LED 就 會常亮 。\n接著 就是 用 範例 程式 ， 我 是 用 Blink ， 但是 很 悲傷 的 是 ， 我 只有 曾經 插 pin 腳 D8 ( 程式 內寫 11 ) ， 曾經 成功 讓 LED 閃爍 ， 詭異 的 是 之後 都 再也 無法 重現 。 我 pin 腳 是 看\n我 D2 、 D5 、 D8 都 試過 ， 只有 D8 有 成功 那 一次 ， 之後 洗掉 後 ， 怎麼樣 都 無法 成功 ， 期間 我 也 有 插回 5V 確認 電路 是 運作 正常 的 。\n但 就是 .... Sad\n11052021 更新 :\ndigital 腳位 找到 了 ， 在 有 。",
        "word_seg_processed_content_text": "先說 mac 雙系統 win10 本來 想 mac\nos 做 下載 說明書 裡有 驅動程式 exe 結尾 只好 改用 windows\n副 廠板 下載 說明書\n下載 ide 安裝 打開 ide 開發板 選擇 arduino\nnano 調整 序列 埠\n序列 埠 灰色\n我用 說明書 附帶 驅動程式 安裝 找 序列 埠\n上傳 空白 程式 失敗\n嘗試 插拔 nano 關掉 ide 沒 辦法 錯誤\n處理器 切換 成 帶有 old\nbootloader 上傳\nled 亮亮\n可惜 遵照\n接法 先接 5v 電路 先 led 杜邦 線 成功 led 會常亮\n範例 程式 blink 悲傷 插 pin 腳 d8 程式 內寫 11 成功 led 閃爍 詭異 再也 重現 pin 腳\nd2 d5 d8 試過 d8 成功 洗掉 成功 期間 插回 5v 確認 電路 運作\n.... sad\n11052021 更新\ndigital 腳位 找到",
        "extracted_keywords": [
            "mac",
            "處理器",
            "nano",
            "windows",
            "驅動程式"
        ],
        "extracted_keywords_phrases": [
            "mac 雙系統",
            "本來 mac",
            "mac",
            "先說 mac",
            "mac os"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282384": {
        "href": "https://ithelp.ithome.com.tw/articles/10282384",
        "title": "Leetcode: 114. Flatten Binary Tree to Linked List  |  含C++筆記",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>把二元樹展開成linked list，而且順序要跟preorder traversal一樣，三種traversal的模式我都知道，但每次preorder跟inorder就是會搞混，像這題我看圖片的時候，知道他要先找父節點再找左右子點，可以每次都把這個模式記成inorder@@</p>\n<p>然後這題有提示說可以寫成O(1)的寫法</p>\n<p>　<br>\n　</p>\n<h3>思路</h3>\n<p>看到回傳值是void的時候懞了，這樣是要用cout嗎？如果是cout的話，直接print preorder順序就好吧，但是對cout空陣列沒概念。</p>\n<p>如果不是的話，我想到的應該是O(n)的解法，創建一個linked list的變數，然後Preorder traversal一遍樹，把巡到的值塞入list中，結束。</p>\n<p>　<br>\n　</p>\n<h3>C++筆記</h3>\n<pre><code class=\"language-cpp\">// 手動建立像這樣的變數與指標時，首先要先建立能抓著變數頭的指標`ans_root`，以及一個可以用來移動的指標`ptr`\nTreeNode* ans_root = new TreeNode();\nTreeNode* ptr = ans_root;\n\n// 接著在每次需要新的Node時，用同樣的變數名建立新的Node跟新的指標`newptr`，把新的Node跟新建的變數連接在一起\nTreeNode* newptr = new TreeNode();\nnewptr-&gt;val = curr-&gt;val;\nptr-&gt;right = newptr;\nptr = ptr-&gt;right;\n</code></pre>\n<p>　<br>\n　</p>\n<h3>程式碼</h3>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    TreeNode* ans_root = new TreeNode();\n    TreeNode* ptr = ans_root;\n    void flatten(TreeNode* root) {\n        preorder(root);\n        root-&gt;val = ans_root-&gt;right-&gt;val;\n        root-&gt;left = ans_root-&gt;right-&gt;left;\n        root-&gt;right = ans_root-&gt;right-&gt;right;\n    }\n    \nprivate:\n    void preorder(TreeNode* curr) {\n        if (curr == NULL)\n            return;\n        TreeNode* newptr = new TreeNode(curr-&gt;val);\n        ptr-&gt;right = newptr;\n        ptr = ptr-&gt;right;\n        preorder(curr-&gt;left);\n        preorder(curr-&gt;right);\n    }\n};\n</code></pre>\n<p>　<br>\n　</p>\n<h3>@@</h3>\n<p>遇到void的話，基本上就是把原本給的變數的內容改成答案。</p>\n<p>本來想想一下O(1)解法，結果直接睡著，而且他說的O(1)是空間，不是時間</p>\n<p><a href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1543162/C%2B%2B-Simple-Approach-using-Recursion-O(1)-space-complexity!\" target=\"_blank\" rel=\"noreferrer noopener\">O(1)的解法</a>，他這個應該是用postorder的方式，直接把原本的樹拆解。</p>\n<p>　</p>\n<p>參考：<br>\n<a href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1543611/C%2B%2B-easy-preorder-recursive-solution\" target=\"_blank\" rel=\"noreferrer noopener\">https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1543611/C%2B%2B-easy-preorder-recursive-solution</a><br>\n<a href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1543162/C%2B%2B-Simple-Approach-using-Recursion-O(1)-space-complexity!\" target=\"_blank\" rel=\"noreferrer noopener\">https://leetcode.com/problems/flatten-binary-tree-to-linked-list/discuss/1543162/C%2B%2B-Simple-Approach-using-Recursion-O(1)-space-complexity!</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-11-02 01:45:34",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3904",
        "series_name": "來解數學跟刷圖論跟幾何程式題或者我突然想研究的主題",
        "series_num": "30",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>把二元樹展開成linked list，而且順序要跟preorder traversal一樣，三種traversal的模式我都知道，但每次preorder跟inorder就是會搞混，像這題我看圖片的時候，知道他要先找父節點再找左右子點，可以每次都把這個模式記成inorder@@</p>\n<p>然後這題有提示說可以寫成O(1)的寫法</p>\n<p>　<br/>\n　</p>\n<h3>思路</h3>\n<p>看到回傳值是void的時候懞了，這樣是要用cout嗎？如果是cout的話，直接print preorder順序就好吧，但是對cout空陣列沒概念。</p>\n<p>如果不是的話，我想到的應該是O(n)的解法，創建一個linked list的變數，然後Preorder traversal一遍樹，把巡到的值塞入list中，結束。</p>\n<p>　<br/>\n　</p>\n<h3>C++筆記</h3>\n<pre></pre>\n<p>　<br/>\n　</p>\n<h3>程式碼</h3>\n<pre></pre>\n<p>　<br/>\n　</p>\n<h3>@@</h3>\n<p>遇到void的話，基本上就是把原本給的變數的內容改成答案。</p>\n<p>本來想想一下O(1)解法，結果直接睡著，而且他說的O(1)是空間，不是時間</p>\n<p>，他這個應該是用postorder的方式，直接把原本的樹拆解。</p>\n<p>　</p>\n<p>參考：<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "把二元樹展開成linked list，而且順序要跟preorder traversal一樣，三種traversal的模式我都知道，但每次preorder跟inorder就是會搞混，像這題我看圖片的時候，知道他要先找父節點再找左右子點，可以每次都把這個模式記成inorder@@\n然後這題有提示說可以寫成O(1)的寫法\n　\n　\n思路\n看到回傳值是void的時候懞了，這樣是要用cout嗎？如果是cout的話，直接print preorder順序就好吧，但是對cout空陣列沒概念。\n如果不是的話，我想到的應該是O(n)的解法，創建一個linked list的變數，然後Preorder traversal一遍樹，把巡到的值塞入list中，結束。\n　\n　\nC++筆記\n\n　\n　\n程式碼\n\n　\n　\n@@\n遇到void的話，基本上就是把原本給的變數的內容改成答案。\n本來想想一下O(1)解法，結果直接睡著，而且他說的O(1)是空間，不是時間\n，他這個應該是用postorder的方式，直接把原本的樹拆解。\n　\n參考：",
        "content_code_info": [
            {
                "language": "c++",
                "content": "// 手動建立像這樣的變數與指標時，首先要先建立能抓著變數頭的指標`ans_root`，以及一個可以用來移動的指標`ptr`\nTreeNode* ans_root = new TreeNode();\nTreeNode* ptr = ans_root;\n\n// 接著在每次需要新的Node時，用同樣的變數名建立新的Node跟新的指標`newptr`，把新的Node跟新建的變數連接在一起\nTreeNode* newptr = new TreeNode();\nnewptr->val = curr->val;\nptr->right = newptr;\nptr = ptr->right;\n"
            },
            {
                "language": "c++",
                "content": "class Solution {\npublic:\n    TreeNode* ans_root = new TreeNode();\n    TreeNode* ptr = ans_root;\n    void flatten(TreeNode* root) {\n        preorder(root);\n        root->val = ans_root->right->val;\n        root->left = ans_root->right->left;\n        root->right = ans_root->right->right;\n    }\n    \nprivate:\n    void preorder(TreeNode* curr) {\n        if (curr == NULL)\n            return;\n        TreeNode* newptr = new TreeNode(curr->val);\n        ptr->right = newptr;\n        ptr = ptr->right;\n        preorder(curr->left);\n        preorder(curr->right);\n    }\n};\n"
            }
        ],
        "programming_languages": [
            "c++"
        ],
        "word_seg_content_text": "把 二元 樹 展開 成 linked\nlist ， 而且 順序 要 跟 preorder\ntraversal 一樣 ， 三種 traversal 的 模式 我 都 知道 ， 但 每次 preorder 跟 inorder 就是 會 搞混 ， 像 這題 我 看 圖片 的 時候 ， 知道 他 要 先 找父 節點 再 找 左右 子點 ， 可以 每次 都 把 這個 模式 記成 inorder @ @\n然後 這題 有 提示 說 可以 寫成 O ( 1 ) 的 寫法\n思路\n看到 回傳 值 是 void 的 時候 懞 了 ， 這樣 是 要 用 cout 嗎 ？ 如果 是 cout 的話 ， 直接 print\npreorder 順序 就 好 吧 ， 但是 對 cout 空 陣列 沒 概念 。\n如果 不是 的話 ， 我 想到 的 應該 是 O ( n ) 的 解法 ， 創建 一個 linked\nlist 的 變數 ， 然後 Preorder\ntraversal 一遍 樹 ， 把 巡到 的 值 塞入 list 中 ， 結束 。\nC++ 筆記\n程式碼\n@ @\n遇到 void 的話 ， 基本上 就是 把 原本 給的 變數 的 內容 改成 答案 。\n本來 想想 一下 O ( 1 ) 解法 ， 結果 直接 睡著 ， 而且 他 說 的 O ( 1 ) 是 空間 ， 不是 時間\n， 他 這個 應該 是 用 postorder 的 方式 ， 直接 把 原本 的 樹 拆解 。\n參考 ：",
        "word_seg_processed_content_text": "二元 樹 展開 成 linked\nlist 順序 preorder\ntraversal 三種 traversal 模式 每次 preorder inorder 會 搞混 這題 圖片 先 找父 節點 找 子點 每次 模式 記成 inorder\n這題 提示 說 寫成 o 1 寫法\n思路\n回傳 值 void 懞 cout cout print\npreorder 順序 cout 空 陣列 沒 概念\n想到 o n 解法 創建 linked\nlist 變數 preorder\ntraversal 一遍 樹 巡到 值 塞入 list 中 結束\nc++ 筆記\n程式碼\n\nvoid 基本上 原本 給的 變數 內容 改成 答案\n本來 想想 o 1 解法 睡著 說 o 1 空間 時間\npostorder 方式 原本 樹 拆解\n參考",
        "extracted_keywords": [
            "順序",
            "模式",
            "inorder",
            "list",
            "preorder"
        ],
        "extracted_keywords_phrases": [
            "list 順序",
            "順序 preorder",
            "preorder 順序",
            "preorder inorder",
            "順序 cout"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282368": {
        "href": "https://ithelp.ithome.com.tw/articles/10282368",
        "title": "JavaScript 從 100% 繼續，再多程式語言也不是問題！",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>自從系列開始到昨天，也已經流逝 45 天的時間了。<br>\n這期間，總是會懷疑自己寫的文章夠不夠好，因為我所學到的知識好像仍不足拿來教學。<br>\n於是，我開始強迫自己去學習覺得麻煩的事物，這也是我第一次下定決心認真對待某件事情。</p>\n<p>接下來，我們就來回顧過去 45 天的文章都介紹了什麼吧！</p>\n<hr>\n<p>系列的前 15 天，我們介紹了物件原型和相關方法，我也藉此重新找回被我收納在記憶藏寶箱中的知識。</p>\n<p>接下來的 10 天，我們打造了專屬的函式庫，其中的 <a href=\"/articles/10276599\" target=\"_blank\" rel=\"noreferrer noopener\">JS 20</a> 是最讓我滿意的函式，因為這是我為了自己的需求所打造的第一個函式。</p>\n<p>系列的後 20 天，我們應用函式庫完成了許多範例，儘管當中已經想不出主題了，但是我仍不想放棄。</p>\n<hr>\n<p>現在的我比開賽前的我更加成熟了，不僅學習到了更多的知識，對待事情也能更加堅持了。<br>\n完賽後，學習其他程式語言是我的指標，相信之後我一定會再次參賽。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們下次再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-31 23:59:28",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "46",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>自從系列開始到昨天，也已經流逝 45 天的時間了。<br/>\n這期間，總是會懷疑自己寫的文章夠不夠好，因為我所學到的知識好像仍不足拿來教學。<br/>\n於是，我開始強迫自己去學習覺得麻煩的事物，這也是我第一次下定決心認真對待某件事情。</p>\n<p>接下來，我們就來回顧過去 45 天的文章都介紹了什麼吧！</p>\n<hr/>\n<p>系列的前 15 天，我們介紹了物件原型和相關方法，我也藉此重新找回被我收納在記憶藏寶箱中的知識。</p>\n<p>接下來的 10 天，我們打造了專屬的函式庫，其中的  是最讓我滿意的函式，因為這是我為了自己的需求所打造的第一個函式。</p>\n<p>系列的後 20 天，我們應用函式庫完成了許多範例，儘管當中已經想不出主題了，但是我仍不想放棄。</p>\n<hr/>\n<p>現在的我比開賽前的我更加成熟了，不僅學習到了更多的知識，對待事情也能更加堅持了。<br/>\n完賽後，學習其他程式語言是我的指標，相信之後我一定會再次參賽。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們下次再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n自從系列開始到昨天，也已經流逝 45 天的時間了。\n這期間，總是會懷疑自己寫的文章夠不夠好，因為我所學到的知識好像仍不足拿來教學。\n於是，我開始強迫自己去學習覺得麻煩的事物，這也是我第一次下定決心認真對待某件事情。\n接下來，我們就來回顧過去 45 天的文章都介紹了什麼吧！\n\n系列的前 15 天，我們介紹了物件原型和相關方法，我也藉此重新找回被我收納在記憶藏寶箱中的知識。\n接下來的 10 天，我們打造了專屬的函式庫，其中的  是最讓我滿意的函式，因為這是我為了自己的需求所打造的第一個函式。\n系列的後 20 天，我們應用函式庫完成了許多範例，儘管當中已經想不出主題了，但是我仍不想放棄。\n\n現在的我比開賽前的我更加成熟了，不僅學習到了更多的知識，對待事情也能更加堅持了。\n完賽後，學習其他程式語言是我的指標，相信之後我一定會再次參賽。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們下次再見！",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "大家 好 ！\n自從 系列 開始 到 昨天 ， 也 已經 流逝\n45\n天 的 時間 了 。\n這 期間 ， 總是 會 懷疑 自己 寫 的 文章 夠不夠 好 ， 因為 我 所學 到 的 知識 好像 仍 不足 拿來 教學 。\n於是 ， 我 開始 強迫 自己 去 學習 覺得 麻煩 的 事物 ， 這也 是 我 第一次 下定決心 認真對待 某件事 情 。\n接下來 ， 我們 就 來回 顧 過去\n45\n天 的 文章 都 介紹 了 什麼 吧 ！\n系列 的 前\n15\n天 ， 我們 介紹 了 物件 原型 和 相關 方法 ， 我 也 藉此 重新 找回 被 我 收納 在 記憶 藏 寶箱 中 的 知識 。\n接下來 的\n10\n天 ， 我們 打造 了 專屬 的 函式 庫 ， 其中 的\n是 最 讓 我 滿意 的 函式 ， 因為 這是 我 為 了 自己 的 需求 所 打造 的 第一個 函式 。\n系列 的 後\n20\n天 ， 我們 應用 函式 庫 完成 了 許多 範例 ， 儘管 當中 已經 想不出 主題 了 ， 但是 我 仍 不想 放棄 。\n現在 的 我 比 開賽 前 的 我 更加 成熟 了 ， 不僅 學習 到 了 更 多 的 知識 ， 對待 事情 也 能 更加 堅持 了 。\n完 賽後 ， 學習 其他 程式 語言 是 我 的 指標 ， 相信 之後 我 一定 會 再次 參賽 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 下次 再見 ！",
        "word_seg_processed_content_text": "\n系列 昨天 流逝\n45\n天 時間\n期間 會 懷疑 寫 文章 夠不夠 所學 知識 好像 拿來 教學\n強迫 學習 麻煩 事物 這也 第一次 下定決心 認真對待 某件事 情\n接下來 來回 顧\n45\n天 文章 介紹\n系列 前\n15\n天 介紹 物件 原型 相關 方法 藉此 找回 收納 記憶 藏 寶箱 中 知識\n接下來\n10\n天 打造 專屬 函式 庫\n滿意 函式 這是 需求 打造 第一個 函式\n系列\n20\n天 函式 庫 範例 當中 想不出 主題 不想 放棄\n開賽 前 成熟 學習 更 知識 對待 事情\n完 賽後 學習 程式 語言 指標 會 再次 參賽\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 下次 再見",
        "extracted_keywords": [
            "期間",
            "所學",
            "時間",
            "學習",
            "文章"
        ],
        "extracted_keywords_phrases": [
            "夠不夠 所學",
            "學習 麻煩",
            "時間 期間",
            "期間 懷疑",
            "期間"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282365": {
        "href": "https://ithelp.ithome.com.tw/articles/10282365",
        "title": "建立第一個RESTful api server(連結資料庫篇)-2 (Day18)",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>那在接下來的內容中，會說明將gorm接上postgreSQL的過程<br>\n<a href=\"https://www.youtube.com/watch?v=AQAE3B85pPA\" target=\"_blank\" rel=\"noreferrer noopener\">https://www.youtube.com/watch?v=AQAE3B85pPA</a><br>\n<a href=\"https://github.com/kevinyay945/smart-home-backend/tree/v0.2.0\" target=\"_blank\" rel=\"noreferrer noopener\">https://github.com/kevinyay945/smart-home-backend/tree/v0.2.0</a></p>\n<p>在這邊補充說明<br>\n在golang裡面如果出現</p>\n<pre><code class=\"language-go=\">func init() {\n    // do something\n}\n</code></pre>\n<p>有兩種用途<br>\n如果在main.go這個直接執行的檔案中出現，他就會首先執行這段function，如果出現在其他不是main的package中，那如果你在import package的時候，只要在import前放上_，就會直接執行裡面的內容了<br>\n如<br>\nlog/log.go</p>\n<pre><code class=\"language-go=\">package log;\n\nfunc init() {\n    fmt.Printf(\"this is log message\\n\")\n}\n</code></pre>\n<p>main.go</p>\n<pre><code class=\"language-go=\">package main;\nimport (\n    _ myProject/log\n)\n\nfunc main() {\n    fmt.Printf(\"this is main message!\\n\")\n}\n</code></pre>\n<p>輸出就會是</p>\n<blockquote>\n<p>this is log message<br>\nthis is main message!</p>\n</blockquote>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-10-31 16:14:50",
        "author_href": "https://ithelp.ithome.com.tw/users/20113505/ironman",
        "author_name": "kevinyay945",
        "series_href": "https://ithelp.ithome.com.tw/users/20113505/ironman/4295",
        "series_name": "網頁新手入門，手把手用React/Golang(Echo)開發基礎網頁(以簡易智慧家庭為例)",
        "series_num": "18",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>那在接下來的內容中，會說明將gorm接上postgreSQL的過程<br/>\n<br/>\n</p>\n<p>在這邊補充說明<br/>\n在golang裡面如果出現</p>\n<pre></pre>\n<p>有兩種用途<br/>\n如果在main.go這個直接執行的檔案中出現，他就會首先執行這段function，如果出現在其他不是main的package中，那如果你在import package的時候，只要在import前放上_，就會直接執行裡面的內容了<br/>\n如<br/>\nlog/log.go</p>\n<pre></pre>\n<p>main.go</p>\n<pre></pre>\n<p>輸出就會是</p>\n<blockquote>\n<p>this is log message<br/>\nthis is main message!</p>\n</blockquote>\n<br/>\n</div>",
        "content_text": "那在接下來的內容中，會說明將gorm接上postgreSQL的過程\n\n\n在這邊補充說明\n在golang裡面如果出現\n\n有兩種用途\n如果在main.go這個直接執行的檔案中出現，他就會首先執行這段function，如果出現在其他不是main的package中，那如果你在import package的時候，只要在import前放上_，就會直接執行裡面的內容了\n如\nlog/log.go\n\nmain.go\n\n輸出就會是\n\nthis is log message\nthis is main message!",
        "content_code_info": [
            {
                "language": "golang",
                "content": "func init() {\n    // do something\n}\n"
            },
            {
                "language": "golang",
                "content": "package log;\n\nfunc init() {\n    fmt.Printf(\"this is log message\\n\")\n}\n"
            },
            {
                "language": "golang",
                "content": "package main;\nimport (\n    _ myProject/log\n)\n\nfunc main() {\n    fmt.Printf(\"this is main message!\\n\")\n}\n"
            }
        ],
        "programming_languages": [
            "golang"
        ],
        "word_seg_content_text": "那 在 接下來 的 內容 中 ， 會 說明 將 gorm 接上 postgreSQL 的 過程\n在 這邊 補充 說明\n在 golang 裡面 如果 出現\n有 兩種 用途\n如果 在 main . go 這個 直接 執行 的 檔案 中 出現 ， 他 就 會 首先 執行 這段 function ， 如果 出現 在 其他 不是 main 的 package 中 ， 那 如果 你 在 import\npackage 的 時候 ， 只要 在 import 前放上 _ ， 就 會 直接 執行 裡面 的 內容 了\n如\nlog / log . go\nmain . go\n輸出 就 會 是\nthis\nis\nlog\nmessage\nthis\nis\nmain\nmessage !",
        "word_seg_processed_content_text": "接下來 內容 中 會 gorm 接上 postgresql 過程\n補充\ngolang\n兩種 用途\nmain go 執行 檔案 中 會 執行 這段 function main package 中 import\npackage import 前放上 會 執行 內容\n\nlog log go\nmain go\n輸出 會\n\n\nlog\nmessage\n\n\nmain\nmessage",
        "extracted_keywords": [
            "postgresql",
            "檔案",
            "log",
            "import",
            "package"
        ],
        "extracted_keywords_phrases": [
            "接上 postgresql",
            "postgresql 過程",
            "內容 log",
            "輸出 log",
            "postgresql"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282356": {
        "href": "https://ithelp.ithome.com.tw/articles/10282356",
        "title": "Domain Storytelling  - 簡單的方法說出一個Domain story",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>上篇回顧<br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10281930\" target=\"_blank\" rel=\"noreferrer noopener\">Story Telling - 簡易有效的討論</a><br>\n講到會議很煩很冗長沒重點還要開好幾次, 是因為一開始大家都不熟問題域, 甚至連對問題的認知都有顯著的落差<br>\n講到說故事可以讓聽者快速了解流程<br>\n講到敏捷宣言裡鼓勵互動與協作<br>\n<a href=\"https://docs.google.com/presentation/d/11HpFSXe6doJ8fcm5BTR-US6GYLMaWTRtf_yn_RnpInw/edit?usp=sharing\" target=\"_blank\" rel=\"noreferrer noopener\">Slide - Slide - Storytelling &amp; Domain Stroytelling</a></p>\n<h1>Cost of Change Curve</h1>\n<p>上一篇講到敏捷開發宣言<br>\n這裡看一下Waterfall, TDD, Agile, 各自當面臨需求變更或錯誤所需要的修復成本<br>\n<a href=\"http://www.agilemodeling.com/essays/costOfChange.htm\" target=\"_blank\" rel=\"noreferrer noopener\">Examining the Agile Cost of Change Curve</a></p>\n<h3>Waterfall</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930ivauDJsuaZ.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930ivauDJsuaZ.png\"></p>\n<h3>TDD</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Ib4TtHoYrt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Ib4TtHoYrt.png\"><br>\n在開發前, 先寫Test, 來設計與開發軟體</p>\n<h3>Agile</h3>\n<p>Reduce the feedback cycle<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930RxWVSxmR6h.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930RxWVSxmR6h.png\"><br>\nAgile這裡有兩種顏色, Green與Red<br>\nRed是成本相對高的作法或是文化習慣<br>\nGreen則是相對低的成本</p>\n<p>透過Model Storming(DDD的Domain storytelling, event storming or other medeling methods...),<br>\n可以減少設計或是需求梳理理解上的錯誤</p>\n<p>透過跟跟Stackholder的協作互動, 可以減少設計或是需求梳理理解上的錯誤<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930t4TwBHIJQb.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930t4TwBHIJQb.png\"></p>\n<p>其實後兩個都是在不同階段, 提早發現問題, 及早Feedback<br>\n浪費往往就是在後期才發現, 如果能盡量消弭浪費, 則能相對於以前<br>\n面對變化與錯誤時是敏捷的</p>\n<p>But!<br>\n如果公司也沒覺得自己的Waterfall有什麼浪費的話, 也硬要改變的必要就是了</p>\n<h1>What is Domain?</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930NaD6gpL4Po.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930NaD6gpL4Po.png\"><br>\nDDD的作者Eric Evan提出對於Domain的定義是</p>\n<blockquote>\n<p>A sphere of knowledge, influence, or activity.<br>\nThe subject area to which the user applies a program is the domain of the software</p>\n</blockquote>\n<p>其中一個字<code>sphere</code>在<a href=\"https://www.oxfordlearnersdictionaries.com/definition/english/sphere?q=spherev\" target=\"_blank\" rel=\"noreferrer noopener\">OX Dictionary這樣描述的</a><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Pt614RZ8GD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Pt614RZ8GD.png\"><br>\n跟Eric Evan描述的維度幾乎一樣吧XD 且同義字就是<strong>Domain</strong></p>\n<p><code>knowledge, influence, or activity</code><br>\n用戶圍繞在這三個主題的範疇上, 怎應用你的軟體來滿足用戶<br>\n用戶為了執行某些行為, 需要這軟體的支持<br>\n為了滿足用戶需求, 需要這軟體的支持</p>\n<h1>用Domain Storytelling來說Waterfall的流程</h1>\n<p>不搭配文字描述, 我是覺得不難看得懂, 因為這應該要我用講的搭配畫面播放XD</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LVXnCElCrF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LVXnCElCrF.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930IL3CwFuUid.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930IL3CwFuUid.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/201049306vRvQEJYrz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/201049306vRvQEJYrz.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/201049308VJnmMj2go.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/201049308VJnmMj2go.png\"></p>\n<h1>用Domain Storytelling來說Stakeholder參與協作的流程</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LVXnCElCrF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LVXnCElCrF.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930TxC6FzlrHL.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930TxC6FzlrHL.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930HRvx1FdqgU.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930HRvx1FdqgU.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930MzUTLIXJW7.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930MzUTLIXJW7.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930m1Aox5RhHY.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930m1Aox5RhHY.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930qHmfDaLBE0.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930qHmfDaLBE0.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930K437w8X6sF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930K437w8X6sF.png\"></p>\n<p>差別就只是先請規劃者來說個故事給開發者們聽,<br>\n當下開發者們快速的畫出這樣的業務流程<br>\n同時請規劃者也閱讀並協作修正</p>\n<p>是這裡提倡的提早把認知跟規劃者一起協作交互溝通,<br>\n讓彼此對業務流程和問題的認知拉其的一種方法跟介入的時機點</p>\n<h2>Benefits for Telling Storeis 與 Visualize Business Flow</h2>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930sWdigmb6pI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930sWdigmb6pI.png\"><br>\nDesigner針對它所需要理解的Domain範疇可能只是一部份,<br>\n他們可以快速假設出Prototype來驗證</p>\n<blockquote>\n<p>Q: 開發人員所需要的Domain就剛好跟Designer認知的範疇一模一樣嘛?<br>\nQ: 但開發軟體呢?  如何早點的把假設的部份給具現化來討論並驗證?<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930mN2T65HZ87.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930mN2T65HZ87.jpg\"></p>\n</blockquote>\n<p>快速的給出一些Telling Storeis 與 Visualize Business Flow的好處<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930dce3FHvKxj.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930dce3FHvKxj.png\"><br>\n我懶得細細描述,  這些是出自<a href=\"https://www.amazon.com/Domain-Storytelling-Collaborative-Domain-Driven-Addison-Wesley/dp/0137458916\" target=\"_blank\" rel=\"noreferrer noopener\">Domain Storytelling這本書的第一小節</a></p>\n<h1>Domain Storytelling</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930UVrSohmTvK.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930UVrSohmTvK.png\"><br>\n一種協作建模的工具<br>\n目的讓來自不同背景的與會人員, 能透過可視化的故事跟說故事的方式學習彼此的領域範疇</p>\n<h2>Pictorgraphic Language</h2>\n<p>進到書本的第二章了,  主要講這畫布上的內容與文法<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930MScwEZe0sI.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930MScwEZe0sI.png\"><br>\n主要就</p>\n<ul>\n<li>Actor\n<ul>\n<li>一個句子裡的主詞</li>\n<li>可以是人、一群人、一個系統、一個外部服務</li>\n</ul>\n</li>\n<li>Work Object\n<ul>\n<li>通常是一個句子裡的受詞</li>\n<li>也可能是Actor之間戶通有無的東西</li>\n<li>可以是實體的事物、虛擬的事物、甚至只是一些資訊, 說故事不會特別地去區別它們(數據，事物還是資訊)</li>\n</ul>\n</li>\n<li>Activity\n<ul>\n<li>通常是一個句子內的動詞, 剛剛的Actor跟Work Object 都是名詞</li>\n<li>具有方向性, 指向接收方</li>\n</ul>\n</li>\n<li>Sequence Number\n<ul>\n<li>標示在Activity上的數字</li>\n<li>一個故事中會有一堆句子, 這數字用來表示故事裡的句子順序而已</li>\n<li>舉例: 7號句子, 會在6號句子後面被講出來(不是廢話嘛? 對就是這麼廢話, 但這數字讓人方便了解前後文的關聯方向)</li>\n</ul>\n</li>\n<li>Annotation\n<ul>\n<li>任何你想補充的資訊</li>\n<li>該Actor/WorkOjbect的狀態</li>\n<li>條件表達等等的, 任何想講的都能寫在這</li>\n<li>或者對這Activity想做的補充</li>\n<li>別寫散文在這就好</li>\n</ul>\n</li>\n</ul>\n<p>蠻多元素跟<a href=\"https://en.wikipedia.org/wiki/Sequence_diagram\" target=\"_blank\" rel=\"noreferrer noopener\">UML的Sequence Diagram</a>類似</p>\n<h2>Grammar- 故事中句子的表示法</h2>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930iYEP5NVdtX.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930iYEP5NVdtX.png\"><br>\n其實文法不多, 學習門檻非常的低</p>\n<h2>Avoid Grammar</h2>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930l5ov9RA1hT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930l5ov9RA1hT.png\"></p>\n<ul>\n<li>Loopbacks\n<ul>\n<li>這不是在描述API</li>\n<li>User做出動作, 本來就是期望會得到預期的資訊, 我們更在意的是業務流程</li>\n</ul>\n</li>\n<li>Conditional\n<ul>\n<li>這不是在畫<a href=\"https://zh.wikipedia.org/zh-tw/%E6%B4%BB%E5%8A%A8%E5%9B%BE\" target=\"_blank\" rel=\"noreferrer noopener\">UML的Activity Diagram</a>\n</li>\n<li>我們在講故事描述流程跟業務的運作方式</li>\n</ul>\n</li>\n</ul>\n<h1>Domain Storytelling to User Story</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930VyJT4xyZQO.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930VyJT4xyZQO.png\"><br>\n常常我們做產品都會用UserStory來描述問題與需求</p>\n<p>這裡只是快速講怎轉換語法,<br>\n但怎從Domain storytelling慢慢的拆解映射到User story mapping<br>\n就實戰工作坊比較合適講解了</p>\n<h2>Domain Storytelling轉換Pictorgraphic Language到User Story</h2>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930lpHPHuzncF.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930lpHPHuzncF.png\"><br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930FPjMGgAWI5.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930FPjMGgAWI5.png\"></p>\n<p>大致上到這裡Domain Storytelling故事就講完了<br>\n但<strong>軟體設計</strong>要怎進行?<br>\n我想才是大家的疑惑!</p>\n<p>流程大概是, 從故事的流程中, 針對上面的角色,流程方向, 事物用途, 來設計出適當的邊界<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LUHltUsRre.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930LUHltUsRre.png\"><br>\n然後每個邊界在Zoom In繼續分析討論, 但這時也許就能分工出去給各組去討論了<br>\n嘗試在這邊界的場景內,找出sub-domain跟aggregate<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Fdlju5Qp4p.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930Fdlju5Qp4p.png\"></p>\n<p>再來就能各小組來玩User Story Mapping<br>\n找出有價值或是優先權高的story跟拆分出task<br>\n<img src=\"https://miro.medium.com/max/1400/1*EwkOZ2TMT3DN-LlKzqtapQ.png\" alt=\"\"></p>\n<p>再來各組搭配Example mapping<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930ygGGoSYwsT.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930ygGGoSYwsT.png\"><br>\n根據規格Rule(規格書通常會給), 假設出情境並給出期望的答案<br>\n這裡的展開內容, 可以做整合測試, UnitTest<br>\n甚至如果是用Gherkin語法, 還能轉成BDD所需要的測試案例</p>\n<h1>OO Analysis &amp; Design</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930oVdOEmTk8f.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930oVdOEmTk8f.png\"><br>\nOOAD 拆成Analysis 跟Design<br>\nOOA, 來辨識What to do?<br>\nOOD, 辨識出要做什麼後, How to do?</p>\n<p>流程也是非常雷同的, Divide &amp; Conquer 然後持續repeat細化精化<br>\n把ProblemSpace給拆解梳理的過程就是Project(投射)到Requirement Layer(各位開發者最愛談的分層設計?)<br>\n都梳理好了分析好了, 再來投射到Design, 開始設計<br>\n最後都設計好了有規格書跟TableSchema還有UI了!? 開始寫扣,  投射到Implement<br>\n最後佈署發布<br>\n每一層其實都有其驗收條件, 不然就又要最後上線給QA背鍋去了XD</p>\n<p>工作了快10年, 合作過不少PM/SA都說很會做軟體設計, 我是沒看到UML圖做分析設計<br>\n幾乎都看到UI Prototype + Table Schema + 數十頁的文字檔 + 人月工時都估算好了</p>\n<p>但每次開會我問, 各層的驗收條件是什麼? 都傻住, 講不出來QQ<br>\n通常當下回應我的內容是<code>我們這次的系統沒那麼複雜, 都是CRUD</code><br>\n等日後QA跑去問測試案例, 常得到的回答是<code>我也沒辦法從畫面跟資料庫推斷出流程</code><br>\n(當然阿 你當初設計就沒把這些給寫下來或視覺化, 日後問時, 人都會忘XD)</p>\n<blockquote>\n<p>我: ...真的要開發人員腦補就是了XD<br>\nQA: 暗, 只好慢慢地探索性測試</p>\n</blockquote>\n<p>如果真有公司這樣子跑流程, 但嘴裡喊著<strong>敏捷</strong>, 我應該會覺得很困惑QQ<br>\n無形中一堆浪費, 但沒改善<br>\n可能只是想壓榨完成的時間吧</p>\n<p>也非常多公司, 軟體/系統設計, Table Schema+API Doc都是PM/SA寫的.<br>\n開發人員都真的是按表操課, 等後面的新同事來了, 前輩&amp;後輩也只能腦補, 因為都是對於文件的想像</p>\n<p>右半邊的圖是OOAD的流程, 但我懶得細說了, 沒驗收條件什麼都假的QQ<br>\n都是把責任往QA跟使用者拋<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930WCOfd172tv.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930WCOfd172tv.jpg\"></p>\n<p>有人常講<strong>以終為始</strong>, 我覺得用什麼角度解讀這句. 有人以User在想, 有人以資料流在想,</p>\n<p>但我身為開發人員, 我更喜歡<strong>以中為始</strong>,<br>\n中間那層<strong>業務邏輯</strong>, 應該是<strong>不變</strong>得, 這的不變不是業務流程真的都不會變<br>\n而是它不應該因為資料庫變動, API協議變動, 畫面變動, 而影響到業務<br>\n相對於外部環境, 我們的領域與業務不應該受到外部環境影響而被影響<br>\n一定要有測試保護的也是這層<br>\n都只講UI+TableSchema, 也難怪這樣的公司幾乎沒在寫測試.<br>\n因為開發團隊一定問, 要測試什麼? 都在資料庫裡阿, 不就CRUD<br>\n都只講UI+TableSchema, 就一定開會時爭執這些細節XD</p>\n<h1>More Thinking</h1>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930EfvGRXg2Wz.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211031/20104930EfvGRXg2Wz.png\"></p>\n<h1>Reference</h1>\n<ul>\n<li>\n<a href=\"https://www.amazon.com/Domain-Storytelling-Collaborative-Domain-Driven-Addison-Wesley/dp/0137458916\" target=\"_blank\" rel=\"noreferrer noopener\">Domain Storytelling</a>\n</li>\n<li>\n<a href=\"https://leanpub.com/visualcollaborationtools\" target=\"_blank\" rel=\"noreferrer noopener\">Visual Collaboration Tools</a>\n</li>\n<li>\n<a href=\"https://speakerdeck.com/jame2408/domain-storytelling-ling-yu-xu-shi-jian-jie-tu-shi-yu-yan\" target=\"_blank\" rel=\"noreferrer noopener\">Domain Storytelling 領域敘事 - 簡介圖示語言</a>\n</li>\n<li>\n<a href=\"https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215\" target=\"_blank\" rel=\"noreferrer noopener\">Domain-Driven Design</a>\n</li>\n<li>\n<a href=\"https://www.wps.de/modeler/\" target=\"_blank\" rel=\"noreferrer noopener\">Modeler 這次畫圖的工具在此</a>\n</li>\n</ul>\n<p><a href=\"https://drive.google.com/drive/folders/1NUfxKfu67_vI6Qp5bPGfOUqlCVZMHu75?usp=sharing\" target=\"_blank\" rel=\"noreferrer noopener\">DST範例下載,至Modeler做Import就可, 內容是JSON格式可以進Git做版控XD</a></p>\n<p>ps. Domain Storytelling是本淺顯易懂的好書, 有讀書會開團跑工作坊嘛QQ</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,domain storytelling",
        "genre": "Software Development",
        "published_at": "2021-10-31 00:35:47",
        "author_href": "https://ithelp.ithome.com.tw/users/20104930/ironman",
        "author_name": "雷N",
        "series_href": "https://ithelp.ithome.com.tw/users/20104930/ironman/3882",
        "series_name": "系統與服務雜談",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>上篇回顧<br/>\n<br/>\n講到會議很煩很冗長沒重點還要開好幾次, 是因為一開始大家都不熟問題域, 甚至連對問題的認知都有顯著的落差<br/>\n講到說故事可以讓聽者快速了解流程<br/>\n講到敏捷宣言裡鼓勵互動與協作<br/>\n</p>\n<h1>Cost of Change Curve</h1>\n<p>上一篇講到敏捷開發宣言<br/>\n這裡看一下Waterfall, TDD, Agile, 各自當面臨需求變更或錯誤所需要的修復成本<br/>\n</p>\n<h3>Waterfall</h3>\n<p></p>\n<h3>TDD</h3>\n<p><br/>\n在開發前, 先寫Test, 來設計與開發軟體</p>\n<h3>Agile</h3>\n<p>Reduce the feedback cycle<br/>\n<br/>\nAgile這裡有兩種顏色, Green與Red<br/>\nRed是成本相對高的作法或是文化習慣<br/>\nGreen則是相對低的成本</p>\n<p>透過Model Storming(DDD的Domain storytelling, event storming or other medeling methods...),<br/>\n可以減少設計或是需求梳理理解上的錯誤</p>\n<p>透過跟跟Stackholder的協作互動, 可以減少設計或是需求梳理理解上的錯誤<br/>\n</p>\n<p>其實後兩個都是在不同階段, 提早發現問題, 及早Feedback<br/>\n浪費往往就是在後期才發現, 如果能盡量消弭浪費, 則能相對於以前<br/>\n面對變化與錯誤時是敏捷的</p>\n<p>But!<br/>\n如果公司也沒覺得自己的Waterfall有什麼浪費的話, 也硬要改變的必要就是了</p>\n<h1>What is Domain?</h1>\n<p><br/>\nDDD的作者Eric Evan提出對於Domain的定義是</p>\n<blockquote>\n<p>A sphere of knowledge, influence, or activity.<br/>\nThe subject area to which the user applies a program is the domain of the software</p>\n</blockquote>\n<p>其中一個字<code>sphere</code>在<br/>\n<br/>\n跟Eric Evan描述的維度幾乎一樣吧XD 且同義字就是<strong>Domain</strong></p>\n<p><code>knowledge, influence, or activity</code><br/>\n用戶圍繞在這三個主題的範疇上, 怎應用你的軟體來滿足用戶<br/>\n用戶為了執行某些行為, 需要這軟體的支持<br/>\n為了滿足用戶需求, 需要這軟體的支持</p>\n<h1>用Domain Storytelling來說Waterfall的流程</h1>\n<p>不搭配文字描述, 我是覺得不難看得懂, 因為這應該要我用講的搭配畫面播放XD</p>\n<p><br/>\n<br/>\n<br/>\n</p>\n<h1>用Domain Storytelling來說Stakeholder參與協作的流程</h1>\n<p><br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n</p>\n<p>差別就只是先請規劃者來說個故事給開發者們聽,<br/>\n當下開發者們快速的畫出這樣的業務流程<br/>\n同時請規劃者也閱讀並協作修正</p>\n<p>是這裡提倡的提早把認知跟規劃者一起協作交互溝通,<br/>\n讓彼此對業務流程和問題的認知拉其的一種方法跟介入的時機點</p>\n<h2>Benefits for Telling Storeis 與 Visualize Business Flow</h2>\n<p><br/>\nDesigner針對它所需要理解的Domain範疇可能只是一部份,<br/>\n他們可以快速假設出Prototype來驗證</p>\n<blockquote>\n<p>Q: 開發人員所需要的Domain就剛好跟Designer認知的範疇一模一樣嘛?<br/>\nQ: 但開發軟體呢?  如何早點的把假設的部份給具現化來討論並驗證?<br/>\n</p>\n</blockquote>\n<p>快速的給出一些Telling Storeis 與 Visualize Business Flow的好處<br/>\n<br/>\n我懶得細細描述,  這些是出自</p>\n<h1>Domain Storytelling</h1>\n<p><br/>\n一種協作建模的工具<br/>\n目的讓來自不同背景的與會人員, 能透過可視化的故事跟說故事的方式學習彼此的領域範疇</p>\n<h2>Pictorgraphic Language</h2>\n<p>進到書本的第二章了,  主要講這畫布上的內容與文法<br/>\n<br/>\n主要就</p>\n<ul>\n<li>Actor\n<ul>\n<li>一個句子裡的主詞</li>\n<li>可以是人、一群人、一個系統、一個外部服務</li>\n</ul>\n</li>\n<li>Work Object\n<ul>\n<li>通常是一個句子裡的受詞</li>\n<li>也可能是Actor之間戶通有無的東西</li>\n<li>可以是實體的事物、虛擬的事物、甚至只是一些資訊, 說故事不會特別地去區別它們(數據，事物還是資訊)</li>\n</ul>\n</li>\n<li>Activity\n<ul>\n<li>通常是一個句子內的動詞, 剛剛的Actor跟Work Object 都是名詞</li>\n<li>具有方向性, 指向接收方</li>\n</ul>\n</li>\n<li>Sequence Number\n<ul>\n<li>標示在Activity上的數字</li>\n<li>一個故事中會有一堆句子, 這數字用來表示故事裡的句子順序而已</li>\n<li>舉例: 7號句子, 會在6號句子後面被講出來(不是廢話嘛? 對就是這麼廢話, 但這數字讓人方便了解前後文的關聯方向)</li>\n</ul>\n</li>\n<li>Annotation\n<ul>\n<li>任何你想補充的資訊</li>\n<li>該Actor/WorkOjbect的狀態</li>\n<li>條件表達等等的, 任何想講的都能寫在這</li>\n<li>或者對這Activity想做的補充</li>\n<li>別寫散文在這就好</li>\n</ul>\n</li>\n</ul>\n<p>蠻多元素跟類似</p>\n<h2>Grammar- 故事中句子的表示法</h2>\n<p><br/>\n其實文法不多, 學習門檻非常的低</p>\n<h2>Avoid Grammar</h2>\n<p></p>\n<ul>\n<li>Loopbacks\n<ul>\n<li>這不是在描述API</li>\n<li>User做出動作, 本來就是期望會得到預期的資訊, 我們更在意的是業務流程</li>\n</ul>\n</li>\n<li>Conditional\n<ul>\n<li>這不是在畫\n</li>\n<li>我們在講故事描述流程跟業務的運作方式</li>\n</ul>\n</li>\n</ul>\n<h1>Domain Storytelling to User Story</h1>\n<p><br/>\n常常我們做產品都會用UserStory來描述問題與需求</p>\n<p>這裡只是快速講怎轉換語法,<br/>\n但怎從Domain storytelling慢慢的拆解映射到User story mapping<br/>\n就實戰工作坊比較合適講解了</p>\n<h2>Domain Storytelling轉換Pictorgraphic Language到User Story</h2>\n<p><br/>\n</p>\n<p>大致上到這裡Domain Storytelling故事就講完了<br/>\n但<strong>軟體設計</strong>要怎進行?<br/>\n我想才是大家的疑惑!</p>\n<p>流程大概是, 從故事的流程中, 針對上面的角色,流程方向, 事物用途, 來設計出適當的邊界<br/>\n<br/>\n然後每個邊界在Zoom In繼續分析討論, 但這時也許就能分工出去給各組去討論了<br/>\n嘗試在這邊界的場景內,找出sub-domain跟aggregate<br/>\n</p>\n<p>再來就能各小組來玩User Story Mapping<br/>\n找出有價值或是優先權高的story跟拆分出task<br/>\n</p>\n<p>再來各組搭配Example mapping<br/>\n<br/>\n根據規格Rule(規格書通常會給), 假設出情境並給出期望的答案<br/>\n這裡的展開內容, 可以做整合測試, UnitTest<br/>\n甚至如果是用Gherkin語法, 還能轉成BDD所需要的測試案例</p>\n<h1>OO Analysis &amp; Design</h1>\n<p><br/>\nOOAD 拆成Analysis 跟Design<br/>\nOOA, 來辨識What to do?<br/>\nOOD, 辨識出要做什麼後, How to do?</p>\n<p>流程也是非常雷同的, Divide &amp; Conquer 然後持續repeat細化精化<br/>\n把ProblemSpace給拆解梳理的過程就是Project(投射)到Requirement Layer(各位開發者最愛談的分層設計?)<br/>\n都梳理好了分析好了, 再來投射到Design, 開始設計<br/>\n最後都設計好了有規格書跟TableSchema還有UI了!? 開始寫扣,  投射到Implement<br/>\n最後佈署發布<br/>\n每一層其實都有其驗收條件, 不然就又要最後上線給QA背鍋去了XD</p>\n<p>工作了快10年, 合作過不少PM/SA都說很會做軟體設計, 我是沒看到UML圖做分析設計<br/>\n幾乎都看到UI Prototype + Table Schema + 數十頁的文字檔 + 人月工時都估算好了</p>\n<p>但每次開會我問, 各層的驗收條件是什麼? 都傻住, 講不出來QQ<br/>\n通常當下回應我的內容是<code>我們這次的系統沒那麼複雜, 都是CRUD</code><br/>\n等日後QA跑去問測試案例, 常得到的回答是<code>我也沒辦法從畫面跟資料庫推斷出流程</code><br/>\n(當然阿 你當初設計就沒把這些給寫下來或視覺化, 日後問時, 人都會忘XD)</p>\n<blockquote>\n<p>我: ...真的要開發人員腦補就是了XD<br/>\nQA: 暗, 只好慢慢地探索性測試</p>\n</blockquote>\n<p>如果真有公司這樣子跑流程, 但嘴裡喊著<strong>敏捷</strong>, 我應該會覺得很困惑QQ<br/>\n無形中一堆浪費, 但沒改善<br/>\n可能只是想壓榨完成的時間吧</p>\n<p>也非常多公司, 軟體/系統設計, Table Schema+API Doc都是PM/SA寫的.<br/>\n開發人員都真的是按表操課, 等後面的新同事來了, 前輩&amp;後輩也只能腦補, 因為都是對於文件的想像</p>\n<p>右半邊的圖是OOAD的流程, 但我懶得細說了, 沒驗收條件什麼都假的QQ<br/>\n都是把責任往QA跟使用者拋<br/>\n</p>\n<p>有人常講<strong>以終為始</strong>, 我覺得用什麼角度解讀這句. 有人以User在想, 有人以資料流在想,</p>\n<p>但我身為開發人員, 我更喜歡<strong>以中為始</strong>,<br/>\n中間那層<strong>業務邏輯</strong>, 應該是<strong>不變</strong>得, 這的不變不是業務流程真的都不會變<br/>\n而是它不應該因為資料庫變動, API協議變動, 畫面變動, 而影響到業務<br/>\n相對於外部環境, 我們的領域與業務不應該受到外部環境影響而被影響<br/>\n一定要有測試保護的也是這層<br/>\n都只講UI+TableSchema, 也難怪這樣的公司幾乎沒在寫測試.<br/>\n因為開發團隊一定問, 要測試什麼? 都在資料庫裡阿, 不就CRUD<br/>\n都只講UI+TableSchema, 就一定開會時爭執這些細節XD</p>\n<h1>More Thinking</h1>\n<p></p>\n<h1>Reference</h1>\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n<p></p>\n<p>ps. Domain Storytelling是本淺顯易懂的好書, 有讀書會開團跑工作坊嘛QQ</p>\n<br/>\n</div>",
        "content_text": "上篇回顧\n\n講到會議很煩很冗長沒重點還要開好幾次, 是因為一開始大家都不熟問題域, 甚至連對問題的認知都有顯著的落差\n講到說故事可以讓聽者快速了解流程\n講到敏捷宣言裡鼓勵互動與協作\n\nCost of Change Curve\n上一篇講到敏捷開發宣言\n這裡看一下Waterfall, TDD, Agile, 各自當面臨需求變更或錯誤所需要的修復成本\n\nWaterfall\n\nTDD\n\n在開發前, 先寫Test, 來設計與開發軟體\nAgile\nReduce the feedback cycle\n\nAgile這裡有兩種顏色, Green與Red\nRed是成本相對高的作法或是文化習慣\nGreen則是相對低的成本\n透過Model Storming(DDD的Domain storytelling, event storming or other medeling methods...),\n可以減少設計或是需求梳理理解上的錯誤\n透過跟跟Stackholder的協作互動, 可以減少設計或是需求梳理理解上的錯誤\n\n其實後兩個都是在不同階段, 提早發現問題, 及早Feedback\n浪費往往就是在後期才發現, 如果能盡量消弭浪費, 則能相對於以前\n面對變化與錯誤時是敏捷的\nBut!\n如果公司也沒覺得自己的Waterfall有什麼浪費的話, 也硬要改變的必要就是了\nWhat is Domain?\n\nDDD的作者Eric Evan提出對於Domain的定義是\n\nA sphere of knowledge, influence, or activity.\nThe subject area to which the user applies a program is the domain of the software\n\n其中一個字sphere在\n\n跟Eric Evan描述的維度幾乎一樣吧XD 且同義字就是Domain\nknowledge, influence, or activity\n用戶圍繞在這三個主題的範疇上, 怎應用你的軟體來滿足用戶\n用戶為了執行某些行為, 需要這軟體的支持\n為了滿足用戶需求, 需要這軟體的支持\n用Domain Storytelling來說Waterfall的流程\n不搭配文字描述, 我是覺得不難看得懂, 因為這應該要我用講的搭配畫面播放XD\n\n\n\n\n用Domain Storytelling來說Stakeholder參與協作的流程\n\n\n\n\n\n\n\n差別就只是先請規劃者來說個故事給開發者們聽,\n當下開發者們快速的畫出這樣的業務流程\n同時請規劃者也閱讀並協作修正\n是這裡提倡的提早把認知跟規劃者一起協作交互溝通,\n讓彼此對業務流程和問題的認知拉其的一種方法跟介入的時機點\nBenefits for Telling Storeis 與 Visualize Business Flow\n\nDesigner針對它所需要理解的Domain範疇可能只是一部份,\n他們可以快速假設出Prototype來驗證\n\nQ: 開發人員所需要的Domain就剛好跟Designer認知的範疇一模一樣嘛?\nQ: 但開發軟體呢?  如何早點的把假設的部份給具現化來討論並驗證?\n\n\n快速的給出一些Telling Storeis 與 Visualize Business Flow的好處\n\n我懶得細細描述,  這些是出自\nDomain Storytelling\n\n一種協作建模的工具\n目的讓來自不同背景的與會人員, 能透過可視化的故事跟說故事的方式學習彼此的領域範疇\nPictorgraphic Language\n進到書本的第二章了,  主要講這畫布上的內容與文法\n\n主要就\n\nActor\n\n一個句子裡的主詞\n可以是人、一群人、一個系統、一個外部服務\n\n\nWork Object\n\n通常是一個句子裡的受詞\n也可能是Actor之間戶通有無的東西\n可以是實體的事物、虛擬的事物、甚至只是一些資訊, 說故事不會特別地去區別它們(數據，事物還是資訊)\n\n\nActivity\n\n通常是一個句子內的動詞, 剛剛的Actor跟Work Object 都是名詞\n具有方向性, 指向接收方\n\n\nSequence Number\n\n標示在Activity上的數字\n一個故事中會有一堆句子, 這數字用來表示故事裡的句子順序而已\n舉例: 7號句子, 會在6號句子後面被講出來(不是廢話嘛? 對就是這麼廢話, 但這數字讓人方便了解前後文的關聯方向)\n\n\nAnnotation\n\n任何你想補充的資訊\n該Actor/WorkOjbect的狀態\n條件表達等等的, 任何想講的都能寫在這\n或者對這Activity想做的補充\n別寫散文在這就好\n\n\n\n蠻多元素跟類似\nGrammar- 故事中句子的表示法\n\n其實文法不多, 學習門檻非常的低\nAvoid Grammar\n\n\nLoopbacks\n\n這不是在描述API\nUser做出動作, 本來就是期望會得到預期的資訊, 我們更在意的是業務流程\n\n\nConditional\n\n這不是在畫\n\n我們在講故事描述流程跟業務的運作方式\n\n\n\nDomain Storytelling to User Story\n\n常常我們做產品都會用UserStory來描述問題與需求\n這裡只是快速講怎轉換語法,\n但怎從Domain storytelling慢慢的拆解映射到User story mapping\n就實戰工作坊比較合適講解了\nDomain Storytelling轉換Pictorgraphic Language到User Story\n\n\n大致上到這裡Domain Storytelling故事就講完了\n但軟體設計要怎進行?\n我想才是大家的疑惑!\n流程大概是, 從故事的流程中, 針對上面的角色,流程方向, 事物用途, 來設計出適當的邊界\n\n然後每個邊界在Zoom In繼續分析討論, 但這時也許就能分工出去給各組去討論了\n嘗試在這邊界的場景內,找出sub-domain跟aggregate\n\n再來就能各小組來玩User Story Mapping\n找出有價值或是優先權高的story跟拆分出task\n\n再來各組搭配Example mapping\n\n根據規格Rule(規格書通常會給), 假設出情境並給出期望的答案\n這裡的展開內容, 可以做整合測試, UnitTest\n甚至如果是用Gherkin語法, 還能轉成BDD所需要的測試案例\nOO Analysis & Design\n\nOOAD 拆成Analysis 跟Design\nOOA, 來辨識What to do?\nOOD, 辨識出要做什麼後, How to do?\n流程也是非常雷同的, Divide & Conquer 然後持續repeat細化精化\n把ProblemSpace給拆解梳理的過程就是Project(投射)到Requirement Layer(各位開發者最愛談的分層設計?)\n都梳理好了分析好了, 再來投射到Design, 開始設計\n最後都設計好了有規格書跟TableSchema還有UI了!? 開始寫扣,  投射到Implement\n最後佈署發布\n每一層其實都有其驗收條件, 不然就又要最後上線給QA背鍋去了XD\n工作了快10年, 合作過不少PM/SA都說很會做軟體設計, 我是沒看到UML圖做分析設計\n幾乎都看到UI Prototype + Table Schema + 數十頁的文字檔 + 人月工時都估算好了\n但每次開會我問, 各層的驗收條件是什麼? 都傻住, 講不出來QQ\n通常當下回應我的內容是我們這次的系統沒那麼複雜, 都是CRUD\n等日後QA跑去問測試案例, 常得到的回答是我也沒辦法從畫面跟資料庫推斷出流程\n(當然阿 你當初設計就沒把這些給寫下來或視覺化, 日後問時, 人都會忘XD)\n\n我: ...真的要開發人員腦補就是了XD\nQA: 暗, 只好慢慢地探索性測試\n\n如果真有公司這樣子跑流程, 但嘴裡喊著敏捷, 我應該會覺得很困惑QQ\n無形中一堆浪費, 但沒改善\n可能只是想壓榨完成的時間吧\n也非常多公司, 軟體/系統設計, Table Schema+API Doc都是PM/SA寫的.\n開發人員都真的是按表操課, 等後面的新同事來了, 前輩&後輩也只能腦補, 因為都是對於文件的想像\n右半邊的圖是OOAD的流程, 但我懶得細說了, 沒驗收條件什麼都假的QQ\n都是把責任往QA跟使用者拋\n\n有人常講以終為始, 我覺得用什麼角度解讀這句. 有人以User在想, 有人以資料流在想,\n但我身為開發人員, 我更喜歡以中為始,\n中間那層業務邏輯, 應該是不變得, 這的不變不是業務流程真的都不會變\n而是它不應該因為資料庫變動, API協議變動, 畫面變動, 而影響到業務\n相對於外部環境, 我們的領域與業務不應該受到外部環境影響而被影響\n一定要有測試保護的也是這層\n都只講UI+TableSchema, 也難怪這樣的公司幾乎沒在寫測試.\n因為開發團隊一定問, 要測試什麼? 都在資料庫裡阿, 不就CRUD\n都只講UI+TableSchema, 就一定開會時爭執這些細節XD\nMore Thinking\n\nReference\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nps. Domain Storytelling是本淺顯易懂的好書, 有讀書會開團跑工作坊嘛QQ",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "上 篇 回顧\n講到 會議 很煩 很 冗長 沒 重點 還要 開 好 幾次 ,\n是 因為 一 開始 大家 都 不熟 問題 域 ,\n甚至 連對 問題 的 認知 都 有 顯著 的 落差\n講到 說 故事 可以 讓 聽者 快速 了解 流程\n講到 敏捷 宣言 裡 鼓勵 互動 與 協作\nCost\nof\nChange\nCurve\n上 一篇 講到 敏捷 開發 宣言\n這裡 看 一下 Waterfall ,\nTDD ,\nAgile ,\n各自 當 面臨 需求 變更 或 錯誤 所 需要 的 修復 成本\nWaterfall\nTDD\n在 開發 前 ,\n先寫 Test ,\n來 設計 與 開發 軟體\nAgile\nReduce\nthe\nfeedback\ncycle\nAgile 這裡 有 兩種 顏色 ,\nGreen 與 Red\nRed 是 成本 相對 高 的 作法 或是 文化 習慣\nGreen 則是 相對 低 的 成本\n透過 Model\nStorming ( DDD 的 Domain\nstorytelling ,\nevent\nstorming\nor\nother\nmedeling\nmethods ... ) ,\n可以 減少 設計 或是 需求 梳理 理解 上 的 錯誤\n透過 跟 跟 Stackholder 的 協作 互動 ,\n可以 減少 設計 或是 需求 梳理 理解 上 的 錯誤\n其實 後 兩個 都 是 在 不同 階段 ,\n提早 發現 問題 ,\n及早 Feedback\n浪費 往往 就是 在 後期 才 發現 ,\n如果 能 盡量 消弭 浪費 ,\n則能 相對 於 以前\n面對 變化 與 錯誤 時 是 敏捷 的\nBut !\n如果 公司 也 沒 覺得 自己 的 Waterfall 有 什麼 浪費 的話 ,\n也 硬 要 改變 的 必要 就是 了\nWhat\nis\nDomain ?\nDDD 的 作者 Eric\nEvan 提出 對於 Domain 的 定義 是\nA\nsphere\nof\nknowledge ,\ninfluence ,\nor\nactivity .\nThe\nsubject\narea\nto\nwhich\nthe\nuser\napplies\na\nprogram\nis\nthe\ndomain\nof\nthe\nsoftware\n其中 一個 字 sphere 在\n跟 Eric\nEvan 描述 的 維度 幾乎 一樣 吧 XD\n且 同義字 就是 Domain\nknowledge ,\ninfluence ,\nor\nactivity\n用戶 圍繞 在 這 三個 主題 的 範疇 上 ,\n怎 應用 你 的 軟體 來 滿足用戶\n用戶 為 了 執行 某些 行為 ,\n需要 這 軟體 的 支持\n為 了 滿足用戶 需求 ,\n需要 這 軟體 的 支持\n用 Domain\nStorytelling 來說 Waterfall 的 流程\n不 搭配 文字描述 ,\n我 是 覺得 不難 看得懂 ,\n因為 這 應該 要 我 用講 的 搭配 畫面 播放 XD\n用 Domain\nStorytelling 來說 Stakeholder 參與 協作 的 流程\n差別 就 只是 先請 規劃者 來說 個 故事 給 開發者 們 聽 ,\n當下 開發者 們 快速 的 畫出 這樣 的 業務流程\n同時 請 規劃者 也 閱讀 並 協作 修正\n是 這裡 提倡 的 提早 把 認知 跟 規劃者 一起 協作 交互 溝通 ,\n讓 彼此 對 業務流程 和 問題 的 認知 拉其 的 一種 方法 跟 介入 的 時機 點\nBenefits\nfor\nTelling\nStoreis\n與\nVisualize\nBusiness\nFlow\nDesigner 針對 它 所 需要 理解 的 Domain 範疇 可能 只是 一部 份 ,\n他們 可以 快速 假設 出 Prototype 來 驗證\nQ :\n開發人員 所 需要 的 Domain 就 剛好 跟 Designer 認知 的 範疇 一模一樣 嘛 ?\nQ :\n但 開發 軟體 呢 ?\n如何 早點 的 把 假設 的 部份 給具 現化來 討論 並 驗證 ?\n快速 的 給出 一些 Telling\nStoreis\n與\nVisualize\nBusiness\nFlow 的 好處\n我 懶得 細細 描述 ,\n這些 是 出自\nDomain\nStorytelling\n一種 協作 建模 的 工具\n目的 讓 來自 不同 背景 的 與會 人員 ,\n能 透過 可視化 的 故事 跟 說 故事 的 方式 學習 彼此 的 領域 範疇\nPictorgraphic\nLanguage\n進 到 書本 的 第二章 了 ,\n主要 講 這 畫布 上 的 內容 與 文法\n主要 就\nActor\n一個 句子 裡的 主詞\n可以 是 人 、 一群 人 、 一個 系統 、 一個 外部 服務\nWork\nObject\n通常 是 一個 句子 裡的 受詞\n也 可能 是 Actor 之間 戶通 有無 的 東西\n可以 是 實體 的 事物 、 虛擬 的 事物 、 甚至 只是 一些 資訊 ,\n說 故事 不會 特別 地去 區別 它們 ( 數據 ， 事物 還是 資訊 )\nActivity\n通常 是 一個 句子 內 的 動詞 ,\n剛剛 的 Actor 跟 Work\nObject\n都 是 名詞\n具有 方向性 ,\n指向 接收 方\nSequence\nNumber\n標示 在 Activity 上 的 數字\n一個 故事 中會 有 一堆 句子 ,\n這 數字 用來 表示 故事 裡的 句子 順序 而已\n舉例 :\n7 號 句子 ,\n會 在 6 號 句子 後面 被講 出來 ( 不是 廢話 嘛 ?\n對 就是 這麼 廢話 ,\n但 這 數字 讓 人 方便 了解 前後文 的 關聯 方向 )\nAnnotation\n任何 你 想 補充 的 資訊\n該 Actor / WorkOjbect 的 狀態\n條件 表達 等等 的 ,\n任何 想講 的 都 能 寫 在 這\n或者 對 這 Activity 想 做 的 補充\n別寫 散文 在 這就 好\n蠻多 元素 跟 類似\nGrammar -\n故事 中 句子 的 表示法\n其實 文法 不 多 ,\n學習 門檻 非常 的 低\nAvoid\nGrammar\nLoopbacks\n這 不是 在 描述 API\nUser 做出 動作 ,\n本來 就是 期望 會 得到 預期 的 資訊 ,\n我們 更 在意 的 是 業務流程\nConditional\n這 不是 在畫\n我們 在 講故事 描述 流程 跟 業務 的 運作 方式\nDomain\nStorytelling\nto\nUser\nStory\n常常 我們 做 產品 都 會 用 UserStory 來 描述 問題 與 需求\n這裡 只是 快速 講 怎 轉換 語法 ,\n但 怎 從 Domain\nstorytelling 慢慢 的 拆解 映射 到 User\nstory\nmapping\n就 實戰 工作坊 比較 合適 講解 了\nDomain\nStorytelling 轉換 Pictorgraphic\nLanguage 到 User\nStory\n大致 上到 這裡 Domain\nStorytelling 故事 就 講完 了\n但 軟體 設計 要 怎 進行 ?\n我 想 才 是 大家 的 疑惑 !\n流程 大概 是 ,\n從 故事 的 流程 中 ,\n針對 上面 的 角色 , 流程 方向 ,\n事物 用途 ,\n來 設計 出 適當 的 邊界\n然後 每個 邊界 在 Zoom\nIn 繼續 分析 討論 ,\n但 這時 也許 就 能 分工 出去 給 各組 去 討論 了\n嘗試 在 這邊 界 的 場景 內 , 找出 sub - domain 跟 aggregate\n再來 就 能 各 小組 來 玩 User\nStory\nMapping\n找出 有 價值 或是 優先權 高 的 story 跟 拆分 出 task\n再來 各組 搭配 Example\nmapping\n根據 規格 Rule ( 規格書 通常 會給 ) ,\n假設 出 情境 並 給出 期望 的 答案\n這裡 的 展開 內容 ,\n可以 做 整合 測試 ,\nUnitTest\n甚至 如果 是 用 Gherkin 語法 ,\n還能 轉成 BDD 所 需要 的 測試 案例\nOO\nAnalysis\n&\nDesign\nOOAD\n拆成 Analysis\n跟 Design\nOOA ,\n來 辨識 What\nto\ndo ?\nOOD ,\n辨識 出要 做 什麼 後 ,\nHow\nto\ndo ?\n流程 也 是 非常 雷同 的 ,\nDivide\n&\nConquer\n然後 持續 repeat 細化 精化\n把 ProblemSpace 給 拆解 梳理 的 過程 就是 Project ( 投射 ) 到 Requirement\nLayer ( 各位 開發者 最愛 談 的 分層 設計 ? )\n都 梳理 好 了 分析 好 了 ,\n再來 投射 到 Design ,\n開始 設計\n最後 都 設計 好 了 有 規格書 跟 TableSchema 還有 UI 了 ! ?\n開始 寫扣 ,\n投射 到 Implement\n最後 佈署 發布\n每 一層 其實 都 有 其 驗收 條件 ,\n不然 就 又 要 最後 上線 給 QA 背鍋 去 了 XD\n工作 了 快 10 年 ,\n合作 過 不少 PM / SA 都 說 很會 做 軟體 設計 ,\n我 是 沒 看到 UML 圖 做 分析 設計\n幾乎 都 看到 UI\nPrototype\n+\nTable\nSchema\n+\n數十頁 的 文字 檔\n+\n人 月 工時 都 估算 好 了\n但 每次 開會 我問 ,\n各層 的 驗收 條件 是 什麼 ?\n都 傻 住 ,\n講不 出來 QQ\n通常 當下 回應 我 的 內容 是 我們 這次 的 系統 沒 那麼 複雜 ,\n都 是 CRUD\n等 日後 QA 跑 去問 測試 案例 ,\n常 得到 的 回答 是 我 也 沒 辦法 從 畫面 跟 資料庫 推斷出 流程\n( 當然 阿\n你 當初 設計 就 沒 把 這些 給寫 下來 或 視覺 化 ,\n日後 問時 ,\n人 都 會 忘 XD )\n我 :\n... 真的 要 開發人員 腦補 就是 了 XD\nQA :\n暗 ,\n只好 慢慢 地 探索性 測試\n如果 真有 公司 這樣 子 跑 流程 ,\n但 嘴裡 喊 著 敏捷 ,\n我 應該 會 覺得 很 困惑 QQ\n無形中 一堆 浪費 ,\n但 沒 改善\n可能 只是 想 壓榨 完成 的 時間 吧\n也 非常 多 公司 ,\n軟體 / 系統 設計 ,\nTable\nSchema + API\nDoc 都 是 PM / SA 寫 的 .\n開發人員 都 真的 是 按表操 課 ,\n等 後面 的 新 同事 來 了 ,\n前輩 & 後輩 也 只能 腦補 ,\n因為 都 是 對於 文件 的 想像\n右 半邊 的 圖 是 OOAD 的 流程 ,\n但 我 懶得 細說 了 ,\n沒 驗收 條件 什麼 都 假 的 QQ\n都 是 把 責任 往 QA 跟 使用者 拋\n有人 常講 以終 為始 ,\n我 覺得 用 什麼 角度 解讀 這句 .\n有人 以 User 在 想 ,\n有人 以 資料 流在 想 ,\n但 我 身為 開發人員 ,\n我 更 喜歡 以中 為始 ,\n中間 那層 業務 邏輯 ,\n應該 是 不 變得 ,\n這的 不變 不是 業務流程 真的 都 不會 變\n而是 它 不 應該 因為 資料庫 變動 ,\nAPI 協議 變動 ,\n畫面 變動 ,\n而 影響 到 業務\n相對 於 外部環境 ,\n我們 的 領域 與 業務 不 應該 受到 外部環境 影響 而 被 影響\n一定 要 有 測試 保護 的 也 是 這層\n都 只講 UI + TableSchema ,\n也 難怪 這樣 的 公司 幾乎 沒 在 寫 測試 .\n因為 開發 團隊 一定 問 ,\n要 測試 什麼 ?\n都 在 資料庫 裡阿 ,\n不 就 CRUD\n都 只講 UI + TableSchema ,\n就 一定 開會 時 爭執 這些 細節 XD\nMore\nThinking\nReference\nps .\nDomain\nStorytelling 是 本 淺顯易懂 的 好書 ,\n有 讀書會 開團 跑 工作坊 嘛 QQ",
        "word_seg_processed_content_text": "篇 回顧\n講到 會議 很煩 冗長 沒 重點 還要 開 幾次\n不熟 域\n連對 認知 落差\n講到 說 故事 聽者 快速 了解 流程\n講到 敏捷 宣言 裡 鼓勵 互動 協作\ncost\n\nchange\ncurve\n一篇 講到 敏捷 開發 宣言\nwaterfall\ntdd\nagile\n面臨 需求 變更 錯誤 修復 成本\nwaterfall\ntdd\n開發 前\n先寫 test\n設計 開發 軟體\nagile\nreduce\n\nfeedback\ncycle\nagile 兩種 顏色\ngreen red\nred 成本 高 作法 文化 習慣\ngreen 則是 低 成本\n透過 model\nstorming ddd domain\nstorytelling\nevent\nstorming\n\nother\nmedeling\nmethods ...\n減少 設計 需求 梳理 理解 錯誤\n透過 stackholder 協作 互動\n減少 設計 需求 梳理 理解 錯誤\n兩個 階段\n提早 發現\n及早 feedback\n浪費 後期 才 發現\n盡量 消弭 浪費\n則能\n面對 變化 錯誤 時 敏捷\nbut\n公司 沒 waterfall 浪費\n硬 改變\nwhat\n\ndomain\nddd 作者 eric\nevan 提出 domain 定義\na\nsphere\n\nknowledge\ninfluence\n\nactivity\n\nsubject\narea\n\n\n\nuser\napplies\na\nprogram\n\n\ndomain\n\n\nsoftware\n字 sphere\neric\nevan 描述 維度 xd\n同義字 domain\nknowledge\ninfluence\n\nactivity\n用戶 圍繞 三個 主題 範疇\n軟體 滿足用戶\n用戶 執行\n軟體 支持\n滿足用戶 需求\n軟體 支持\ndomain\nstorytelling 來說 waterfall 流程\n搭配 文字描述\n不難 看得懂\n用講 搭配 畫面 播放 xd\ndomain\nstorytelling 來說 stakeholder 參與 協作 流程\n差別 先請 規劃者 來說 故事 開發者 聽\n當下 開發者 快速 畫出 業務流程\n請 規劃者 閱讀 協作 修正\n提倡 提早 認知 規劃者 協作 交互 溝通\n業務流程 認知 拉其 一種 方法 介入 時機 點\nbenefits\n\ntelling\nstoreis\n\nvisualize\nbusiness\nflow\ndesigner 針對 理解 domain 範疇 一部 份\n快速 假設 出 prototype 驗證\nq\n開發人員 domain 剛好 designer 認知 範疇 一模一樣\nq\n開發 軟體\n早點 假設 部份 給具 現化來 討論 驗證\n快速 給出 telling\nstoreis\n\nvisualize\nbusiness\nflow 好處\n懶得 細細 描述\n出自\ndomain\nstorytelling\n一種 協作 建模 工具\n目的 來自 背景 與會 人員\n透過 可視化 故事 說 故事 方式 學習 領域 範疇\npictorgraphic\nlanguage\n進 書本 第二章\n講 畫布 內容 文法\n\nactor\n句子 裡的 主詞\n一群 系統 外部 服務\nwork\nobject\n句子 裡的 受詞\nactor 之間 戶通 有無 東西\n實體 事物 虛擬 事物 資訊\n說 故事 特別 地去 區別 數據 事物 資訊\nactivity\n句子 內 動詞\n剛剛 actor work\nobject\n名詞\n方向性\n指向 接收 方\nsequence\nnumber\n標示 activity 數字\n故事 中會 一堆 句子\n數字 用來 故事 裡的 句子 順序\n舉例\n7 號 句子\n會 6 號 句子 被講 廢話\n廢話\n數字 了解 前後文 關聯 方向\nannotation\n想 補充 資訊\nactor workojbect 狀態\n條件 表達\n想講 寫\nactivity 想 做 補充\n別寫 散文 這就\n蠻多 元素 類似\ngrammar\n故事 中 句子 表示法\n文法\n學習 門檻 低\navoid\ngrammar\nloopbacks\n描述 api\nuser 做出 動作\n本來 期望 會 預期 資訊\n更 在意 業務流程\nconditional\n在畫\n講故事 描述 流程 業務 運作 方式\ndomain\nstorytelling\n\nuser\nstory\n做 產品 會 userstory 描述 需求\n快速 講 轉換 語法\ndomain\nstorytelling 慢慢 拆解 映射 user\nstory\nmapping\n實戰 工作坊 合適 講解\ndomain\nstorytelling 轉換 pictorgraphic\nlanguage user\nstory\n大致 上到 domain\nstorytelling 故事 講完\n軟體 設計\n想 才 疑惑\n流程 大概\n故事 流程 中\n針對 角色 流程 方向\n事物 用途\n設計 出 邊界\n邊界 zoom\n分析 討論\n也許 分工 各組 討論\n嘗試 界 場景 內 找出 sub domain aggregate\n再來 小組 玩 user\nstory\nmapping\n找出 價值 優先權 高 story 拆分 出 task\n再來 各組 搭配 example\nmapping\n規格 rule 規格書 會給\n假設 出 情境 給出 期望 答案\n展開 內容\n做 整合 測試\nunittest\ngherkin 語法\n還能 轉成 bdd 測試 案例\noo\nanalysis\n\ndesign\nooad\n拆成 analysis\ndesign\nooa\n辨識 what\n\ndo\nood\n辨識 出要 做\nhow\n\ndo\n流程 雷同\ndivide\n\nconquer\n持續 repeat 細化 精化\nproblemspace 拆解 梳理 過程 project 投射 requirement\nlayer 開發者 最愛 談 分層 設計\n梳理 分析\n再來 投射 design\n設計\n設計 規格書 tableschema ui\n寫扣\n投射 implement\n佈署 發布\n一層 驗收 條件\n上線 qa 背鍋 xd\n工作 快 10 年\n合作 不少 pm sa 說 很會 做 軟體 設計\n沒 uml 圖 做 分析 設計\nui\nprototype\n\ntable\nschema\n\n數十頁 文字 檔\n\n月 工時 估算\n每次 開會 我問\n各層 驗收 條件\n傻 住\n講不 qq\n當下 回應 內容 這次 系統 沒\ncrud\n日後 qa 跑 去問 測試 案例\n常 回答 沒 辦法 畫面 資料庫 推斷出 流程\n\n當初 設計 沒 給寫 視覺 化\n日後 問時\n會 忘 xd\n\n... 真的 開發人員 腦補 xd\nqa\n暗\n只好 慢慢 探索性 測試\n真有 公司 子 跑 流程\n嘴裡 喊 敏捷\n會 困惑 qq\n無形中 一堆 浪費\n沒 改善\n想 壓榨 時間\n公司\n軟體 系統 設計\ntable\nschema api\ndoc pm sa 寫\n開發人員 真的 按表操 課\n新 同事\n前輩 後輩 只能 腦補\n文件 想像\n右 半邊 圖 ooad 流程\n懶得 細說\n沒 驗收 條件 假 qq\n責任 qa 使用者 拋\n有人 常講 以終 為始\n角度 解讀 這句\n有人 user 想\n有人 資料 流在 想\n身為 開發人員\n更 喜歡 以中 為始\n那層 業務 邏輯\n變得\n這的 業務流程 真的 變\n資料庫 變動\napi 協議 變動\n畫面 變動\n影響 業務\n外部環境\n領域 業務 外部環境 影響 影響\n測試 保護 這層\n只講 ui tableschema\n難怪 公司 沒 寫 測試\n開發 團隊 問\n測試\n資料庫 裡阿\ncrud\n只講 ui tableschema\n開會 時 爭執 細節 xd\nmore\nthinking\nreference\nps\ndomain\nstorytelling 淺顯易懂 好書\n讀書會 開團 跑 工作坊 qq",
        "extracted_keywords": [
            "agile",
            "開發人員",
            "規劃者",
            "工作坊",
            "會議"
        ],
        "extracted_keywords_phrases": [
            "agile 面臨",
            "開發人員 腦補",
            "規劃者 協作",
            "流程 雷同",
            "敏捷 開發"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282355": {
        "href": "https://ithelp.ithome.com.tw/articles/10282355",
        "title": "JS 45 - 是否要離開網站？可能無法儲存您所做的變更。",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>相信有挑戰鐵人賽的讀者，應該都有這樣的疑問：</p>\n<blockquote>\n<p>為什麼關閉瀏覽器時，不會發出警告來阻止我呢？<br>\n只要瀏覽器關閉，原本寫好的文章就付諸流水了。<br>\n…</p>\n</blockquote>\n<p>我明白，畢竟我也經歷過這樣的切身之痛，甚至不止一次。<br>\n儘管下方有儲存草稿的功能，但是總不會每打完一個字就去按下按鈕吧？<br>\n於是，我花了五分鐘思考，終於想出了解決辦法！</p>\n<p>今天的主題就是，離開網頁時自動發出警告。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">window.addEventListener('blur', function () {\n    document.querySelector('input.btn-draft').click();\n});\n\nwindow.addEventListener('beforeunload', function (e) {\n    event.preventDefault();\n    event.returnValue = '';\n});\n</code></pre>\n<hr>\n<h2>實測</h2>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-30 23:59:37",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "45",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>相信有挑戰鐵人賽的讀者，應該都有這樣的疑問：</p>\n<blockquote>\n<p>為什麼關閉瀏覽器時，不會發出警告來阻止我呢？<br/>\n只要瀏覽器關閉，原本寫好的文章就付諸流水了。<br/>\n…</p>\n</blockquote>\n<p>我明白，畢竟我也經歷過這樣的切身之痛，甚至不止一次。<br/>\n儘管下方有儲存草稿的功能，但是總不會每打完一個字就去按下按鈕吧？<br/>\n於是，我花了五分鐘思考，終於想出了解決辦法！</p>\n<p>今天的主題就是，離開網頁時自動發出警告。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n相信有挑戰鐵人賽的讀者，應該都有這樣的疑問：\n\n為什麼關閉瀏覽器時，不會發出警告來阻止我呢？\n只要瀏覽器關閉，原本寫好的文章就付諸流水了。\n…\n\n我明白，畢竟我也經歷過這樣的切身之痛，甚至不止一次。\n儘管下方有儲存草稿的功能，但是總不會每打完一個字就去按下按鈕吧？\n於是，我花了五分鐘思考，終於想出了解決辦法！\n今天的主題就是，離開網頁時自動發出警告。\n我們進入今天的主題吧！\n\n程式碼\n\n\n實測\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "javascript",
                "content": "window.addEventListener('blur', function () {\n    document.querySelector('input.btn-draft').click();\n});\n\nwindow.addEventListener('beforeunload', function (e) {\n    event.preventDefault();\n    event.returnValue = '';\n});\n"
            }
        ],
        "programming_languages": [
            "javascript"
        ],
        "word_seg_content_text": "大家 好 ！\n相信 有 挑戰 鐵人 賽 的 讀者 ， 應該 都 有 這樣 的 疑問 ：\n為 什麼 關閉 瀏覽器 時 ， 不會 發出 警告 來 阻止 我 呢 ？\n只要 瀏覽器 關閉 ， 原本 寫 好 的 文章 就 付諸流水 了 。\n…\n我 明白 ， 畢竟 我 也 經歷 過 這樣 的 切身 之痛 ， 甚至 不止一次 。\n儘管 下方 有 儲存 草稿 的 功能 ， 但是 總 不會 每 打 完 一個 字 就 去 按 下 按鈕 吧 ？\n於是 ， 我花 了 五分鐘 思考 ， 終於 想出 了 解決辦法 ！\n今天 的 主題 就是 ， 離開 網頁 時 自動 發出 警告 。\n我們 進入 今天 的 主題 吧 ！\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n挑戰 鐵人 賽 讀者 疑問\n關閉 瀏覽器 時 發出 警告 阻止\n瀏覽器 關閉 原本 寫 文章 付諸流水\n\n明白 畢竟 經歷 切身 之痛 不止一次\n下方 儲存 草稿 功能 總 完 字 按鈕\n我花 五分鐘 思考 終於 想出 解決辦法\n主題 離開 網頁 時 自動 發出 警告\n主題\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "瀏覽器",
            "關閉",
            "網頁",
            "讀者",
            "阻止"
        ],
        "extracted_keywords_phrases": [
            "瀏覽器 關閉",
            "阻止 瀏覽器",
            "關閉 瀏覽器",
            "瀏覽器 發出",
            "瀏覽器"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282354": {
        "href": "https://ithelp.ithome.com.tw/articles/10282354",
        "title": "Leetcode: 226. Invert Binary Tree",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>這裡空置了兩個禮拜多，總之我要延畢了，怎麼說呢，大家都說延畢不是世界末日，我現在也接受這個說法了，不過還是希望自己這個小廢物，能快點出社會哈哈。</p>\n<h3>思路</h3>\n<p>他說要反轉一個二元樹，我看起來像是本來Preorder這棵樹，數值會由小到大，那我要的答案是：Preorder會變成由大到小。</p>\n<p>要回傳的是樹的root。</p>\n<p>乍一看，我想說感覺是可以同時分別去拜訪左child跟右child，但想想感覺又好亂，繼續盯著樹看，感覺可以試試把每個點的link to child 都交換，直到沒有child為止。</p>\n<h3>程式碼</h3>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        exchange(root);\n        return root;\n    }\nprivate:\n    void exchange(TreeNode* curr_node) {\n        if (curr_node == NULL)\n            return;\n        TreeNode* temp = curr_node-&gt;left;\n        curr_node-&gt;left = curr_node-&gt;right;\n        curr_node-&gt;right = temp;\n        exchange(curr_node-&gt;left);\n        exchange(curr_node-&gt;right);\n    }\n};\n</code></pre>\n<h3>應該說</h3>\n<p>開心，可能因為刷多了圖論的題目，第二直覺的解法一次就通過了！（雖然這題是簡單的）</p>\n<p>參考：<br>\n<a href=\"https://ithelp.ithome.com.tw/articles/10278114\" target=\"_blank\" rel=\"noreferrer noopener\">https://ithelp.ithome.com.tw/articles/10278114</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "自我挑戰組",
        "published_at": "2021-10-30 23:35:19",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3904",
        "series_name": "來解數學跟刷圖論跟幾何程式題或者我突然想研究的主題",
        "series_num": "29",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>這裡空置了兩個禮拜多，總之我要延畢了，怎麼說呢，大家都說延畢不是世界末日，我現在也接受這個說法了，不過還是希望自己這個小廢物，能快點出社會哈哈。</p>\n<h3>思路</h3>\n<p>他說要反轉一個二元樹，我看起來像是本來Preorder這棵樹，數值會由小到大，那我要的答案是：Preorder會變成由大到小。</p>\n<p>要回傳的是樹的root。</p>\n<p>乍一看，我想說感覺是可以同時分別去拜訪左child跟右child，但想想感覺又好亂，繼續盯著樹看，感覺可以試試把每個點的link to child 都交換，直到沒有child為止。</p>\n<h3>程式碼</h3>\n<pre></pre>\n<h3>應該說</h3>\n<p>開心，可能因為刷多了圖論的題目，第二直覺的解法一次就通過了！（雖然這題是簡單的）</p>\n<p>參考：<br/>\n</p>\n<br/>\n</div>",
        "content_text": "這裡空置了兩個禮拜多，總之我要延畢了，怎麼說呢，大家都說延畢不是世界末日，我現在也接受這個說法了，不過還是希望自己這個小廢物，能快點出社會哈哈。\n思路\n他說要反轉一個二元樹，我看起來像是本來Preorder這棵樹，數值會由小到大，那我要的答案是：Preorder會變成由大到小。\n要回傳的是樹的root。\n乍一看，我想說感覺是可以同時分別去拜訪左child跟右child，但想想感覺又好亂，繼續盯著樹看，感覺可以試試把每個點的link to child 都交換，直到沒有child為止。\n程式碼\n\n應該說\n開心，可能因為刷多了圖論的題目，第二直覺的解法一次就通過了！（雖然這題是簡單的）\n參考：",
        "content_code_info": [
            {
                "language": "c++",
                "content": "class Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        exchange(root);\n        return root;\n    }\nprivate:\n    void exchange(TreeNode* curr_node) {\n        if (curr_node == NULL)\n            return;\n        TreeNode* temp = curr_node->left;\n        curr_node->left = curr_node->right;\n        curr_node->right = temp;\n        exchange(curr_node->left);\n        exchange(curr_node->right);\n    }\n};\n"
            }
        ],
        "programming_languages": [
            "c++"
        ],
        "word_seg_content_text": "這裡 空置 了 兩個 禮拜 多 ， 總之 我要 延畢 了 ， 怎麼 說 呢 ， 大家 都 說 延畢 不是 世界末日 ， 我 現在 也 接受 這個 說法 了 ， 不過 還是 希望 自己 這個 小 廢物 ， 能 快點 出 社會 哈哈 。\n思路\n他 說 要 反轉 一個二元 樹 ， 我 看起來 像是 本來 Preorder 這棵樹 ， 數值 會 由小到大 ， 那 我 要 的 答案 是 ： Preorder 會 變成 由大到 小 。\n要 回傳 的 是 樹 的 root 。\n乍一看 ， 我 想 說 感覺 是 可以 同時 分別 去 拜訪 左 child 跟 右 child ， 但 想想 感覺 又 好 亂 ， 繼續 盯 著樹 看 ， 感覺 可以 試試 把 每個 點的 link\nto\nchild\n都 交換 ， 直到 沒有 child 為止 。\n程式碼\n應該 說\n開心 ， 可能 因為 刷 多 了 圖論 的 題目 ， 第二 直覺 的 解法 一次 就 通過 了 ！ （ 雖然 這題 是 簡單 的 ）\n參考 ：",
        "word_seg_processed_content_text": "空置 兩個 禮拜 我要 延畢 說 說 延畢 世界末日 接受 說法 希望 廢物 快點 出 社會\n思路\n說 反轉 一個二元 樹 看起來 像是 本來 preorder 這棵樹 數值 會 由小到大 答案 preorder 會 由大到\n回傳 樹 root\n乍一看 想 說 感覺 拜訪 左 child 右 child 想想 感覺 亂 盯 著樹 感覺 試試 點的 link\n\nchild\n交換 child 為止\n程式碼\n說\n開心 刷 圖論 題目 第二 直覺 解法 這題 簡單\n參考",
        "extracted_keywords": [
            "著樹",
            "這棵樹",
            "思路",
            "想想",
            "由小到大"
        ],
        "extracted_keywords_phrases": [
            "感覺 著樹",
            "著樹 感覺",
            "思路 反轉",
            "著樹",
            "preorder 這棵樹"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10281949": {
        "href": "https://ithelp.ithome.com.tw/articles/10281949",
        "title": "Day 44. 之後..",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>前陣子因為升級作業系統到Big sur失敗，導致直接重灌，而且是最嚴重的那種，資料救不回來的那種，懶人我只有關於論文的資料留了下來，其他備份一律沒有。</p>\n<p>　</p>\n<p>其他備份也是因為近期遇到備份把空間全數吃掉，無奈之下才把所有備份全數刪除掉，本來想說沒那麼衰的，但誰知...</p>\n<p>　</p>\n<p>不過也因為這樣，我決定弄成雙系統，而且Big sur也給了我一些信心，因為Big sur處理雙系統超輕鬆的哈哈，也不需用到隨身碟了。</p>\n<p>　</p>\n<p>之後也會試著在windows作業系統上使用unity跟unreal，不過我也不是說Mac不好，至少我真的很喜歡他的螢幕還有喇叭，所以也許用這樣的硬體在兩種作業系統上切換也挺好的。</p>\n<p>　</p>\n<p>我之後應該會像這樣很簡單很簡單的更新，紀錄嘗試時的心得，還有碰到的狀況。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Software Development",
        "published_at": "2021-10-30 23:11:48",
        "author_href": "https://ithelp.ithome.com.tw/users/20125152/ironman",
        "author_name": "lhttfy",
        "series_href": "https://ithelp.ithome.com.tw/users/20125152/ironman/3902",
        "series_name": "從零開始了解Unity或Unreal Engine應用於VR軟體開發",
        "series_num": "29",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>前陣子因為升級作業系統到Big sur失敗，導致直接重灌，而且是最嚴重的那種，資料救不回來的那種，懶人我只有關於論文的資料留了下來，其他備份一律沒有。</p>\n<p>　</p>\n<p>其他備份也是因為近期遇到備份把空間全數吃掉，無奈之下才把所有備份全數刪除掉，本來想說沒那麼衰的，但誰知...</p>\n<p>　</p>\n<p>不過也因為這樣，我決定弄成雙系統，而且Big sur也給了我一些信心，因為Big sur處理雙系統超輕鬆的哈哈，也不需用到隨身碟了。</p>\n<p>　</p>\n<p>之後也會試著在windows作業系統上使用unity跟unreal，不過我也不是說Mac不好，至少我真的很喜歡他的螢幕還有喇叭，所以也許用這樣的硬體在兩種作業系統上切換也挺好的。</p>\n<p>　</p>\n<p>我之後應該會像這樣很簡單很簡單的更新，紀錄嘗試時的心得，還有碰到的狀況。</p>\n<br/>\n</div>",
        "content_text": "前陣子因為升級作業系統到Big sur失敗，導致直接重灌，而且是最嚴重的那種，資料救不回來的那種，懶人我只有關於論文的資料留了下來，其他備份一律沒有。\n　\n其他備份也是因為近期遇到備份把空間全數吃掉，無奈之下才把所有備份全數刪除掉，本來想說沒那麼衰的，但誰知...\n　\n不過也因為這樣，我決定弄成雙系統，而且Big sur也給了我一些信心，因為Big sur處理雙系統超輕鬆的哈哈，也不需用到隨身碟了。\n　\n之後也會試著在windows作業系統上使用unity跟unreal，不過我也不是說Mac不好，至少我真的很喜歡他的螢幕還有喇叭，所以也許用這樣的硬體在兩種作業系統上切換也挺好的。\n　\n我之後應該會像這樣很簡單很簡單的更新，紀錄嘗試時的心得，還有碰到的狀況。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "前 陣子 因為 升級 作業系統 到 Big\nsur 失敗 ， 導致 直接 重灌 ， 而且 是 最 嚴重 的 那種 ， 資料 救 不 回來 的 那種 ， 懶人 我 只有 關於 論文 的 資料 留 了 下來 ， 其他 備份 一律 沒有 。\n其他 備份 也 是 因為 近期 遇到 備份 把 空間 全數 吃掉 ， 無奈 之下 才 把 所有 備份 全數 刪除 掉 ， 本來 想 說 沒 那麼 衰 的 ， 但 誰知 ...\n不過 也 因為 這樣 ， 我 決定 弄成 雙系統 ， 而且 Big\nsur 也給 了 我 一些 信心 ， 因為 Big\nsur 處理 雙系統 超 輕鬆 的 哈哈 ， 也 不 需用 到 隨身 碟 了 。\n之後 也 會試 著 在 windows 作業系統 上 使用 unity 跟 unreal ， 不過 我 也 不是 說 Mac 不好 ， 至少 我 真的 很 喜歡 他 的 螢幕 還有 喇叭 ， 所以 也許 用 這樣 的 硬體 在 兩種 作業系統 上 切換 也 挺 好 的 。\n我 之後 應該 會 像 這樣 很 簡單 很 簡單 的 更新 ， 紀錄 嘗試 時 的 心得 ， 還有 碰到 的 狀況 。",
        "word_seg_processed_content_text": "前 陣子 升級 作業系統 big\nsur 失敗 導致 重灌 那種 資料 救 回來 那種 懶人 論文 資料 留 備份 一律\n備份 近期 備份 空間 全數 吃掉 無奈 之下 才 備份 全數 刪除 掉 本來 想 說 沒 衰 ...\n弄成 雙系統 big\nsur 也給 信心 big\nsur 雙系統 超 輕鬆 需用 隨身 碟\n會試 windows 作業系統 unity unreal 說 mac 不好 至少 真的 喜歡 螢幕 喇叭 也許 硬體 兩種 作業系統 切換 挺\n會 簡單 簡單 更新 紀錄 嘗試 時 心得 碰到 狀況",
        "extracted_keywords": [
            "硬體",
            "作業系統",
            "失敗",
            "升級",
            "mac"
        ],
        "extracted_keywords_phrases": [
            "作業系統 切換",
            "作業系統 big",
            "升級 作業系統",
            "硬體",
            "兩種 作業系統"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282352": {
        "href": "https://ithelp.ithome.com.tw/articles/10282352",
        "title": "更新網格交易機器人",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>新增使用訂單的callback計算交割金的功能，這部分整合進機器人之後應該就可以同時跑兩支以上的交易機器人。因為要同時跑兩支以上的機器人會需要每個機器人記錄自己的交易紀錄，而不是直接看帳戶的交割金。</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "永豐金融APIs",
        "published_at": "2021-10-30 19:58:52",
        "author_href": "https://ithelp.ithome.com.tw/users/20141238/ironman",
        "author_name": "JohnsonTheRock",
        "series_href": "https://ithelp.ithome.com.tw/users/20141238/ironman/4483",
        "series_name": "從零開始使用python打造簡易投資工具",
        "series_num": "36",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>新增使用訂單的callback計算交割金的功能，這部分整合進機器人之後應該就可以同時跑兩支以上的交易機器人。因為要同時跑兩支以上的機器人會需要每個機器人記錄自己的交易紀錄，而不是直接看帳戶的交割金。</p>\n<br/>\n</div>",
        "content_text": "新增使用訂單的callback計算交割金的功能，這部分整合進機器人之後應該就可以同時跑兩支以上的交易機器人。因為要同時跑兩支以上的機器人會需要每個機器人記錄自己的交易紀錄，而不是直接看帳戶的交割金。",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "新增 使用 訂單 的 callback 計算 交割 金 的 功能 ， 這部分 整合 進 機器人 之後 應該 就 可以 同時 跑 兩支 以上 的 交易 機器人 。 因為 要 同時 跑 兩支 以上 的 機器人 會 需要 每個 機器人 記錄 自己 的 交易 紀錄 ， 而 不是 直接 看 帳戶 的 交割 金 。",
        "word_seg_processed_content_text": "新增 訂單 callback 計算 交割 金 功能 這部分 整合 進 機器人 跑 兩支 交易 機器人 跑 兩支 機器人 會 機器人 記錄 交易 紀錄 帳戶 交割 金",
        "extracted_keywords": [
            "機器人",
            "訂單",
            "交易",
            "新增",
            "計算"
        ],
        "extracted_keywords_phrases": [
            "交易 機器人",
            "整合 機器人",
            "機器人 記錄",
            "機器人 機器人",
            "機器人 兩支"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10281930": {
        "href": "https://ithelp.ithome.com.tw/articles/10281930",
        "title": "Story Telling - 簡易有效的討論",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>最近看到一本書<br>\n<a href=\"https://www.amazon.com/Domain-Storytelling-Collaborative-Domain-Driven-Addison-Wesley/dp/0137458916\" target=\"_blank\" rel=\"noreferrer noopener\">Domain Storytelling: A Collaborative, Visual, and Agile Way to Build Domain-Driven Software</a><br>\n以前在<a href=\"https://conference.ddd-tw.com/2021/zh-Hant/speakers/hofstef\" target=\"_blank\" rel=\"noreferrer noopener\">DDD活動</a>上, 聽到這協作方法.</p>\n<p>其中書本第一章有講到Telling stories的好處<br>\n我將前兩章節的內容, 做成投影片簡單的跟部門分享<br>\n<a href=\"https://docs.google.com/presentation/d/11HpFSXe6doJ8fcm5BTR-US6GYLMaWTRtf_yn_RnpInw/edit?usp=sharing\" target=\"_blank\" rel=\"noreferrer noopener\">Slide - Storytelling &amp; Domain Stroytelling</a><br>\n這幾天來以文字的形式跟各位分享</p>\n<h2>前言</h2>\n<p>常見的會議情況</p>\n<h3>情境1</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930rMeHicxTRk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930rMeHicxTRk.png\"><br>\n在專案還是產品Kickoff時,<br>\n以會議報告的形式進行討論, 真正具有價值的時間很少, 幾乎都浪費掉了<br>\n然後就會以沒結論的方式, 說下次再召開會議繼續.</p>\n<h3>情境2</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930daZY5aSJYt.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930daZY5aSJYt.png\"><br>\n會議中有人報告時, 其實很多人不清楚, 這報告的內容主要是在解決什麼問題?<br>\n甚至很多某些領域下的專有名詞</p>\n<h3>情境3</h3>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930JVuUafbabh.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930JVuUafbabh.png\"><br>\n會議上, 直接對著畫面跟操作動線進行爭論<br>\n直接針對細節做深入討論<br>\n有的則是直接在會議上討論, 資料庫或表格設計什麼的.</p>\n<h4>分析</h4>\n<p>以下是我的見解</p>\n<ul>\n<li>\n<p>情境1<br>\n會議幾乎都是聽PM或企劃在從畫面草稿跟行銷手段在介紹<br>\n也許對於創新產品沒問題,<br>\n但若是針對既有問題或需求, 從畫面草稿跟行銷企劃, 很難讓所有與會人員都能理解完整的問題域與相關的業務流程</p>\n</li>\n<li>\n<p>情境2<br>\n其實也是跟上面一樣, 所有與會人員都能理解完整的問題域與相關的業務流程.<br>\n因為大家的背景或專長可能就都不同</p>\n</li>\n</ul>\n<p>常見狀況: 有些人講一講會講到API或Table... 與會人員一半都是管理跟企劃行銷, 根本不知道在講什麼</p>\n<ul>\n<li>情境3<br>\n一開始就針對細節展開, 很容易產生爭執<br>\n這是因為每個人對問題的認知或理解程度, 都不同<br>\n自然而然想像出來的也是不同</li>\n</ul>\n<blockquote>\n<p>蕭煌奇- 你是我的眼<br>\n眼前的黑不是黑 你說的白是什麼白<br>\n人們說的天空藍 是我記憶中那團白雲背後的藍天</p>\n</blockquote>\n<p>書上第一篇講到一些觀點</p>\n<blockquote>\n<p>conversations cannot be adeqquately replaced by written, formal specifications.<br>\nattempts to do so have even widened the gap between business and software development.</p>\n</blockquote>\n<p>交談溝通並不能完全取代書寫與正式規範,<br>\n如果只靠交談溝通其實只會更加地讓業務與軟體開發人員之間的gap更深.</p>\n<blockquote>\n<p>consider software development approaches like agile, Domain-Drivent Design or BDD.<br>\nthese philosophies foucs on feedback and stackeholder involvement.<br>\nnevertheless, making great bussiness software is hard, but rarely is this because of technical problems.<br>\nbecause software developers need to understand how the day-to-day busniess operates.<br>\nthey need to become domain experts themselves - not for the whole domain but at least for the part they build software for.</p>\n</blockquote>\n<p>像是Agile、DDD或是BDD, 更鼓勵的是回饋還有stackholder的參與.<br>\n構建出複雜的商業服務頗難, 但難的部份幾乎不是技術上的問題.<br>\n更多的是業務問題, 開發人員需要了解日常業務的運作方式.<br>\n試圖讓自己也成為自己負責部份的領域專家.</p>\n<p>書上也引述一段<a href=\"https://www.slideshare.net/ziobrando/optimized-for-what\" target=\"_blank\" rel=\"noreferrer noopener\">Alberto Brandolini的話</a></p>\n<blockquote>\n<p>it's developers (mis)understanding, not expert knowledge, that gets released in production.</p>\n</blockquote>\n<p>發布出去的軟體其認知是開發人員的理解(or誤解), 而不是領域的專業知識.<br>\n講白話點, 是開發人員對規格書的理解而已.</p>\n<p>根據上面我自己的分析, 加上書上這段論點.<br>\n如果要在溝通協作上, 更有效率的討論, 對領域與問題的共同認知是必要的.<br>\n怎快速建立共同認知呢?<br>\n這時候<strong>說書人說故事</strong>就是個很簡單又有成效的方法了</p>\n<p>說故事前, 又得召集會議?<br>\n其實以前或是現在日常還蠻多活動, 不是以會議形式展開的,<br>\n而是以類似小團體, 彼此圍成圈, 一起討論的形式<br>\n像是Campfires, 營火夠大就能圈多人, 小營火就圈少點人<br>\n中間的營火則是大家目光聚集的對象<br>\n常常這類活動也會有主持人或是說書人, 在旁邊講述事情<br>\n這樣的形式, 大家都能很快地融入其中<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930McuWQRYERw.jpg\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930McuWQRYERw.jpg\"><br>\n上圖大家都跟著主持人做起一樣的動作, 因為都聚焦在主持人身上<br>\n事情有需要準備一堆說明或練習, 才能帶動大家一起做出一致的動作嘛?<br>\n我想不必吧!?<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930gsvSVxc35X.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930gsvSVxc35X.png\"><br>\n上圖這張我想表示的是, 小的營火聚會<br>\n能聚集一些來自不同背景、膚色、性別的人在一起, 也能愉悅的溝通討論</p>\n<p><strong>但!</strong> 凡事總有But!<br>\n開會就不是這樣阿? 老闆就想要聽到結論阿!!<br>\nBut上面的開會形式就能有效率地在一次會議中得到結論嘛?<br>\n我想給的台詞大多還是<code>長官, 我們會後再招開小會議討論,下次給結論</code><br>\n但這另開的小會議, 比較多都是要開發團隊給個人天時程...<br>\n開發團隊跟業務之間的gap依然存在, 需要時間跟經驗來消弭.<br>\n且搞不好下次長官們想法又稍微變化了, 這順序又要重複Loop<br>\n就回到情境1了</p>\n<p>結論出來後...<br>\n開發團隊: X的, 上面就只會要我們給時程, 怎麼做我們都不清楚<br>\n業務單位: x的, 開發團隊是不是能力不夠阿, 怎我們給了厚厚的文件, 他們每次都還是做錯</p>\n<p>Campfires只是個示意, 描述的是必要的開發團隊與Stakeholder或是業務單位<br>\n聚在一起, 請Stakeholder或是業務單位用說故事的方式.<br>\n開發團隊無法直接接觸真實客戶也無訪. 反正有業務單位或窗口</p>\n<h2>Story Telling</h2>\n<p>說故事 總不會有人這樣說書吧?</p>\n<blockquote>\n<p>小明進到市場, 如果看到低於1斤20$的橘子則買一斤. 看到吐司有特價則買一條.<br>\n三英打呂布, 如果關羽擋住呂布刺擊, 則張飛與劉備則從左右進行砍擊.</p>\n</blockquote>\n<p>描述的都是<strong>過去的事實</strong>;<br>\n且描述的事實順序, 正好就是<strong>業務行為的順序</strong>與<strong>時間線上的對應關係</strong></p>\n<blockquote>\n<p>小明進到市場, 今天是冬季且快關門了,買了1斤18$的橘子, 買了一條特價的吐司.<br>\n在虎牢關, 三英正在打呂布, 關羽擋住了呂布的刺擊, 同時張飛與劉備發現呂步, 側門大開, 則立刻從左右進行砍擊.</p>\n</blockquote>\n<h2><a href=\"https://agilemanifesto.org/iso/en/manifesto.html\" target=\"_blank\" rel=\"noreferrer noopener\">敏捷開發宣言</a></h2>\n<p>前面扯一堆幹話, 還是沒講到怎樣的有效討論<br>\n但這裡是舉另一個論點來講 (又繼續幹話了)<br>\n敏捷開發宣言裡說到</p>\n<blockquote>\n<p>Individuals and interactions over processes and tools<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930fovFupTKG8.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930fovFupTKG8.png\"><br>\nWorking software over comprehensive documentation<br>\nCustomer collaboration over contract negotiation<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930gSGOCOo5MD.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930gSGOCOo5MD.png\"><br>\nResponding to change over following a plan</p>\n</blockquote>\n<p>Individuals and interactions over processes and tools<br>\n成員跟互動 比起 工具還有做抽象流程, 來的重要<br>\n這的重要指的是效率, 呼應我們主題<code>有效的討論</code></p>\n<p>Customer collaboration over contract negotiation<br>\n與客戶協作討論 比起 文件合約的協商, 來的重要.<br>\n但我想轉個角度想成, 傳統的SA或PM文件, 公司都是希望能一次到位.<br>\n但等到這文件確定寫的是符合客戶所需的, 大概也是來來回回數次修改跟協商確認後的版本了.<br>\n但也沒說這不重要, 但與其這樣來來回回, 不如找客戶一起當場確認修改.<br>\n這後面會說明.</p>\n<h1>簡易有效的討論</h1>\n<p>根據宣言可以發現要是成員們一起互動, 與客戶一起協作討論,<br>\n想必會比較能省去初期就投入一堆時間寫文件<br>\n<img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930V6l8eU2cmd.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/20104930V6l8eU2cmd.png\"><br>\n如果可以, 主要是邀請Domain expert來對著開發人員們講解故事</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211030/201049301L6BGkOgLw.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211030/201049301L6BGkOgLw.png\"><br>\n這張圖我想表達的是<br>\n用說故事的方式傳達業務與領域知識, 比起用一堆流程圖來傳達,<br>\n更為簡單好懂又不費太多功夫</p>\n<p>當然文件還是得補上的, 只是可以在事後追加進去.<br>\n先讓開發人員的理解, 足以理解/貼合業務流程所需.</p>\n<p>下一篇來寫Domain Storytelling這方法與對應適當的工具</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,domain storytelling",
        "genre": "Software Development",
        "published_at": "2021-10-30 12:30:06",
        "author_href": "https://ithelp.ithome.com.tw/users/20104930/ironman",
        "author_name": "雷N",
        "series_href": "https://ithelp.ithome.com.tw/users/20104930/ironman/3882",
        "series_name": "系統與服務雜談",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>最近看到一本書<br/>\n<br/>\n以前在上, 聽到這協作方法.</p>\n<p>其中書本第一章有講到Telling stories的好處<br/>\n我將前兩章節的內容, 做成投影片簡單的跟部門分享<br/>\n<br/>\n這幾天來以文字的形式跟各位分享</p>\n<h2>前言</h2>\n<p>常見的會議情況</p>\n<h3>情境1</h3>\n<p><br/>\n在專案還是產品Kickoff時,<br/>\n以會議報告的形式進行討論, 真正具有價值的時間很少, 幾乎都浪費掉了<br/>\n然後就會以沒結論的方式, 說下次再召開會議繼續.</p>\n<h3>情境2</h3>\n<p><br/>\n會議中有人報告時, 其實很多人不清楚, 這報告的內容主要是在解決什麼問題?<br/>\n甚至很多某些領域下的專有名詞</p>\n<h3>情境3</h3>\n<p><br/>\n會議上, 直接對著畫面跟操作動線進行爭論<br/>\n直接針對細節做深入討論<br/>\n有的則是直接在會議上討論, 資料庫或表格設計什麼的.</p>\n<h4>分析</h4>\n<p>以下是我的見解</p>\n<ul>\n<li>\n<p>情境1<br/>\n會議幾乎都是聽PM或企劃在從畫面草稿跟行銷手段在介紹<br/>\n也許對於創新產品沒問題,<br/>\n但若是針對既有問題或需求, 從畫面草稿跟行銷企劃, 很難讓所有與會人員都能理解完整的問題域與相關的業務流程</p>\n</li>\n<li>\n<p>情境2<br/>\n其實也是跟上面一樣, 所有與會人員都能理解完整的問題域與相關的業務流程.<br/>\n因為大家的背景或專長可能就都不同</p>\n</li>\n</ul>\n<p>常見狀況: 有些人講一講會講到API或Table... 與會人員一半都是管理跟企劃行銷, 根本不知道在講什麼</p>\n<ul>\n<li>情境3<br/>\n一開始就針對細節展開, 很容易產生爭執<br/>\n這是因為每個人對問題的認知或理解程度, 都不同<br/>\n自然而然想像出來的也是不同</li>\n</ul>\n<blockquote>\n<p>蕭煌奇- 你是我的眼<br/>\n眼前的黑不是黑 你說的白是什麼白<br/>\n人們說的天空藍 是我記憶中那團白雲背後的藍天</p>\n</blockquote>\n<p>書上第一篇講到一些觀點</p>\n<blockquote>\n<p>conversations cannot be adeqquately replaced by written, formal specifications.<br/>\nattempts to do so have even widened the gap between business and software development.</p>\n</blockquote>\n<p>交談溝通並不能完全取代書寫與正式規範,<br/>\n如果只靠交談溝通其實只會更加地讓業務與軟體開發人員之間的gap更深.</p>\n<blockquote>\n<p>consider software development approaches like agile, Domain-Drivent Design or BDD.<br/>\nthese philosophies foucs on feedback and stackeholder involvement.<br/>\nnevertheless, making great bussiness software is hard, but rarely is this because of technical problems.<br/>\nbecause software developers need to understand how the day-to-day busniess operates.<br/>\nthey need to become domain experts themselves - not for the whole domain but at least for the part they build software for.</p>\n</blockquote>\n<p>像是Agile、DDD或是BDD, 更鼓勵的是回饋還有stackholder的參與.<br/>\n構建出複雜的商業服務頗難, 但難的部份幾乎不是技術上的問題.<br/>\n更多的是業務問題, 開發人員需要了解日常業務的運作方式.<br/>\n試圖讓自己也成為自己負責部份的領域專家.</p>\n<p>書上也引述一段</p>\n<blockquote>\n<p>it's developers (mis)understanding, not expert knowledge, that gets released in production.</p>\n</blockquote>\n<p>發布出去的軟體其認知是開發人員的理解(or誤解), 而不是領域的專業知識.<br/>\n講白話點, 是開發人員對規格書的理解而已.</p>\n<p>根據上面我自己的分析, 加上書上這段論點.<br/>\n如果要在溝通協作上, 更有效率的討論, 對領域與問題的共同認知是必要的.<br/>\n怎快速建立共同認知呢?<br/>\n這時候<strong>說書人說故事</strong>就是個很簡單又有成效的方法了</p>\n<p>說故事前, 又得召集會議?<br/>\n其實以前或是現在日常還蠻多活動, 不是以會議形式展開的,<br/>\n而是以類似小團體, 彼此圍成圈, 一起討論的形式<br/>\n像是Campfires, 營火夠大就能圈多人, 小營火就圈少點人<br/>\n中間的營火則是大家目光聚集的對象<br/>\n常常這類活動也會有主持人或是說書人, 在旁邊講述事情<br/>\n這樣的形式, 大家都能很快地融入其中<br/>\n<br/>\n上圖大家都跟著主持人做起一樣的動作, 因為都聚焦在主持人身上<br/>\n事情有需要準備一堆說明或練習, 才能帶動大家一起做出一致的動作嘛?<br/>\n我想不必吧!?<br/>\n<br/>\n上圖這張我想表示的是, 小的營火聚會<br/>\n能聚集一些來自不同背景、膚色、性別的人在一起, 也能愉悅的溝通討論</p>\n<p><strong>但!</strong> 凡事總有But!<br/>\n開會就不是這樣阿? 老闆就想要聽到結論阿!!<br/>\nBut上面的開會形式就能有效率地在一次會議中得到結論嘛?<br/>\n我想給的台詞大多還是<code>長官, 我們會後再招開小會議討論,下次給結論</code><br/>\n但這另開的小會議, 比較多都是要開發團隊給個人天時程...<br/>\n開發團隊跟業務之間的gap依然存在, 需要時間跟經驗來消弭.<br/>\n且搞不好下次長官們想法又稍微變化了, 這順序又要重複Loop<br/>\n就回到情境1了</p>\n<p>結論出來後...<br/>\n開發團隊: X的, 上面就只會要我們給時程, 怎麼做我們都不清楚<br/>\n業務單位: x的, 開發團隊是不是能力不夠阿, 怎我們給了厚厚的文件, 他們每次都還是做錯</p>\n<p>Campfires只是個示意, 描述的是必要的開發團隊與Stakeholder或是業務單位<br/>\n聚在一起, 請Stakeholder或是業務單位用說故事的方式.<br/>\n開發團隊無法直接接觸真實客戶也無訪. 反正有業務單位或窗口</p>\n<h2>Story Telling</h2>\n<p>說故事 總不會有人這樣說書吧?</p>\n<blockquote>\n<p>小明進到市場, 如果看到低於1斤20$的橘子則買一斤. 看到吐司有特價則買一條.<br/>\n三英打呂布, 如果關羽擋住呂布刺擊, 則張飛與劉備則從左右進行砍擊.</p>\n</blockquote>\n<p>描述的都是<strong>過去的事實</strong>;<br/>\n且描述的事實順序, 正好就是<strong>業務行為的順序</strong>與<strong>時間線上的對應關係</strong></p>\n<blockquote>\n<p>小明進到市場, 今天是冬季且快關門了,買了1斤18$的橘子, 買了一條特價的吐司.<br/>\n在虎牢關, 三英正在打呂布, 關羽擋住了呂布的刺擊, 同時張飛與劉備發現呂步, 側門大開, 則立刻從左右進行砍擊.</p>\n</blockquote>\n<h2></h2>\n<p>前面扯一堆幹話, 還是沒講到怎樣的有效討論<br/>\n但這裡是舉另一個論點來講 (又繼續幹話了)<br/>\n敏捷開發宣言裡說到</p>\n<blockquote>\n<p>Individuals and interactions over processes and tools<br/>\n<br/>\nWorking software over comprehensive documentation<br/>\nCustomer collaboration over contract negotiation<br/>\n<br/>\nResponding to change over following a plan</p>\n</blockquote>\n<p>Individuals and interactions over processes and tools<br/>\n成員跟互動 比起 工具還有做抽象流程, 來的重要<br/>\n這的重要指的是效率, 呼應我們主題<code>有效的討論</code></p>\n<p>Customer collaboration over contract negotiation<br/>\n與客戶協作討論 比起 文件合約的協商, 來的重要.<br/>\n但我想轉個角度想成, 傳統的SA或PM文件, 公司都是希望能一次到位.<br/>\n但等到這文件確定寫的是符合客戶所需的, 大概也是來來回回數次修改跟協商確認後的版本了.<br/>\n但也沒說這不重要, 但與其這樣來來回回, 不如找客戶一起當場確認修改.<br/>\n這後面會說明.</p>\n<h1>簡易有效的討論</h1>\n<p>根據宣言可以發現要是成員們一起互動, 與客戶一起協作討論,<br/>\n想必會比較能省去初期就投入一堆時間寫文件<br/>\n<br/>\n如果可以, 主要是邀請Domain expert來對著開發人員們講解故事</p>\n<p><br/>\n這張圖我想表達的是<br/>\n用說故事的方式傳達業務與領域知識, 比起用一堆流程圖來傳達,<br/>\n更為簡單好懂又不費太多功夫</p>\n<p>當然文件還是得補上的, 只是可以在事後追加進去.<br/>\n先讓開發人員的理解, 足以理解/貼合業務流程所需.</p>\n<p>下一篇來寫Domain Storytelling這方法與對應適當的工具</p>\n<br/>\n</div>",
        "content_text": "最近看到一本書\n\n以前在上, 聽到這協作方法.\n其中書本第一章有講到Telling stories的好處\n我將前兩章節的內容, 做成投影片簡單的跟部門分享\n\n這幾天來以文字的形式跟各位分享\n前言\n常見的會議情況\n情境1\n\n在專案還是產品Kickoff時,\n以會議報告的形式進行討論, 真正具有價值的時間很少, 幾乎都浪費掉了\n然後就會以沒結論的方式, 說下次再召開會議繼續.\n情境2\n\n會議中有人報告時, 其實很多人不清楚, 這報告的內容主要是在解決什麼問題?\n甚至很多某些領域下的專有名詞\n情境3\n\n會議上, 直接對著畫面跟操作動線進行爭論\n直接針對細節做深入討論\n有的則是直接在會議上討論, 資料庫或表格設計什麼的.\n分析\n以下是我的見解\n\n\n情境1\n會議幾乎都是聽PM或企劃在從畫面草稿跟行銷手段在介紹\n也許對於創新產品沒問題,\n但若是針對既有問題或需求, 從畫面草稿跟行銷企劃, 很難讓所有與會人員都能理解完整的問題域與相關的業務流程\n\n\n情境2\n其實也是跟上面一樣, 所有與會人員都能理解完整的問題域與相關的業務流程.\n因為大家的背景或專長可能就都不同\n\n\n常見狀況: 有些人講一講會講到API或Table... 與會人員一半都是管理跟企劃行銷, 根本不知道在講什麼\n\n情境3\n一開始就針對細節展開, 很容易產生爭執\n這是因為每個人對問題的認知或理解程度, 都不同\n自然而然想像出來的也是不同\n\n\n蕭煌奇- 你是我的眼\n眼前的黑不是黑 你說的白是什麼白\n人們說的天空藍 是我記憶中那團白雲背後的藍天\n\n書上第一篇講到一些觀點\n\nconversations cannot be adeqquately replaced by written, formal specifications.\nattempts to do so have even widened the gap between business and software development.\n\n交談溝通並不能完全取代書寫與正式規範,\n如果只靠交談溝通其實只會更加地讓業務與軟體開發人員之間的gap更深.\n\nconsider software development approaches like agile, Domain-Drivent Design or BDD.\nthese philosophies foucs on feedback and stackeholder involvement.\nnevertheless, making great bussiness software is hard, but rarely is this because of technical problems.\nbecause software developers need to understand how the day-to-day busniess operates.\nthey need to become domain experts themselves - not for the whole domain but at least for the part they build software for.\n\n像是Agile、DDD或是BDD, 更鼓勵的是回饋還有stackholder的參與.\n構建出複雜的商業服務頗難, 但難的部份幾乎不是技術上的問題.\n更多的是業務問題, 開發人員需要了解日常業務的運作方式.\n試圖讓自己也成為自己負責部份的領域專家.\n書上也引述一段\n\nit's developers (mis)understanding, not expert knowledge, that gets released in production.\n\n發布出去的軟體其認知是開發人員的理解(or誤解), 而不是領域的專業知識.\n講白話點, 是開發人員對規格書的理解而已.\n根據上面我自己的分析, 加上書上這段論點.\n如果要在溝通協作上, 更有效率的討論, 對領域與問題的共同認知是必要的.\n怎快速建立共同認知呢?\n這時候說書人說故事就是個很簡單又有成效的方法了\n說故事前, 又得召集會議?\n其實以前或是現在日常還蠻多活動, 不是以會議形式展開的,\n而是以類似小團體, 彼此圍成圈, 一起討論的形式\n像是Campfires, 營火夠大就能圈多人, 小營火就圈少點人\n中間的營火則是大家目光聚集的對象\n常常這類活動也會有主持人或是說書人, 在旁邊講述事情\n這樣的形式, 大家都能很快地融入其中\n\n上圖大家都跟著主持人做起一樣的動作, 因為都聚焦在主持人身上\n事情有需要準備一堆說明或練習, 才能帶動大家一起做出一致的動作嘛?\n我想不必吧!?\n\n上圖這張我想表示的是, 小的營火聚會\n能聚集一些來自不同背景、膚色、性別的人在一起, 也能愉悅的溝通討論\n但! 凡事總有But!\n開會就不是這樣阿? 老闆就想要聽到結論阿!!\nBut上面的開會形式就能有效率地在一次會議中得到結論嘛?\n我想給的台詞大多還是長官, 我們會後再招開小會議討論,下次給結論\n但這另開的小會議, 比較多都是要開發團隊給個人天時程...\n開發團隊跟業務之間的gap依然存在, 需要時間跟經驗來消弭.\n且搞不好下次長官們想法又稍微變化了, 這順序又要重複Loop\n就回到情境1了\n結論出來後...\n開發團隊: X的, 上面就只會要我們給時程, 怎麼做我們都不清楚\n業務單位: x的, 開發團隊是不是能力不夠阿, 怎我們給了厚厚的文件, 他們每次都還是做錯\nCampfires只是個示意, 描述的是必要的開發團隊與Stakeholder或是業務單位\n聚在一起, 請Stakeholder或是業務單位用說故事的方式.\n開發團隊無法直接接觸真實客戶也無訪. 反正有業務單位或窗口\nStory Telling\n說故事 總不會有人這樣說書吧?\n\n小明進到市場, 如果看到低於1斤20$的橘子則買一斤. 看到吐司有特價則買一條.\n三英打呂布, 如果關羽擋住呂布刺擊, 則張飛與劉備則從左右進行砍擊.\n\n描述的都是過去的事實;\n且描述的事實順序, 正好就是業務行為的順序與時間線上的對應關係\n\n小明進到市場, 今天是冬季且快關門了,買了1斤18$的橘子, 買了一條特價的吐司.\n在虎牢關, 三英正在打呂布, 關羽擋住了呂布的刺擊, 同時張飛與劉備發現呂步, 側門大開, 則立刻從左右進行砍擊.\n\n\n前面扯一堆幹話, 還是沒講到怎樣的有效討論\n但這裡是舉另一個論點來講 (又繼續幹話了)\n敏捷開發宣言裡說到\n\nIndividuals and interactions over processes and tools\n\nWorking software over comprehensive documentation\nCustomer collaboration over contract negotiation\n\nResponding to change over following a plan\n\nIndividuals and interactions over processes and tools\n成員跟互動 比起 工具還有做抽象流程, 來的重要\n這的重要指的是效率, 呼應我們主題有效的討論\nCustomer collaboration over contract negotiation\n與客戶協作討論 比起 文件合約的協商, 來的重要.\n但我想轉個角度想成, 傳統的SA或PM文件, 公司都是希望能一次到位.\n但等到這文件確定寫的是符合客戶所需的, 大概也是來來回回數次修改跟協商確認後的版本了.\n但也沒說這不重要, 但與其這樣來來回回, 不如找客戶一起當場確認修改.\n這後面會說明.\n簡易有效的討論\n根據宣言可以發現要是成員們一起互動, 與客戶一起協作討論,\n想必會比較能省去初期就投入一堆時間寫文件\n\n如果可以, 主要是邀請Domain expert來對著開發人員們講解故事\n\n這張圖我想表達的是\n用說故事的方式傳達業務與領域知識, 比起用一堆流程圖來傳達,\n更為簡單好懂又不費太多功夫\n當然文件還是得補上的, 只是可以在事後追加進去.\n先讓開發人員的理解, 足以理解/貼合業務流程所需.\n下一篇來寫Domain Storytelling這方法與對應適當的工具",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "最近 看到 一 本書\n以前 在 上 ,\n聽到 這 協作 方法 .\n其中 書本 第一章 有 講到 Telling\nstories 的 好處\n我 將前 兩 章節 的 內容 ,\n做成 投 影片 簡單 的 跟 部門 分享\n這幾天來 以 文字 的 形式 跟 各位 分享\n前言\n常見 的 會議 情況\n情境 1\n在 專案 還是 產品 Kickoff 時 ,\n以 會議 報告 的 形式 進行 討論 ,\n真正 具有 價值 的 時間 很少 ,\n幾乎 都 浪費 掉 了\n然後 就 會 以 沒 結論 的 方式 ,\n說 下次 再 召開 會議 繼續 .\n情境 2\n會議 中 有人 報告 時 ,\n其實 很多 人 不 清楚 ,\n這 報告 的 內容 主要 是 在 解決 什麼 問題 ?\n甚至 很多 某些 領域 下 的 專有名詞\n情境 3\n會議 上 ,\n直接 對著 畫面 跟 操作 動線 進行 爭論\n直接 針對 細節 做 深入 討論\n有的則 是 直接 在 會議 上 討論 ,\n資料庫 或 表格 設計 什麼 的 .\n分析\n以下 是 我 的 見解\n情境 1\n會議 幾乎 都 是 聽 PM 或 企劃 在 從 畫面 草稿 跟 行銷 手段 在 介紹\n也許 對於 創新 產品 沒 問題 ,\n但 若 是 針對 既有 問題 或 需求 ,\n從 畫面 草稿 跟 行銷 企劃 ,\n很難 讓 所有 與會 人員 都 能 理解 完整 的 問題 域 與 相關 的 業務流程\n情境 2\n其實 也 是 跟 上面 一樣 ,\n所有 與會 人員 都 能 理解 完整 的 問題 域 與 相關 的 業務流程 .\n因為 大家 的 背景 或 專長 可能 就 都 不同\n常見 狀況 :\n有些 人講 一 講會 講到 API 或 Table ...\n與會 人員 一半 都 是 管理 跟 企劃 行銷 ,\n根本 不 知道 在講 什麼\n情境 3\n一 開始 就 針對 細節 展開 ,\n很 容易 產生 爭執\n這是 因為 每個 人 對 問題 的 認知 或 理解 程度 ,\n都 不同\n自然而然 想像出來 的 也 是 不同\n蕭煌奇 -\n你 是 我 的 眼\n眼前 的 黑 不是 黑\n你 說 的 白 是 什麼 白\n人們 說 的 天空 藍\n是 我 記憶 中 那團 白雲 背後 的 藍天\n書上 第一篇 講到 一些 觀點\nconversations\ncannot\nbe\nadeqquately\nreplaced\nby\nwritten ,\nformal\nspecifications .\nattempts\nto\ndo\nso\nhave\neven\nwidened\nthe\ngap\nbetween\nbusiness\nand\nsoftware\ndevelopment .\n交談 溝通 並 不能 完全 取代 書寫 與 正式 規範 ,\n如果 只靠 交談 溝通 其實 只會 更加 地 讓 業務 與 軟體 開發人員 之間 的 gap 更深 .\nconsider\nsoftware\ndevelopment\napproaches\nlike\nagile ,\nDomain - Drivent\nDesign\nor\nBDD .\nthese\nphilosophies\nfoucs\non\nfeedback\nand\nstackeholder\ninvolvement .\nnevertheless ,\nmaking\ngreat\nbussiness\nsoftware\nis\nhard ,\nbut\nrarely\nis\nthis\nbecause\nof\ntechnical\nproblems .\nbecause\nsoftware\ndevelopers\nneed\nto\nunderstand\nhow\nthe\nday - to - day\nbusniess\noperates .\nthey\nneed\nto\nbecome\ndomain\nexperts\nthemselves\n-\nnot\nfor\nthe\nwhole\ndomain\nbut\nat\nleast\nfor\nthe\npart\nthey\nbuild\nsoftware\nfor .\n像是 Agile 、 DDD 或是 BDD ,\n更 鼓勵 的 是 回饋 還有 stackholder 的 參與 .\n構建 出 複雜 的 商業 服務 頗 難 ,\n但 難 的 部份 幾乎 不是 技術 上 的 問題 .\n更 多 的 是 業務 問題 ,\n開發人員 需要 了解 日常 業務 的 運作 方式 .\n試圖 讓 自己 也 成為 自己 負責 部份 的 領域專家 .\n書上 也 引述 一段\nit ' s\ndevelopers\n( mis ) understanding ,\nnot\nexpert\nknowledge ,\nthat\ngets\nreleased\nin\nproduction .\n發布 出去 的 軟體 其 認知 是 開發人員 的 理解 ( or 誤解 ) ,\n而 不是 領域 的 專業知識 .\n講 白話 點 ,\n是 開發人員 對 規格書 的 理解 而已 .\n根據 上面 我 自己 的 分析 ,\n加上 書上 這段 論點 .\n如果 要 在 溝通 協作 上 ,\n更 有效率 的 討論 ,\n對 領域 與 問題 的 共同 認知 是 必要 的 .\n怎 快速 建立 共同 認知 呢 ?\n這時候 說書人 說 故事 就是 個 很 簡單 又 有 成效 的 方法 了\n說 故事 前 ,\n又 得 召集 會議 ?\n其實 以前 或是 現在 日常 還蠻 多 活動 ,\n不是 以 會議 形式 展開 的 ,\n而是 以 類似 小團體 ,\n彼此 圍成 圈 ,\n一起 討論 的 形式\n像是 Campfires ,\n營火 夠大 就 能 圈 多 人 ,\n小 營火 就 圈 少點 人\n中間 的 營火 則是 大家 目光 聚集 的 對象\n常常 這類 活動 也 會 有 主持人 或是 說書人 ,\n在 旁邊 講述 事情\n這樣 的 形式 ,\n大家 都 能 很快 地 融入 其中\n上圖 大家 都 跟 著 主持人 做起 一樣 的 動作 ,\n因為 都 聚焦 在 主持人 身上\n事情 有 需要 準備 一堆 說明 或 練習 ,\n才能 帶動 大家 一起 做出 一致 的 動作 嘛 ?\n我 想 不必 吧 ! ?\n上圖 這張 我 想 表示 的 是 ,\n小 的 營火 聚會\n能 聚集 一些 來自 不同 背景 、 膚色 、 性別 的 人 在 一起 ,\n也 能 愉悅 的 溝通 討論\n但 !\n凡事 總有 But !\n開會 就 不是 這樣 阿 ?\n老闆 就 想要 聽到 結論 阿 ! !\nBut 上面 的 開會 形式 就 能 有效率 地 在 一次 會議 中 得到 結論 嘛 ?\n我想給 的 台詞 大多 還是 長官 ,\n我們 會後 再 招開 小 會議 討論 , 下次 給 結論\n但 這另開 的 小 會議 ,\n比較 多 都 是 要 開發 團隊 給 個人 天時 程 ...\n開發 團隊 跟 業務 之間 的 gap 依然 存在 ,\n需要 時間 跟 經驗 來 消弭 .\n且 搞不好 下次 長官 們 想法 又 稍微 變化 了 ,\n這 順序 又 要 重複 Loop\n就 回到 情境 1 了\n結論 出來 後 ...\n開發 團隊 :\nX 的 ,\n上面 就 只會 要 我們 給 時程 ,\n怎麼 做 我們 都 不 清楚\n業務 單位 :\nx 的 ,\n開發 團隊 是不是 能力 不夠 阿 ,\n怎 我們 給了 厚厚的 文件 ,\n他們 每次 都 還是 做錯\nCampfires 只是 個 示意 ,\n描述 的 是 必要 的 開發 團隊 與 Stakeholder 或是 業務 單位\n聚在一起 ,\n請 Stakeholder 或是 業務 單位 用 說 故事 的 方式 .\n開發 團隊 無法 直接 接觸 真實 客戶 也 無訪 .\n反正 有 業務 單位 或 窗口\nStory\nTelling\n說 故事\n總 不會 有人 這樣 說書 吧 ?\n小明 進到 市場 ,\n如果 看到 低於 1 斤 20 $ 的 橘子 則買 一斤 .\n看到 吐司 有 特價 則買 一條 .\n三 英打 呂布 ,\n如果 關羽 擋住 呂布 刺擊 ,\n則 張飛 與 劉備 則從 左右 進行 砍擊 .\n描述 的 都 是 過去 的 事實 ;\n且 描述 的 事實 順序 ,\n正好 就是 業務 行為 的 順序 與 時間 線上 的 對應 關係\n小明 進到 市場 ,\n今天 是 冬季 且 快 關門 了 , 買 了 1 斤 18 $ 的 橘子 ,\n買 了 一條 特價 的 吐司 .\n在 虎牢關 ,\n三英 正在 打 呂布 ,\n關羽 擋住 了 呂布 的 刺擊 ,\n同時 張飛 與 劉備 發現 呂步 ,\n側門 大開 ,\n則 立刻 從 左右 進行 砍擊 .\n前面 扯 一堆 幹話 ,\n還是 沒 講到 怎樣 的 有效 討論\n但 這裡 是舉 另 一個 論點 來講\n( 又 繼續 幹話 了 )\n敏捷 開發 宣言 裡說 到\nIndividuals\nand\ninteractions\nover\nprocesses\nand\ntools\nWorking\nsoftware\nover\ncomprehensive\ndocumentation\nCustomer\ncollaboration\nover\ncontract\nnegotiation\nResponding\nto\nchange\nover\nfollowing\na\nplan\nIndividuals\nand\ninteractions\nover\nprocesses\nand\ntools\n成員 跟 互動\n比起\n工具 還有 做 抽象 流程 ,\n來 的 重要\n這的 重要 指 的 是 效率 ,\n呼應 我們 主題 有效 的 討論\nCustomer\ncollaboration\nover\ncontract\nnegotiation\n與 客戶 協作 討論\n比起\n文件 合約 的 協商 ,\n來 的 重要 .\n但 我 想 轉個 角度 想 成 ,\n傳統 的 SA 或 PM 文件 ,\n公司 都 是 希望 能 一次 到位 .\n但 等到 這 文件 確定 寫 的 是 符合 客戶 所 需 的 ,\n大概 也 是 來來回回 數次 修改 跟 協商 確認 後 的 版本 了 .\n但 也 沒 說 這不 重要 ,\n但 與其 這樣 來來回回 ,\n不如 找 客戶 一起 當場 確認 修改 .\n這 後面 會 說明 .\n簡易 有效 的 討論\n根據 宣言 可以 發現 要是 成員 們 一起 互動 ,\n與 客戶 一起 協作 討論 ,\n想必 會 比較 能 省去 初期 就 投入 一堆 時間 寫 文件\n如果 可以 ,\n主要 是 邀請 Domain\nexpert 來 對 著 開發人員 們 講解 故事\n這張 圖 我 想 表達 的 是\n用 說 故事 的 方式 傳達 業務 與 領域 知識 ,\n比起 用 一堆 流程圖 來 傳達 ,\n更為 簡單 好 懂 又 不費 太 多 功夫\n當然 文件 還是 得 補上 的 ,\n只是 可以 在 事後 追加 進去 .\n先 讓 開發人員 的 理解 ,\n足以 理解 / 貼合 業務流程 所需 .\n下 一篇 來 寫 Domain\nStorytelling 這方 法 與 對應 適當 的 工具",
        "word_seg_processed_content_text": "本書\n\n聽到 協作 方法\n書本 第一章 講到 telling\nstories 好處\n將前 兩 章節 內容\n做成 投 影片 簡單 部門 分享\n這幾天來 文字 形式 分享\n前言\n常見 會議 情況\n情境 1\n專案 產品 kickoff 時\n會議 報告 形式 討論\n價值 時間 很少\n浪費 掉\n會 沒 結論 方式\n說 下次 會議\n情境 2\n會議 中 有人 報告 時\n很多\n報告 內容 解決\n很多 領域 專有名詞\n情境 3\n會議\n對著 畫面 操作 動線 爭論\n針對 細節 做 討論\n有的則 會議 討論\n資料庫 表格 設計\n分析\n見解\n情境 1\n會議 聽 pm 企劃 畫面 草稿 行銷 手段 介紹\n也許 創新 產品 沒\n針對 既有 需求\n畫面 草稿 行銷 企劃\n很難 與會 人員 理解 完整 域 相關 業務流程\n情境 2\n\n與會 人員 理解 完整 域 相關 業務流程\n背景 專長\n常見 狀況\n人講 講會 講到 api table ...\n與會 人員 一半 管理 企劃 行銷\n在講\n情境 3\n針對 細節 展開\n爭執\n這是 認知 理解 程度\n\n自然而然 想像出來\n蕭煌奇\n眼\n眼前 黑 黑\n說 白 白\n說 天空 藍\n記憶 中 那團 白雲 背後 藍天\n書上 第一篇 講到 觀點\nconversations\ncannot\n\nadeqquately\nreplaced\n\nwritten\nformal\nspecifications\nattempts\n\ndo\nso\n\neven\nwidened\n\ngap\nbetween\nbusiness\n\nsoftware\ndevelopment\n交談 溝通 取代 書寫 正式 規範\n只靠 交談 溝通 只會 業務 軟體 開發人員 之間 gap 更深\nconsider\nsoftware\ndevelopment\napproaches\nlike\nagile\ndomain drivent\ndesign\n\nbdd\nthese\nphilosophies\nfoucs\n\nfeedback\n\nstackeholder\ninvolvement\nnevertheless\nmaking\ngreat\nbussiness\nsoftware\n\nhard\nbut\nrarely\n\n\nbecause\n\ntechnical\nproblems\nbecause\nsoftware\ndevelopers\nneed\n\nunderstand\nhow\n\nday day\nbusniess\noperates\nthey\nneed\n\nbecome\ndomain\nexperts\nthemselves\n\n\n\n\nwhole\ndomain\nbut\n\nleast\n\n\npart\nthey\nbuild\nsoftware\n\n像是 agile ddd bdd\n更 鼓勵 回饋 stackholder 參與\n構建 出 商業 服務 頗 難\n難 部份 技術\n更 業務\n開發人員 了解 日常 業務 運作 方式\n試圖 負責 部份 領域專家\n書上 引述 一段\n' s\ndevelopers\nmis understanding\n\nexpert\nknowledge\n\ngets\nreleased\n\nproduction\n發布 軟體 認知 開發人員 理解 誤解\n領域 專業知識\n講 白話 點\n開發人員 規格書 理解\n分析\n加上 書上 這段 論點\n溝通 協作\n更 有效率 討論\n領域 認知\n快速 建立 認知\n這時候 說書人 說 故事 簡單 成效 方法\n說 故事 前\n召集 會議\n日常 還蠻 活動\n會議 形式 展開\n類似 小團體\n圍成 圈\n討論 形式\n像是 campfires\n營火 夠大 圈\n營火 圈 少點\n營火 則是 目光 聚集 對象\n這類 活動 會 主持人 說書人\n旁邊 講述 事情\n形式\n很快 融入\n上圖 主持人 做起 動作\n聚焦 主持人 身上\n事情 一堆\n才能 帶動 做出 動作\n想 不必\n上圖 這張 想\n營火 聚會\n聚集 來自 背景 膚色 性別\n愉悅 溝通 討論\n\n凡事 總有 but\n開會\n老闆 想要 聽到 結論\nbut 開會 形式 有效率 會議 中 結論\n我想給 台詞 大多 長官\n會後 招開 會議 討論 下次 結論\n這另開 會議\n開發 團隊 天時 程 ...\n開發 團隊 業務 之間 gap 依然\n時間 經驗 消弭\n搞不好 下次 長官 想法 稍微 變化\n順序 重複 loop\n回到 情境 1\n結論 ...\n開發 團隊\nx\n只會 時程\n做\n業務 單位\nx\n開發 團隊 能力\n給了 厚厚的 文件\n每次 做錯\ncampfires 示意\n描述 開發 團隊 stakeholder 業務 單位\n聚在一起\n請 stakeholder 業務 單位 說 故事 方式\n開發 團隊 接觸 真實 客戶 無訪\n反正 業務 單位 窗口\nstory\ntelling\n說 故事\n總 有人 說書\n小明 進到 市場\n低於 1 斤 20 橘子 則買 一斤\n吐司 特價 則買 一條\n三 英打 呂布\n關羽 擋住 呂布 刺擊\n張飛 劉備 則從 砍擊\n描述 事實\n描述 事實 順序\n正好 業務 順序 時間 線上 關係\n小明 進到 市場\n冬季 快 關門 買 1 斤 18 橘子\n買 一條 特價 吐司\n虎牢關\n三英 呂布\n關羽 擋住 呂布 刺擊\n張飛 劉備 發現 呂步\n側門 大開\n立刻 砍擊\n扯 一堆 幹話\n沒 講到 討論\n是舉 論點 來講\n幹話\n敏捷 開發 宣言 裡說\nindividuals\n\ninteractions\nover\nprocesses\n\ntools\nworking\nsoftware\nover\ncomprehensive\ndocumentation\ncustomer\ncollaboration\nover\ncontract\nnegotiation\nresponding\n\nchange\nover\nfollowing\na\nplan\nindividuals\n\ninteractions\nover\nprocesses\n\ntools\n成員 互動\n比起\n工具 做 抽象 流程\n\n這的 指 效率\n呼應 主題 討論\ncustomer\ncollaboration\nover\ncontract\nnegotiation\n客戶 協作 討論\n比起\n文件 合約 協商\n\n想 轉個 角度 想 成\n傳統 sa pm 文件\n公司 希望 到位\n等到 文件 寫 符合 客戶 需\n大概 來來回回 數次 修改 協商 確認 版本\n沒 說 這不\n來來回回\n找 客戶 當場 確認 修改\n會\n簡易 討論\n宣言 發現 成員 互動\n客戶 協作 討論\n想必 會 省去 初期 投入 一堆 時間 寫 文件\n\n邀請 domain\nexpert 開發人員 講解 故事\n這張 圖 想 表達\n說 故事 方式 傳達 業務 領域 知識\n比起 一堆 流程圖 傳達\n更為 簡單 懂 不費 太 功夫\n文件 補上\n事後 追加 進去\n先 開發人員 理解\n足以 理解 貼合 業務流程 所需\n一篇 寫 domain\nstorytelling 這方 法 工具",
        "extracted_keywords": [
            "會議",
            "開會",
            "協作",
            "第一章",
            "引述"
        ],
        "extracted_keywords_phrases": [
            "會議 情境",
            "情境 會議",
            "會議 形式",
            "會議 情況",
            "會議 討論"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282342": {
        "href": "https://ithelp.ithome.com.tw/articles/10282342",
        "title": "JS 44 - 輸入網址就能使用的 RSS 閱讀器",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>今天要實作能輸入網址的 RSS 閱讀器。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">Felix('form').on('submit', function (e) {\n    e.preventDefault();\n\n    Felix.xhr('GET', Felix('#url')[0].value, {\n        load: function () {\n            if (this.readyState !== 4 || this.status !== 200) return;\n            Felix('body').insert(RSS2HTML(this.responseXML).documentElement);\n        }\n    });\n});\n\nfunction replace(str, oldEl) {\n    const newEl = Felix.create(str, oldEl.innerHTML);\n    oldEl.parentNode.replaceChild(newEl, oldEl);\n    return newEl;\n}\n\nfunction RSS2HTML(rss) {\n    const els = [].slice.call(rss.querySelectorAll('*')).reverse();\n    els.forEach(function (el) {\n        replace(`div.${el.tagName}`, el);\n    });\n    return rss;\n}\n</code></pre>\n<hr>\n<h2>實測</h2>\n<pre><code class=\"language-HTML\">&lt;body&gt;\n    &lt;form&gt;\n        &lt;input type=\"text\" id=\"url\" required&gt;\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-29 23:59:53",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "44",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>今天要實作能輸入網址的 RSS 閱讀器。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<pre></pre>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n今天要實作能輸入網址的 RSS 閱讀器。\n我們進入今天的主題吧！\n\n程式碼\n\n\n實測\n\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "javascript",
                "content": "Felix('form').on('submit', function (e) {\n    e.preventDefault();\n\n    Felix.xhr('GET', Felix('#url')[0].value, {\n        load: function () {\n            if (this.readyState !== 4 || this.status !== 200) return;\n            Felix('body').insert(RSS2HTML(this.responseXML).documentElement);\n        }\n    });\n});\n\nfunction replace(str, oldEl) {\n    const newEl = Felix.create(str, oldEl.innerHTML);\n    oldEl.parentNode.replaceChild(newEl, oldEl);\n    return newEl;\n}\n\nfunction RSS2HTML(rss) {\n    const els = [].slice.call(rss.querySelectorAll('*')).reverse();\n    els.forEach(function (el) {\n        replace(`div.${el.tagName}`, el);\n    });\n    return rss;\n}\n"
            },
            {
                "language": "html",
                "content": "<body>\n    <form>\n        <input type=\"text\" id=\"url\" required>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n"
            }
        ],
        "programming_languages": [
            "javascript",
            "html"
        ],
        "word_seg_content_text": "大家 好 ！\n今天 要 實作 能 輸入 網址 的\nRSS\n閱讀器 。\n我們 進入 今天 的 主題 吧 ！\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n實作 輸入 網址\nrss\n閱讀器\n主題\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "rss",
            "連結",
            "閱讀器",
            "網址",
            "程式碼"
        ],
        "extracted_keywords_phrases": [
            "網址 rss",
            "rss 閱讀器",
            "主題 程式碼",
            "rss",
            "實作 輸入"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282329": {
        "href": "https://ithelp.ithome.com.tw/articles/10282329",
        "title": "大共享時代系列_030_共享杯（循環杯）",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>習慣性地點了一杯手搖飲（咖啡）<br>\n喝完的杯子...去哪了？</p>\n<p><img src=\"https://ithelp.ithome.com.tw/upload/images/20211029/20118976MMEeEiUgPk.png\" alt=\"https://ithelp.ithome.com.tw/upload/images/20211029/20118976MMEeEiUgPk.png\"></p>\n<h2>喝飲料，用什麼裝？</h2>\n<p>友A：你外帶飲料都用什麼裝？<br>\n友B：杯子啊！不然嘞？<br>\n友A：哪種杯？<br>\n友B：就店家提供的杯子<br>\n友A：那喝完之後的杯子去哪了？<br>\n友B：嗯...垃圾桶（回收桶）<br>\n友A：好喔...那你有沒有其他更好的做法？<br>\n友B：自備環保杯?<br>\n友A：聽起來不錯，但如果今天沒帶環保杯出門呢？<br>\n友B：那就只能用店家的杯子啊...</p>\n<p>這是不是就是你我的日常？<br>\n看起來很平凡無所謂的對話...<br>\n卻是每個你我成爲環境劊子手的開始<br>\n每天產生一個無法被大自然輕易分解消化掉的杯子<br>\n甚至不只一個...</p>\n<p>如果今天有個提供循環杯的平台服務...<br>\n店家提供可租借的杯子<br>\n使用者使用完後將杯子放回歸還站<br>\n回收的杯子清洗後再提供給店家續用<br>\n大家會願意使用嗎？</p>\n<h2>目前有哪些提供循環杯的平台</h2>\n<ul>\n<li>\n<p><a href=\"https://www.facebook.com/goodtogo.tw/\" target=\"_blank\" rel=\"noreferrer noopener\">好盒器</a></p>\n<ul>\n<li>平台服務區：臺灣（台北、新竹、台中、台南）</li>\n<li>如何借用：Line、QRcode</li>\n<li>提供型態：\n<ul>\n<li>借杯杯：\n<ul>\n<li>店鋪借杯</li>\n<li>自助借杯機</li>\n<li>愛地球外送</li>\n</ul>\n</li>\n<li>還杯杯\n<ul>\n<li>店鋪還杯</li>\n<li>自助歸還站</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目前業者使用的開發宣傳平台：FB、Line、google 表單、Notion、Figma</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://ucup.com.tw/\" target=\"_blank\" rel=\"noreferrer noopener\">uCup</a></p>\n<ul>\n<li>平台服務區：臺灣（台北「台大校區周邊店家」）</li>\n<li>如何借用：Line、QRcode 或 台大學生證</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>個人借用</li>\n<li>學生社團借用</li>\n<li>公司行號借用</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>店家還杯（甲店租乙店還）</li>\n<li>有集點換物的活動</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://www.clubzero.co/\" target=\"_blank\" rel=\"noreferrer noopener\">ClubZero</a></p>\n<ul>\n<li>平台服務區：歐盟、北美</li>\n<li>如何借用：下戴 Android 、 IOS 的 APP</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>店家借用</li>\n<li>外送平台</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>自助歸還站</li>\n<li>預約到府收杯</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://recup.de/\" target=\"_blank\" rel=\"noreferrer noopener\">Recup</a></p>\n<ul>\n<li>平台服務區：德國</li>\n<li>如何借用：下戴 Android 、 IOS 的 APP</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>客戶需先支付押金，返回杯後可退金或換杯</li>\n<li>店家借用</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>店家還杯（甲店租乙店還）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>締造連結</h4>\n<h5>✣ 應用資訊</h5>\n<p><a href=\"https://www.facebook.com/goodtogo.tw/\" target=\"_blank\" rel=\"noreferrer noopener\">★ 好盒器</a><br>\n<a href=\"https://ucup.com.tw/\" target=\"_blank\" rel=\"noreferrer noopener\">★ uCup</a><br>\n<a href=\"https://www.clubzero.co/\" target=\"_blank\" rel=\"noreferrer noopener\">★ ClubZero</a><br>\n<a href=\"https://recup.de/\" target=\"_blank\" rel=\"noreferrer noopener\">★ Recup</a></p>\n<h5>⚙︎ 參考資料</h5>\n<p><a href=\"https://news.tvbs.com.tw/life/1612274\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 綠色外送！foodpanda北車、公館點飲料可用「循環杯」</a><br>\n<a href=\"https://www.tatlerasia.com/culture/arts/goodtogo-foodpanda\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 「好盒器」與「foodpanda」租借環保杯落實台南，防疫外送也要減少紙杯做環保！</a><br>\n<a href=\"https://opinion.cw.com.tw/blog/profile/510/article/10413\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 跟免洗杯盤說再見！循環容器風潮吹進台灣龍頭超商</a><br>\n<a href=\"https://ubrand.udn.com/ubrand/story/11817/5742685\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 台大減少上萬免洗杯－學生喝手搖，杯子跟uCup借</a><br>\n<a href=\"https://csr.cw.com.tw/article/41976\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 成立一年，讓台大商圈少用1萬個手搖杯　uCup提供學生輕鬆做環保｜逆轉氣候危機的U20</a><br>\n<a href=\"https://www.youtube.com/watch?v=UqC-bt9MnFQ\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 影片_容器界的Ubike 創新創業共享杯碗盤S</a><br>\n<a href=\"https://www.lifeaholic.tw/article46678/\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 英國品牌CupClub共享咖啡杯計畫，外帶咖啡杯也能減塑響應環保</a><br>\n<a href=\"https://www.ettoday.net/news/20210924/2081489.htm\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 麥當勞x好盒器攜手推「循環杯租還站」　讓借還更方便　減少一次性飲料杯浪費</a><br>\n<a href=\"https://www.greenpeace.org/taiwan/update/27461/%E5%BE%AA%E7%92%B0%E6%9D%AF%E7%A4%BA%E7%AF%84%E5%95%86%E5%9C%88%E6%80%8E%E9%BA%BC%E9%81%8B%E4%BD%9C%EF%BC%9F%E6%94%BF%E5%BA%9C%E3%80%81%E6%A5%AD%E8%80%85%E7%9C%8B%E9%80%99%E4%B8%80%E7%AF%87%E5%B0%B1/\" target=\"_blank\" rel=\"noreferrer noopener\">✎  循環杯示範商圈怎麼運作？政府、業者看這一篇就夠：公開「絕塑好店」幕後紀實</a><br>\n<a href=\"https://www.bnext.com.tw/article/54762/cupclub-the-coffee-cup-can-be-reused\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 不只有環保紙吸管，星巴克下一步將引進「共享咖啡杯」？</a><br>\n<a href=\"https://www.designweek.co.uk/issues/6-12-september-2021/clubzero-is-using-design-in-a-bid-to-tackle-single-use-plastic-packaging/\" target=\"_blank\" rel=\"noreferrer noopener\">✎ ClubZero’s closed loop design system wages war on single use plastic </a><br>\n<a href=\"https://crossing.cw.com.tw/article/11535\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 【德國現場】紙杯其實也不環保：德國人一小時用 32 萬個，他們怎麼解決？</a><br>\n<a href=\"https://techacute.com/sustainable-recup-replaces-disposable-coffee-cups/\" target=\"_blank\" rel=\"noreferrer noopener\">✎ 初創公司 RECUP 試圖取代一次性咖啡杯</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,共享,循環杯,環保杯,生態",
        "genre": "IT管理",
        "published_at": "2021-10-29 14:34:15",
        "author_href": "https://ithelp.ithome.com.tw/users/20118976/ironman",
        "author_name": "Shiva虛碼",
        "series_href": "https://ithelp.ithome.com.tw/users/20118976/ironman/4439",
        "series_name": "大共享時代系列",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>習慣性地點了一杯手搖飲（咖啡）<br/>\n喝完的杯子...去哪了？</p>\n<p></p>\n<h2>喝飲料，用什麼裝？</h2>\n<p>友A：你外帶飲料都用什麼裝？<br/>\n友B：杯子啊！不然嘞？<br/>\n友A：哪種杯？<br/>\n友B：就店家提供的杯子<br/>\n友A：那喝完之後的杯子去哪了？<br/>\n友B：嗯...垃圾桶（回收桶）<br/>\n友A：好喔...那你有沒有其他更好的做法？<br/>\n友B：自備環保杯?<br/>\n友A：聽起來不錯，但如果今天沒帶環保杯出門呢？<br/>\n友B：那就只能用店家的杯子啊...</p>\n<p>這是不是就是你我的日常？<br/>\n看起來很平凡無所謂的對話...<br/>\n卻是每個你我成爲環境劊子手的開始<br/>\n每天產生一個無法被大自然輕易分解消化掉的杯子<br/>\n甚至不只一個...</p>\n<p>如果今天有個提供循環杯的平台服務...<br/>\n店家提供可租借的杯子<br/>\n使用者使用完後將杯子放回歸還站<br/>\n回收的杯子清洗後再提供給店家續用<br/>\n大家會願意使用嗎？</p>\n<h2>目前有哪些提供循環杯的平台</h2>\n<ul>\n<li>\n<p></p>\n<ul>\n<li>平台服務區：臺灣（台北、新竹、台中、台南）</li>\n<li>如何借用：Line、QRcode</li>\n<li>提供型態：\n<ul>\n<li>借杯杯：\n<ul>\n<li>店鋪借杯</li>\n<li>自助借杯機</li>\n<li>愛地球外送</li>\n</ul>\n</li>\n<li>還杯杯\n<ul>\n<li>店鋪還杯</li>\n<li>自助歸還站</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>目前業者使用的開發宣傳平台：FB、Line、google 表單、Notion、Figma</li>\n</ul>\n</li>\n<li>\n<p></p>\n<ul>\n<li>平台服務區：臺灣（台北「台大校區周邊店家」）</li>\n<li>如何借用：Line、QRcode 或 台大學生證</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>個人借用</li>\n<li>學生社團借用</li>\n<li>公司行號借用</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>店家還杯（甲店租乙店還）</li>\n<li>有集點換物的活動</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p></p>\n<ul>\n<li>平台服務區：歐盟、北美</li>\n<li>如何借用：下戴 Android 、 IOS 的 APP</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>店家借用</li>\n<li>外送平台</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>自助歸還站</li>\n<li>預約到府收杯</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p></p>\n<ul>\n<li>平台服務區：德國</li>\n<li>如何借用：下戴 Android 、 IOS 的 APP</li>\n<li>提供型態：\n<ul>\n<li>借用方式：\n<ul>\n<li>客戶需先支付押金，返回杯後可退金或換杯</li>\n<li>店家借用</li>\n</ul>\n</li>\n<li>還杯方式：\n<ul>\n<li>店家還杯（甲店租乙店還）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>締造連結</h4>\n<h5>✣ 應用資訊</h5>\n<p><br/>\n<br/>\n<br/>\n</p>\n<h5>⚙︎ 參考資料</h5>\n<p><br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n</p>\n<br/>\n</div>",
        "content_text": "習慣性地點了一杯手搖飲（咖啡）\n喝完的杯子...去哪了？\n\n喝飲料，用什麼裝？\n友A：你外帶飲料都用什麼裝？\n友B：杯子啊！不然嘞？\n友A：哪種杯？\n友B：就店家提供的杯子\n友A：那喝完之後的杯子去哪了？\n友B：嗯...垃圾桶（回收桶）\n友A：好喔...那你有沒有其他更好的做法？\n友B：自備環保杯?\n友A：聽起來不錯，但如果今天沒帶環保杯出門呢？\n友B：那就只能用店家的杯子啊...\n這是不是就是你我的日常？\n看起來很平凡無所謂的對話...\n卻是每個你我成爲環境劊子手的開始\n每天產生一個無法被大自然輕易分解消化掉的杯子\n甚至不只一個...\n如果今天有個提供循環杯的平台服務...\n店家提供可租借的杯子\n使用者使用完後將杯子放回歸還站\n回收的杯子清洗後再提供給店家續用\n大家會願意使用嗎？\n目前有哪些提供循環杯的平台\n\n\n\n\n平台服務區：臺灣（台北、新竹、台中、台南）\n如何借用：Line、QRcode\n提供型態：\n\n借杯杯：\n\n店鋪借杯\n自助借杯機\n愛地球外送\n\n\n還杯杯\n\n店鋪還杯\n自助歸還站\n\n\n\n\n目前業者使用的開發宣傳平台：FB、Line、google 表單、Notion、Figma\n\n\n\n\n\n平台服務區：臺灣（台北「台大校區周邊店家」）\n如何借用：Line、QRcode 或 台大學生證\n提供型態：\n\n借用方式：\n\n個人借用\n學生社團借用\n公司行號借用\n\n\n還杯方式：\n\n店家還杯（甲店租乙店還）\n有集點換物的活動\n\n\n\n\n\n\n\n\n\n平台服務區：歐盟、北美\n如何借用：下戴 Android 、 IOS 的 APP\n提供型態：\n\n借用方式：\n\n店家借用\n外送平台\n\n\n還杯方式：\n\n自助歸還站\n預約到府收杯\n\n\n\n\n\n\n\n\n\n平台服務區：德國\n如何借用：下戴 Android 、 IOS 的 APP\n提供型態：\n\n借用方式：\n\n客戶需先支付押金，返回杯後可退金或換杯\n店家借用\n\n\n還杯方式：\n\n店家還杯（甲店租乙店還）\n\n\n\n\n\n\n\n締造連結\n✣ 應用資訊\n\n\n\n\n⚙︎ 參考資料",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "習慣性 地點 了 一杯 手搖 飲 （ 咖啡 ）\n喝完 的 杯子 ... 去 哪 了 ？\n喝 飲料 ， 用 什麼 裝 ？\n友 A ： 你 外帶 飲料 都 用 什麼 裝 ？\n友 B ： 杯子 啊 ！ 不然 嘞 ？\n友 A ： 哪種 杯 ？\n友 B ： 就 店家 提供 的 杯子\n友 A ： 那 喝完 之後 的 杯子 去 哪 了 ？\n友 B ： 嗯 ... 垃圾桶 （ 回收 桶 ）\n友 A ： 好 喔 ... 那 你 有沒有 其他 更好 的 做法 ？\n友 B ： 自備 環保 杯 ?\n友 A ： 聽 起來 不錯 ， 但 如果 今天 沒帶 環保 杯 出門 呢 ？\n友 B ： 那 就 只能 用 店家 的 杯子 啊 ...\n這 是不是 就是 你 我 的 日常 ？\n看起來 很 平凡 無所謂 的 對話 ...\n卻是 每個 你 我 成爲 環境 劊子手 的 開始\n每天 產生 一個 無法 被 大自然 輕易 分解 消化 掉 的 杯子\n甚至 不 只 一個 ...\n如果 今天 有個 提供 循環 杯 的 平台 服務 ...\n店家 提供 可 租借 的 杯子\n使用者 使用 完後將 杯子 放 回 歸還 站\n回收 的 杯子 清洗 後 再 提供 給 店家 續用\n大家 會 願意 使用 嗎 ？\n目前 有 哪些 提供 循環 杯 的 平台\n平台 服務區 ： 臺灣 （ 台北 、 新竹 、 台 中 、 台南 ）\n如何 借用 ： Line 、 QRcode\n提供 型態 ：\n借 杯杯 ：\n店鋪 借杯\n自助 借杯機\n愛 地球 外送\n還 杯杯\n店鋪 還杯\n自助 歸還 站\n目前 業者 使用 的 開發 宣傳 平台 ： FB 、 Line 、 google\n表單 、 Notion 、 Figma\n平台 服務區 ： 臺灣 （ 台北 「 台大 校區 周邊 店家 」 ）\n如何 借用 ： Line 、 QRcode\n或\n台大 學生證\n提供 型態 ：\n借用 方式 ：\n個人 借用\n學生 社團 借用\n公司 行號 借用\n還杯 方式 ：\n店家 還杯 （ 甲 店租 乙店還 ）\n有 集點 換物 的 活動\n平台 服務區 ： 歐盟 、 北美\n如何 借用 ： 下 戴\nAndroid\n、\nIOS\n的\nAPP\n提供 型態 ：\n借用 方式 ：\n店家 借用\n外送 平台\n還杯 方式 ：\n自助 歸還 站\n預約 到府 收杯\n平台 服務區 ： 德國\n如何 借用 ： 下 戴\nAndroid\n、\nIOS\n的\nAPP\n提供 型態 ：\n借用 方式 ：\n客戶 需先 支付 押金 ， 返回 杯後可 退金 或 換杯\n店家 借用\n還杯 方式 ：\n店家 還杯 （ 甲 店租 乙店還 ）\n締造 連結\n✣\n應用 資訊\n⚙ ︎\n參考資料",
        "word_seg_processed_content_text": "習慣性 地點 一杯 手搖 飲 咖啡\n喝完 杯子 ...\n喝 飲料 裝\n友 a 外帶 飲料 裝\n友 b 杯子 嘞\n友 a 哪種 杯\n友 b 店家 提供 杯子\n友 a 喝完 杯子\n友 b ... 垃圾桶 回收 桶\n友 a 喔 ... 有沒有 更好 做法\n友 b 自備 環保 杯\n友 a 聽 不錯 沒帶 環保 杯 出門\n友 b 只能 店家 杯子 ...\n日常\n看起來 平凡 無所謂 對話 ...\n卻是 成爲 環境 劊子手\n大自然 輕易 分解 消化 掉 杯子\n...\n有個 提供 循環 杯 平台 服務 ...\n店家 提供 租借 杯子\n使用者 完後將 杯子 放 回 歸還 站\n回收 杯子 清洗 提供 店家 續用\n會\n提供 循環 杯 平台\n平台 服務區 臺灣 台北 新竹 台 中 台南\n借用 line qrcode\n提供 型態\n借 杯杯\n店鋪 借杯\n自助 借杯機\n愛 地球 外送\n杯杯\n店鋪 還杯\n自助 歸還 站\n業者 開發 宣傳 平台 fb line google\n表單 notion figma\n平台 服務區 臺灣 台北 台大 校區 周邊 店家\n借用 line qrcode\n\n台大 學生證\n提供 型態\n借用 方式\n借用\n學生 社團 借用\n公司 行號 借用\n還杯 方式\n店家 還杯 甲 店租 乙店還\n集點 換物 活動\n平台 服務區 歐盟 北美\n借用 戴\nandroid\n\nios\n\napp\n提供 型態\n借用 方式\n店家 借用\n外送 平台\n還杯 方式\n自助 歸還 站\n預約 到府 收杯\n平台 服務區 德國\n借用 戴\nandroid\n\nios\n\napp\n提供 型態\n借用 方式\n客戶 需先 支付 押金 返回 杯後可 退金 換杯\n店家 借用\n還杯 方式\n店家 還杯 甲 店租 乙店還\n締造 連結\n✣\n資訊\n⚙ ︎\n參考資料",
        "extracted_keywords": [
            "飲料",
            "一杯",
            "收杯",
            "借杯",
            "換杯"
        ],
        "extracted_keywords_phrases": [
            "飲料 外帶",
            "外帶 飲料",
            "飲料 杯子",
            "杯子 飲料",
            "飲料"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282324": {
        "href": "https://ithelp.ithome.com.tw/articles/10282324",
        "title": "JS 43 - 將表格式表單的資料列輸出為 JSON 格式",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>今天要繼續昨天的表格式表單，將新增的資料列輸出為 JSON 格式。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>樣式</h2>\n<pre><code class=\"language-CSS\">.caption {\n    display: table-caption;\n}\n</code></pre>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">const trs = Felix('.tr');\nconst textarea = Felix('#result textarea');\n\nform.on('submit', output);\n\nfunction output(e) {\n    e.preventDefault();\n\n    const obj = {};\n    const ids = [].map.call(inputs, (input) =&gt; input.id);\n\n    Felix.forEach(trs, function (tr) {\n        let i = 1;\n        const children = tr.children;\n        const key = obj[children[0][0].value] = {};\n\n        Felix.forEach([].slice.call(children, 1, -1), function (td) {\n            key[i++] = td[0].value;\n        });\n    });\n    \n    textarea[0].textContent = JSON.stringify(obj);\n}\n</code></pre>\n<hr>\n<h2>實測</h2>\n<pre><code class=\"language-HTML\">&lt;body&gt;\n    &lt;form class=\"table\"&gt;\n        &lt;!-- ... --&gt;\n        &lt;div class=\"caption\"&gt;\n            &lt;input type=\"submit\" value=\"Output as JSON Format\"&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;div id=\"result\"&gt;\n        &lt;textarea readonly&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-28 23:59:10",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "43",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>今天要繼續昨天的表格式表單，將新增的資料列輸出為 JSON 格式。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>樣式</h2>\n<pre></pre>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<pre></pre>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n今天要繼續昨天的表格式表單，將新增的資料列輸出為 JSON 格式。\n我們進入今天的主題吧！\n\n樣式\n\n\n程式碼\n\n\n實測\n\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "css",
                "content": ".caption {\n    display: table-caption;\n}\n"
            },
            {
                "language": "javascript",
                "content": "const trs = Felix('.tr');\nconst textarea = Felix('#result textarea');\n\nform.on('submit', output);\n\nfunction output(e) {\n    e.preventDefault();\n\n    const obj = {};\n    const ids = [].map.call(inputs, (input) => input.id);\n\n    Felix.forEach(trs, function (tr) {\n        let i = 1;\n        const children = tr.children;\n        const key = obj[children[0][0].value] = {};\n\n        Felix.forEach([].slice.call(children, 1, -1), function (td) {\n            key[i++] = td[0].value;\n        });\n    });\n    \n    textarea[0].textContent = JSON.stringify(obj);\n}\n"
            },
            {
                "language": "html",
                "content": "<body>\n    <form class=\"table\">\n        <!-- ... -->\n        <div class=\"caption\">\n            <input type=\"submit\" value=\"Output as JSON Format\">\n        </div>\n    </form>\n    <div id=\"result\">\n        <textarea readonly></textarea>\n    </div>\n</body>\n"
            }
        ],
        "programming_languages": [
            "css",
            "javascript",
            "html"
        ],
        "word_seg_content_text": "大家 好 ！\n今天 要 繼續 昨天 的 表 格式 表單 ， 將 新增 的 資料 列 輸出 為\nJSON\n格式 。\n我們 進入 今天 的 主題 吧 ！\n樣式\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n昨天 表 格式 表單 新增 資料 列 輸出\njson\n格式\n主題\n樣式\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "程式碼",
            "連結",
            "明天",
            "格式",
            "昨天"
        ],
        "extracted_keywords_phrases": [
            "昨天 格式",
            "尾聲 文章",
            "表單 新增",
            "格式 表單",
            "格式 主題"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282317": {
        "href": "https://ithelp.ithome.com.tw/articles/10282317",
        "title": "[PM日常002] 隨時保持警戒",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>「Always keep your hand at the level of your eyes」腦中浮現的是這一句話，在歌劇魅影中，一位教舞蹈的夫人提醒著眾人，以避免受到魅影的繩索襲擊。要養成一個文化或人才不容易，參與工程團隊的時候，深刻體會到要沉住氣，才不會出手失準。在體會「決策慢、執行快」的時候，再參雜著擔心毀於一旦的心，可能就會讓節奏過慢了。產品經理還是一個承上啟下、開左闢右的角色，怎麼樣慢，還是必須要拿捏有度，要不然就會讓自己轉離團隊，也會讓團隊轉離方向了。</p>\n<h1>警戒自己的節奏</h1>\n<p>「決策慢、執行快」就像一個狀態，很難言喻，或許更合適的說法是決策「穩」，心中會有一個節拍器，是一個穩定的節奏，不會因為突發事件轉瞬間就調整步調。因為我是希望自己能有表現的人，所以很容易受主管的任務給予波動，再加上對人的情緒比較敏感，這個現象就會更加明顯了。昨天也發生事件，在和主管討論的過程之中，我很彆扭地一直提出問題、拋出想法，企圖拉長收集訊息的區間，最後才與主管達成共識。這一個過程，對我來說，是一個新的表現或嘗試。我是一個習慣性會拋出想法的人，更難聽一點，我的表述過程之中，很容易呈現我是很自我中心的人，會把話題嵌入自己的部分，好聽一點是樂於分享，但真正缺少引導與傾聽，如此就很難掌握關鍵點，執行也就會難正中紅心，也難怪在許多的工具書上，都會強調要問個好問題。</p>\n<h1>警戒不符目標的行為</h1>\n<p>別小看任何錯誤行為了，雖然不一定會對公司造成立即或是馬上的損失，但是可能是持續傷害文化、造成錯誤解讀的原因。又是歷史老師拍桌的故事，他用力地拍一下桌，如果不問或是沒機會問，我怎麼知道他的緣由？幸好現在工程團隊還小，在推動一個高等級的工程團隊上，經驗還在歷練的我，還可以一對一的跟工程師深聊，如果是龐大的團隊，那就真的會發生傷害了。只要損及團隊文化的，即便再小都得處理，否則累積起來，就會成為文化毒瘤。這是我這一次很大的學習，差點就讓一個轉動動能強、有良好特質的工程師，因此而緩慢下來。即便在忙碌，身為產品經理，心中永遠要記得目標，商業效益上的目標是，團隊文化的目標也是，只有越想越清楚，團隊才有機會朝目標靠攏。</p>\n<p>我要再加油！將這些內化成自己的直覺行為。「Always keep your hand at the level of your eyes」當狀況的套索拋擲過來時，才能開啟反應！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,產品經理,打造軟體團隊",
        "genre": "IT管理",
        "published_at": "2021-10-28 23:16:07",
        "author_href": "https://ithelp.ithome.com.tw/users/20140983/ironman",
        "author_name": "pcshen99",
        "series_href": "https://ithelp.ithome.com.tw/users/20140983/ironman/4621",
        "series_name": "文化沒這麼理所當然：一位新手產品經理促成IT文化形塑的心路歷程",
        "series_num": "33",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>「Always keep your hand at the level of your eyes」腦中浮現的是這一句話，在歌劇魅影中，一位教舞蹈的夫人提醒著眾人，以避免受到魅影的繩索襲擊。要養成一個文化或人才不容易，參與工程團隊的時候，深刻體會到要沉住氣，才不會出手失準。在體會「決策慢、執行快」的時候，再參雜著擔心毀於一旦的心，可能就會讓節奏過慢了。產品經理還是一個承上啟下、開左闢右的角色，怎麼樣慢，還是必須要拿捏有度，要不然就會讓自己轉離團隊，也會讓團隊轉離方向了。</p>\n<h1>警戒自己的節奏</h1>\n<p>「決策慢、執行快」就像一個狀態，很難言喻，或許更合適的說法是決策「穩」，心中會有一個節拍器，是一個穩定的節奏，不會因為突發事件轉瞬間就調整步調。因為我是希望自己能有表現的人，所以很容易受主管的任務給予波動，再加上對人的情緒比較敏感，這個現象就會更加明顯了。昨天也發生事件，在和主管討論的過程之中，我很彆扭地一直提出問題、拋出想法，企圖拉長收集訊息的區間，最後才與主管達成共識。這一個過程，對我來說，是一個新的表現或嘗試。我是一個習慣性會拋出想法的人，更難聽一點，我的表述過程之中，很容易呈現我是很自我中心的人，會把話題嵌入自己的部分，好聽一點是樂於分享，但真正缺少引導與傾聽，如此就很難掌握關鍵點，執行也就會難正中紅心，也難怪在許多的工具書上，都會強調要問個好問題。</p>\n<h1>警戒不符目標的行為</h1>\n<p>別小看任何錯誤行為了，雖然不一定會對公司造成立即或是馬上的損失，但是可能是持續傷害文化、造成錯誤解讀的原因。又是歷史老師拍桌的故事，他用力地拍一下桌，如果不問或是沒機會問，我怎麼知道他的緣由？幸好現在工程團隊還小，在推動一個高等級的工程團隊上，經驗還在歷練的我，還可以一對一的跟工程師深聊，如果是龐大的團隊，那就真的會發生傷害了。只要損及團隊文化的，即便再小都得處理，否則累積起來，就會成為文化毒瘤。這是我這一次很大的學習，差點就讓一個轉動動能強、有良好特質的工程師，因此而緩慢下來。即便在忙碌，身為產品經理，心中永遠要記得目標，商業效益上的目標是，團隊文化的目標也是，只有越想越清楚，團隊才有機會朝目標靠攏。</p>\n<p>我要再加油！將這些內化成自己的直覺行為。「Always keep your hand at the level of your eyes」當狀況的套索拋擲過來時，才能開啟反應！</p>\n<br/>\n</div>",
        "content_text": "「Always keep your hand at the level of your eyes」腦中浮現的是這一句話，在歌劇魅影中，一位教舞蹈的夫人提醒著眾人，以避免受到魅影的繩索襲擊。要養成一個文化或人才不容易，參與工程團隊的時候，深刻體會到要沉住氣，才不會出手失準。在體會「決策慢、執行快」的時候，再參雜著擔心毀於一旦的心，可能就會讓節奏過慢了。產品經理還是一個承上啟下、開左闢右的角色，怎麼樣慢，還是必須要拿捏有度，要不然就會讓自己轉離團隊，也會讓團隊轉離方向了。\n警戒自己的節奏\n「決策慢、執行快」就像一個狀態，很難言喻，或許更合適的說法是決策「穩」，心中會有一個節拍器，是一個穩定的節奏，不會因為突發事件轉瞬間就調整步調。因為我是希望自己能有表現的人，所以很容易受主管的任務給予波動，再加上對人的情緒比較敏感，這個現象就會更加明顯了。昨天也發生事件，在和主管討論的過程之中，我很彆扭地一直提出問題、拋出想法，企圖拉長收集訊息的區間，最後才與主管達成共識。這一個過程，對我來說，是一個新的表現或嘗試。我是一個習慣性會拋出想法的人，更難聽一點，我的表述過程之中，很容易呈現我是很自我中心的人，會把話題嵌入自己的部分，好聽一點是樂於分享，但真正缺少引導與傾聽，如此就很難掌握關鍵點，執行也就會難正中紅心，也難怪在許多的工具書上，都會強調要問個好問題。\n警戒不符目標的行為\n別小看任何錯誤行為了，雖然不一定會對公司造成立即或是馬上的損失，但是可能是持續傷害文化、造成錯誤解讀的原因。又是歷史老師拍桌的故事，他用力地拍一下桌，如果不問或是沒機會問，我怎麼知道他的緣由？幸好現在工程團隊還小，在推動一個高等級的工程團隊上，經驗還在歷練的我，還可以一對一的跟工程師深聊，如果是龐大的團隊，那就真的會發生傷害了。只要損及團隊文化的，即便再小都得處理，否則累積起來，就會成為文化毒瘤。這是我這一次很大的學習，差點就讓一個轉動動能強、有良好特質的工程師，因此而緩慢下來。即便在忙碌，身為產品經理，心中永遠要記得目標，商業效益上的目標是，團隊文化的目標也是，只有越想越清楚，團隊才有機會朝目標靠攏。\n我要再加油！將這些內化成自己的直覺行為。「Always keep your hand at the level of your eyes」當狀況的套索拋擲過來時，才能開啟反應！",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "「 Always\nkeep\nyour\nhand\nat\nthe\nlevel\nof\nyour\neyes 」 腦中 浮現 的 是 這 一句 話 ， 在 歌劇 魅影 中 ， 一位 教 舞蹈 的 夫人 提醒 著眾 人 ， 以 避免 受到 魅影 的 繩索 襲擊 。 要 養成 一個 文化 或 人才 不 容易 ， 參與 工程 團隊 的 時候 ， 深刻 體會 到 要 沉住氣 ， 才 不會 出手 失準 。 在 體會 「 決策 慢 、 執行 快 」 的 時候 ， 再 參雜 著 擔心 毀於一旦 的 心 ， 可能 就 會 讓 節奏 過慢 了 。 產品 經理 還是 一個 承上 啟下 、 開左闢 右 的 角色 ， 怎麼樣 慢 ， 還是 必須 要 拿捏 有 度 ， 要不然 就 會 讓 自己 轉離 團隊 ， 也 會 讓 團隊 轉離 方向 了 。\n警戒 自己 的 節奏\n「 決策 慢 、 執行 快 」 就 像 一個 狀態 ， 很 難言 喻 ， 或許 更 合適 的 說法 是 決策 「 穩 」 ， 心中 會 有 一個 節拍器 ， 是 一個 穩定 的 節奏 ， 不會 因為 突發事件 轉瞬間 就 調整 步調 。 因為 我 是 希望 自己 能 有 表現 的 人 ， 所以 很 容易 受 主管 的 任務 給予 波動 ， 再 加上 對 人 的 情緒 比較 敏感 ， 這個 現象 就 會 更加 明顯 了 。 昨天 也 發生 事件 ， 在 和 主管 討論 的 過程 之中 ， 我 很 彆扭 地 一直 提出 問題 、 拋出 想法 ， 企圖 拉長 收集 訊息 的 區間 ， 最後 才 與 主管 達成 共識 。 這 一個 過程 ， 對 我 來說 ， 是 一個 新 的 表現 或 嘗試 。 我 是 一個 習慣性 會 拋出 想法 的 人 ， 更 難聽 一點 ， 我 的 表述 過程 之中 ， 很 容易 呈現 我 是 很 自我中心 的 人 ， 會 把 話題 嵌入 自己 的 部分 ， 好聽 一點 是 樂於 分享 ， 但 真正 缺少 引導 與 傾聽 ， 如此 就 很 難 掌握 關鍵點 ， 執行 也 就 會 難 正中 紅心 ， 也 難怪 在 許多 的 工具書 上 ， 都 會 強調 要 問個 好 問題 。\n警戒 不符 目標 的 行為\n別 小看 任何 錯誤 行為 了 ， 雖然 不 一定 會 對 公司 造成 立即 或是 馬上 的 損失 ， 但是 可能 是 持續 傷害 文化 、 造成 錯誤 解讀 的 原因 。 又 是 歷史 老師 拍桌 的 故事 ， 他 用力 地 拍 一下 桌 ， 如果 不問 或是 沒 機會 問 ， 我 怎麼 知道 他 的 緣由 ？ 幸好 現在 工程 團隊 還小 ， 在 推動 一個 高等級 的 工程 團隊 上 ， 經驗 還在 歷練 的 我 ， 還 可以 一對一 的 跟 工程師 深聊 ， 如果 是 龐大 的 團隊 ， 那 就 真的 會 發生 傷害 了 。 只要 損及 團隊 文化 的 ， 即便 再 小 都 得 處理 ， 否則 累積 起來 ， 就會 成為 文化 毒瘤 。 這是 我 這 一次 很大 的 學習 ， 差點 就讓 一個 轉動 動能 強 、 有 良好 特質 的 工程師 ， 因此 而 緩慢 下來 。 即便 在 忙碌 ， 身為 產品 經理 ， 心中 永遠 要 記得 目標 ， 商業 效益 上 的 目標 是 ， 團隊 文化 的 目標 也 是 ， 只有 越想 越 清楚 ， 團隊 才 有 機會 朝 目標 靠攏 。\n我要 再 加油 ！ 將 這些 內 化成 自己 的 直覺 行為 。 「 Always\nkeep\nyour\nhand\nat\nthe\nlevel\nof\nyour\neyes 」 當 狀況 的 套索 拋擲 過 來時 ， 才能 開啟 反應 ！",
        "word_seg_processed_content_text": "always\nkeep\nyour\nhand\n\n\nlevel\n\nyour\neyes 腦中 浮現 一句 話 歌劇 魅影 中 一位 教 舞蹈 夫人 提醒 著眾 魅影 繩索 襲擊 養成 文化 人才 參與 工程 團隊 深刻 體會 沉住氣 才 出手 失準 體會 決策 慢 執行 快 參雜 擔心 毀於一旦 心 會 節奏 過慢 產品 經理 承上 啟下 開左闢 右 角色 慢 拿捏 度 會 轉離 團隊 會 團隊 轉離 方向\n警戒 節奏\n決策 慢 執行 快 狀態 難言 喻 或許 更 合適 說法 決策 穩 心中 會 節拍器 穩定 節奏 突發事件 轉瞬間 調整 步調 希望 表現 受 主管 給予 波動 加上 情緒 敏感 現象 會 昨天 發生 事件 主管 討論 過程 之中 彆扭 提出 拋出 想法 拉長 收集 訊息 區間 才 主管 達成 共識 過程 來說 新 表現 嘗試 習慣性 會 拋出 想法 更 難聽 一點 表述 過程 之中 呈現 自我中心 會 話題 嵌入 好聽 一點 樂於 分享 缺少 引導 傾聽 難 關鍵點 執行 會 難 正中 紅心 難怪 工具書 會 問個\n警戒 不符 目標\n小看 錯誤 會 公司 馬上 損失 持續 傷害 文化 錯誤 解讀 原因 歷史 老師 拍桌 故事 用力 拍 桌 沒 機會 問 緣由 幸好 工程 團隊 還小 推動 高等級 工程 團隊 經驗 還在 歷練 一對一 工程師 深聊 龐大 團隊 真的 會 發生 傷害 損及 團隊 文化 累積 就會 文化 毒瘤 這是 很大 學習 差點 就讓 動能 強 特質 工程師 緩慢 忙碌 身為 產品 經理 心中 永遠 記得 目標 商業 效益 目標 團隊 文化 目標 越想 越 團隊 才 機會 目標 靠攏\n我要 加油 內 化成 直覺 always\nkeep\nyour\nhand\n\n\nlevel\n\nyour\neyes 狀況 套索 拋擲 來時 才能 開啟",
        "extracted_keywords": [
            "表現",
            "腦中",
            "動能",
            "養成",
            "引導"
        ],
        "extracted_keywords_phrases": [
            "直覺 hand",
            "腦中 浮現",
            "舞蹈 夫人",
            "表現",
            "警戒 節奏"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282283": {
        "href": "https://ithelp.ithome.com.tw/articles/10282283",
        "title": "JS 42 - 新增或刪除表格式表單的資料列",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>今天要實作新增和刪除資料列。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>樣式</h2>\n<pre><code class=\"language-CSS\">.table {\n    display: table;\n}\n\n.tr {\n    display: table-row;\n}\n\n.th,\n.td {\n    display: table-cell;\n}\n\n.th {\n    font-weight: bold;\n    text-align: center;\n}\n</code></pre>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">const form = Felix('form');\nconst inputs = Felix('#inserter input');\n\nFelix(inputs[inputs.length - 1]).on('click', insert);\n\nfunction insert() {\n    const trs = Felix('form .tr');\n    const pos = inputs[0].value &lt; trs.length - 2 ? inputs[0].value : trs.length - 1;\n    const tr = Felix(trs[pos]).insert('.tr', null, 'afterend');\n    const tds = [].map.call(inputs, () =&gt; Felix(tr).insert('.td'));\n    const els = [].map.call(inputs, function (el, i) {\n        const value = i !== this.length - 1 ? inputs[i].value : '－';\n        return Felix(tds[i]).insert(`input[type=\"${el.type}\"][value=\"${el.value}\"][readonly]`);\n    });\n    \n    Felix(els[els.length - 1]).on('dblclick', remove);\n    form[0].reset();\n}\n\nfunction remove(e) {\n    Felix(this).off(e.type, remove);\n    Felix(this.parentElement.parentElement).remove();\n}\n</code></pre>\n<hr>\n<h2>實測</h2>\n<pre><code class=\"language-HTML\">&lt;body&gt;\n    &lt;form class=\"table\"&gt;\n        &lt;div class=\"tr\"&gt;\n            &lt;div class=\"th\"&gt;Day&lt;/div&gt;\n            &lt;div class=\"th\"&gt;Title&lt;/div&gt;\n            &lt;div class=\"th\"&gt;Author&lt;/div&gt;\n            &lt;div class=\"th\"&gt;Date&lt;/div&gt;\n            &lt;div class=\"th\"&gt;Article&lt;/div&gt;\n            &lt;div class=\"th\"&gt;Action&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div id=\"inserter\" class=\"tr\"&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"number\" id=\"day\" required&gt;&lt;/div&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"text\" id=\"title\" required&gt;&lt;/div&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"text\" id=\"author\" required&gt;&lt;/div&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"date\" id=\"date\" required&gt;&lt;/div&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"number\" id=\"article\" required&gt;&lt;/div&gt;\n            &lt;div class=\"td\"&gt;&lt;input type=\"button\" value=\"＋\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-27 23:59:13",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "42",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>今天要實作新增和刪除資料列。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>樣式</h2>\n<pre></pre>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<pre></pre>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n今天要實作新增和刪除資料列。\n我們進入今天的主題吧！\n\n樣式\n\n\n程式碼\n\n\n實測\n\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "css",
                "content": ".table {\n    display: table;\n}\n\n.tr {\n    display: table-row;\n}\n\n.th,\n.td {\n    display: table-cell;\n}\n\n.th {\n    font-weight: bold;\n    text-align: center;\n}\n"
            },
            {
                "language": "javascript",
                "content": "const form = Felix('form');\nconst inputs = Felix('#inserter input');\n\nFelix(inputs[inputs.length - 1]).on('click', insert);\n\nfunction insert() {\n    const trs = Felix('form .tr');\n    const pos = inputs[0].value < trs.length - 2 ? inputs[0].value : trs.length - 1;\n    const tr = Felix(trs[pos]).insert('.tr', null, 'afterend');\n    const tds = [].map.call(inputs, () => Felix(tr).insert('.td'));\n    const els = [].map.call(inputs, function (el, i) {\n        const value = i !== this.length - 1 ? inputs[i].value : '－';\n        return Felix(tds[i]).insert(`input[type=\"${el.type}\"][value=\"${el.value}\"][readonly]`);\n    });\n    \n    Felix(els[els.length - 1]).on('dblclick', remove);\n    form[0].reset();\n}\n\nfunction remove(e) {\n    Felix(this).off(e.type, remove);\n    Felix(this.parentElement.parentElement).remove();\n}\n"
            },
            {
                "language": "html",
                "content": "<body>\n    <form class=\"table\">\n        <div class=\"tr\">\n            <div class=\"th\">Day</div>\n            <div class=\"th\">Title</div>\n            <div class=\"th\">Author</div>\n            <div class=\"th\">Date</div>\n            <div class=\"th\">Article</div>\n            <div class=\"th\">Action</div>\n        </div>\n        <div id=\"inserter\" class=\"tr\">\n            <div class=\"td\"><input type=\"number\" id=\"day\" required></div>\n            <div class=\"td\"><input type=\"text\" id=\"title\" required></div>\n            <div class=\"td\"><input type=\"text\" id=\"author\" required></div>\n            <div class=\"td\"><input type=\"date\" id=\"date\" required></div>\n            <div class=\"td\"><input type=\"number\" id=\"article\" required></div>\n            <div class=\"td\"><input type=\"button\" value=\"＋\"></div>\n        </div>\n    </form>\n</body>\n"
            }
        ],
        "programming_languages": [
            "css",
            "javascript",
            "html"
        ],
        "word_seg_content_text": "大家 好 ！\n今天 要 實作 新增 和 刪除 資料 列 。\n我們 進入 今天 的 主題 吧 ！\n樣式\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n實作 新增 刪除 資料 列\n主題\n樣式\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "刪除",
            "再見",
            "尾聲",
            "程式碼",
            "連結"
        ],
        "extracted_keywords_phrases": [
            "新增 刪除",
            "刪除 資料",
            "尾聲 文章",
            "刪除",
            "程式碼 實測"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282272": {
        "href": "https://ithelp.ithome.com.tw/articles/10282272",
        "title": "盤點清查與檢測掃描 - 安全性檢測之弱點掃描",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>完成鐵人賽後一下子就放鬆下來，該完成的還是繼續完成，FIGHT</p>\n<hr>\n<p>適用人員: 技術人員。<br>\n適用法規:  <a href=\"https://law.moj.gov.tw/LawClass/LawAll.aspx?pcode=A0030304\" target=\"_blank\" rel=\"noreferrer noopener\">資通安全責任等級分級辦法 </a> - <a href=\"https://law.moj.gov.tw/LawClass/LawGetFile.ashx?FileId=0000298115&amp;lan=C\" target=\"_blank\" rel=\"noreferrer noopener\">附表十資通系統防護基準.PDF</a></p>\n<ul>\n<li>技術面分類提要</li>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>\n<code>安全性檢測</code>\n<ul>\n<li>\n<code>弱點掃描</code>\n</li>\n<li>滲透測試</li>\n</ul>\n</li>\n<li>資通安全健診</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>安全性的檢測目的在清查應用系統上是否存在弱點、威脅，試圖找出並對其進行修補。在實施上相對簡單，只需要利用軟體工具進行「弱點掃描」與「滲透測試」即可。困難的地方在於事後對於報告上的弱點進行修補，因此建議在工具的選擇上多多比較，看看哪一套容易判讀與擁有較低的誤判率。技術人員建議越早進行、在各階段性進行掃描以提早發現弱點，加速修補過程。</p>\n<p>弱點掃描: 又分為主機與應用程式(網頁)。主要找出已知的弱點<br>\n廣義上來說，只要會影響在資產價值的機密性、完整性、可用性即可稱為弱點，實際執行上工具則以 CVE 資料庫為主要比對項目。</p>\n<ul>\n<li>結果依風險等級分為高、中、低</li>\n<li>核心資通系統一般會要求至少修補高、中風險以上(<a href=\"%E4%BF%AE%E6%AD%A3%E3%80%8C%E6%95%99%E8%82%B2%E9%83%A8%E5%A7%94%E5%A4%96%E8%BE%A6%E7%90%86%E6%88%96%E8%A3%9C%E5%8A%A9%E5%BB%BA%E7%BD%AE%E7%B6%AD%E9%81%8B%E4%BC%BA%E6%9C%8D%E4%B8%BB%E6%A9%9F%E5%8F%8A%E6%87%89%E7%94%A8%E7%B3%BB%E7%B5%B1%E7%B6%B2%E7%AB%99%E8%B3%87%E9%80%9A%E5%AE%89%E5%85%A8%E5%8F%8A%E5%80%8B%E4%BA%BA%E8%B3%87%E6%96%99%E4%BF%9D%E8%AD%B7%E7%AE%A1%E7%90%86%E8%A6%81%E9%BB%9E%E3%80%8D\" target=\"_blank\" rel=\"noreferrer noopener\">註1</a>)</li>\n<li>主機弱點掃描工具\n<ul>\n<li>\n<a href=\"https://zh-tw.tenable.com/products/nessus/nessus-essentials\" target=\"_blank\" rel=\"noreferrer noopener\">Nessus</a>\n</li>\n<li>\n<a href=\"https://www.rapid7.com/info/nexpose-community/\" target=\"_blank\" rel=\"noreferrer noopener\">Free Nexpose Community</a>\n</li>\n</ul>\n</li>\n<li>AP(網頁)弱點掃描工具\n<ul>\n<li>Acunetix | Web Application Security Scanner。有試用版</li>\n<li>AppScan</li>\n</ul>\n</li>\n</ul>\n<p>滲透工具留在下一篇好了...</p>\n<h2>參考資源</h2>\n<p><a href=\"https://www.lawbank.com.tw/news/NewsContent.aspx?NID=178409.00\" target=\"_blank\" rel=\"noreferrer noopener\">修正「教育部委外辦理或補助建置維運伺服主機及應用系統網站資通安全及個人資料保護管理要點」</a></p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Security",
        "published_at": "2021-10-27 16:42:51",
        "author_href": "https://ithelp.ithome.com.tw/users/20103688/ironman",
        "author_name": "魯大常",
        "series_href": "https://ithelp.ithome.com.tw/users/20103688/ironman/4430",
        "series_name": "作業抄起來!資通安全管理法什麼的",
        "series_num": "31",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>完成鐵人賽後一下子就放鬆下來，該完成的還是繼續完成，FIGHT</p>\n<hr/>\n<p>適用人員: 技術人員。<br/>\n適用法規:   - </p>\n<ul>\n<li>技術面分類提要</li>\n<li>網路架構的檢視</li>\n<li>端點的安全防護</li>\n<li>應用開發的防護基準</li>\n<li>盤點清查與檢測掃描\n<ul>\n<li>盤點文件、清查舊系統、帳號</li>\n<li>\n<code>安全性檢測</code>\n<ul>\n<li>\n<code>弱點掃描</code>\n</li>\n<li>滲透測試</li>\n</ul>\n</li>\n<li>資通安全健診</li>\n</ul>\n</li>\n</ul>\n<hr/>\n<p>安全性的檢測目的在清查應用系統上是否存在弱點、威脅，試圖找出並對其進行修補。在實施上相對簡單，只需要利用軟體工具進行「弱點掃描」與「滲透測試」即可。困難的地方在於事後對於報告上的弱點進行修補，因此建議在工具的選擇上多多比較，看看哪一套容易判讀與擁有較低的誤判率。技術人員建議越早進行、在各階段性進行掃描以提早發現弱點，加速修補過程。</p>\n<p>弱點掃描: 又分為主機與應用程式(網頁)。主要找出已知的弱點<br/>\n廣義上來說，只要會影響在資產價值的機密性、完整性、可用性即可稱為弱點，實際執行上工具則以 CVE 資料庫為主要比對項目。</p>\n<ul>\n<li>結果依風險等級分為高、中、低</li>\n<li>核心資通系統一般會要求至少修補高、中風險以上()</li>\n<li>主機弱點掃描工具\n<ul>\n<li>\n\n</li>\n<li>\n\n</li>\n</ul>\n</li>\n<li>AP(網頁)弱點掃描工具\n<ul>\n<li>Acunetix | Web Application Security Scanner。有試用版</li>\n<li>AppScan</li>\n</ul>\n</li>\n</ul>\n<p>滲透工具留在下一篇好了...</p>\n<h2>參考資源</h2>\n<p></p>\n<br/>\n</div>",
        "content_text": "完成鐵人賽後一下子就放鬆下來，該完成的還是繼續完成，FIGHT\n\n適用人員: 技術人員。\n適用法規:   - \n\n技術面分類提要\n網路架構的檢視\n端點的安全防護\n應用開發的防護基準\n盤點清查與檢測掃描\n\n盤點文件、清查舊系統、帳號\n\n安全性檢測\n\n\n弱點掃描\n\n滲透測試\n\n\n資通安全健診\n\n\n\n\n安全性的檢測目的在清查應用系統上是否存在弱點、威脅，試圖找出並對其進行修補。在實施上相對簡單，只需要利用軟體工具進行「弱點掃描」與「滲透測試」即可。困難的地方在於事後對於報告上的弱點進行修補，因此建議在工具的選擇上多多比較，看看哪一套容易判讀與擁有較低的誤判率。技術人員建議越早進行、在各階段性進行掃描以提早發現弱點，加速修補過程。\n弱點掃描: 又分為主機與應用程式(網頁)。主要找出已知的弱點\n廣義上來說，只要會影響在資產價值的機密性、完整性、可用性即可稱為弱點，實際執行上工具則以 CVE 資料庫為主要比對項目。\n\n結果依風險等級分為高、中、低\n核心資通系統一般會要求至少修補高、中風險以上()\n主機弱點掃描工具\n\n\n\n\n\n\n\n\n\nAP(網頁)弱點掃描工具\n\nAcunetix | Web Application Security Scanner。有試用版\nAppScan\n\n\n\n滲透工具留在下一篇好了...\n參考資源",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "完成 鐵人 賽後 一下子 就 放鬆 下來 ， 該 完成 的 還是 繼續 完成 ， FIGHT\n適用 人員 :\n技術人員 。\n適用 法規 :\n-\n技術 面 分類 提要\n網路 架構 的 檢視\n端點 的 安全 防護\n應用 開發 的 防護 基準\n盤點 清查 與 檢測 掃描\n盤點 文件 、 清查 舊 系統 、 帳號\n安全性 檢測\n弱點 掃描\n滲透 測試\n資通 安全 健診\n安全性 的 檢測 目的 在 清查 應用 系統 上 是否 存在 弱點 、 威脅 ， 試圖 找出 並對 其 進行 修補 。 在 實施 上 相對 簡單 ， 只 需要 利用 軟體 工具 進行 「 弱點 掃描 」 與 「 滲透 測試 」 即可 。 困難 的 地方 在於 事後 對於 報告 上 的 弱點 進行 修補 ， 因此 建議 在 工具 的 選擇 上 多多 比較 ， 看看 哪 一套 容易 判讀 與 擁有 較 低 的 誤判 率 。 技術人員 建議 越早 進行 、 在 各 階段性 進行 掃描 以 提早 發現 弱點 ， 加速 修補 過程 。\n弱點 掃描 :\n又 分為 主機 與 應用程式 ( 網頁 ) 。 主要 找出 已知 的 弱點\n廣義 上 來說 ， 只要 會 影響 在 資產 價值 的 機密性 、 完整性 、 可用性 即 可稱 為 弱點 ， 實際 執行 上 工具 則以\nCVE\n資料庫 為 主要 比對 項目 。\n結果 依 風險 等級分 為 高 、 中 、 低\n核心 資通 系統 一般 會 要求 至少 修補 高 、 中 風險 以上 ( )\n主機 弱點 掃描 工具\nAP ( 網頁 ) 弱點 掃描 工具\nAcunetix\n|\nWeb\nApplication\nSecurity\nScanner 。 有 試用版\nAppScan\n滲透 工具 留在 下 一篇 好 了 ...\n參考 資源",
        "word_seg_processed_content_text": "鐵人 賽後 一下子 放鬆 fight\n人員\n技術人員\n法規\n\n技術 面 分類 提要\n網路 架構 檢視\n端點 防護\n開發 防護 基準\n盤點 清查 檢測 掃描\n盤點 文件 清查 舊 系統 帳號\n安全性 檢測\n弱點 掃描\n滲透 測試\n資通 健診\n安全性 檢測 目的 清查 系統 弱點 威脅 試圖 找出 並對 修補 實施 簡單 利用 軟體 工具 弱點 掃描 滲透 測試 即可 困難 地方 在於 事後 報告 弱點 修補 建議 工具 選擇 多多 一套 判讀 擁有 低 誤判 率 技術人員 建議 越早 階段性 掃描 提早 發現 弱點 加速 修補 過程\n弱點 掃描\n分為 主機 應用程式 網頁 找出 已知 弱點\n廣義 來說 會 影響 資產 價值 機密性 完整性 可用性 可稱 弱點 執行 工具 則以\ncve\n資料庫 比對 項目\n風險 等級分 高 中 低\n核心 資通 系統 會 至少 修補 高 中 風險\n主機 弱點 掃描 工具\nap 網頁 弱點 掃描 工具\nacunetix\n\nweb\napplication\nsecurity\nscanner 試用版\nappscan\n滲透 工具 留在 一篇 ...\n參考 資源",
        "extracted_keywords": [
            "安全性",
            "防護",
            "security",
            "技術",
            "技術人員"
        ],
        "extracted_keywords_phrases": [
            "安全性 檢測",
            "技術人員 法規",
            "防護 開發",
            "防護 基準",
            "誤判 技術人員"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282257": {
        "href": "https://ithelp.ithome.com.tw/articles/10282257",
        "title": "JS 41 - 顯示非同步請求的上傳進度條",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>今天要實作非同步請求的上傳進度條。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">const xhr = new XMLHttpRequest();\nFelix(xhr.upload).on('progress', function (e) {\n    if (!e.lengthComputable) return;\n    const progress = e.loaded / e.total * 100 + '%';\n    Felix('#progress &gt; div').width = progress;\n});\nxhr.open('POST', 'https://jsonplaceholder.typicode.com/posts');\nxhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\nxhr.send(JSON.stringify({ name: 'Felix', date: '2021-10-26' }));\n</code></pre>\n<hr>\n<h2>實測</h2>\n<pre><code class=\"language-HTML\">&lt;div id=\"progress\"&gt;\n    &lt;div&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-26 23:59:37",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "41",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>今天要實作非同步請求的上傳進度條。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<pre></pre>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n今天要實作非同步請求的上傳進度條。\n我們進入今天的主題吧！\n\n程式碼\n\n\n實測\n\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "javascript",
                "content": "const xhr = new XMLHttpRequest();\nFelix(xhr.upload).on('progress', function (e) {\n    if (!e.lengthComputable) return;\n    const progress = e.loaded / e.total * 100 + '%';\n    Felix('#progress > div').width = progress;\n});\nxhr.open('POST', 'https://jsonplaceholder.typicode.com/posts');\nxhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');\nxhr.send(JSON.stringify({ name: 'Felix', date: '2021-10-26' }));\n"
            },
            {
                "language": "html",
                "content": "<div id=\"progress\">\n    <div></div>\n</div>\n"
            }
        ],
        "programming_languages": [
            "javascript",
            "html"
        ],
        "word_seg_content_text": "大家 好 ！\n今天 要 實作 非 同步 請求 的 上傳 進度條 。\n我們 進入 今天 的 主題 吧 ！\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n實作 非 同步 請求 上傳 進度條\n主題\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "上傳",
            "連結",
            "程式碼",
            "同步",
            "進度條"
        ],
        "extracted_keywords_phrases": [
            "同步 請求",
            "請求 上傳",
            "主題 程式碼",
            "上傳 進度條",
            "上傳"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282230": {
        "href": "https://ithelp.ithome.com.tw/articles/10282230",
        "title": "JS 40 - 向下滾動網頁即自動隱藏導覽列",
        "content_html": "<div class=\"markdown__style\">\n                                                            <p>大家好！</p>\n<p>今天我們要實作向下滾動網頁時，自動隱藏頁手或導覽列的效果。<br>\n我們進入今天的主題吧！</p>\n<hr>\n<h2>樣式</h2>\n<pre><code class=\"language-CSS\">header {\n    transition: transform 0.5s;\n}\n\nheader.invisible {\n    transform: translateY(-100%);\n}\n</code></pre>\n<hr>\n<h2>程式碼</h2>\n<pre><code class=\"language-JavaScript\">(function () {\n    let prevPos = window.pageYOffset;\n    const header = Felix('header')[0];\n    Felix(window).on('scroll', function () {\n        const currPos = window.pageYOffset;\n        const status = currPos &gt; prevPos &amp;&amp; currPos &gt; header.getBoundingClientRect().bottom;\n        header.classList[status ? 'add' : 'remove']('invisible');\n        prevPos = currPos;\n    });\n})();\n</code></pre>\n<hr>\n<h2>實測</h2>\n<pre><code class=\"language-HTML\">&lt;header&gt;\n    &lt;!-- ... --&gt;\n&lt;/header&gt;\n</code></pre>\n<p>範例連結製作中。</p>\n<hr>\n<p>差不多也到尾聲了。<br>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br>\n我是 Felix，我們明天再見！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽",
        "genre": "Modern Web",
        "published_at": "2021-10-25 23:53:17",
        "author_href": "https://ithelp.ithome.com.tw/users/20141537/ironman",
        "author_name": "Felix",
        "series_href": "https://ithelp.ithome.com.tw/users/20141537/ironman/4660",
        "series_name": "JavaScript 從 50% 開始，打造函式庫不是問題！",
        "series_num": "40",
        "processed_content_html": "<div class=\"markdown__style\">\n<p>大家好！</p>\n<p>今天我們要實作向下滾動網頁時，自動隱藏頁手或導覽列的效果。<br/>\n我們進入今天的主題吧！</p>\n<hr/>\n<h2>樣式</h2>\n<pre></pre>\n<hr/>\n<h2>程式碼</h2>\n<pre></pre>\n<hr/>\n<h2>實測</h2>\n<pre></pre>\n<p>範例連結製作中。</p>\n<hr/>\n<p>差不多也到尾聲了。<br/>\n如果對文章有任何疑問，也歡迎在下方提問和建議！<br/>\n我是 Felix，我們明天再見！</p>\n<br/>\n</div>",
        "content_text": "大家好！\n今天我們要實作向下滾動網頁時，自動隱藏頁手或導覽列的效果。\n我們進入今天的主題吧！\n\n樣式\n\n\n程式碼\n\n\n實測\n\n範例連結製作中。\n\n差不多也到尾聲了。\n如果對文章有任何疑問，也歡迎在下方提問和建議！\n我是 Felix，我們明天再見！",
        "content_code_info": [
            {
                "language": "css",
                "content": "header {\n    transition: transform 0.5s;\n}\n\nheader.invisible {\n    transform: translateY(-100%);\n}\n"
            },
            {
                "language": "javascript",
                "content": "(function () {\n    let prevPos = window.pageYOffset;\n    const header = Felix('header')[0];\n    Felix(window).on('scroll', function () {\n        const currPos = window.pageYOffset;\n        const status = currPos > prevPos && currPos > header.getBoundingClientRect().bottom;\n        header.classList[status ? 'add' : 'remove']('invisible');\n        prevPos = currPos;\n    });\n})();\n"
            },
            {
                "language": "html",
                "content": "<header>\n    <!-- ... -->\n</header>\n"
            }
        ],
        "programming_languages": [
            "css",
            "javascript",
            "html"
        ],
        "word_seg_content_text": "大家 好 ！\n今天 我們 要 實作 向下 滾動 網頁 時 ， 自動隱藏 頁 手 或 導覽 列 的 效果 。\n我們 進入 今天 的 主題 吧 ！\n樣式\n程式碼\n實測\n範例 連結 製作 中 。\n差不多 也 到 尾聲 了 。\n如果 對 文章 有 任何 疑問 ， 也 歡迎 在 下方 提問 和 建議 ！\n我 是\nFelix ， 我們 明天 再見 ！",
        "word_seg_processed_content_text": "\n實作 向下 滾動 網頁 時 自動隱藏 頁 手 導覽 列 效果\n主題\n樣式\n程式碼\n實測\n範例 連結 製作 中\n差不多 尾聲\n文章 疑問 下方 提問 建議\n\nfelix 明天 再見",
        "extracted_keywords": [
            "網頁",
            "自動隱藏",
            "導覽",
            "連結",
            "文章"
        ],
        "extracted_keywords_phrases": [
            "滾動 網頁",
            "網頁 自動隱藏",
            "網頁",
            "自動隱藏 導覽",
            "主題 樣式"
        ]
    },
    "https://ithelp.ithome.com.tw/articles/10282092": {
        "href": "https://ithelp.ithome.com.tw/articles/10282092",
        "title": "[PM日常001] 愛上Event",
        "content_html": "<div class=\"markdown__style\">\n                                                            <h1>因為完美不可能</h1>\n<blockquote>\n<p>因為知道要辦到的事有多難，所以絕對不會認為次次達標是件好事</p>\n</blockquote>\n<p>完美是在範圍(Scope)被定義的很好情況下，才能有機會達到，但有願景想要達到的我們，就會清楚知道，到處充滿未知，到處充斥著挑戰，能將功能盡可能完美開發好，背後要付出的努力是大的，要做的準備是多的，而有時候這樣腳步就會慢了。所以，有點event讓我們知道，哪裡不足，哪裡需要快速學習，加快我們經驗的累積。</p>\n<p>「讓子彈飛一會兒」這是從技術大大脫口而出的話，卻是我這幾天不斷著墨的一句話，因為急著想要有些成果，就很容易讓自己的步調急躁，讓自己有點耐性、沉住氣，在去年其實和主管討論的過程中，我們都會這樣想著，而我卻一直沒能辦到，只要稍有目標要追，就會開始不耐煩，會想要像趕著羊群一樣，找一個最簡單、最直覺的做法，但人不是羊，所以想當然爾，人都會反撲或是遠離。為什麼會急躁？我想是因為恐懼，恐懼不能達標、恐懼失敗、恐懼失控，至少我目前是這樣想的。為什麼在這個時機點，我卻能開始感受「慢」？或許今年的我，花了許多心思展開了雷達，收集可以掌握的訊息，再加上主管給予的空間，還有心中的中心思想：從錯誤中快速學習，這些都有可能。我需要記住這個「慢」的感覺，「規劃慢、執行快」。</p>\n<p>Event有其價值，但我們還是不能看見event就馬上反應，需要拿捏，有些是原則，就要當下處理，有些是需要觀察，則是放著讓它發酵，在適當的時機，對event做處理。上週，我所待的IT團隊，繼第一次成功後，迎來的不是第二次成功，而是第一次失敗，本來很擔心準備Retro上，我又會偏離軌道，但幸運地是，前一天接連的event，讓我有機會體現，我對於Event的看法：「我愛event」，只要不是過於失控或是衝擊團隊主核心在意的都是好的event，所在意的，就是從event中萃取出我的看見和你的看見，然後決定下一步如何更好。週五，我經歷了一場略微成功地retro失敗（當然要看最後是不是有be better來決定是否成功），會議過程中，大家沒有因為接受到「失敗」而顯得氣餒，也沒有變成卸責或咎責氣氛，只因為我們強調有要共同達到的目標，是團隊的責任，也希望讓下一次更好，這還蠻鼓舞著我的，期待event真的會讓我們變更好，今天我們訂下了要以這週作為雪恥，希望能一切順利！</p>\n <br>\n                                                    </div>",
        "raw_tags_string": "13th鐵人賽,產品經理,打造軟體團隊",
        "genre": "IT管理",
        "published_at": "2021-10-25 22:58:59",
        "author_href": "https://ithelp.ithome.com.tw/users/20140983/ironman",
        "author_name": "pcshen99",
        "series_href": "https://ithelp.ithome.com.tw/users/20140983/ironman/4621",
        "series_name": "文化沒這麼理所當然：一位新手產品經理促成IT文化形塑的心路歷程",
        "series_num": "32",
        "processed_content_html": "<div class=\"markdown__style\">\n<h1>因為完美不可能</h1>\n<blockquote>\n<p>因為知道要辦到的事有多難，所以絕對不會認為次次達標是件好事</p>\n</blockquote>\n<p>完美是在範圍(Scope)被定義的很好情況下，才能有機會達到，但有願景想要達到的我們，就會清楚知道，到處充滿未知，到處充斥著挑戰，能將功能盡可能完美開發好，背後要付出的努力是大的，要做的準備是多的，而有時候這樣腳步就會慢了。所以，有點event讓我們知道，哪裡不足，哪裡需要快速學習，加快我們經驗的累積。</p>\n<p>「讓子彈飛一會兒」這是從技術大大脫口而出的話，卻是我這幾天不斷著墨的一句話，因為急著想要有些成果，就很容易讓自己的步調急躁，讓自己有點耐性、沉住氣，在去年其實和主管討論的過程中，我們都會這樣想著，而我卻一直沒能辦到，只要稍有目標要追，就會開始不耐煩，會想要像趕著羊群一樣，找一個最簡單、最直覺的做法，但人不是羊，所以想當然爾，人都會反撲或是遠離。為什麼會急躁？我想是因為恐懼，恐懼不能達標、恐懼失敗、恐懼失控，至少我目前是這樣想的。為什麼在這個時機點，我卻能開始感受「慢」？或許今年的我，花了許多心思展開了雷達，收集可以掌握的訊息，再加上主管給予的空間，還有心中的中心思想：從錯誤中快速學習，這些都有可能。我需要記住這個「慢」的感覺，「規劃慢、執行快」。</p>\n<p>Event有其價值，但我們還是不能看見event就馬上反應，需要拿捏，有些是原則，就要當下處理，有些是需要觀察，則是放著讓它發酵，在適當的時機，對event做處理。上週，我所待的IT團隊，繼第一次成功後，迎來的不是第二次成功，而是第一次失敗，本來很擔心準備Retro上，我又會偏離軌道，但幸運地是，前一天接連的event，讓我有機會體現，我對於Event的看法：「我愛event」，只要不是過於失控或是衝擊團隊主核心在意的都是好的event，所在意的，就是從event中萃取出我的看見和你的看見，然後決定下一步如何更好。週五，我經歷了一場略微成功地retro失敗（當然要看最後是不是有be better來決定是否成功），會議過程中，大家沒有因為接受到「失敗」而顯得氣餒，也沒有變成卸責或咎責氣氛，只因為我們強調有要共同達到的目標，是團隊的責任，也希望讓下一次更好，這還蠻鼓舞著我的，期待event真的會讓我們變更好，今天我們訂下了要以這週作為雪恥，希望能一切順利！</p>\n<br/>\n</div>",
        "content_text": "因為完美不可能\n\n因為知道要辦到的事有多難，所以絕對不會認為次次達標是件好事\n\n完美是在範圍(Scope)被定義的很好情況下，才能有機會達到，但有願景想要達到的我們，就會清楚知道，到處充滿未知，到處充斥著挑戰，能將功能盡可能完美開發好，背後要付出的努力是大的，要做的準備是多的，而有時候這樣腳步就會慢了。所以，有點event讓我們知道，哪裡不足，哪裡需要快速學習，加快我們經驗的累積。\n「讓子彈飛一會兒」這是從技術大大脫口而出的話，卻是我這幾天不斷著墨的一句話，因為急著想要有些成果，就很容易讓自己的步調急躁，讓自己有點耐性、沉住氣，在去年其實和主管討論的過程中，我們都會這樣想著，而我卻一直沒能辦到，只要稍有目標要追，就會開始不耐煩，會想要像趕著羊群一樣，找一個最簡單、最直覺的做法，但人不是羊，所以想當然爾，人都會反撲或是遠離。為什麼會急躁？我想是因為恐懼，恐懼不能達標、恐懼失敗、恐懼失控，至少我目前是這樣想的。為什麼在這個時機點，我卻能開始感受「慢」？或許今年的我，花了許多心思展開了雷達，收集可以掌握的訊息，再加上主管給予的空間，還有心中的中心思想：從錯誤中快速學習，這些都有可能。我需要記住這個「慢」的感覺，「規劃慢、執行快」。\nEvent有其價值，但我們還是不能看見event就馬上反應，需要拿捏，有些是原則，就要當下處理，有些是需要觀察，則是放著讓它發酵，在適當的時機，對event做處理。上週，我所待的IT團隊，繼第一次成功後，迎來的不是第二次成功，而是第一次失敗，本來很擔心準備Retro上，我又會偏離軌道，但幸運地是，前一天接連的event，讓我有機會體現，我對於Event的看法：「我愛event」，只要不是過於失控或是衝擊團隊主核心在意的都是好的event，所在意的，就是從event中萃取出我的看見和你的看見，然後決定下一步如何更好。週五，我經歷了一場略微成功地retro失敗（當然要看最後是不是有be better來決定是否成功），會議過程中，大家沒有因為接受到「失敗」而顯得氣餒，也沒有變成卸責或咎責氣氛，只因為我們強調有要共同達到的目標，是團隊的責任，也希望讓下一次更好，這還蠻鼓舞著我的，期待event真的會讓我們變更好，今天我們訂下了要以這週作為雪恥，希望能一切順利！",
        "content_code_info": [],
        "programming_languages": [],
        "word_seg_content_text": "因為 完美 不 可能\n因為 知道 要 辦到 的 事 有 多難 ， 所以 絕對 不會 認為 次次 達標 是 件 好事\n完美 是 在 範圍 ( Scope ) 被 定義 的 很 好 情況 下 ， 才能 有 機會 達到 ， 但 有 願景 想要 達到 的 我們 ， 就 會 清楚 知道 ， 到處 充滿 未知 ， 到處 充斥 著 挑戰 ， 能將 功能 盡 可能 完美 開發 好 ， 背後 要 付出 的 努力 是 大 的 ， 要 做 的 準備 是 多 的 ， 而 有時候 這樣 腳步 就會慢 了 。 所以 ， 有點 event 讓 我們 知道 ， 哪裡 不足 ， 哪裡 需要 快速 學習 ， 加快 我們 經驗 的 累積 。\n「 讓 子彈 飛 一會兒 」 這 是從 技術 大大 脫口而出 的話 ， 卻是 我 這 幾天 不斷 著墨 的 一句 話 ， 因為 急著 想要 有些 成果 ， 就 很 容易 讓 自己 的 步調 急躁 ， 讓 自己 有點 耐性 、 沉住氣 ， 在 去年 其實 和 主管 討論 的 過程 中 ， 我們 都 會 這樣 想著 ， 而 我 卻 一直 沒 能 辦到 ， 只要 稍 有 目標 要 追 ， 就 會 開始 不耐煩 ， 會 想要 像 趕著 羊群 一樣 ， 找 一個 最 簡單 、 最 直覺 的 做法 ， 但 人 不是 羊 ， 所以 想當然 爾 ， 人 都 會 反撲 或是 遠離 。 為 什麼 會 急躁 ？ 我 想 是 因為 恐懼 ， 恐懼 不能 達標 、 恐懼 失敗 、 恐懼 失控 ， 至少 我 目前 是 這樣 想 的 。 為 什麼 在 這個 時機 點 ， 我 卻 能 開始 感受 「 慢 」 ？ 或許 今年 的 我 ， 花 了 許多 心思 展開 了 雷達 ， 收集 可以 掌握 的 訊息 ， 再 加上 主管 給予 的 空間 ， 還有 心中 的 中心思想 ： 從 錯誤 中 快速 學習 ， 這些 都 有 可能 。 我 需要 記住 這個 「 慢 」 的 感覺 ， 「 規劃 慢 、 執行 快 」 。\nEvent 有 其 價值 ， 但 我們 還是 不能 看見 event 就 馬上 反應 ， 需要 拿捏 ， 有些 是 原則 ， 就要 當下 處理 ， 有些 是 需要 觀察 ， 則是 放著 讓 它 發酵 ， 在 適當 的 時機 ， 對 event 做 處理 。 上週 ， 我 所待 的 IT 團隊 ， 繼 第一次 成功 後 ， 迎來 的 不是 第二次 成功 ， 而是 第一次 失敗 ， 本來 很 擔心 準備 Retro 上 ， 我 又 會 偏離 軌道 ， 但 幸運地 是 ， 前一天 接連 的 event ， 讓 我 有 機會 體現 ， 我 對於 Event 的 看法 ： 「 我 愛 event 」 ， 只要 不是 過於 失控 或是 衝擊 團隊 主 核心 在意 的 都 是 好 的 event ， 所在 意 的 ， 就 是從 event 中 萃取 出 我 的 看見 和 你 的 看見 ， 然後 決定 下 一步 如何 更好 。 週五 ， 我 經歷 了 一場 略微 成功 地 retro 失敗 （ 當然 要 看 最後 是不是 有 be\nbetter 來 決定 是否 成功 ） ， 會議 過程 中 ， 大家 沒有 因為 接受 到 「 失敗 」 而 顯得 氣餒 ， 也 沒有 變成 卸責 或咎責 氣氛 ， 只 因為 我們 強調 有要 共同 達到 的 目標 ， 是 團隊 的 責任 ， 也 希望 讓 下 一次 更好 ， 這還蠻 鼓舞 著 我 的 ， 期待 event 真的 會 讓 我們 變更 好 ， 今天 我們 訂下 了 要 以 這週作 為 雪恥 ， 希望 能 一切順利 ！",
        "word_seg_processed_content_text": "完美\n辦到 事 多難 次次 達標 件 好事\n完美 scope 定義 情況 才能 機會 願景 想要 會 到處 充滿 未知 到處 充斥 挑戰 能將 功能 完美 開發 背後 付出 努力 大 做 有時候 腳步 就會慢 event 快速 學習 加快 經驗 累積\n子彈 飛 一會兒 是從 技術 脫口而出 卻是 幾天 著墨 一句 話 急著 想要 成果 步調 急躁 耐性 沉住氣 去年 主管 討論 過程 中 會 想著 沒 辦到 稍 目標 追 會 不耐煩 會 想要 趕著 羊群 找 簡單 直覺 做法 羊 想當然 會 反撲 遠離 會 急躁 想 恐懼 恐懼 達標 恐懼 失敗 恐懼 失控 至少 想 時機 點 感受 慢 或許 花 心思 展開 雷達 收集 訊息 加上 主管 給予 空間 心中 中心思想 錯誤 中 快速 學習 記住 慢 感覺 規劃 慢 執行 快\nevent 價值 event 馬上 拿捏 原則 就要 當下 觀察 則是 放著 發酵 時機 event 做 上週 所待 團隊 繼 第一次 成功 迎來 第二次 成功 第一次 失敗 本來 擔心 retro 會 偏離 軌道 幸運地 前一天 接連 event 機會 體現 event 看法 愛 event 過於 失控 衝擊 團隊 主 核心 在意 event 所在 意 是從 event 中 萃取 出 一步 更好 週五 經歷 一場 略微 成功 retro 失敗\nbetter 成功 會議 過程 中 接受 失敗 顯得 氣餒 卸責 或咎責 氣氛 有要 目標 團隊 責任 希望 更好 這還蠻 鼓舞 期待 event 真的 會 變更 訂下 這週作 雪恥 希望 一切順利",
        "extracted_keywords": [
            "機會",
            "才能",
            "成功",
            "經驗",
            "經歷"
        ],
        "extracted_keywords_phrases": [
            "機會 體現",
            "機會 願景",
            "才能 機會",
            "充斥 挑戰",
            "想要 成果"
        ]
    }
}